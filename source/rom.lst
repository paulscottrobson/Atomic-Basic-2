
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -D TARGET=2 -b -L rom.lst -o rom.bin basic.asm
; Mon Jul 29 17:01:58 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: basic.asm


;******  Processing file: porting.asm

.fff8					EXTDummyInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word 	EXTDummyInterrupt
>fffc	73 ee						.word 	Start
>fffe	f8 ff						.word 	EXTDummyInterrupt
=4					EXTZPWork = 4								; Zero Page work for Personality (4 bytes)
=8					IOCursorX = 8 								; Cursor position
=9					IOCursorY = 9
=$20							zeroPage 	= $20 					; first ZP byte to use
=$2000							startMemory = $2000 				; first non ZP byte to use
=$8000							endMemory   = $8000 				; last non ZP byte to use
=$200							basicStack  = $200 					; stack for BASIC
=$400							evalStack   = $400 					; stack for evaluation of expressions

;******  Processing file: personalities/personality_6502.asm

>0000	00					.byte 	0
=40					EXTWidth = 40 								; screen width
=25					EXTHeight = 25 								; screen height
=$0800					EXTLowMemory = $0800 						; Workspace RAM starts here
=$6000					EXTHighMemory = $6000 						; Workspace RAM ends here
=$b000					PScreen = $B000								; 1k screen RAM here
=$b800					PKeyboard = $B800							; Keyboard port.
=$b801					PBreak = $B801 								; Break key.
.a000					EXTStartPersonalise:
.a000	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.a002	9a		txs			txs
.a003	20 82 a0	jsr $a082		jsr 	EXTReset 						; reset video
.a006	20 38 a0	jsr $a038		jsr 	EXTClearScreen 					; clear screen
.a009	4c 73 ee	jmp $ee73		jmp 	Start 							; start main application
.a00c					EXTReadKeyPort:
.a00c	ad 00 b8	lda $b800		lda 	PKeyboard							; read key
.a00f	09 00		ora #$00		ora 	#0
.a011	60		rts			rts
.a012					EXTRemoveKeyPressed:
.a012	48		pha			pha 										; key pressed clear queue byte.
.a013	a9 00		lda #$00		lda 	#0
.a015	8d 00 b8	sta $b800		sta 	PKeyboard
.a018	68		pla			pla
.a019	60		rts			rts
.a01a					EXTCheckBreak:
.a01a	ad 01 b8	lda $b801		lda 	PBreak
.a01d	60		rts			rts
.a01e					EXTReadScreen:
.a01e	5a		phy			phy 										; save Y
.a01f	86 04		stx $04			stx 	EXTZPWork							; into EXTZPWork
.a021	98		tya			tya
.a022	09 b0		ora #$b0		ora 	#PScreen>>8 						; move into screen area
.a024	85 05		sta $05			sta 	EXTZPWork+1 						; read character there
.a026	a0 00		ldy #$00		ldy 	#0
.a028	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a02a	7a		ply			ply 										; restore Y and exit.
.a02b	60		rts			rts
.a02c					EXTWriteScreen:
.a02c	5a		phy			phy
.a02d	48		pha			pha
.a02e	20 1e a0	jsr $a01e		jsr		EXTReadScreen 						; set up the address into EXTZPWork
.a031	a0 00		ldy #$00		ldy 	#0
.a033	68		pla			pla 										; restore and write.
.a034	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a036	7a		ply			ply
.a037	60		rts			rts
.a038					EXTClearScreen:
.a038	48		pha			pha 										; save registers
.a039	da		phx			phx
.a03a	a2 00		ldx #$00		ldx 	#0
.a03c					_EXTCSLoop:
.a03c	a9 20		lda #$20		lda 	#32
.a03e	9d 00 b0	sta $b000,x		sta 	PScreen+0,x
.a041	9d 00 b1	sta $b100,x		sta 	PScreen+$100,x
.a044	9d 00 b2	sta $b200,x		sta 	PScreen+$200,x
.a047	9d 00 b3	sta $b300,x		sta 	PScreen+$300,x
.a04a	e8		inx			inx
.a04b	d0 ef		bne $a03c		bne 	_EXTCSLoop
.a04d	fa		plx			plx 										; restore
.a04e	68		pla			pla
.a04f	60		rts			rts
.a050					EXTScrollDisplay:
.a050	48		pha			pha 										; save registers
.a051	5a		phy			phy
.a052	a9 00		lda #$00		lda 	#PScreen & $FF 					; set pointer to screen
.a054	85 04		sta $04			sta 	EXTZPWork+0
.a056	a9 b0		lda #$b0		lda 	#PScreen >> 8
.a058	85 05		sta $05			sta 	EXTZPWork+1
.a05a					_EXTScroll:
.a05a	a0 28		ldy #$28		ldy 	#EXTWidth
.a05c	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a05e	a0 00		ldy #$00		ldy 	#0
.a060	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a062	e6 04		inc $04			inc 	EXTZPWork 							; bump address
.a064	d0 02		bne $a068		bne 	_EXTNoCarry
.a066	e6 05		inc $05			inc 	EXTZPWork+1
.a068					_EXTNoCarry:
.a068	a5 04		lda $04			lda 	EXTZPWork 							; done ?
.a06a	c9 c0		cmp #$c0		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) & $FF
.a06c	d0 ec		bne $a05a		bne 	_EXTScroll
.a06e	a5 05		lda $05			lda 	EXTZPWork+1
.a070	c9 b3		cmp #$b3		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) >> 8
.a072	d0 e6		bne $a05a		bne 	_EXTScroll
.a074	a0 00		ldy #$00		ldy 	#0									; clear bottom line.
.a076					_EXTLastLine:
.a076	a9 20		lda #$20		lda 	#32
.a078	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a07a	c8		iny			iny
.a07b	c0 28		cpy #$28		cpy 	#EXTWidth
.a07d	d0 f7		bne $a076		bne 	_EXTLastLine
.a07f	7a		ply			ply 										; restore and exit.
.a080	68		pla			pla
.a081	60		rts			rts
.a082					EXTReset:
.a082	60		rts			rts

;******  Return to file: porting.asm


;******  Return to file: basic.asm


;******  Processing file: include/tokens.inc

.e000					KeywordVectorTable:
>e000	80 e7					.word	BFUNC_WordInd                 ; "!"        ($0080)
>e002	2c e1					.word	SyntaxError                   ; """        ($0081)
>e004	2c e1					.word	SyntaxError                   ; "#"        ($0082)
>e006	75 e7					.word	BFUNC_String                  ; "$"        ($0083)
>e008	15 e9					.word	BFUNC_Modulus                 ; "%"        ($0084)
>e00a	87 e7					.word	BFUNC_And                     ; "&"        ($0085)
>e00c	2c e1					.word	SyntaxError                   ; "'"        ($0086)
>e00e	2c e1					.word	SyntaxError                   ; "("        ($0087)
>e010	2c e1					.word	SyntaxError                   ; ")"        ($0088)
>e012	f6 e7					.word	BFUNC_Multiply                ; "*"        ($0089)
>e014	29 e7					.word	BFUNC_Add                     ; "+"        ($008a)
>e016	4f e7					.word	BFUNC_Subtract                ; "-"        ($008b)
>e018	4d e8					.word	BFUNC_Divide                  ; "/"        ($008c)
>e01a	2c e1					.word	SyntaxError                   ; ":"        ($008d)
>e01c	2c e1					.word	SyntaxError                   ; ";"        ($008e)
>e01e	93 e9					.word	BFUNC_LessEqual               ; "<="       ($008f)
>e020	34 e9					.word	BFUNC_NotEquals               ; "<>"       ($0090)
>e022	6e e9					.word	BFUNC_Less                    ; "<"        ($0091)
>e024	31 e9					.word	BFUNC_Equals                  ; "="        ($0092)
>e026	71 e9					.word	BFUNC_GreaterEqual            ; ">="       ($0093)
>e028	90 e9					.word	BFUNC_Greater                 ; ">"        ($0094)
>e02a	79 e7					.word	BFUNC_ByteInd                 ; "?"        ($0095)
>e02c	d1 e7					.word	BFUNC_Xor                     ; "^"        ($0096)
>e02e	33 eb					.word	COMMAND_Assert                ; "assert"   ($0097)
>e030	4a ea					.word	UNARY_Abs                     ; "abs"      ($0098)
>e032	7a eb					.word	COMMAND_Clear                 ; "clear"    ($0099)
>e034	ec ed					.word	COMMAND_CLS                   ; "cls"      ($009a)
>e036	35 ea					.word	UNARY_Ch                      ; "ch"       ($009b)
>e038	2c e1					.word	SyntaxError                   ; "do"       ($009c)
>e03a	28 eb					.word	COMMAND_End                   ; "end"      ($009d)
>e03c	2c e1					.word	SyntaxError                   ; "for"      ($009e)
>e03e	2c e1					.word	SyntaxError                   ; "gosub"    ($009f)
>e040	2c e1					.word	SyntaxError                   ; "goto"     ($00a0)
>e042	2c e1					.word	SyntaxError                   ; "input"    ($00a1)
>e044	2c e1					.word	SyntaxError                   ; "if"       ($00a2)
>e046	ef ed					.word	COMMAND_List                  ; "list"     ($00a3)
>e048	2c e1					.word	SyntaxError                   ; "loop"     ($00a4)
>e04a	2c e1					.word	SyntaxError                   ; "link"     ($00a5)
>e04c	ea eb					.word	COMMAND_Let                   ; "let"      ($00a6)
>e04e	f3 e9					.word	UNARY_Len                     ; "len"      ($00a7)
>e050	2c e1					.word	SyntaxError                   ; "next"     ($00a8)
>e052	61 eb					.word	COMMAND_NewExec               ; "new"      ($00a9)
>e054	ae eb					.word	COMMAND_OldExec               ; "old"      ($00aa)
>e056	f2 ec					.word	COMMAND_Print                 ; "print"    ($00ab)
>e058	67 ea					.word	UNARY_Page                    ; "page"     ($00ac)
>e05a	57 eb					.word	COMMAND_Rem                   ; "rem"      ($00ad)
>e05c	b7 ea					.word	COMMAND_Run                   ; "run"      ($00ae)
>e05e	7a ea					.word	UNARY_Rnd                     ; "rnd"      ($00af)
>e060	20 eb					.word	COMMAND_Stop                  ; "stop"     ($00b0)
>e062	2c e1					.word	SyntaxError                   ; "step"     ($00b1)
>e064	2c e1					.word	SyntaxError                   ; "then"     ($00b2)
>e066	52 ea					.word	UNARY_Top                     ; "top"      ($00b3)
>e068	2c e1					.word	SyntaxError                   ; "to"       ($00b4)
>e06a	ac e7					.word	BFUNC_Or                      ; "|"        ($00b5)
>e06c	b2 e9					.word	BFUNC_StringCompare           ; "~"        ($00b6)
.e06e					TokenText:
>e06e	a1					.byte $a1                             ; $0080 !
>e06f	a2					.byte $a2                             ; $0081 "
>e070	a3					.byte $a3                             ; $0082 #
>e071	a4					.byte $a4                             ; $0083 $
>e072	a5					.byte $a5                             ; $0084 %
>e073	a6					.byte $a6                             ; $0085 &
>e074	a7					.byte $a7                             ; $0086 '
>e075	a8					.byte $a8                             ; $0087 (
>e076	a9					.byte $a9                             ; $0088 )
>e077	aa					.byte $aa                             ; $0089 *
>e078	ab					.byte $ab                             ; $008a +
>e079	ad					.byte $ad                             ; $008b -
>e07a	af					.byte $af                             ; $008c /
>e07b	ba					.byte $ba                             ; $008d :
>e07c	bb					.byte $bb                             ; $008e ;
>e07d	3c bd					.byte $3c,$bd                         ; $008f <=
>e07f	3c be					.byte $3c,$be                         ; $0090 <>
>e081	bc					.byte $bc                             ; $0091 <
>e082	bd					.byte $bd                             ; $0092 =
>e083	3e bd					.byte $3e,$bd                         ; $0093 >=
>e085	be					.byte $be                             ; $0094 >
>e086	bf					.byte $bf                             ; $0095 ?
>e087	de					.byte $de                             ; $0096 ^
>e088	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4         ; $0097 assert
>e08e	41 42 d3				.byte $41,$42,$d3                     ; $0098 abs
>e091	43 4c 45 41 d2				.byte $43,$4c,$45,$41,$d2             ; $0099 clear
>e096	43 4c d3				.byte $43,$4c,$d3                     ; $009a cls
>e099	43 c8					.byte $43,$c8                         ; $009b ch
>e09b	44 cf					.byte $44,$cf                         ; $009c do
>e09d	45 4e c4				.byte $45,$4e,$c4                     ; $009d end
>e0a0	46 4f d2				.byte $46,$4f,$d2                     ; $009e for
>e0a3	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2             ; $009f gosub
>e0a8	47 4f 54 cf				.byte $47,$4f,$54,$cf                 ; $00a0 goto
>e0ac	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4             ; $00a1 input
>e0b1	49 c6					.byte $49,$c6                         ; $00a2 if
>e0b3	4c 49 53 d4				.byte $4c,$49,$53,$d4                 ; $00a3 list
>e0b7	4c 4f 4f d0				.byte $4c,$4f,$4f,$d0                 ; $00a4 loop
>e0bb	4c 49 4e cb				.byte $4c,$49,$4e,$cb                 ; $00a5 link
>e0bf	4c 45 d4				.byte $4c,$45,$d4                     ; $00a6 let
>e0c2	4c 45 ce				.byte $4c,$45,$ce                     ; $00a7 len
>e0c5	4e 45 58 d4				.byte $4e,$45,$58,$d4                 ; $00a8 next
>e0c9	4e 45 d7				.byte $4e,$45,$d7                     ; $00a9 new
>e0cc	4f 4c c4				.byte $4f,$4c,$c4                     ; $00aa old
>e0cf	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4             ; $00ab print
>e0d4	50 41 47 c5				.byte $50,$41,$47,$c5                 ; $00ac page
>e0d8	52 45 cd				.byte $52,$45,$cd                     ; $00ad rem
>e0db	52 55 ce				.byte $52,$55,$ce                     ; $00ae run
>e0de	52 4e c4				.byte $52,$4e,$c4                     ; $00af rnd
>e0e1	53 54 4f d0				.byte $53,$54,$4f,$d0                 ; $00b0 stop
>e0e5	53 54 45 d0				.byte $53,$54,$45,$d0                 ; $00b1 step
>e0e9	54 48 45 ce				.byte $54,$48,$45,$ce                 ; $00b2 then
>e0ed	54 4f d0				.byte $54,$4f,$d0                     ; $00b3 top
>e0f0	54 cf					.byte $54,$cf                         ; $00b4 to
>e0f2	fc					.byte $fc                             ; $00b5 |
>e0f3	fe					.byte $fe                             ; $00b6 ~
>e0f4	00					.byte $00
.e0f5					TokenTypeInformation:
>e0f5	04					.byte $04                             ; $0080 !
>e0f6	0a					.byte $0a                             ; $0081 "
>e0f7	0a					.byte $0a                             ; $0082 #
>e0f8	04					.byte $04                             ; $0083 $
>e0f9	03					.byte $03                             ; $0084 %
>e0fa	00					.byte $00                             ; $0085 &
>e0fb	0a					.byte $0a                             ; $0086 '
>e0fc	0a					.byte $0a                             ; $0087 (
>e0fd	0a					.byte $0a                             ; $0088 )
>e0fe	03					.byte $03                             ; $0089 *
>e0ff	02					.byte $02                             ; $008a +
>e100	02					.byte $02                             ; $008b -
>e101	03					.byte $03                             ; $008c /
>e102	0a					.byte $0a                             ; $008d :
>e103	0a					.byte $0a                             ; $008e ;
>e104	01					.byte $01                             ; $008f <=
>e105	01					.byte $01                             ; $0090 <>
>e106	01					.byte $01                             ; $0091 <
>e107	01					.byte $01                             ; $0092 =
>e108	01					.byte $01                             ; $0093 >=
>e109	01					.byte $01                             ; $0094 >
>e10a	04					.byte $04                             ; $0095 ?
>e10b	00					.byte $00                             ; $0096 ^
>e10c	04					.byte $04                             ; $0097 assert
>e10d	09					.byte $09                             ; $0098 abs
>e10e	04					.byte $04                             ; $0099 clear
>e10f	04					.byte $04                             ; $009a cls
>e110	09					.byte $09                             ; $009b ch
>e111	04					.byte $04                             ; $009c do
>e112	04					.byte $04                             ; $009d end
>e113	04					.byte $04                             ; $009e for
>e114	04					.byte $04                             ; $009f gosub
>e115	04					.byte $04                             ; $00a0 goto
>e116	04					.byte $04                             ; $00a1 input
>e117	04					.byte $04                             ; $00a2 if
>e118	04					.byte $04                             ; $00a3 list
>e119	04					.byte $04                             ; $00a4 loop
>e11a	04					.byte $04                             ; $00a5 link
>e11b	04					.byte $04                             ; $00a6 let
>e11c	09					.byte $09                             ; $00a7 len
>e11d	04					.byte $04                             ; $00a8 next
>e11e	04					.byte $04                             ; $00a9 new
>e11f	04					.byte $04                             ; $00aa old
>e120	04					.byte $04                             ; $00ab print
>e121	09					.byte $09                             ; $00ac page
>e122	04					.byte $04                             ; $00ad rem
>e123	04					.byte $04                             ; $00ae run
>e124	09					.byte $09                             ; $00af rnd
>e125	04					.byte $04                             ; $00b0 stop
>e126	04					.byte $04                             ; $00b1 step
>e127	04					.byte $04                             ; $00b2 then
>e128	09					.byte $09                             ; $00b3 top
>e129	04					.byte $04                             ; $00b4 to
>e12a	00					.byte $00                             ; $00b5 |
>e12b	01					.byte $01                             ; $00b6 ~
=$00					KTYPE_PRECBASE = $00
=$08					KTYPE_COMMAND = $08
=$09					KTYPE_UNARYFN = $09
=$0a					KTYPE_SYNTAX = $0a
=$0080					KW_PLING = $0080
=$0081					KW_DQUOTE = $0081
=$0082					KW_HASH = $0082
=$0083					KW_DOLLAR = $0083
=$0084					KW_PERCENT = $0084
=$0085					KW_AMPERSAND = $0085
=$0086					KW_SQUOTE = $0086
=$0087					KW_LPAREN = $0087
=$0088					KW_RPAREN = $0088
=$0089					KW_STAR = $0089
=$008a					KW_PLUS = $008a
=$008b					KW_MINUS = $008b
=$008c					KW_FSLASH = $008c
=$008d					KW_COLON = $008d
=$008e					KW_SEMICOLON = $008e
=$008f					KW_LESSEQUAL = $008f
=$0090					KW_LESSGREATER = $0090
=$0091					KW_LESS = $0091
=$0092					KW_EQUAL = $0092
=$0093					KW_GREATEREQUAL = $0093
=$0094					KW_GREATER = $0094
=$0095					KW_QUESTION = $0095
=$0096					KW_HAT = $0096
=$0097					KW_ASSERT = $0097
=$0098					KW_ABS = $0098
=$0099					KW_CLEAR = $0099
=$009a					KW_CLS = $009a
=$009b					KW_CH = $009b
=$009c					KW_DO = $009c
=$009d					KW_END = $009d
=$009e					KW_FOR = $009e
=$009f					KW_GOSUB = $009f
=$00a0					KW_GOTO = $00a0
=$00a1					KW_INPUT = $00a1
=$00a2					KW_IF = $00a2
=$00a3					KW_LIST = $00a3
=$00a4					KW_LOOP = $00a4
=$00a5					KW_LINK = $00a5
=$00a6					KW_LET = $00a6
=$00a7					KW_LEN = $00a7
=$00a8					KW_NEXT = $00a8
=$00a9					KW_NEW = $00a9
=$00aa					KW_OLD = $00aa
=$00ab					KW_PRINT = $00ab
=$00ac					KW_PAGE = $00ac
=$00ad					KW_REM = $00ad
=$00ae					KW_RUN = $00ae
=$00af					KW_RND = $00af
=$00b0					KW_STOP = $00b0
=$00b1					KW_STEP = $00b1
=$00b2					KW_THEN = $00b2
=$00b3					KW_TOP = $00b3
=$00b4					KW_TO = $00b4
=$00b5					KW_BAR = $00b5
=$00b6					KW_TILDE = $00b6

;******  Return to file: basic.asm


;******  Processing file: general/support.asm

.e12c					SyntaxError:
.e12c	20 3c e1	jsr $e13c			jsr 	ReportError
>e12f	53 59 4e 54 41 58 20 45				.text	"SYNTAX ERROR",0
>e137	52 52 4f 52 00
.e13c					ReportError:
.e13c	fa		plx				plx
.e13d	7a		ply				ply
.e13e	e8		inx				inx
.e13f	d0 01		bne $e142			bne 	_REPrint
.e141	c8		iny				iny
.e142					_REPrint:
.e142	20 7c e4	jsr $e47c			jsr 	SIOPrintString
.e145	a5 21		lda $21				lda 	zCurrentLine+1 				; running from tokeniser buffer
.e147	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.e149	f0 16		beq $e161			beq 	_RENoLineNumber
.e14b	a9 20		lda #$20			lda 	#" "
.e14d	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.e150	a9 40		lda #$40			lda 	#"@"
.e152	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.e155	a0 01		ldy #$01			ldy 	#1
.e157	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e159	aa		tax				tax
.e15a	c8		iny				iny
.e15b	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e15d	a8		tay				tay
.e15e	20 69 e1	jsr $e169			jsr 	PrintWordInteger
.e161					_RENoLineNumber:
.e161	a9 0d		lda #$0d			lda 	#13
.e163	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.e166	4c ac ee	jmp $eeac			jmp 	WarmStart
.e169					PrintWordInteger:
.e169	8a		txa				txa
.e16a	a2 00		ldx #$00			ldx 	#0
.e16c	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e16f	98		tya				tya
.e170	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e173	c8		iny				iny
.e174	a9 00		lda #$00			lda 	#0
.e176	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e179	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e17c	20 b4 ed	jsr $edb4			jsr 	CPRPrintInteger
.e17f	60		rts				rts
.e180					CheckNextCharacter:
.e180	8d 98 20	sta $2098			sta 	Temp1 						; save character to check
.e183					_CNCLoop:
.e183	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next
.e185	f0 0b		beq $e192			beq 	_CNCFail 					; end of line, so no character
.e187	c8		iny				iny
.e188	c9 20		cmp #$20			cmp 	#' ' 						; skip spaces
.e18a	f0 f7		beq $e183			beq 	_CNCLoop
.e18c	cd 98 20	cmp $2098			cmp 	Temp1 						; fail if not what was wanted
.e18f	d0 01		bne $e192			bne 	_CNCFail
.e191	60		rts				rts
.e192					_CNCFail:
.e192	20 3c e1	jsr $e13c			jsr 	ReportError
>e195	4d 49 53 53 49 4e 47 20				.text 	"MISSING TOKEN",$00
>e19d	54 4f 4b 45 4e 00

;******  Return to file: basic.asm


;******  Processing file: general/data.asm

=$e1a3							currentPosData = *
>0020					zCurrentLine: 	.word 	?					; address of current line (offset word)
>0022					zBasicStack:	.word 	? 					; stack for BASIC.
>0024					zLowMemory:		.word	?					; next free space after program (arrays,vars etc.)
>0026					zTemp1:			.word 	?					; temporary vars
>0028					zTemp2:			.word 	?
>002a					zTargetAddr: 	.dword 	? 					; address of LHS of assignment, list pointer.
>2000					FixedVariables:	.fill 	27*4 				; address of 26 x 4 byte fixed variables @A-Z
>206c					Control 		.byte 	? 					; 0 = normal, 1 = tokenise, 2 = run program.
>206d					InputLine:		.fill 	EXTWidth+1 			; screen input buffer, cannot cross page.
>2096					HighMemory:		.word 	?					; highest memory location available (2 bytes)
>2098					Temp1:			.dword	?					; 4 byte temporary stores.
>209c					SignCount:		.byte 	? 					; count of signs in divide.
>209d					StringBufferPos:.byte 	? 					; next free slot in string buffer
>209e					RandomSeed 		.word 	? 					; Random Number
>20a0					xCursor 		.byte 	? 					; cursor position
>20a1					yCursor 		.byte 	?
>20a2									.align	256
.2100					TokeniseBuffer:
>2100									.fill 	256
.2200					StringBuffer:
>2200									.fill 	256
.2300					BasicProgram:

;******  Return to file: basic.asm


;******  Processing file: general/evaluate.asm

.e1a3					EvaluateSNError:
.e1a3	4c 2c e1	jmp $e12c			jmp 	SyntaxError
.e1a6					EvaluateMissingQuote:
.e1a6	20 3c e1	jsr $e13c			jsr 	ReportError
>e1a9	4d 49 53 53 49 4e 47 20				.text 	"MISSING QUOTE",$00
>e1b1	51 55 4f 54 45 00
.e1b7					EvaluateStringFull:
.e1b7	20 3c e1	jsr $e13c			jsr 	ReportError
>e1ba	53 54 52 49 4e 47 20 42				.text 	"STRING BUFFER FULL",$00
>e1c2	55 46 46 45 52 20 46 55 4c 4c 00
.e1cd					EvaluateBadHex:
.e1cd	20 3c e1	jsr $e13c			jsr 	ReportError
>e1d0	42 41 44 20 48 45 58 00				.text 	"BAD HEX",$00
.e1d8					EvaluateAtomCurrentLevel:
.e1d8	a9 07		lda #$07			lda 	#7
.e1da	80 04		bra $e1e0			bra 	EvaluateAtPrecedenceLevel
.e1dc					EvaluateBase:
.e1dc	a2 00		ldx #$00			ldx 	#0 							; reset the stack
.e1de					EvaluateBaseCurrentLevel:
.e1de	a9 00		lda #$00			lda 	#0 							; current precedence is zero
.e1e0					EvaluateAtPrecedenceLevel:
.e1e0	48		pha				pha 								; save precedence level
.e1e1	a9 00		lda #$00			lda 	#0 							; zero the result.
.e1e3	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e1e6	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e1e9	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e1ec	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e1ef					_EVALSkipSpace1:
.e1ef	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token, skipping over spaces.
.e1f1	f0 b0		beq $e1a3			beq 	EvaluateSNError 			; end of line, without token.
.e1f3	c8		iny				iny
.e1f4	c9 20		cmp #$20			cmp 	#32
.e1f6	f0 f7		beq $e1ef			beq 	_EVALSkipSpace1
.e1f8	88		dey				dey 								; points at the token.
.e1f9	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; is it opening quote ?
.e1fb	f0 14		beq $e211			beq 	_EVALString  				; if so load in a constant string
.e1fd	c9 82		cmp #$82			cmp 	#KW_HASH 					; is it a hash, e.g. hexadecimal.
.e1ff	f0 36		beq $e237			beq 	_EVALHexadecimal
.e201	c9 30		cmp #$30			cmp 	#'0'						; is it in range 0-9
.e203	90 04		bcc $e209			bcc		_EVALGoKeywordVariable 		; yes, it's a keyword or variable.
.e205	c9 3a		cmp #$3a			cmp 	#'9'+1
.e207	90 03		bcc $e20c			bcc 	_EVALDecimal
.e209					_EVALGoKeywordVariable:
.e209	4c 8e e2	jmp $e28e			jmp 	_EVALKeywordVariable
.e20c					_EVALDecimal:
.e20c	20 eb e2	jsr $e2eb			jsr 	EVALGetDecConstant 			; get decimal constant
.e20f	80 34		bra $e245			bra 	_EVALGotAtom 				; got atom.
.e211					_EVALString:
.e211	da		phx				phx 								; save X on stack
.e212	a9 22		lda #$22			lda 	#StringBuffer >> 8 			; set the address in the eval stack
.e214	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e217	ad 9d 20	lda $209d			lda 	StringBufferPos 			; X = Buffer Position.
.e21a	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; that's the address of the new string
.e21d	aa		tax				tax 								; put in X to build the string.
.e21e	c8		iny				iny 								; skip over opening quote character
.e21f					_EVALStringCopy:
.e21f	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character.
.e221	c8		iny				iny
.e222	f0 82		beq $e1a6			beq		EvaluateMissingQuote 		; if zero, then there was no closing quote.
.e224	9d 00 22	sta $2200,x			sta 	StringBuffer,x 				; copy into the buffer
.e227	e8		inx				inx 								; and bump that pointer.
.e228	f0 8d		beq $e1b7			beq 	EvaluateStringFull 			; buffer is full.
.e22a	49 81		eor #$81			eor 	#KW_DQUOTE					; keep going if not closing quote.
.e22c	d0 f1		bne $e21f			bne 	_EVALStringCopy
.e22e	8e 9d 20	stx $209d			stx 	StringBufferPos 			; this is the new next free slot.
.e231	9d ff 21	sta $21ff,x			sta 	StringBuffer-1,x 			; write the zero (EOS) hence EOR to end string.
.e234	fa		plx				plx 								; restore X
.e235	80 0e		bra $e245			bra 	_EVALGotAtom 				; got the atom.
.e237					_EVALHexaDecimal
.e237	c8		iny				iny 								; skip over the '#'
.e238	5a		phy				phy 								; save Y
.e239	20 57 e3	jsr $e357			jsr 	EVALGetHexConstant 			; load in hexadecimal constant
.e23c	8c 98 20	sty $2098			sty 	Temp1 						; has Y changed ?
.e23f	68		pla				pla
.e240	cd 98 20	cmp $2098			cmp 	Temp1
.e243	f0 88		beq $e1cd			beq 	EvaluateBadHex 				; if not, error.
.e245					_EVALGotAtom:
.e245					_EVALGetOperator:
.e245	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token skip spaces.
.e247	c8		iny				iny 								; this should be binary operator
.e248	c9 20		cmp #$20			cmp 	#$20
.e24a	f0 f9		beq $e245			beq 	_EVALGetOperator
.e24c	88		dey				dey
.e24d	09 00		ora #$00			ora 	#0 							; to be a binary token must be -ve
.e24f	10 3b		bpl $e28c			bpl 	_EVALExitPullA 				; if +ve then exit now.
.e251	da		phx				phx 								; save X
.e252	aa		tax				tax 								; token in X
.e253	bd 75 e0	lda $e075,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e256	8d 98 20	sta $2098			sta 	Temp1 						; save precedence in Temp1
.e259	fa		plx				plx 								; restore X
.e25a	c9 08		cmp #$08			cmp 	#8 							; if type >= 8, e.g. not binary, then exit.
.e25c	b0 2e		bcs $e28c			bcs 	_EVALExitPullA
.e25e	68		pla				pla 								; get and save precedence level.
.e25f	48		pha				pha
.e260	cd 98 20	cmp $2098			cmp 	Temp1 						; compare operator precedence - keyword precedence level.
.e263	f0 02		beq $e267			beq 	_EVALDoCalc					; equal, do it.
.e265	b0 25		bcs $e28c			bcs 	_EVALExitPullA				; too high, then exit.
.e267					_EVALDoCalc:
.e267	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token, save on stack and skip it.
.e269	c8		iny				iny
.e26a	48		pha				pha
.e26b	da		phx				phx
.e26c	e8		inx				inx 								; work out right hand side.
.e26d	e8		inx				inx
.e26e	e8		inx				inx
.e26f	e8		inx				inx
.e270	ad 98 20	lda $2098			lda 	Temp1 						; get current operator precedence level.
.e273	1a		inc a				inc 	a 							; so work it out at the next level.
.e274	20 e0 e1	jsr $e1e0			jsr 	EvaluateAtPrecedenceLevel 	; work out the RHS.
.e277	fa		plx				plx 								; fix X back.
.e278	68		pla				pla 								; get keyword
.e279					_EVALExecuteA:
.e279	0a		asl a				asl 	a 							; shift left, drop bit 7
.e27a	8d 99 20	sta $2099			sta 	Temp1+1						; save in Temp1.1
.e27d	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e27f	8d 9a 20	sta $209a			sta 	Temp1+2 					; set at Temp1.2
.e282	a9 6c		lda #$6c			lda 	#$6C 						; make JMP (xxxx)
.e284	8d 98 20	sta $2098			sta 	Temp1+0
.e287	20 98 20	jsr $2098			jsr 	Temp1 						; call that routine.
.e28a	80 b9		bra $e245			bra 	_EVALGotAtom 				; and loop back again.
.e28c					_EVALExitPullA:
.e28c	68		pla				pla 								; restore precedence.
.e28d	60		rts				rts
.e28e					_EVALKeywordVariable:
.e28e	09 00		ora #$00			ora 	#0 							; check bit 7
.e290	10 0f		bpl $e2a1			bpl 	_EVALNotUnaryFunction 		; must be set for unary function
.e292	da		phx				phx
.e293	aa		tax				tax
.e294	bd 75 e0	lda $e075,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e297	fa		plx				plx
.e298	c9 09		cmp #$09			cmp 	#KTYPE_UNARYFN 				; is it a unary function
.e29a	d0 05		bne $e2a1			bne 	_EVALNotUnaryFunction
.e29c	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token back
.e29e	c8		iny				iny 								; consume it
.e29f	80 d8		bra $e279			bra 	_EVALExecuteA 				; execute TOS.
.e2a1					_EVALNotUnaryFunction:
.e2a1	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e2a3	10 3d		bpl $e2e2			bpl 	_EVALCheckVariable 			; if ASCII check variable
.e2a5	c9 8b		cmp #$8b			cmp 	#KW_MINUS 					; check negation
.e2a7	f0 0f		beq $e2b8			beq 	_EVALUnaryNegation
.e2a9	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; check left bracket.
.e2ab	d0 14		bne $e2c1			bne		_EVALCheckUnaryOperator
.e2ad	c8		iny				iny 								; skip left bracket.
.e2ae	20 de e1	jsr $e1de			jsr 	EvaluateBaseCurrentLevel 	; calculate what's in the bracket.
.e2b1	a9 88		lda #$88			lda 	#KW_RPAREN 					; check right bracket.
.e2b3	20 80 e1	jsr $e180			jsr 	CheckNextCharacter 			; check next character, after spaces.
.e2b6	80 8d		bra $e245			bra 	_EVALGotAtom
.e2b8					_EVALUnaryNegation:
.e2b8	c8		iny				iny 								; skip over the - sign.
.e2b9	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel 	; calculate what's being negatived (...)
.e2bc	20 f0 e8	jsr $e8f0			jsr 	BFUNC_NegateAlways 			; negate it.
.e2bf	80 84		bra $e245			bra 	_EVALGotAtom
.e2c1					_EVALCheckUnaryOperator:
.e2c1	48		pha				pha 								; save indirection operator.
.e2c2	c8		iny				iny 								; skip over the operator
.e2c3	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel 	; calculate the address.
.e2c6	68		pla				pla 								; restore the operator
.e2c7	c9 83		cmp #$83			cmp 	#KW_DOLLAR					; $ is for visual typing, it does nothing
.e2c9	f0 0e		beq $e2d9			beq 	_EVALGoGotAtom
.e2cb	c9 95		cmp #$95			cmp 	#KW_QUESTION				; byte indirection
.e2cd	f0 07		beq $e2d6			beq 	_EVALByteRead
.e2cf	c9 80		cmp #$80			cmp 	#KW_PLING					; word indirection
.e2d1	f0 09		beq $e2dc			beq 	_EVALWordRead
.e2d3	4c 2c e1	jmp $e12c			jmp 	SyntaxError 				; give up.
.e2d6					_EVALByteRead:
.e2d6	20 96 e3	jsr $e396			jsr 	EVALReadByteIndirect
.e2d9					_EVALGoGotAtom:
.e2d9	4c 45 e2	jmp $e245			jmp 	_EVALGotAtom
.e2dc					_EVALWordRead:
.e2dc	20 bf e3	jsr $e3bf			jsr 	EVALReadWordIndirect
.e2df	4c 45 e2	jmp $e245			jmp 	_EVALGotAtom
.e2e2					_EVALCheckVariable:
.e2e2	20 ef e3	jsr $e3ef			jsr 	VARReference 				; get variable reference to ZTemp1
.e2e5	20 d3 e3	jsr $e3d3			jsr 	EVALReadWordIndirectZTemp	; read that address into current stack level.
.e2e8	4c 45 e2	jmp $e245			jmp 	_EVALGotAtom 				; and go round.
.e2eb					EVALGetDecConstant:
.e2eb	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e2ed	c9 30		cmp #$30			cmp 	#'0'						; check in range 0-9.
.e2ef	90 04		bcc $e2f5			bcc 	_EVGDExit
.e2f1	c9 3a		cmp #$3a			cmp 	#'9'+1
.e2f3	90 01		bcc $e2f6			bcc 	_EVGDValue 					; if so has legal value
.e2f5					_EVGDExit:
.e2f5	60		rts				rts
.e2f6					_EVGDValue:
.e2f6	48		pha				pha 								; save value, Y on stack
.e2f7	5a		phy				phy
.e2f8	a0 03		ldy #$03			ldy 	#3 							; 3 shifts.
.e2fa	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; push x1 value on stack.
.e2fd	48		pha				pha
.e2fe	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e301	48		pha				pha
.e302	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e305	48		pha				pha
.e306	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e309	48		pha				pha
.e30a					_EVGDLoop:
.e30a	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; rotate left once.
.e30d	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e310	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e313	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e316	c0 02		cpy #$02			cpy 	#2 							; if done it twice now
.e318	d0 1d		bne $e337			bne 	_EVGDNoAdd
.e31a	18		clc				clc 								; then it will be x 4, adding +1 => x 5
.e31b	68		pla				pla
.e31c	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e31f	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e322	68		pla				pla
.e323	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e326	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e329	68		pla				pla
.e32a	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e32d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e330	68		pla				pla
.e331	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e334	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e337					_EVGDNoAdd:
.e337	88		dey				dey
.e338	d0 d0		bne $e30a			bne 	_EVGDLoop
.e33a	7a		ply				ply 								; restore YA
.e33b	68		pla				pla
.e33c	c8		iny				iny 								; next character
.e33d	29 0f		and #$0f			and 	#15 						; force into range and put in.
.e33f	18		clc				clc
.e340	7d 00 04	adc $0400,x			adc 	evalStack+0,x 				; add digit in
.e343	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e346	90 a3		bcc $e2eb			bcc 	EVALGetDecConstant 			; propogate constant through
.e348	fe 01 04	inc $0401,x			inc 	evalStack+1,x
.e34b	d0 9e		bne $e2eb			bne 	EVALGetDecConstant
.e34d	fe 02 04	inc $0402,x			inc 	evalStack+2,x
.e350	d0 99		bne $e2eb			bne 	EVALGetDecConstant
.e352	fe 03 04	inc $0403,x			inc 	evalStack+3,x
.e355	80 94		bra $e2eb			bra 	EVALGetDecConstant 			; go back and try again.
.e357					EVALGetHexConstant:
.e357	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e359	20 8b e3	jsr $e38b			jsr 	EVALToUpper 				; make upper case
.e35c	38		sec				sec
.e35d	e9 30		sbc #$30			sbc 	#"0" 						; range 0-9
.e35f	90 0a		bcc $e36b			bcc 	_EVGHExit 					; exit if CC
.e361	c9 0a		cmp #$0a			cmp 	#9+1 						; if < 9 have a legal value.
.e363	90 07		bcc $e36c			bcc 	_EVGHValue
.e365	e9 07		sbc #$07			sbc 	#7 							; now in range 10-15 if okay.
.e367	c9 10		cmp #$10			cmp 	#15+1
.e369	90 01		bcc $e36c			bcc 	_EVGHValue
.e36b					_EVGHExit:
.e36b	60		rts				rts
.e36c					_EVGHValue:
.e36c	5a		phy				phy 								; save Y and new digit.
.e36d	48		pha				pha
.e36e	a0 04		ldy #$04			ldy 	#4 							; rotate left 4
.e370					_EVGHRotate:
.e370	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e373	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e376	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e379	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e37c	88		dey				dey
.e37d	d0 f1		bne $e370			bne 	_EVGHRotate
.e37f	68		pla				pla 								; restore digit and X
.e380	7a		ply				ply
.e381	c8		iny				iny 								; next character
.e382	18		clc				clc
.e383	1d 00 04	ora $0400,x			ora 	evalStack+0,x 				; add digit in
.e386	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e389	80 cc		bra $e357			bra 	EVALGetHexConstant 			; go back and try again.
.e38b					EVALToUpper:
.e38b	c9 61		cmp #$61			cmp 	#'a'
.e38d	90 06		bcc $e395			bcc 	_EVTUExit
.e38f	c9 7b		cmp #$7b			cmp 	#'z'+1
.e391	b0 02		bcs $e395			bcs 	_EVTUExit
.e393	49 20		eor #$20			eor 	#32
.e395					_EVTUExit:
.e395	60		rts				rts
.e396					EVALReadByteIndirect:
.e396	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e399	85 26		sta $26				sta 	zTemp1
.e39b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e39e	85 27		sta $27				sta 	zTemp1+1
.e3a0	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e3a3	85 28		sta $28				sta 	zTemp1+2
.e3a5	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e3a8	85 29		sta $29				sta 	zTemp1+3
.e3aa	5a		phy				phy
.e3ab	a0 00		ldy #$00			ldy 	#0 							; read byte
.e3ad	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3af	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3b2	7a		ply				ply
.e3b3	a9 00		lda #$00			lda 	#0 							; zero upper three bytes
.e3b5	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e3b8	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e3bb	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e3be	60		rts				rts
.e3bf					EVALReadWordIndirect:
.e3bf	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e3c2	85 26		sta $26				sta 	zTemp1
.e3c4	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e3c7	85 27		sta $27				sta 	zTemp1+1
.e3c9	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e3cc	85 28		sta $28				sta 	zTemp1+2
.e3ce	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e3d1	85 29		sta $29				sta 	zTemp1+3
.e3d3					EVALReadWordIndirectZTemp:
.e3d3	5a		phy				phy
.e3d4	a0 00		ldy #$00			ldy 	#0 							; read word
.e3d6	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3d8	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3db	c8		iny				iny
.e3dc	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3de	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e3e1	c8		iny				iny
.e3e2	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3e4	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e3e7	c8		iny				iny
.e3e8	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3ea	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e3ed	7a		ply				ply
.e3ee	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/variable.asm

.e3ef					VARReference:
.e3ef	38		sec				sec 								; check range @-Z there
.e3f0	c9 40		cmp #$40			cmp 	#'@'
.e3f2	90 04		bcc $e3f8			bcc 	_VARRError
.e3f4	c9 5b		cmp #$5b			cmp 	#'Z'+1 						; there are 27 variables @ and A-Z
.e3f6	90 03		bcc $e3fb			bcc 	_VARROkay
.e3f8					_VARRError:
.e3f8	4c 2c e1	jmp $e12c			jmp		SyntaxError
.e3fb					_VARROkay:
.e3fb	c8		iny				iny 								; consume the variable.
.e3fc	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it @@ AA BB CC ?
.e3fe	f0 1b		beq $e41b			beq 	_VARArrayAccess 			; array access AA0 AA1 etc.
.e400	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get that second character
.e402	88		dey				dey 								; point back to the first character
.e403	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; if ( then it is A(x) format.
.e405	f0 14		beq $e41b			beq 	_VARArrayAccess
.e407	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; reget variable.
.e409	c8		iny				iny
.e40a	29 1f		and #$1f			and		#31 						; mask out
.e40c	0a		asl a				asl 	a 							; x 4
.e40d	0a		asl a				asl 	a
.e40e	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e410	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e412	85 27		sta $27				sta 	zTemp1+1
.e414	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.e416	85 28		sta $28				sta 	zTemp1+2
.e418	85 29		sta $29				sta 	zTemp1+3 					; return with address set.
.e41a	60		rts				rts
.e41b					_VARArrayAccess:
.e41b	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get variable
.e41d	c8		iny				iny
.e41e	29 1f		and #$1f			and 	#31 						; mask it off
.e420	48		pha				pha 								; save on the stack.
.e421	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel 	; calculate the index.
.e424	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; multiply by four.
.e427	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e42a	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e42d	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e430	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e433	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e436	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e439	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e43c	68		pla				pla 								; put address in zTemp1
.e43d	0a		asl a				asl 	a 							; x 4
.e43e	0a		asl a				asl 	a
.e43f	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e441	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e443	85 27		sta $27				sta 	zTemp1+1
.e445	5a		phy				phy
.e446	a0 00		ldy #$00			ldy 	#0 							; calculate	evalStack+0,3 + (zTemp)
.e448	b1 26		lda ($26),y			lda 	(zTemp1),y
.e44a	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e44d	48		pha				pha 								; save first result as we need the indirection.
.e44e	c8		iny				iny 								; 2nd byte
.e44f	b1 26		lda ($26),y			lda 	(zTemp1),y
.e451	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e454	85 27		sta $27				sta 	zTemp1+1
.e456	68		pla				pla 								; save the low byte.
.e457	85 26		sta $26				sta 	zTemp1+0
.e459	a9 00		lda #$00			lda 	#0
.e45b	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e45e	85 28		sta $28				sta 	zTemp1+2
.e460	a9 00		lda #$00			lda 	#0
.e462	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e465	85 29		sta $29				sta 	zTemp1+3
.e467	7a		ply				ply 								; restore Y, address setup
.e468	60		rts				rts
.e469	80 fe		bra $e469	x1:		bra 	x1

;******  Return to file: basic.asm


;******  Processing file: general/screenio.asm

.e46b					SIOInitialise:
.e46b	20 82 a0	jsr $a082			jsr 	EXTReset 					; reset video
.e46e					SIOClearScreen:
.e46e	20 38 a0	jsr $a038			jsr 	EXTClearScreen 				; clear screen
.e471					SIOHomeCursor:
.e471	48		pha				pha 								; home cursor
.e472	a9 00		lda #$00			lda 	#0
.e474	8d a0 20	sta $20a0			sta 	xCursor
.e477	8d a1 20	sta $20a1			sta 	yCursor
.e47a	68		pla				pla
.e47b	60		rts				rts
.e47c					SIOPrintString:
.e47c	48		pha				pha 								; save registers
.e47d	da		phx				phx
.e47e	5a		phy				phy
.e47f	86 28		stx $28				stx 	zTemp2 						; set up indirect pointer
.e481	84 29		sty $29				sty 	zTemp2+1
.e483	a0 00		ldy #$00			ldy 	#0
.e485					_SIOPSLoop:
.e485	b1 28		lda ($28),y			lda 	(zTemp2),y 					; read next, exit if 0
.e487	f0 1c		beq $e4a5			beq 	_SIOPSExit
.e489	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter 			; print and bump
.e48c	c8		iny				iny
.e48d	d0 f6		bne $e485			bne 	_SIOPSLoop
.e48f	20 3c e1	jsr $e13c			jsr 	ReportError
>e492	42 41 44 20 53 54 52 49				.text 	"BAD STRING PRINTED",$00
>e49a	4e 47 20 50 52 49 4e 54 45 44 00
.e4a5					_SIOPSExit:
.e4a5	7a		ply				ply 								; restore and exit.
.e4a6	fa		plx				plx
.e4a7	68		pla				pla
.e4a8	60		rts				rts
.e4a9					SIOPrintCharacter:
.e4a9	48		pha				pha 								; save AXY
.e4aa	da		phx				phx
.e4ab	5a		phy				phy
.e4ac	c9 0d		cmp #$0d			cmp 	#13 						; CR ?
.e4ae	f0 12		beq $e4c2			beq 	_SIOPReturn
.e4b0	20 09 e6	jsr $e609			jsr 	SIOLoadCursor 				; load cursor position in.
.e4b3	29 3f		and #$3f			and 	#$3F 						; PETSCII conversion
.e4b5	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen 				; write character out.
.e4b8	ee a0 20	inc $20a0			inc 	xCursor 					; move right
.e4bb	ad a0 20	lda $20a0			lda 	xCursor 					; reached the RHS
.e4be	c9 28		cmp #$28			cmp 	#EXTWidth
.e4c0	90 15		bcc $e4d7			bcc 	_SIOPExit
.e4c2					_SIOPReturn:
.e4c2	a9 00		lda #$00			lda 	#0 							; zero x
.e4c4	8d a0 20	sta $20a0			sta 	xCursor
.e4c7	ee a1 20	inc $20a1			inc 	yCursor 					; go down
.e4ca	ad a1 20	lda $20a1			lda 	yCursor
.e4cd	c9 19		cmp #$19			cmp 	#EXTHeight 					; off the bottom ?
.e4cf	90 06		bcc $e4d7			bcc 	_SIOPExit
.e4d1	20 50 a0	jsr $a050			jsr 	EXTScrollDisplay 			; scroll display up
.e4d4	ce a1 20	dec $20a1			dec 	yCursor 					; cursor on bottom line.
.e4d7					_SIOPExit:
.e4d7	7a		ply				ply 								; restore and exit.
.e4d8	fa		plx				plx
.e4d9	68		pla				pla
.e4da	60		rts				rts
.e4db					SIOGetKey:
.e4db	20 0c a0	jsr $a00c			jsr 	EXTReadKeyPort 				; wait for a key
.e4de	f0 fb		beq $e4db			beq 	SIOGetKey
.e4e0	20 8b e3	jsr $e38b			jsr 	EVALToUpper 				; capitalise it.
.e4e3	4c 12 a0	jmp $a012			jmp 	EXTRemoveKeyPressed 		; remove from the queue.
.e4e6					SIOReadLine:
.e4e6	48		pha				pha 								; save registers
.e4e7	da		phx				phx
.e4e8	5a		phy				phy
.e4e9					_SIORLoop:
.e4e9	20 09 e6	jsr $e609			jsr 	SIOLoadCursor 				; cursor in XY
.e4ec	20 1e a0	jsr $a01e			jsr 	EXTReadScreen 				; read the display.
.e4ef	48		pha				pha 								; save on stack.
.e4f0	a9 66		lda #$66			lda 	#102 						; write cursor out
.e4f2	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e4f5	20 db e4	jsr $e4db			jsr 	SIOGetKey
.e4f8	aa		tax				tax 								; save in X
.e4f9	68		pla				pla 								; old character
.e4fa	da		phx				phx 								; save key pressed
.e4fb	20 09 e6	jsr $e609			jsr 	SIOLoadCursor 				; cursor in XY
.e4fe	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e501	68		pla				pla
.e502	c9 01		cmp #$01			cmp 	#"A"-64 					; control characters
.e504	f0 29		beq $e52f			beq 	_SIOCursorLeft
.e506	c9 13		cmp #$13			cmp 	#"S"-64
.e508	f0 49		beq $e553			beq 	_SIOCursorDown
.e50a	c9 04		cmp #$04			cmp 	#"D"-64
.e50c	f0 2d		beq $e53b			beq 	_SIOCursorRight
.e50e	c9 17		cmp #$17			cmp 	#"W"-64
.e510	f0 35		beq $e547			beq 	_SIOCursorUp
.e512	c9 1a		cmp #$1a			cmp 	#"Z"-64
.e514	f0 49		beq $e55f			beq 	_SIOClearScreen
.e516	c9 08		cmp #$08			cmp 	#"H"-64
.e518	f0 4a		beq $e564			beq 	_SIOBackspace
.e51a	c9 0d		cmp #$0d			cmp 	#13 						; CR
.e51c	f0 0e		beq $e52c			beq 	_SIOGoReturn
.e51e	c9 20		cmp #$20			cmp 	#32 						; any control
.e520	90 c7		bcc $e4e9			bcc 	_SIORLoop
.e522	48		pha				pha
.e523	20 a4 e5	jsr $e5a4			jsr 	_SIOInsert 					; insert a space for new character
.e526	68		pla				pla
.e527	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter 			; print character in A
.e52a	80 bd		bra $e4e9			bra 	_SIORLoop
.e52c					_SIOGoReturn:
.e52c	4c cf e5	jmp $e5cf			jmp 	_SIOReturn
.e52f					_SIOCursorLeft:
.e52f	ce a0 20	dec $20a0			dec 	xCursor
.e532	10 b5		bpl $e4e9			bpl 	_SIORLoop
.e534	a9 27		lda #$27			lda 	#EXTWidth-1
.e536					_SIOWXLoop:
.e536	8d a0 20	sta $20a0			sta 	xCursor
.e539	80 ae		bra $e4e9			bra 	_SIORLoop
.e53b					_SIOCursorRight:
.e53b	ee a0 20	inc $20a0			inc 	xCursor
.e53e	ad a0 20	lda $20a0			lda 	xCursor
.e541	49 28		eor #$28			eor 	#EXTWidth
.e543	d0 a4		bne $e4e9			bne 	_SIORLoop
.e545	80 ef		bra $e536			bra 	_SIOWXLoop
.e547					_SIOCursorUp:
.e547	ce a1 20	dec $20a1			dec 	yCursor
.e54a	10 9d		bpl $e4e9			bpl 	_SIORLoop
.e54c	a9 18		lda #$18			lda 	#EXTHeight-1
.e54e					_SIOWYLoop:
.e54e	8d a1 20	sta $20a1			sta 	yCursor
.e551	80 96		bra $e4e9			bra 	_SIORLoop
.e553					_SIOCursorDown:
.e553	ee a1 20	inc $20a1			inc 	yCursor
.e556	ad a1 20	lda $20a1			lda 	yCursor
.e559	49 19		eor #$19			eor 	#EXTHeight
.e55b	d0 8c		bne $e4e9			bne 	_SIORLoop
.e55d	80 ef		bra $e54e			bra 	_SIOWYLoop
.e55f					_SIOClearScreen:
.e55f	20 6e e4	jsr $e46e			jsr 	SIOClearScreen
.e562	80 85		bra $e4e9			bra 	_SIORLoop
.e564					_SIOBackspace:
.e564	ad a0 20	lda $20a0			lda 	xCursor 					; backspace possible ?
.e567	f0 80		beq $e4e9			beq 	_SIORLoop 					; start of line, no.
.e569	48		pha				pha 								; save position.
.e56a	c9 27		cmp #$27			cmp 	#EXTWidth-1 				; not required
.e56c	f0 1c		beq $e58a			beq 	_SIONoShift
.e56e					_SIOShift2:
.e56e	ee a0 20	inc $20a0			inc 	xCursor 					; copy character backward
.e571	20 09 e6	jsr $e609			jsr 	SIOLoadCursor
.e574	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e577	ce a0 20	dec $20a0			dec 	xCursor
.e57a	20 09 e6	jsr $e609			jsr 	SIOLoadCursor
.e57d	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e580	ee a0 20	inc $20a0			inc 	xCursor
.e583	ad a0 20	lda $20a0			lda 	xCursor
.e586	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e588	d0 e4		bne $e56e			bne 	_SIOShift2
.e58a					_SIONoShift:
.e58a	a9 27		lda #$27			lda 	#EXTWidth-1 				; space on far end.
.e58c	20 09 e6	jsr $e609			jsr 	SIOLoadCursor
.e58f	a9 20		lda #$20			lda 	#32
.e591	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e594	68		pla				pla 								; restore cursor, back one.
.e595	3a		dec a				dec 	a
.e596	8d a0 20	sta $20a0			sta 	xCursor
.e599	20 09 e6	jsr $e609			jsr 	SIOLoadCursor 				; overwrite
.e59c	a9 20		lda #$20			lda 	#32
.e59e	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e5a1	4c e9 e4	jmp $e4e9			jmp	 	_SIORLoop
.e5a4					_SIOInsert:
.e5a4	ad a0 20	lda $20a0			lda 	xCursor 					; at far right, nothing to do.
.e5a7	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e5a9	f0 23		beq $e5ce			beq 	_SIOIExit
.e5ab	85 28		sta $28				sta 	zTemp2 						; save in temporary workspace.
.e5ad	a9 27		lda #$27			lda 	#EXTWidth-1 				; cursor at far right.
.e5af	8d a0 20	sta $20a0			sta 	xCursor
.e5b2					_SIOShift:
.e5b2	ce a0 20	dec $20a0			dec 	xCursor 					; copy character forward
.e5b5	20 09 e6	jsr $e609			jsr 	SIOLoadCursor
.e5b8	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e5bb	ee a0 20	inc $20a0			inc 	xCursor
.e5be	20 09 e6	jsr $e609			jsr 	SIOLoadCursor
.e5c1	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e5c4	ce a0 20	dec $20a0			dec 	xCursor
.e5c7	ad a0 20	lda $20a0			lda 	xCursor						; until shifted line to this point.
.e5ca	c5 28		cmp $28				cmp 	zTemp2
.e5cc	d0 e4		bne $e5b2			bne 	_SIOShift
.e5ce					_SIOIExit:
.e5ce	60		rts				rts
.e5cf					_SIOReturn:
.e5cf	a9 00		lda #$00			lda 	#0 							; copy line in from screen.
.e5d1	8d a0 20	sta $20a0			sta 	xCursor
.e5d4					_SIOCopy:
.e5d4	20 09 e6	jsr $e609			jsr 	SIOLoadCursor
.e5d7	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e5da	49 20		eor #$20			eor 	#$20
.e5dc	18		clc				clc
.e5dd	69 20		adc #$20			adc 	#$20
.e5df	ae a0 20	ldx $20a0			ldx 	xCursor
.e5e2	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e5e5	ee a0 20	inc $20a0			inc 	xCursor
.e5e8	ad a0 20	lda $20a0			lda 	xCursor
.e5eb	c9 28		cmp #$28			cmp 	#EXTWidth
.e5ed	d0 e5		bne $e5d4			bne 	_SIOCopy
.e5ef	aa		tax				tax 								; X contains width
.e5f0					_SIOStrip:
.e5f0	ca		dex				dex									; back one
.e5f1	30 07		bmi $e5fa			bmi		_SIOFound 					; if -ve gone too far
.e5f3	bd 6d 20	lda $206d,x			lda 	InputLine,x 				; is there a space here
.e5f6	c9 20		cmp #$20			cmp 	#' '
.e5f8	f0 f6		beq $e5f0			beq 	_SIOStrip
.e5fa					_SIOFound:
.e5fa	e8		inx				inx
.e5fb	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.e5fd	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e600	a9 0d		lda #$0d			lda 	#13 						; print a CR and exit
.e602	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.e605	7a		ply				ply
.e606	fa		plx				plx
.e607	68		pla				pla
.e608	60		rts				rts
.e609					SIOLoadCursor:
.e609	48		pha				pha
.e60a	ad a1 20	lda $20a1			lda 	yCursor  					; Y Position
.e60d	0a		asl a				asl 	a 							; x 2 	(80)
.e60e	0a		asl a				asl 	a 							; x 2 	(160)
.e60f	6d a1 20	adc $20a1			adc 	yCursor 					; x 5 	(200) (CC)
.e612	85 26		sta $26				sta 	zTemp1
.e614	a9 00		lda #$00			lda 	#0
.e616	85 27		sta $27				sta 	zTemp1+1
.e618	06 26		asl $26				asl 	zTemp1						; x 10
.e61a	26 27		rol $27				rol 	zTemp1+1
.e61c	06 26		asl $26				asl 	zTemp1						; x 20
.e61e	26 27		rol $27				rol 	zTemp1+1
.e620	06 26		asl $26				asl 	zTemp1						; x 40
.e622	26 27		rol $27				rol 	zTemp1+1 					; (CC)
.e624	a5 26		lda $26				lda 	zTemp1 						; add X
.e626	6d a0 20	adc $20a0			adc 	xCursor
.e629	aa		tax				tax
.e62a	a5 27		lda $27				lda 	zTemp1+1
.e62c	69 00		adc #$00			adc 	#0
.e62e	a8		tay				tay
.e62f	68		pla				pla 								; restore and exit
.e630	60		rts				rts
.e631					SIOPrintHex:
.e631	48		pha				pha
.e632	48		pha				pha
.e633	a9 20		lda #$20			lda 	#32
.e635	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.e638	68		pla				pla
.e639	48		pha				pha
.e63a	4a		lsr a				lsr 	a
.e63b	4a		lsr a				lsr 	a
.e63c	4a		lsr a				lsr 	a
.e63d	4a		lsr a				lsr 	a
.e63e	20 47 e6	jsr $e647			jsr 	_SIOPHex
.e641	68		pla				pla
.e642	20 47 e6	jsr $e647			jsr 	_SIOPHex
.e645	68		pla				pla
.e646	60		rts				rts
.e647					_SIOPHex:
.e647	29 0f		and #$0f			and 	#15
.e649	c9 0a		cmp #$0a			cmp 	#10
.e64b	90 02		bcc $e64f			bcc 	_SIOPHex2
.e64d	69 06		adc #$06			adc 	#6
.e64f					_SIOPHex2:
.e64f	69 30		adc #$30			adc 	#48
.e651	4c a9 e4	jmp $e4a9			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: general/tokeniser.asm

.e654					TokeniseString:
.e654	a0 00		ldy #$00			ldy 	#0							; source
.e656	a2 00		ldx #$00			ldx 	#0 							; target
.e658					_TokLoop:
.e658	b1 26		lda ($26),y			lda 	(zTemp1),y 					; get first
.e65a	f0 5d		beq $e6b9			beq 	_TokExit 					; End, exit.
.e65c	c9 20		cmp #$20			cmp 	#32 						; if space, copy it
.e65e	f0 35		beq $e695			beq 	_TokCopy1
.e660	c9 22		cmp #$22			cmp 	#'"' 						; if string, copy that in.
.e662	f0 3a		beq $e69e			beq 	_TokCopyString
.e664	c9 30		cmp #$30			cmp 	#"0" 						; punctuation, search for it.
.e666	90 22		bcc $e68a			bcc 	_TokPunctuation
.e668	c9 3a		cmp #$3a			cmp 	#"9"+1 						; digits are just copied over.
.e66a	90 29		bcc $e695			bcc 	_TokCopy1
.e66c	c9 41		cmp #$41			cmp 	#"A"						; more punctuation
.e66e	90 1a		bcc $e68a			bcc 	_TokPunctuation
.e670	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; and more punctuation
.e672	b0 16		bcs $e68a			bcs 	_TokPunctuation
.e674					_TokWord:
.e674	20 bf e6	jsr $e6bf			jsr 	TokeniseSearch 				; search for tokenised word.
.e677	b0 16		bcs $e68f			bcs 	_TokFound 					; if successful, copy it out.
.e679					_TokSkip:
.e679	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy all A-Z as can't start token in mid word.
.e67b	c9 41		cmp #$41			cmp 	#"A"
.e67d	90 d9		bcc $e658			bcc 	_TokLoop
.e67f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.e681	b0 d5		bcs $e658			bcs 	_TokLoop
.e683	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e686	e8		inx				inx
.e687	c8		iny				iny
.e688	80 ef		bra $e679			bra 	_TokSkip
.e68a					_TokPunctuation:
.e68a	20 bf e6	jsr $e6bf			jsr 	TokeniseSearch 				; find it.
.e68d	90 06		bcc $e695			bcc 	_TokCopy1 					; if found, just copy 1 character
.e68f					_TokFound:
.e68f	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; save in tokenise buffer.
.e692	e8		inx				inx 								; advance target ; source is already advanced.
.e693	80 c3		bra $e658			bra 	_TokLoop 					; do the next character.
.e695					_TokCopy1:
.e695	b1 26		lda ($26),y			lda 	(zTemp1),y
.e697	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e69a	e8		inx				inx
.e69b	c8		iny				iny
.e69c	80 ba		bra $e658			bra 	_TokLoop
.e69e					_TokCopyString:
.e69e	a9 81		lda #$81			lda 	#KW_DQUOTE 					; output double quote token
.e6a0	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6a3	e8		inx				inx 								; skip buffer and first quote.
.e6a4	c8		iny				iny
.e6a5					_TokCSLoop:
.e6a5	b1 26		lda ($26),y			lda 	(zTemp1),y 					; get next character
.e6a7	f0 10		beq $e6b9			beq 	_TokExit 					; if EOL, then you have a mismatch, but we exit.
.e6a9	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; write to buffer
.e6ac	e8		inx				inx 								; advance both.
.e6ad	c8		iny				iny
.e6ae	c9 22		cmp #$22			cmp 	#'"'						; keep going till other quote found.
.e6b0	d0 f3		bne $e6a5			bne 	_TokCSLoop
.e6b2	a9 81		lda #$81			lda 	#KW_DQUOTE 					; add the trailing quote token, overwriting the
.e6b4	9d ff 20	sta $20ff,x			sta 	TokeniseBuffer-1,x 			; " character that's just been copied
.e6b7	80 9f		bra $e658			bra 	_TokLoop
.e6b9					_TokExit:
.e6b9	a9 00		lda #$00			lda 	#0 							; mark the end of the tokenise buffer.
.e6bb	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6be	60		rts				rts
.e6bf					TokeniseSearch:
.e6bf	48		pha				pha 								; save AXY
.e6c0	da		phx				phx
.e6c1	5a		phy				phy
.e6c2	a9 80		lda #$80			lda 	#128 						; zTemp2 keeps track of the token #
.e6c4	85 28		sta $28				sta 	zTemp2
.e6c6	a2 00		ldx #$00			ldx 	#0 							; index into TokenText table.
.e6c8	bd 6e e0	lda $e06e,x	_TSNext:lda 	TokenText,x 				; get the first token character
.e6cb	29 7f		and #$7f			and 	#$7F 						; bit 7 marks the end.
.e6cd	d1 26		cmp ($26),y			cmp 	(zTemp1),y 					; do the characters match.
.e6cf	f0 13		beq $e6e4			beq 	_TSTryFullMatch 			; if so, try the full match.
.e6d1					_TSGotoNext:
.e6d1	bd 6e e0	lda $e06e,x			lda 	TokenText,x 				; read it
.e6d4	e8		inx				inx 								; bump index
.e6d5	0a		asl a				asl 	a 							; shift into C
.e6d6	90 f9		bcc $e6d1			bcc 	_TSGotoNext 				; keep going until read the end character
.e6d8	e6 28		inc $28				inc 	zTemp2 						; bump the current token pointer.
.e6da	bd 6e e0	lda $e06e,x			lda 	TokenText,x 				; look at the first character of the next token
.e6dd	d0 e9		bne $e6c8			bne 	_TSNext 					; if non-zero, go to the next.
.e6df					_TSFail:
.e6df	7a		ply				ply 								; fail.
.e6e0	fa		plx				plx
.e6e1	68		pla				pla
.e6e2	18		clc				clc 				 				; return with carry clear.
.e6e3	60		rts				rts
.e6e4					_TSTryFullMatch:
.e6e4	da		phx				phx									; save X and Y.
.e6e5	5a		phy				phy
.e6e6					_TSFullMatch:
.e6e6	bd 6e e0	lda $e06e,x			lda 	TokenText,x 				; compare the 7 bits.
.e6e9	29 7f		and #$7f			and 	#$7F
.e6eb	d1 26		cmp ($26),y			cmp 	(zTemp1),y
.e6ed	d0 15		bne $e704			bne 	_TSFullFail 				; different, this one doesn't match.
.e6ef	bd 6e e0	lda $e06e,x			lda 	TokenText,x
.e6f2	e8		inx				inx 								; advance to next character
.e6f3	c8		iny				iny
.e6f4	0a		asl a				asl 	a 							; bit 7 of token text in C
.e6f5	90 ef		bcc $e6e6			bcc 	_TSFullMatch
.e6f7	84 29		sty $29				sty 	zTemp2+1 					; save the Y after last
.e6f9	68		pla				pla 								; so we don't restore Y
.e6fa	68		pla				pla 								; or X from the full test.
.e6fb	7a		ply				ply 								; restore original Y and X and A
.e6fc	fa		plx				plx
.e6fd	68		pla				pla
.e6fe	a5 28		lda $28				lda 	zTemp2 						; and return token ID in A
.e700	a4 29		ldy $29				ldy 	zTemp2+1 					; Y after the tokenised text.
.e702	38		sec				sec 								; with carry set.
.e703	60		rts				rts
.e704					_TSFullFail:
.e704	7a		ply				ply 								; restore Y and X
.e705	fa		plx				plx
.e706	80 c9		bra $e6d1			bra 	_TSGotoNext 				; and go to the next token to test.
.e708					TokeniseTest:
.e708	a9 14		lda #$14			lda 	#TTString & $FF
.e70a	85 26		sta $26				sta 	zTemp1
.e70c	a9 e7		lda #$e7			lda 	#TTString >> 8
.e70e	85 27		sta $27				sta 	zTemp1+1
.e710	20 54 e6	jsr $e654			jsr 	TokeniseString
.e713	ea		nop				nop
.e714					TTString:
>e714	20 41 42 43 44 20 34 31				.text 	' ABCD 41$"LENA"5LENA',0 			; 4 1 $[T] "LENA" 5 LEN[T] A
>e71c	24 22 4c 45 4e 41 22 35 4c 45 4e 41 00

;******  Return to file: basic.asm


;******  Processing file: binary/arithmetic.asm

.e729					BFUNC_Add:
.e729	18		clc				clc
.e72a	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e72d	7d 04 04	adc $0404,x			adc 	evalStack+4,x
.e730	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e733	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e736	7d 05 04	adc $0405,x			adc 	evalStack+5,x
.e739	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e73c	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e73f	7d 06 04	adc $0406,x			adc 	evalStack+6,x
.e742	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e745	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e748	7d 07 04	adc $0407,x			adc 	evalStack+7,x
.e74b	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e74e	60		rts				rts
.e74f					BFUNC_Subtract:
.e74f	38		sec				sec
.e750	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e753	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e756	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e759	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e75c	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e75f	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e762	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e765	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e768	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e76b	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e76e	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e771	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e774	60		rts				rts
.e775					BFUNC_String:
.e775	20 29 e7	jsr $e729			jsr 	BFUNC_Add
.e778	60		rts				rts
.e779					BFUNC_ByteInd:
.e779	20 29 e7	jsr $e729			jsr 	BFUNC_Add
.e77c	20 96 e3	jsr $e396			jsr 	EVALReadByteIndirect
.e77f	60		rts				rts
.e780					BFUNC_WordInd:
.e780	20 29 e7	jsr $e729			jsr 	BFUNC_Add
.e783	20 bf e3	jsr $e3bf			jsr 	EVALReadWordIndirect
.e786	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/binary.asm

.e787					BFUNC_And:
.e787	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e78a	3d 04 04	and $0404,x			and 	evalStack+4,x
.e78d	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e790	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e793	3d 05 04	and $0405,x			and 	evalStack+5,x
.e796	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e799	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e79c	3d 06 04	and $0406,x			and 	evalStack+6,x
.e79f	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7a2	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7a5	3d 07 04	and $0407,x			and 	evalStack+7,x
.e7a8	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7ab	60		rts				rts
.e7ac					BFUNC_Or:
.e7ac	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e7af	1d 04 04	ora $0404,x			ora 	evalStack+4,x
.e7b2	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e7b5	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7b8	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e7bb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7be	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7c1	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e7c4	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7c7	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7ca	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e7cd	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7d0	60		rts				rts
.e7d1					BFUNC_Xor:
.e7d1	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e7d4	5d 04 04	eor $0404,x			eor 	evalStack+4,x
.e7d7	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e7da	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7dd	5d 05 04	eor $0405,x			eor 	evalStack+5,x
.e7e0	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7e3	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7e6	5d 06 04	eor $0406,x			eor 	evalStack+6,x
.e7e9	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7ec	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7ef	5d 07 04	eor $0407,x			eor 	evalStack+7,x
.e7f2	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7f5	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/multiply.asm

.e7f6					BFUNC_Multiply:
.e7f6	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy +0 to +8
.e7f9	9d 08 04	sta $0408,x			sta 	evalStack+8,x
.e7fc	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7ff	9d 09 04	sta $0409,x			sta 	evalStack+9,x
.e802	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e805	9d 0a 04	sta $040a,x			sta 	evalStack+10,x
.e808	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e80b	9d 0b 04	sta $040b,x			sta 	evalStack+11,x
.e80e	a9 00		lda #$00			lda 	#0
.e810	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; zero +0
.e813	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e816	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e819	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e81c					_BFMMultiply:
.e81c	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; get LSBit of 8-11
.e81f	29 01		and #$01			and 	#1
.e821	f0 03		beq $e826			beq 	_BFMNoAdd
.e823	20 29 e7	jsr $e729			jsr 	BFunc_Add 					; if bit set, add 4 to 0.
.e826					_BFMNoAdd:
.e826	1e 04 04	asl $0404,x			asl 	evalStack+4,x 				; shift +4 left
.e829	3e 05 04	rol $0405,x			rol 	evalStack+5,x
.e82c	3e 06 04	rol $0406,x			rol 	evalStack+6,x
.e82f	3e 07 04	rol $0407,x			rol 	evalStack+7,x
.e832	5e 0b 04	lsr $040b,x			lsr 	evalStack+11,x 				; shift +8 right
.e835	7e 0a 04	ror $040a,x			ror 	evalStack+10,x
.e838	7e 09 04	ror $0409,x			ror 	evalStack+9,x
.e83b	7e 08 04	ror $0408,x			ror 	evalStack+8,x
.e83e	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; continue if +8 is nonzero
.e841	1d 09 04	ora $0409,x			ora 	evalStack+9,x
.e844	1d 0a 04	ora $040a,x			ora 	evalStack+10,x
.e847	1d 0b 04	ora $040b,x			ora 	evalStack+11,x
.e84a	d0 d0		bne $e81c			bne 	_BFMMultiply
.e84c	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/divide.asm

.e84d					BFUNC_Divide:
.e84d	bd 04 04	lda $0404,x			lda 	evalStack+4,x 				; check for /0
.e850	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e853	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e856	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e859	d0 14		bne $e86f			bne 	_BFDOkay
.e85b	20 3c e1	jsr $e13c			jsr 	ReportError
>e85e	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",$00
>e866	20 42 59 20 5a 45 52 4f 00
.e86f					_BFDOkay:
.e86f	a9 00		lda #$00			lda 	#0 							; Temp1 is 'A' (and holds the remainder)
.e871	8d 98 20	sta $2098			sta 	Temp1 						; Q/Dividend/Left in +0
.e874	8d 99 20	sta $2099			sta 	Temp1+1 					; M/Divisor/Right in +4
.e877	8d 9a 20	sta $209a			sta 	Temp1+2
.e87a	8d 9b 20	sta $209b			sta 	Temp1+3
.e87d	8d 9c 20	sta $209c			sta 	SignCount 					; Count of signs.
.e880	20 eb e8	jsr $e8eb			jsr 	BFUNC_Negate 				; negate (and bump sign count)
.e883	da		phx				phx
.e884	e8		inx				inx
.e885	e8		inx				inx
.e886	e8		inx				inx
.e887	e8		inx				inx
.e888	20 eb e8	jsr $e8eb			jsr 	BFUNC_Negate
.e88b	fa		plx				plx
.e88c	5a		phy				phy 								; Y is the counter
.e88d	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.e88f					_BFDLoop:
.e88f	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; shift AQ left.
.e892	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e895	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e898	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e89b	2e 98 20	rol $2098			rol 	Temp1
.e89e	2e 99 20	rol $2099			rol 	Temp1+1
.e8a1	2e 9a 20	rol $209a			rol 	Temp1+2
.e8a4	2e 9b 20	rol $209b			rol 	Temp1+3
.e8a7	38		sec				sec
.e8a8	ad 98 20	lda $2098			lda 	Temp1+0 					; Calculate A-M on stack.
.e8ab	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e8ae	48		pha				pha
.e8af	ad 99 20	lda $2099			lda 	Temp1+1
.e8b2	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e8b5	48		pha				pha
.e8b6	ad 9a 20	lda $209a			lda 	Temp1+2
.e8b9	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e8bc	48		pha				pha
.e8bd	ad 9b 20	lda $209b			lda 	Temp1+3
.e8c0	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e8c3	90 19		bcc $e8de			bcc 	_BFDNoAdd
.e8c5	8d 9b 20	sta $209b			sta 	Temp1+3 					; update A
.e8c8	68		pla				pla
.e8c9	8d 9a 20	sta $209a			sta 	Temp1+2
.e8cc	68		pla				pla
.e8cd	8d 99 20	sta $2099			sta 	Temp1+1
.e8d0	68		pla				pla
.e8d1	8d 98 20	sta $2098			sta 	Temp1+0
.e8d4	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; set Q bit 1.
.e8d7	09 01		ora #$01			ora 	#1
.e8d9	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8dc	80 03		bra $e8e1			bra 	_BFDNext
.e8de					_BFDNoAdd:
.e8de	68		pla				pla 								; Throw away the intermediate calculations
.e8df	68		pla				pla
.e8e0	68		pla				pla
.e8e1					_BFDNext:
.e8e1	88		dey				dey
.e8e2	d0 ab		bne $e88f			bne 	_BFDLoop
.e8e4	7a		ply				ply 								; restore Y and exit
.e8e5	4e 9c 20	lsr $209c			lsr 	SignCount 					; if sign count odd,
.e8e8	b0 06		bcs $e8f0			bcs		BFUNC_NegateAlways 			; negate the result
.e8ea	60		rts				rts
.e8eb					BFUNC_Negate:
.e8eb	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e8ee	10 24		bpl $e914			bpl 	BFNExit
.e8f0					BFUNC_NegateAlways:
.e8f0	38		sec				sec
.e8f1	a9 00		lda #$00			lda 	#0
.e8f3	fd 00 04	sbc $0400,x			sbc 	evalStack+0,x
.e8f6	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8f9	a9 00		lda #$00			lda 	#0
.e8fb	fd 01 04	sbc $0401,x			sbc 	evalStack+1,x
.e8fe	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e901	a9 00		lda #$00			lda 	#0
.e903	fd 02 04	sbc $0402,x			sbc 	evalStack+2,x
.e906	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e909	a9 00		lda #$00			lda 	#0
.e90b	fd 03 04	sbc $0403,x			sbc 	evalStack+3,x
.e90e	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e911	ee 9c 20	inc $209c			inc 	SignCount
.e914					BFNExit:
.e914	60		rts				rts
.e915					BFUNC_Modulus:
.e915	20 4d e8	jsr $e84d			jsr 	BFUNC_Divide 				; start with division.
.e918	ad 98 20	lda $2098			lda 	Temp1+0 					; copy remainder
.e91b	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e91e	ad 99 20	lda $2099			lda 	Temp1+1
.e921	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e924	ad 9a 20	lda $209a			lda 	Temp1+2
.e927	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e92a	ad 9b 20	lda $209b			lda 	Temp1+3
.e92d	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e930	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/compare.asm

.e931					BFUNC_Equals:
.e931	18		clc				clc
.e932	80 01		bra $e935			bra 	BFUNC_EqualCheck
.e934					BFUNC_NotEquals:
.e934	38		sec				sec
.e935					BFUNC_EqualCheck:
.e935	08		php				php									; save invert flag
.e936	ad 00 04	lda $0400			lda 	evalStack+0 				; check equality
.e939	cd 04 04	cmp $0404			cmp 	evalStack+4
.e93c	d0 1c		bne $e95a			bne 	COMP_Fail
.e93e	ad 01 04	lda $0401			lda 	evalStack+1
.e941	cd 05 04	cmp $0405			cmp 	evalStack+5
.e944	d0 14		bne $e95a			bne 	COMP_Fail
.e946	ad 02 04	lda $0402			lda 	evalStack+2
.e949	cd 06 04	cmp $0406			cmp 	evalStack+6
.e94c	d0 0c		bne $e95a			bne 	COMP_Fail
.e94e	ad 03 04	lda $0403			lda 	evalStack+3
.e951	cd 07 04	cmp $0407			cmp 	evalStack+7
.e954	d0 04		bne $e95a			bne 	COMP_Fail
.e956					COMP_Succeed:
.e956	a9 ff		lda #$ff			lda 	#$FF
.e958	80 02		bra $e95c			bra 	COMP_SetResult
.e95a					COMP_Fail:
.e95a	a9 00		lda #$00			lda 	#0 							; here return 0
.e95c					COMP_SetResult:
.e95c	28		plp				plp 								; but if CS
.e95d	90 02		bcc $e961			bcc 	COMP_Accept
.e95f	49 ff		eor #$ff			eor 	#$FF 						; invert that
.e961					COMP_Accept:
.e961	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; write to result.
.e964	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e967	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e96a	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e96d	60		rts				rts
.e96e					BFUNC_Less:
.e96e	18		clc				clc
.e96f	80 01		bra $e972			bra 	BFUNC_LessCheck
.e971					BFUNC_GreaterEqual:
.e971	38		sec				sec
.e972					BFUNC_LessCheck:
.e972	08		php				php
.e973	38		sec				sec
.e974	ad 00 04	lda $0400			lda 	evalStack+0 				; compare using direct subtraction
.e977	ed 04 04	sbc $0404			sbc 	evalStack+4
.e97a	ad 01 04	lda $0401			lda 	evalStack+1
.e97d	ed 05 04	sbc $0405			sbc 	evalStack+5
.e980	ad 02 04	lda $0402			lda 	evalStack+2
.e983	ed 06 04	sbc $0406			sbc 	evalStack+6
.e986	ad 03 04	lda $0403			lda 	evalStack+3
.e989	ed 07 04	sbc $0407			sbc 	evalStack+7
.e98c	30 c8		bmi $e956			bmi 	COMP_Succeed
.e98e	80 ca		bra $e95a			bra 	COMP_Fail
.e990					BFUNC_Greater:
.e990	18		clc				clc
.e991	80 01		bra $e994			bra 	BFUNC_GreaterCheck
.e993					BFUNC_LessEqual:
.e993	38		sec				sec
.e994					BFUNC_GreaterCheck:
.e994	08		php				php
.e995	38		sec				sec
.e996	ad 04 04	lda $0404			lda 	evalStack+4 				; compare using direct subtraction
.e999	ed 00 04	sbc $0400			sbc 	evalStack+0
.e99c	ad 05 04	lda $0405			lda 	evalStack+5
.e99f	ed 01 04	sbc $0401			sbc 	evalStack+1
.e9a2	ad 06 04	lda $0406			lda 	evalStack+6
.e9a5	ed 02 04	sbc $0402			sbc 	evalStack+2
.e9a8	ad 07 04	lda $0407			lda 	evalStack+7
.e9ab	ed 03 04	sbc $0403			sbc 	evalStack+3
.e9ae	30 a6		bmi $e956			bmi 	COMP_Succeed
.e9b0	80 a8		bra $e95a			bra 	COMP_Fail

;******  Return to file: basic.asm


;******  Processing file: binary/scompare.asm

.e9b2					BFUNC_StringCompare:
.e9b2	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get address into temporaries.
.e9b5	85 26		sta $26				sta 	zTemp1
.e9b7	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e9ba	85 27		sta $27				sta 	zTemp1+1
.e9bc	bd 04 04	lda $0404,x			lda 	evalStack+4,x
.e9bf	85 28		sta $28				sta 	zTemp2
.e9c1	bd 05 04	lda $0405,x			lda 	evalStack+5,x
.e9c4	85 29		sta $29				sta 	zTemp2+1
.e9c6	5a		phy				phy
.e9c7	a0 00		ldy #$00			ldy 	#0
.e9c9					_BFSCLoop:
.e9c9	b1 26		lda ($26),y			lda 	(zTemp1),y 					; comparison
.e9cb	38		sec				sec
.e9cc	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.e9ce	d0 15		bne $e9e5			bne		_BFSCDifferent 				; return different result.
.e9d0	c8		iny				iny
.e9d1	c9 00		cmp #$00			cmp 	#0							; until both EOS.
.e9d3	d0 f4		bne $e9c9			bne 	_BFSCLoop
.e9d5	7a		ply				ply
.e9d6	a9 00		lda #$00			lda 	#0
.e9d8					_BFSCSetAll:
.e9d8	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e9db	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e9de	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e9e1	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e9e4	60		rts				rts
.e9e5					_BFSCDifferent:
.e9e5	7a		ply				ply
.e9e6	a9 ff		lda #$ff			lda 	#255 						; if CC set all as <
.e9e8	90 ee		bcc $e9d8			bcc 	_BFSCSetAll
.e9ea	a9 00		lda #$00			lda 	#0 							; set all zero
.e9ec	20 d8 e9	jsr $e9d8			jsr 	_BFSCSetAll
.e9ef	fe 00 04	inc $0400,x			inc 	evalStack+0,x 				; and make it one.
.e9f2	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: unary/unary.asm

.e9f3					UNARY_Len:
.e9f3	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e9f6	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.e9f9	85 26		sta $26				sta 	zTemp1
.e9fb	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e9fe	85 27		sta $27				sta 	zTemp1+1
.ea00	5a		phy				phy
.ea01	a0 00		ldy #$00			ldy 	#0 							; now figure out its length.
.ea03					_ULGetLength:
.ea03	b1 26		lda ($26),y			lda 	(zTemp1),y 					; read character
.ea05	f0 1d		beq $ea24			beq 	_ULFoundEOL 				; found end of line.
.ea07	c8		iny				iny
.ea08	d0 f9		bne $ea03			bne 	_ULGetLength 				; scan 256 only.
.ea0a	20 3c e1	jsr $e13c			jsr 	ReportError
>ea0d	43 41 4e 4e 4f 54 20 46				.text 	"CANNOT FIND STRING END",$00
>ea15	49 4e 44 20 53 54 52 49 4e 47 20 45 4e 44 00
.ea24					_ULFoundEOL:
.ea24	98		tya				tya 								; length in A, restore Y
.ea25	7a		ply				ply
.ea26					UNARY_ReturnByte:
.ea26	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea29	a9 00		lda #$00			lda 	#0 							; clear the rests
.ea2b	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea2e	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea31	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea34	60		rts				rts
.ea35					UNARY_Ch:
.ea35	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ea38	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.ea3b	85 26		sta $26				sta 	zTemp1
.ea3d	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ea40	85 27		sta $27				sta 	zTemp1+1
.ea42	5a		phy				phy
.ea43	a0 00		ldy #$00			ldy 	#0 							; now get first character
.ea45	b1 26		lda ($26),y			lda 	(zTemp1),y
.ea47	7a		ply				ply
.ea48	80 dc		bra $ea26			bra 	UNARY_ReturnByte 			; return that byte.
.ea4a					UNARY_Abs:
.ea4a	ea		nop				nop
.ea4b	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ea4e	20 eb e8	jsr $e8eb			jsr 	BFUNC_Negate 				; there's an ABS routine in divide
.ea51	60		rts				rts
.ea52					UNARY_Top:
.ea52	ad 96 20	lda $2096			lda 	highMemory
.ea55	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea58	ad 97 20	lda $2097			lda 	highMemory+1
.ea5b	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea5e	a9 00		lda #$00			lda 	#0
.ea60	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea63	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea66	60		rts				rts
.ea67					UNARY_Page:
.ea67	a9 00		lda #$00			lda 	#BasicProgram & $FF
.ea69	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea6c	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ea6e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea71	a9 00		lda #$00			lda 	#0
.ea73	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea76	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea79	60		rts				rts
.ea7a					UNARY_Rnd:
.ea7a	20 85 ea	jsr $ea85			jsr 	Random16 					; call 16 bit RNG twice
.ea7d	e8		inx				inx
.ea7e	e8		inx				inx
.ea7f	20 85 ea	jsr $ea85			jsr 	Random16
.ea82	ca		dex				dex
.ea83	ca		dex				dex
.ea84	60		rts				rts
.ea85					Random16:
.ea85	ad 9e 20	lda $209e			lda 	RandomSeed 					; initialise if nonzero
.ea88	0d 9f 20	ora $209f			ora 	RandomSeed+1
.ea8b	d0 0d		bne $ea9a			bne 	_R16_NoInit
.ea8d	ee 9e 20	inc $209e			inc 	RandomSeed 					; by setting low to 1
.ea90	5a		phy				phy
.ea91	a0 14		ldy #$14			ldy 	#20 						; call it 20 times to get it started
.ea93					_R16_Setup:
.ea93	20 85 ea	jsr $ea85			jsr 	Random16
.ea96	88		dey				dey
.ea97	d0 fa		bne $ea93			bne 	_R16_Setup
.ea99	7a		ply				ply
.ea9a					_R16_NoInit:
.ea9a	4e 9f 20	lsr $209f			lsr 	RandomSeed+1				; shift seed right
.ea9d	6e 9e 20	ror $209e			ror 	RandomSeed
.eaa0	90 08		bcc $eaaa			bcc 	_R16_NoXor
.eaa2	ad 9f 20	lda $209f			lda 	RandomSeed+1				; xor MSB with $B4 if bit set.
.eaa5	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.eaa7	8d 9f 20	sta $209f			sta 	RandomSeed+1
.eaaa					_R16_NoXor:
.eaaa	ad 9e 20	lda $209e			lda 	RandomSeed					; copy result to evaluate stack.
.eaad	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.eab0	ad 9f 20	lda $209f			lda 	RandomSeed+1
.eab3	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eab6	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/execute.asm

.eab7					COMMAND_Run:
.eab7	20 7a eb	jsr $eb7a			jsr 	COMMAND_Clear 				; clear everything for a new run.
.eaba	a2 00		ldx #$00			ldx 	#BasicProgram & 255 		; start from here
.eabc	a0 23		ldy #$23			ldy 	#BasicProgram >> 8
.eabe	86 20		stx $20				stx 	zCurrentLine 				; set current line.
.eac0	84 21		sty $21				sty 	zCurrentLine+1
.eac2					CRUNNewLine:
.eac2	a0 00		ldy #$00			ldy 	#0 							; look at the offset, end of program
.eac4	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.eac6	f0 60		beq $eb28			beq 	COMMAND_End 				; if zero, off end of program so stop.
.eac8	a0 03		ldy #$03			ldy 	#3 							; offset to first token.
.eaca					CRUNNextInstruction:
.eaca	a9 00		lda #$00			lda 	#0 							; reset the string buffer position
.eacc	8d 9d 20	sta $209d			sta 	StringBufferPos
.eacf	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token
.ead1	f0 0b		beq $eade			beq 	CRUNNextLine 				; if zero, then end of line.
.ead3					CRUNNotEndOfLine:
.ead3	c9 20		cmp #$20			cmp 	#' '
.ead5	f0 04		beq $eadb			beq 	CRUNSkipLoop
.ead7	c9 8d		cmp #$8d			cmp 	#KW_Colon 					; check for a colon first.
.ead9	d0 1b		bne $eaf6			bne 	CRUNExecuteOne 				; if not that, execute the token.
.eadb					CRUNSkipLoop:
.eadb	c8		iny				iny		 							; if colon, skip it and loop round.
.eadc	80 ec		bra $eaca			bra 	CRUNNextInstruction
.eade					CRUNNextLine:
.eade	a5 21		lda $21				lda 	zCurrentLine+1 				; running from input
.eae0	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.eae2	f0 0f		beq $eaf3			beq		CRUNWarmStart
.eae4	a0 00		ldy #$00			ldy 	#0 							; add offset from line to line pointer
.eae6	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.eae8	18		clc				clc
.eae9	65 20		adc $20				adc 	zCurrentLine
.eaeb	85 20		sta $20				sta 	zCurrentLine
.eaed	90 d3		bcc $eac2			bcc 	CRUNNewLine
.eaef	e6 21		inc $21				inc 	zCurrentLine+1
.eaf1	80 cf		bra $eac2			bra 	CRUNNewLine
.eaf3					CRUNWarmStart:
.eaf3	4c ac ee	jmp $eeac			jmp 	WarmStart
.eaf6					CRUNExecuteOne:
.eaf6	09 00		ora #$00			ora 	#0 							; if it is a character might be a variable.
.eaf8	10 21		bpl $eb1b			bpl		_CRUNX1TryLet
.eafa	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; likewise if ! something ? something $ something
.eafc	f0 1d		beq $eb1b			beq 	_CRUNX1TryLet
.eafe	c9 80		cmp #$80			cmp 	#KW_PLING
.eb00	f0 19		beq $eb1b			beq 	_CRUNX1TryLet
.eb02	c9 95		cmp #$95			cmp 	#KW_QUESTION
.eb04	f0 15		beq $eb1b			beq 	_CRUNX1TryLet
.eb06	c8		iny				iny 								; skip over loaded token
.eb07	0a		asl a				asl 	a 							; double lower keyword byte, clears bit 7.
.eb08	8d 99 20	sta $2099			sta 	Temp1+1 					; this is the low byte into the KVT
.eb0b	8a		txa				txa
.eb0c	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.eb0e	8d 9a 20	sta $209a			sta 	Temp1+2
.eb11	a9 6c		lda #$6c			lda 	#$6C 						; make it jump indirect
.eb13	8d 98 20	sta $2098			sta 	Temp1+0
.eb16	20 98 20	jsr $2098			jsr 	Temp1 						; call instruction
.eb19	80 af		bra $eaca			bra 	CRUNNextInstruction 		; do next instruction.
.eb1b					_CRUNX1TryLet:
.eb1b	20 ea eb	jsr $ebea			jsr 	COMMAND_Let 				; try doing a LET if not a keyword.
.eb1e	80 aa		bra $eaca			bra 	CRUNNextInstruction
.eb20					COMMAND_Stop:
.eb20	20 3c e1	jsr $e13c			jsr 	ReportError
>eb23	53 54 4f 50 00					.text 	"STOP",$00
.eb28					COMMAND_End:
.eb28	ad 4d 23	lda $234d			lda 	StartBehaviour 				; running program
.eb2b	c9 52		cmp #$52			cmp 	#"R"
.eb2d	d0 01		bne $eb30			bne 	_CEWarmStart
>eb2f	02						.byte 	2
.eb30					_CEWarmStart:
.eb30	4c ac ee	jmp $eeac			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: commands/miscellany.asm

.eb33					COMMAND_Assert:
.eb33	20 dc e1	jsr $e1dc			jsr 	EvaluateBase 				; evaluate the expression
.eb36	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check non zero
.eb39	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.eb3c	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eb3f	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eb42	d0 12		bne $eb56			bne 	_CMDAExit
.eb44	ea		nop				nop
.eb45	20 3c e1	jsr $e13c			jsr 	ReportError
>eb48	41 53 53 45 52 54 20 46				.text 	"ASSERT FAILED",$00
>eb50	41 49 4c 45 44 00
.eb56					_CMDAExit:
.eb56	60		rts				rts
.eb57					COMMAND_Rem:
.eb57	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character token.
.eb59	f0 05		beq $eb60			beq 	_CREMExit 					; End of line, then exit.
.eb5b	c8		iny				iny 								; something to skip
.eb5c	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; if not a colon
.eb5e	d0 f7		bne $eb57			bne 	COMMAND_Rem 				; keep searching
.eb60					_CREMExit:
.eb60	60		rts				rts
.eb61					COMMAND_NewExec:
.eb61	20 67 eb	jsr $eb67			jsr 	COMMAND_NewCode
.eb64	4c ac ee	jmp $eeac			jmp 	WarmStart
.eb67					COMMAND_NewCode:
.eb67	a9 00		lda #$00			lda 	#0 							; erase the actual program.
.eb69	8d 00 23	sta $2300			sta 	BasicProgram 				; by zeroing the initial offset.
.eb6c	20 7a eb	jsr $eb7a			jsr 	COMMAND_Clear 				; clear non fixed variable, reset stack and low mem pointer
.eb6f	a9 00		lda #$00			lda 	#endMemory & $FF 			; reset high memory pointer.
.eb71	8d 96 20	sta $2096			sta 	HighMemory
.eb74	a9 80		lda #$80			lda 	#endMemory >> 8
.eb76	8d 97 20	sta $2097			sta 	HighMemory+1
.eb79	60		rts				rts
.eb7a					COMMAND_Clear:
.eb7a	a2 00		ldx #$00			ldx 	#0	 						; clear variables @A-Z
.eb7c					_CCClearVar:
.eb7c	a9 00		lda #$00			lda 	#$00
.eb7e	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.eb81	e8		inx				inx
.eb82	e0 6c		cpx #$6c			cpx 	#27*4
.eb84	10 f6		bpl $eb7c			bpl 	_CCClearVar
.eb86	a9 00		lda #$00			lda 	#basicStack & $FF 			; reset BASIC stack
.eb88	85 22		sta $22				sta 	zBasicStack
.eb8a	a9 02		lda #$02			lda 	#basicStack >> 8
.eb8c	85 23		sta $23				sta 	zBasicStack+1
.eb8e	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; now find where the program ends.
.eb90	85 24		sta $24				sta 	zLowMemory
.eb92	a9 23		lda #$23			lda 	#BasicProgram >> 8
.eb94	85 25		sta $25				sta 	zLowMemory+1
.eb96					_CCFindEnd:
.eb96	a0 00		ldy #$00			ldy 	#0 							; look at next offset
.eb98	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; if zero, reached the end.
.eb9a	f0 0b		beq $eba7			beq 	_CCFoundEnd
.eb9c	18		clc				clc 								; go to next line.
.eb9d	65 24		adc $24				adc 	zLowMemory
.eb9f	85 24		sta $24				sta 	zLowMemory
.eba1	90 f3		bcc $eb96			bcc 	_CCFindEnd
.eba3	e6 25		inc $25				inc 	zLowMemory+1
.eba5	80 ef		bra $eb96			bra 	_CCFindEnd
.eba7					_CCFoundEnd:
.eba7	e6 24		inc $24				inc 	zLowMemory 					; variables etc. start after end of program.
.eba9	d0 02		bne $ebad			bne 	_CCNoCarry 					; skip over zero end offset.
.ebab	e6 25		inc $25				inc 	zLowMemory+1
.ebad					_CCNoCarry:
.ebad	60		rts				rts
.ebae					COMMAND_OldExec:
.ebae	20 b4 eb	jsr $ebb4			jsr 	COMMAND_OldCode
.ebb1	4c ac ee	jmp $eeac			jmp 	WarmStart
.ebb4					COMMAND_OldCode:
.ebb4	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; point zLowMemory to the first line.
.ebb6	85 24		sta $24				sta 	zLowMemory
.ebb8	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ebba	85 25		sta $25				sta 	zLowMemory+1
.ebbc	a0 03		ldy #$03			ldy 	#3 							; look for the $00 end of line marker.
.ebbe					_COScan:
.ebbe	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; look at next byte pair
.ebc0	c8		iny				iny
.ebc1	f0 0d		beq $ebd0			beq 	_COFail 					; can't find marker, corrupted maybe ?
.ebc3	c9 00		cmp #$00			cmp 	#0 							; until $00 found.
.ebc5	d0 f7		bne $ebbe			bne 	_COScan
.ebc7	98		tya				tya 								; Y is the new offset to the next instruction
.ebc8	a0 00		ldy #$00			ldy 	#0 							; overwrite the old one
.ebca	91 24		sta ($24),y			sta 	(zLowMemory),y
.ebcc	20 7a eb	jsr $eb7a			jsr 	COMMAND_Clear 				; reset variables, stacks and pointers.
.ebcf	60		rts				rts
.ebd0					_COFail:
.ebd0	20 3c e1	jsr $e13c			jsr 	ReportError
>ebd3	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER PROGRAM",$00
>ebdb	45 43 4f 56 45 52 20 50 52 4f 47 52 41 4d 00

;******  Return to file: basic.asm


;******  Processing file: commands/let.asm

.ebea					COMMAND_Let:
.ebea	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get first token not space
.ebec	f0 58		beq $ec46			beq 	_CLESyntax
.ebee	c8		iny				iny
.ebef	c9 20		cmp #$20			cmp 	#32
.ebf1	f0 f7		beq $ebea			beq 	COMMAND_Let
.ebf3	88		dey				dey
.ebf4	c9 95		cmp #$95			cmp 	#KW_QUESTION				; check for first being indirect.
.ebf6	f0 51		beq $ec49			beq 	_CLEIndirect 				; e.g. !x = 42
.ebf8	c9 80		cmp #$80			cmp 	#KW_PLING
.ebfa	f0 4d		beq $ec49			beq 	_CLEIndirect
.ebfc	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ebfe	f0 49		beq $ec49			beq 	_CLEIndirect
.ec00	a2 00		ldx #$00			ldx 	#0 							; clear evaluation stack.
.ec02	20 ef e3	jsr $e3ef			jsr 	VARReference 				; get a variable reference.
.ec05	a5 26		lda $26				lda 	zTemp1 						; copy into target addr
.ec07	85 2a		sta $2a				sta 	zTargetAddr
.ec09	a5 27		lda $27				lda 	zTemp1+1
.ec0b	85 2b		sta $2b				sta 	zTargetAddr+1
.ec0d	a5 28		lda $28				lda 	zTemp1+2
.ec0f	85 2c		sta $2c				sta 	zTargetAddr+2
.ec11	a5 29		lda $29				lda 	zTemp1+3
.ec13	85 2d		sta $2d				sta 	zTargetAddr+3
.ec15					_CLEGetBinLHSOp:
.ec15	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ec17	f0 2d		beq $ec46			beq 	_CLESyntax
.ec19	c8		iny				iny
.ec1a	c9 20		cmp #$20			cmp 	#' '
.ec1c	f0 f7		beq $ec15			beq 	_CLEGetBinLHSOp
.ec1e	88		dey				dey
.ec1f	c9 95		cmp #$95			cmp 	#KW_QUESTION 				; got some sort of reference, check
.ec21	f0 45		beq $ec68			beq 	_CLEBinaryLHTerm  			; if that's a basis for indirection ?
.ec23	c9 80		cmp #$80			cmp 	#KW_PLING
.ec25	f0 41		beq $ec68			beq 	_CLEBinaryLHTerm
.ec27	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ec29	f0 3d		beq $ec68			beq 	_CLEBinaryLHTerm
.ec2b	a9 80		lda #$80			lda 	#KW_PLING 					; we want to do a 32 bit write.
.ec2d					_CLEWriteToAddress:
.ec2d	48		pha				pha 								; save write-type.
.ec2e	a9 92		lda #$92			lda 	#KW_EQUAL 					; check for '=' sign.
.ec30	20 80 e1	jsr $e180			jsr 	CheckNextCharacter
.ec33	20 dc e1	jsr $e1dc			jsr 	EvaluateBase 				; evaluate the RHS.
.ec36	68		pla				pla
.ec37	c9 80		cmp #$80			cmp 	#KW_PLING
.ec39	f0 6e		beq $eca9			beq 	_CLEWordWrite
.ec3b	c9 95		cmp #$95			cmp 	#KW_QUESTION
.ec3d	f0 60		beq $ec9f			beq 	_CLEByteWrite
.ec3f	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ec41					_ErrorInternal:
.ec41	d0 fe		bne $ec41			bne 	_ErrorInternal
.ec43	4c c5 ec	jmp $ecc5			jmp 	_CLEStringWrite
.ec46					_CLESyntax:
.ec46	4c 2c e1	jmp $e12c			jmp 	SyntaxError
.ec49					_CLEIndirect:
.ec49	48		pha				pha 								; save operator on stack
.ec4a	c8		iny				iny									; advance over cursor
.ec4b	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ec4d	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel
.ec50	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy that as the address.
.ec53	85 2a		sta $2a				sta 	zTargetAddr+0
.ec55	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ec58	85 2b		sta $2b				sta 	zTargetAddr+1
.ec5a	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ec5d	85 2c		sta $2c				sta 	zTargetAddr+2
.ec5f	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ec62	85 2d		sta $2d				sta 	zTargetAddr+3
.ec64	68		pla				pla 								; restore operator.
.ec65	4c 2d ec	jmp $ec2d			jmp 	_CLEWriteToAddress
.ec68					_CLEBinaryLHTerm:
.ec68	48		pha				pha 								; save operator on stack
.ec69	c8		iny				iny 								; skip over it.
.ec6a	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ec6c	20 d8 e1	jsr $e1d8			jsr 	EvaluateAtomCurrentLevel
.ec6f	a5 2a		lda $2a				lda 	zTargetAddr 				; copy zTargetAddr to zTemp1. Technically
.ec71	85 26		sta $26				sta 	zTemp1 						; a four byte address.....
.ec73	a5 2b		lda $2b				lda 	zTargetAddr+1
.ec75	85 27		sta $27				sta 	zTemp1+1 					; we only worry about 4 byte value
.ec77	5a		phy				phy 								; save Y
.ec78	18		clc				clc 								; add variable evaluated to (zTargetAddr)
.ec79	a0 00		ldy #$00			ldy 	#0
.ec7b	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec7d	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.ec80	85 2a		sta $2a				sta 	zTargetAddr+0
.ec82	c8		iny				iny
.ec83	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec85	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.ec88	85 2b		sta $2b				sta 	zTargetAddr+1
.ec8a	c8		iny				iny
.ec8b	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec8d	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.ec90	85 2c		sta $2c				sta 	zTargetAddr+2
.ec92	c8		iny				iny
.ec93	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec95	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.ec98	85 2d		sta $2d				sta 	zTargetAddr+3
.ec9a	7a		ply				ply 								; restore Y
.ec9b	68		pla				pla 								; restore the operator.
.ec9c	4c 2d ec	jmp $ec2d			jmp 	_CLEWriteToAddress
.ec9f					_CLEByteWrite:
.ec9f	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get the byte to write.
.eca2	5a		phy				phy 								; write the byte preserving Y
.eca3	a0 00		ldy #$00			ldy 	#0
.eca5	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.eca7	7a		ply				ply
.eca8	60		rts				rts
.eca9					_CLEWordWrite:
.eca9	5a		phy				phy
.ecaa	a0 00		ldy #$00			ldy 	#0
.ecac	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ecaf	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ecb1	c8		iny				iny
.ecb2	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ecb5	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ecb7	c8		iny				iny
.ecb8	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ecbb	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ecbd	c8		iny				iny
.ecbe	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ecc1	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ecc3	7a		ply				ply 								; restore Y
.ecc4	60		rts				rts
.ecc5					_CLEStringWrite:
.ecc5	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; source string -> zTemp1
.ecc8	85 26		sta $26				sta 	zTemp1
.ecca	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eccd	85 27		sta $27				sta 	zTemp1+1
.eccf	5a		phy				phy
.ecd0	a0 00		ldy #$00			ldy 	#0
.ecd2					_CLEStringCopy:
.ecd2	b1 26		lda ($26),y			lda 	(zTemp1),y
.ecd4	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ecd6	c9 00		cmp #$00			cmp 	#0
.ecd8	f0 16		beq $ecf0			beq	 	_CLEStringWritten
.ecda	c8		iny				iny
.ecdb	d0 f5		bne $ecd2			bne 	_CLEStringCopy
.ecdd	20 3c e1	jsr $e13c			jsr 	ReportError
>ece0	42 41 44 20 53 54 52 49				.text 	"BAD STRING COPY",$00
>ece8	4e 47 20 43 4f 50 59 00
.ecf0					_CLEStringWritten:
.ecf0	7a		ply				ply
.ecf1	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/print.asm

.ecf2					COMMAND_Print:
.ecf2	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; look at next character
.ecf4	f0 15		beq $ed0b			beq 	_CPRExitNL 					; zero end of line.
.ecf6	c8		iny				iny
.ecf7	c9 20		cmp #$20			cmp 	#' '
.ecf9	f0 f7		beq $ecf2			beq 	COMMAND_Print
.ecfb	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; colon, end of line
.ecfd	f0 0c		beq $ed0b			beq 	_CPRExitNL
.ecff	c9 8e		cmp #$8e			cmp 	#KW_SEMICOLON 				; semicolon ?
.ed01	d0 0e		bne $ed11			bne 	_CPRNotSemicolon
.ed03	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look at next character, is ; last thing
.ed05	f0 09		beq $ed10			beq 	_CPRExit
.ed07	c9 8d		cmp #$8d			cmp 	#KW_COLON
.ed09	d0 e7		bne $ecf2			bne 	COMMAND_Print 				; if not, just go back round again
.ed0b					_CPRExitNL:
.ed0b	a9 0d		lda #$0d			lda 	#13
.ed0d	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.ed10					_CPRExit:
.ed10	60		rts				rts
.ed11					_CPRNotSemicolon:
.ed11	c9 86		cmp #$86			cmp 	#KW_SQUOTE 					; single quote
.ed13	f0 2b		beq $ed40			beq 	_CPRNewLine 				; new line
.ed15	c9 81		cmp #$81			cmp 	#KW_DQUOTE 					; double quote
.ed17	d0 2e		bne $ed47			bne 	_CPRNotQuote
.ed19					_CPRPrintText:
.ed19	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next character
.ed1b	f0 0a		beq $ed27			beq 	_CPRError 					; if zero no closing quote
.ed1d	c8		iny				iny
.ed1e	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; double quote
.ed20	f0 d0		beq $ecf2			beq 	COMMAND_Print 				; go round again.
.ed22	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter 			; print and do next character
.ed25	80 f2		bra $ed19			bra 	_CPRPrintText
.ed27					_CPRError:
.ed27	20 3c e1	jsr $e13c			jsr 	ReportError
>ed2a	4d 49 53 53 49 4e 47 20				.text 	"MISSING CLOSING QUOTE",$00
>ed32	43 4c 4f 53 49 4e 47 20 51 55 4f 54 45 00
.ed40					_CPRNewLine:
.ed40	a9 0d		lda #$0d			lda 	#13
.ed42	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.ed45	80 ab		bra $ecf2			bra 	COMMAND_Print
.ed47					_CPRNotQuote:
.ed47	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; not a string ?
.ed49	d0 11		bne $ed5c			bne 	_CPRNumber 					; print a number.
.ed4b	20 dc e1	jsr $e1dc			jsr 	EvaluateBase 				; this is the address to print.
.ed4e	5a		phy				phy
.ed4f	bc 01 04	ldy $0401,x			ldy 	evalStack+1,x 				; get the address
.ed52	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ed55	aa		tax				tax
.ed56	20 7c e4	jsr $e47c			jsr 	SIOPrintString
.ed59	7a		ply				ply
.ed5a	80 96		bra $ecf2			bra 	COMMAND_Print
.ed5c					_CPRNumber:
.ed5c	c9 85		cmp #$85			cmp 	#KW_AMPERSAND
.ed5e	f0 17		beq $ed77			beq 	_CPRHexadecimal
.ed60	88		dey				dey 								; must be 1st char of expr
.ed61	20 dc e1	jsr $e1dc			jsr 	EvaluateBase 				; this is the value to print.
.ed64	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; is it -ve
.ed67	10 08		bpl $ed71			bpl 	_CPRIsPositive
.ed69	20 f0 e8	jsr $e8f0			jsr 	BFUNC_NegateAlways 			; negate it
.ed6c	a9 2d		lda #$2d			lda 	#"-" 						; print - it.
.ed6e	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.ed71					_CPRIsPositive:
.ed71	20 b4 ed	jsr $edb4			jsr 	CPRPrintInteger 			; Print string at current eval stack, base 10.
.ed74	4c f2 ec	jmp $ecf2			jmp 	COMMAND_Print
.ed77					_CPRHexadecimal:
.ed77	20 dc e1	jsr $e1dc			jsr 	EvaluateBase 				; this is the value to print.
.ed7a	20 80 ed	jsr $ed80			jsr 	_CPRPrintRecHex 			; hex version of it.
.ed7d	4c f2 ec	jmp $ecf2			jmp 	COMMAND_Print
.ed80					_CPRPrintRecHex:
.ed80	ad 00 04	lda $0400			lda 	evalStack+0 				; get the remainder
.ed83	29 0f		and #$0f			and 	#15 						; and put on stack
.ed85	48		pha				pha
.ed86	a2 04		ldx #$04			ldx 	#4 							; divide by 16
.ed88					_CPRShiftDiv:
.ed88	4e 03 04	lsr $0403			lsr 	evalStack+3
.ed8b	6e 02 04	ror $0402			ror 	evalStack+2
.ed8e	6e 01 04	ror $0401			ror		evalStack+1
.ed91	6e 00 04	ror $0400			ror		evalStack+0
.ed94	ca		dex				dex
.ed95	d0 f1		bne $ed88			bne 	_CPRShiftDiv
.ed97	ad 00 04	lda $0400			lda 	evalStack+0 				; any more to print
.ed9a	0d 01 04	ora $0401			ora 	evalStack+1
.ed9d	0d 02 04	ora $0402			ora 	evalStack+2
.eda0	0d 03 04	ora $0403			ora 	evalStack+3
.eda3	f0 03		beq $eda8			beq 	_CPRNoHexRec
.eda5	20 80 ed	jsr $ed80			jsr 	_CPRPrintRecHex
.eda8					_CPRNoHexRec:
.eda8	68		pla				pla 								; original remainder.
.eda9	c9 0a		cmp #$0a			cmp 	#10
.edab	90 02		bcc $edaf			bcc		_CPRNH2
.edad	69 06		adc #$06			adc 	#6
.edaf	69 30		adc #$30	_CPRNH2:adc 	#48
.edb1	4c a9 e4	jmp $e4a9			jmp 	SIOPrintCharacter
.edb4					CPRPrintInteger:
.edb4	48		pha				pha 								; save on stack.
.edb5	da		phx				phx
.edb6	5a		phy				phy
.edb7	20 be ed	jsr $edbe			jsr 	_CPRPrintRec 				; recursive print call
.edba	7a		ply				ply
.edbb	fa		plx				plx
.edbc	68		pla				pla
.edbd	60		rts				rts
.edbe					_CPRPrintRec:
.edbe	a9 0a		lda #$0a			lda 	#10 						; save base
.edc0	9d 04 04	sta $0404,x			sta 	evalStack+4,x 				; put in next slot.
.edc3	a9 00		lda #$00			lda 	#0 							; clear upper 3 bytes
.edc5	9d 05 04	sta $0405,x			sta 	evalStack+5,x
.edc8	9d 06 04	sta $0406,x			sta 	evalStack+6,x
.edcb	9d 07 04	sta $0407,x			sta 	evalStack+7,x
.edce	20 4d e8	jsr $e84d			jsr 	BFUNC_Divide 				; divide by 10.
.edd1	ad 98 20	lda $2098			lda 	Temp1+0		 				; push remainder on stack
.edd4	48		pha				pha
.edd5	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; is the result #0
.edd8	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.eddb	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.edde	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.ede1	f0 03		beq $ede6			beq 	_CPRNoRecurse
.ede3	20 be ed	jsr $edbe			jsr 	_CPRPrintRec 				; recursive print.
.ede6					_CPRNoRecurse:
.ede6	68		pla				pla
.ede7	09 30		ora #$30			ora 	#"0"
.ede9	4c a9 e4	jmp $e4a9			jmp 	SIOPrintCharacter
.edec					COMMAND_CLS:
.edec	4c 6e e4	jmp $e46e			jmp 	SIOClearScreen

;******  Return to file: basic.asm


;******  Processing file: commands/list.asm

.edef					COMMAND_List:
.edef	5a		phy				phy
.edf0	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set target address
.edf2	85 2a		sta $2a				sta 	zTargetAddr
.edf4	a9 23		lda #$23			lda 	#BasicProgram >> 8
.edf6	85 2b		sta $2b				sta 	zTargetAddr+1
.edf8	a9 10		lda #$10			lda 	#16 						; print 16 lines
.edfa	85 2c		sta $2c				sta 	zTargetAddr+2
.edfc					_CLLILoop:
.edfc	a0 00		ldy #$00			ldy 	#0
.edfe	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y 			; if that offset is zero exit
.ee00	f0 14		beq $ee16			beq 	_CLLIExit
.ee02	20 18 ee	jsr $ee18			jsr 	CLIOneLine 					; list one line.
.ee05	a0 00		ldy #$00			ldy 	#0 							; advance pointer to next.
.ee07	18		clc				clc
.ee08	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ee0a	65 2a		adc $2a				adc 	zTargetAddr
.ee0c	85 2a		sta $2a				sta 	zTargetAddr
.ee0e	90 02		bcc $ee12			bcc 	_CLLINoCarry
.ee10	e6 2b		inc $2b				inc 	zTargetAddr+1
.ee12					_CLLINoCarry:
.ee12	c6 2c		dec $2c				dec 	zTargetAddr+2 				; done all of them ?
.ee14	d0 e6		bne $edfc			bne 	_CLLILoop
.ee16					_CLLIExit:
.ee16	7a		ply				ply
.ee17	60		rts				rts
.ee18					CLIOneLine:
.ee18	a0 01		ldy #$01			ldy 	#1 							; get line#
.ee1a	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ee1c	8d 00 04	sta $0400			sta 	evalStack+0
.ee1f	c8		iny				iny
.ee20	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ee22	8d 01 04	sta $0401			sta 	evalStack+1
.ee25	a9 00		lda #$00			lda 	#0
.ee27	aa		tax				tax
.ee28	8d 02 04	sta $0402			sta 	evalStack+2
.ee2b	8d 03 04	sta $0403			sta 	evalStack+3
.ee2e	20 b4 ed	jsr $edb4			jsr 	CPRPrintInteger 			; print line#
.ee31	a9 20		lda #$20			lda 	#32
.ee33	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.ee36	a0 03		ldy #$03			ldy 	#3 							; where to start
.ee38					_CLIOutput:
.ee38	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ee3a	c8		iny				iny
.ee3b	09 00		ora #$00			ora 	#0
.ee3d	f0 0c		beq $ee4b			beq 	_CLIExit
.ee3f	10 05		bpl $ee46			bpl		_CLISingle
.ee41	20 51 ee	jsr $ee51			jsr 	CLIPrintToken
.ee44	80 f2		bra $ee38			bra 	_CLIOutput
.ee46					_CLISingle:
.ee46	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.ee49	80 ed		bra $ee38			bra 	_CLIOutput
.ee4b					_CLIExit:
.ee4b	a9 0d		lda #$0d			lda 	#13 						; new line.
.ee4d	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.ee50	60		rts				rts
.ee51					CLIPrintToken:
.ee51	5a		phy				phy 								; save Y
.ee52	29 7f		and #$7f			and 	#$7F 						; 7 bit token -> Y
.ee54	a8		tay				tay
.ee55	a2 00		ldx #$00			ldx 	#0 							; offset into token text table.
.ee57					_CLIFind:
.ee57	88		dey				dey 								; decrement counter
.ee58	30 09		bmi $ee63			bmi 	_CLIFoundToken 				; if -ve found the token.
.ee5a					_CLISkip:
.ee5a	bd 6e e0	lda $e06e,x			lda 	TokenText,x
.ee5d	e8		inx				inx
.ee5e	0a		asl a				asl		a
.ee5f	90 f9		bcc $ee5a			bcc 	_CLISkip
.ee61	80 f4		bra $ee57			bra 	_CLIFind
.ee63					_CLIFoundToken:
.ee63	7a		ply				ply
.ee64					_CLIPrintIt:
.ee64	bd 6e e0	lda $e06e,x			lda 	TokenText,x
.ee67	e8		inx				inx
.ee68	48		pha				pha
.ee69	29 7f		and #$7f			and 	#$7F
.ee6b	20 a9 e4	jsr $e4a9			jsr 	SIOPrintCharacter
.ee6e	68		pla				pla
.ee6f	0a		asl a				asl 	a
.ee70	90 f2		bcc $ee64			bcc 	_CLIPrintIt
.ee72	60		rts				rts

;******  Return to file: basic.asm

.ee73					Start:
.ee73	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.ee75	9a		txs			txs
.ee76	20 6b e4	jsr $e46b			jsr 	SIOInitialise 				; initialise the I/O system.
.ee79	a2 f1		ldx #$f1			ldx 	#BootMsg1 & 255 			; boot text.
.ee7b	a0 ee		ldy #$ee			ldy 	#BootMsg1 >> 8
.ee7d	20 7c e4	jsr $e47c			jsr 	SIOPrintString
.ee80	a2 ff		ldx #$ff			ldx 	#(endMemory-startMemory-1) & $FF
.ee82	a0 5f		ldy #$5f			ldy 	#(endMemory-startMemory-1) >> 8
.ee84	20 69 e1	jsr $e169			jsr 	PrintWordInteger
.ee87	a2 08		ldx #$08			ldx 	#BootMsg2 & 255
.ee89	a0 ef		ldy #$ef			ldy 	#BootMsg2 >> 8
.ee8b	20 7c e4	jsr $e47c			jsr 	SIOPrintString
.ee8e	ad 4d 23	lda $234d			lda 	StartBehaviour 				; what to do ?
.ee91	c9 43		cmp #$43			cmp 	#'C'						; execute from command line
.ee93	f0 14		beq $eea9			beq		CommandLine
.ee95	c9 52		cmp #$52			cmp 	#'R' 						; run program in memory.
.ee97	f0 07		beq $eea0			beq	 	RunProgram
.ee99	c9 54		cmp #$54			cmp 	#'T'						; tokenise test
.ee9b	f0 48		beq $eee5			beq 	TokeniseExec
.ee9d	4c 2c e1	jmp $e12c			jmp		SyntaxError
.eea0					RunProgram:
.eea0	20 67 eb	jsr $eb67			jsr 	COMMAND_NewCode 			; do a new
.eea3	20 b4 eb	jsr $ebb4			jsr 	COMMAND_OldCode 			; get back the old program as we're deving.
.eea6	4c b7 ea	jmp $eab7			jmp 	COMMAND_Run
.eea9					CommandLine:
.eea9	20 67 eb	jsr $eb67			jsr 	Command_NewCode
.eeac					WarmStart:
.eeac	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.eeae	9a		txs			txs
.eeaf	20 e6 e4	jsr $e4e6			jsr 	SIOReadLine 				; read input line.
.eeb2	a9 6d		lda #$6d			lda 	#InputLine & $FF 			; tokenise the line
.eeb4	85 26		sta $26				sta 	zTemp1
.eeb6	a9 20		lda #$20			lda 	#InputLine >> 8
.eeb8	85 27		sta $27				sta 	zTemp1+1
.eeba	20 54 e6	jsr $e654			jsr 	TokeniseString
.eebd	a9 00		lda #$00			lda 	#TokeniseBuffer & $FF 		; point current line to tokenised input buffer.
.eebf	85 20		sta $20				sta 	zCurrentLine
.eec1	a9 21		lda #$21			lda 	#TokeniseBuffer >> 8
.eec3	85 21		sta $21				sta 	zCurrentLine+1
.eec5	a0 00		ldy #$00			ldy 	#0
.eec7					_WSSkipSpace:
.eec7	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.eec9	c8		iny				iny
.eeca	c9 20		cmp #$20			cmp 	#' '
.eecc	f0 f9		beq $eec7			beq 	_WSSkipSpace
.eece	88		dey				dey
.eecf	c9 30		cmp #$30			cmp 	#"0" 						; if not a digit
.eed1	90 0f		bcc $eee2			bcc 	_WSExecute
.eed3	c9 3a		cmp #$3a			cmp 	#"9"+1
.eed5	b0 0b		bcs $eee2			bcs 	_WSExecute
.eed7	20 3c e1	jsr $e13c			jsr 	ReportError
>eeda	4e 4f 20 45 44 49 54 00				.text 	"NO EDIT",$00
.eee2					_WSExecute:
.eee2	4c ca ea	jmp $eaca			jmp 	CRUNNextInstruction
.eee5					TokeniseExec:
.eee5	a9 00		lda #$00			lda 	#BasicCode & $FF 			; if so tokenise whatever I've put in the basic code
.eee7	85 26		sta $26				sta 	zTemp1 						; area
.eee9	a9 23		lda #$23			lda 	#BasicCode >> 8
.eeeb	85 27		sta $27				sta 	zTemp1+1
.eeed	20 54 e6	jsr $e654			jsr 	TokeniseString
>eef0	02						.byte 	2
.eef1					BootMsg1:
>eef1	2a 2a 2a 20 41 54 4f 4d				.text 	"*** ATOMIC BASIC ***",13,13,0
>eef9	49 43 20 42 41 53 49 43 20 2a 2a 2a 0d 0d 00
.ef08					BootMsg2:
>ef08	20 42 59 54 45 53 20 46				.text	" BYTES FREE.",13,13,0
>ef10	52 45 45 2e 0d 0d 00
.2300					BasicCode:

;******  Processing file: include/basic_generated.inc

>2300	1c 0a 00 83 82 31 43 30			.byte $1c,$0a,$00,$83,$82,$31,$43,$30,$30,$92,$81,$54,$45,$53,$54,$49,$4e,$47,$21,$81,$8d,$58,$20,$92,$20,$8b,$34,$00,$29,$d2,$00,$ab,$20,$81,$48,$45,$4c,$4c,$4f,$20,$57,$4f,$52,$4c,$44,$21,$81,$86,$86,$81,$42,$59,$45,$2e,$81,$8e,$86,$83,$82,$31,$43,$30,$30,$86,$58,$86,$85,$58,$00,$07,$2c,$01,$a3,$8d,$b0,$00,$00
>2308	30 92 81 54 45 53 54 49 4e 47 21 81 8d 58 20 92
>2318	20 8b 34 00 29 d2 00 ab 20 81 48 45 4c 4c 4f 20
>2328	57 4f 52 4c 44 21 81 86 86 81 42 59 45 2e 81 8e
>2338	86 83 82 31 43 30 30 86 58 86 85 58 00 07 2c 01
>2348	a3 8d b0 00 00
.234d					StartBehaviour:
>234d	52					.text "R"

;******  Return to file: basic.asm


;******  End of listing
