
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q --m4510 -D TARGET=1 -b -L rom.lst -o rom.bin basic.asm
; Mon Jul 29 17:58:38 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: basic.asm


;******  Processing file: porting.asm

.fff8					EXTDummyInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word 	EXTDummyInterrupt
>fffc	1a ef						.word 	Start
>fffe	f8 ff						.word 	EXTDummyInterrupt
=4					EXTZPWork = 4								; Zero Page work for Personality (4 bytes)
=8					IOCursorX = 8 								; Cursor position
=9					IOCursorY = 9
=$20							zeroPage 	= $20 					; first ZP byte to use
=$2000							startMemory = $2000 				; first non ZP byte to use
=$8000							endMemory   = $8000 				; last non ZP byte to use
=$200							basicStack  = $200 					; stack for BASIC
=$400							evalStack   = $400 					; stack for evaluation of expressions

;******  Processing file: personalities/personality_mega65.asm

=40					EXTWidth = 40 								; screen width
=25					EXTHeight = 25 								; screen height
=$2000					EXTLowMemory = $2000 						; Workspace RAM starts here
=$8000					EXTHighMemory = $8000 						; Workspace RAM ends here
=$1000					EXTScreen = $1000							; 2k screen RAM here
=$800					EXTCharSet = $800							; 2k character set (0-7F) here
>0000	00 00					.word 	0 								; forces it to be a 64k ROM (at least)
.a000					EXTCBMFont:
>a000	3c 66 6e 6e 60 62 3c 00			.binary "c64-chargen.rom"
>a008	18 3c 66 7e 66 66 66 00 7c 66 66 7c 66 66 7c 00
>a018	3c 66 60 60 60 66 3c 00 78 6c 66 66 66 6c 78 00
>a028	7e 60 60 78 60 60 7e 00 7e 60 60 78 60 60 60 00
>a038	3c 66 60 6e 66 66 3c 00 66 66 66 7e 66 66 66 00
>a048	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c 6c 38 00
>a058	66 6c 78 70 78 6c 66 00 60 60 60 60 60 60 7e 00
>a068	63 77 7f 6b 63 63 63 00 66 76 7e 7e 6e 66 66 00
>a078	3c 66 66 66 66 66 3c 00 7c 66 66 7c 60 60 60 00
>a088	3c 66 66 66 66 3c 0e 00 7c 66 66 7c 78 6c 66 00
>a098	3c 66 60 3c 06 66 3c 00 7e 18 18 18 18 18 18 00
>a0a8	66 66 66 66 66 66 3c 00 66 66 66 66 66 3c 18 00
>a0b8	63 63 63 6b 7f 77 63 00 66 66 3c 18 3c 66 66 00
>a0c8	66 66 66 3c 18 18 18 00 7e 06 0c 18 30 60 7e 00
>a0d8	3c 30 30 30 30 30 3c 00 0c 12 30 7c 30 62 fc 00
>a0e8	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 7e 18 18 18 18
>a0f8	00 10 30 7f 7f 30 10 00 00 00 00 00 00 00 00 00
>a108	18 18 18 18 00 00 18 00 66 66 66 00 00 00 00 00
>a118	66 66 ff 66 ff 66 66 00 18 3e 60 3c 06 7c 18 00
>a128	62 66 0c 18 30 66 46 00 3c 66 3c 38 67 66 3f 00
>a138	06 0c 18 00 00 00 00 00 0c 18 30 30 30 18 0c 00
>a148	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>a158	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>a168	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a178	00 03 06 0c 18 30 60 00 3c 66 6e 76 66 66 3c 00
>a188	18 18 38 18 18 18 7e 00 3c 66 06 0c 30 60 7e 00
>a198	3c 66 06 1c 06 66 3c 00 06 0e 1e 66 7f 06 06 00
>a1a8	7e 60 7c 06 06 66 3c 00 3c 66 60 7c 66 66 3c 00
>a1b8	7e 66 0c 18 18 18 18 00 3c 66 66 3c 66 66 3c 00
>a1c8	3c 66 66 3e 06 66 3c 00 00 00 18 00 00 18 00 00
>a1d8	00 00 18 00 00 18 18 30 0e 18 30 60 30 18 0e 00
>a1e8	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a1f8	3c 66 06 0c 18 00 18 00 00 00 00 ff ff 00 00 00
>a208	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>a218	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>a228	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>a238	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>a248	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>a258	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>a268	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>a278	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>a288	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>a298	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>a2a8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>a2b8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>a2c8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>a2d8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>a2e8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>a2f8	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>a308	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a318	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a328	c0 c0 c0 c0 c0 c0 c0 c0 cc cc 33 33 cc cc 33 33
>a338	03 03 03 03 03 03 03 03 00 00 00 00 cc cc 33 33
>a348	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>a358	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>a368	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>a378	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>a388	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>a398	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>a3a8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a3b8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a3c8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>a3d8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a3e8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a3f8	f0 f0 f0 f0 0f 0f 0f 0f c3 99 91 91 9f 99 c3 ff
>a408	e7 c3 99 81 99 99 99 ff 83 99 99 83 99 99 83 ff
>a418	c3 99 9f 9f 9f 99 c3 ff 87 93 99 99 99 93 87 ff
>a428	81 9f 9f 87 9f 9f 81 ff 81 9f 9f 87 9f 9f 9f ff
>a438	c3 99 9f 91 99 99 c3 ff 99 99 99 81 99 99 99 ff
>a448	c3 e7 e7 e7 e7 e7 c3 ff e1 f3 f3 f3 f3 93 c7 ff
>a458	99 93 87 8f 87 93 99 ff 9f 9f 9f 9f 9f 9f 81 ff
>a468	9c 88 80 94 9c 9c 9c ff 99 89 81 81 91 99 99 ff
>a478	c3 99 99 99 99 99 c3 ff 83 99 99 83 9f 9f 9f ff
>a488	c3 99 99 99 99 c3 f1 ff 83 99 99 83 87 93 99 ff
>a498	c3 99 9f c3 f9 99 c3 ff 81 e7 e7 e7 e7 e7 e7 ff
>a4a8	99 99 99 99 99 99 c3 ff 99 99 99 99 99 c3 e7 ff
>a4b8	9c 9c 9c 94 80 88 9c ff 99 99 c3 e7 c3 99 99 ff
>a4c8	99 99 99 c3 e7 e7 e7 ff 81 f9 f3 e7 cf 9f 81 ff
>a4d8	c3 cf cf cf cf cf c3 ff f3 ed cf 83 cf 9d 03 ff
>a4e8	c3 f3 f3 f3 f3 f3 c3 ff ff e7 c3 81 e7 e7 e7 e7
>a4f8	ff ef cf 80 80 cf ef ff ff ff ff ff ff ff ff ff
>a508	e7 e7 e7 e7 ff ff e7 ff 99 99 99 ff ff ff ff ff
>a518	99 99 00 99 00 99 99 ff e7 c1 9f c3 f9 83 e7 ff
>a528	9d 99 f3 e7 cf 99 b9 ff c3 99 c3 c7 98 99 c0 ff
>a538	f9 f3 e7 ff ff ff ff ff f3 e7 cf cf cf e7 f3 ff
>a548	cf e7 f3 f3 f3 e7 cf ff ff 99 c3 00 c3 99 ff ff
>a558	ff e7 e7 81 e7 e7 ff ff ff ff ff ff ff e7 e7 cf
>a568	ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>a578	ff fc f9 f3 e7 cf 9f ff c3 99 91 89 99 99 c3 ff
>a588	e7 e7 c7 e7 e7 e7 81 ff c3 99 f9 f3 cf 9f 81 ff
>a598	c3 99 f9 e3 f9 99 c3 ff f9 f1 e1 99 80 f9 f9 ff
>a5a8	81 9f 83 f9 f9 99 c3 ff c3 99 9f 83 99 99 c3 ff
>a5b8	81 99 f3 e7 e7 e7 e7 ff c3 99 99 c3 99 99 c3 ff
>a5c8	c3 99 99 c1 f9 99 c3 ff ff ff e7 ff ff e7 ff ff
>a5d8	ff ff e7 ff ff e7 e7 cf f1 e7 cf 9f cf e7 f1 ff
>a5e8	ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>a5f8	c3 99 f9 f3 e7 ff e7 ff ff ff ff 00 00 ff ff ff
>a608	f7 e3 c1 80 80 e3 c1 ff e7 e7 e7 e7 e7 e7 e7 e7
>a618	ff ff ff 00 00 ff ff ff ff ff 00 00 ff ff ff ff
>a628	ff 00 00 ff ff ff ff ff ff ff ff ff 00 00 ff ff
>a638	cf cf cf cf cf cf cf cf f3 f3 f3 f3 f3 f3 f3 f3
>a648	ff ff ff 1f 0f c7 e7 e7 e7 e7 e3 f0 f8 ff ff ff
>a658	e7 e7 c7 0f 1f ff ff ff 3f 3f 3f 3f 3f 3f 00 00
>a668	3f 1f 8f c7 e3 f1 f8 fc fc f8 f1 e3 c7 8f 1f 3f
>a678	00 00 3f 3f 3f 3f 3f 3f 00 00 fc fc fc fc fc fc
>a688	ff c3 81 81 81 81 c3 ff ff ff ff ff ff 00 00 ff
>a698	c9 80 80 80 c1 e3 f7 ff 9f 9f 9f 9f 9f 9f 9f 9f
>a6a8	ff ff ff f8 f0 e3 e7 e7 3c 18 81 c3 c3 81 18 3c
>a6b8	ff c3 81 99 99 81 c3 ff e7 e7 99 99 e7 e7 c3 ff
>a6c8	f9 f9 f9 f9 f9 f9 f9 f9 f7 e3 c1 80 c1 e3 f7 ff
>a6d8	e7 e7 e7 00 00 e7 e7 e7 3f 3f cf cf 3f 3f cf cf
>a6e8	e7 e7 e7 e7 e7 e7 e7 e7 ff ff fc c1 89 c9 c9 ff
>a6f8	00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff
>a708	0f 0f 0f 0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00
>a718	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a728	3f 3f 3f 3f 3f 3f 3f 3f 33 33 cc cc 33 33 cc cc
>a738	fc fc fc fc fc fc fc fc ff ff ff ff 33 33 cc cc
>a748	00 01 03 07 0f 1f 3f 7f fc fc fc fc fc fc fc fc
>a758	e7 e7 e7 e0 e0 e7 e7 e7 ff ff ff ff f0 f0 f0 f0
>a768	e7 e7 e7 e0 e0 ff ff ff ff ff ff 07 07 e7 e7 e7
>a778	ff ff ff ff ff ff 00 00 ff ff ff e0 e0 e7 e7 e7
>a788	e7 e7 e7 00 00 ff ff ff ff ff ff 00 00 e7 e7 e7
>a798	e7 e7 e7 07 07 e7 e7 e7 3f 3f 3f 3f 3f 3f 3f 3f
>a7a8	1f 1f 1f 1f 1f 1f 1f 1f f8 f8 f8 f8 f8 f8 f8 f8
>a7b8	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff
>a7c8	ff ff ff ff ff 00 00 00 fc fc fc fc fc fc 00 00
>a7d8	ff ff ff ff 0f 0f 0f 0f f0 f0 f0 f0 ff ff ff ff
>a7e8	e7 e7 e7 07 07 ff ff ff 0f 0f 0f 0f ff ff ff ff
>a7f8	0f 0f 0f 0f f0 f0 f0 f0 3c 66 6e 6e 60 62 3c 00
>a808	00 00 3c 06 3e 66 3e 00 00 60 60 7c 66 66 7c 00
>a818	00 00 3c 60 60 60 3c 00 00 06 06 3e 66 66 3e 00
>a828	00 00 3c 66 7e 60 3c 00 00 0e 18 3e 18 18 18 00
>a838	00 00 3e 66 66 3e 06 7c 00 60 60 7c 66 66 66 00
>a848	00 18 00 38 18 18 3c 00 00 06 00 06 06 06 06 3c
>a858	00 60 60 6c 78 6c 66 00 00 38 18 18 18 18 3c 00
>a868	00 00 66 7f 7f 6b 63 00 00 00 7c 66 66 66 66 00
>a878	00 00 3c 66 66 66 3c 00 00 00 7c 66 66 7c 60 60
>a888	00 00 3e 66 66 3e 06 06 00 00 7c 66 60 60 60 00
>a898	00 00 3e 60 3c 06 7c 00 00 18 7e 18 18 18 0e 00
>a8a8	00 00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00
>a8b8	00 00 63 6b 7f 3e 36 00 00 00 66 3c 18 3c 66 00
>a8c8	00 00 66 66 66 3e 0c 78 00 00 7e 0c 18 30 7e 00
>a8d8	3c 30 30 30 30 30 3c 00 0c 12 30 7c 30 62 fc 00
>a8e8	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 7e 18 18 18 18
>a8f8	00 10 30 7f 7f 30 10 00 00 00 00 00 00 00 00 00
>a908	18 18 18 18 00 00 18 00 66 66 66 00 00 00 00 00
>a918	66 66 ff 66 ff 66 66 00 18 3e 60 3c 06 7c 18 00
>a928	62 66 0c 18 30 66 46 00 3c 66 3c 38 67 66 3f 00
>a938	06 0c 18 00 00 00 00 00 0c 18 30 30 30 18 0c 00
>a948	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>a958	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>a968	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a978	00 03 06 0c 18 30 60 00 3c 66 6e 76 66 66 3c 00
>a988	18 18 38 18 18 18 7e 00 3c 66 06 0c 30 60 7e 00
>a998	3c 66 06 1c 06 66 3c 00 06 0e 1e 66 7f 06 06 00
>a9a8	7e 60 7c 06 06 66 3c 00 3c 66 60 7c 66 66 3c 00
>a9b8	7e 66 0c 18 18 18 18 00 3c 66 66 3c 66 66 3c 00
>a9c8	3c 66 66 3e 06 66 3c 00 00 00 18 00 00 18 00 00
>a9d8	00 00 18 00 00 18 18 30 0e 18 30 60 30 18 0e 00
>a9e8	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a9f8	3c 66 06 0c 18 00 18 00 00 00 00 ff ff 00 00 00
>aa08	18 3c 66 7e 66 66 66 00 7c 66 66 7c 66 66 7c 00
>aa18	3c 66 60 60 60 66 3c 00 78 6c 66 66 66 6c 78 00
>aa28	7e 60 60 78 60 60 7e 00 7e 60 60 78 60 60 60 00
>aa38	3c 66 60 6e 66 66 3c 00 66 66 66 7e 66 66 66 00
>aa48	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c 6c 38 00
>aa58	66 6c 78 70 78 6c 66 00 60 60 60 60 60 60 7e 00
>aa68	63 77 7f 6b 63 63 63 00 66 76 7e 7e 6e 66 66 00
>aa78	3c 66 66 66 66 66 3c 00 7c 66 66 7c 60 60 60 00
>aa88	3c 66 66 66 66 3c 0e 00 7c 66 66 7c 78 6c 66 00
>aa98	3c 66 60 3c 06 66 3c 00 7e 18 18 18 18 18 18 00
>aaa8	66 66 66 66 66 66 3c 00 66 66 66 66 66 3c 18 00
>aab8	63 63 63 6b 7f 77 63 00 66 66 3c 18 3c 66 66 00
>aac8	66 66 66 3c 18 18 18 00 7e 06 0c 18 30 60 7e 00
>aad8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>aae8	18 18 18 18 18 18 18 18 33 33 cc cc 33 33 cc cc
>aaf8	33 99 cc 66 33 99 cc 66 00 00 00 00 00 00 00 00
>ab08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>ab18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>ab28	c0 c0 c0 c0 c0 c0 c0 c0 cc cc 33 33 cc cc 33 33
>ab38	03 03 03 03 03 03 03 03 00 00 00 00 cc cc 33 33
>ab48	cc 99 33 66 cc 99 33 66 03 03 03 03 03 03 03 03
>ab58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>ab68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>ab78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>ab88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>ab98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>aba8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>abb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>abc8	00 00 00 00 00 ff ff ff 01 03 06 6c 78 70 60 00
>abd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>abe8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>abf8	f0 f0 f0 f0 0f 0f 0f 0f c3 99 91 91 9f 99 c3 ff
>ac08	ff ff c3 f9 c1 99 c1 ff ff 9f 9f 83 99 99 83 ff
>ac18	ff ff c3 9f 9f 9f c3 ff ff f9 f9 c1 99 99 c1 ff
>ac28	ff ff c3 99 81 9f c3 ff ff f1 e7 c1 e7 e7 e7 ff
>ac38	ff ff c1 99 99 c1 f9 83 ff 9f 9f 83 99 99 99 ff
>ac48	ff e7 ff c7 e7 e7 c3 ff ff f9 ff f9 f9 f9 f9 c3
>ac58	ff 9f 9f 93 87 93 99 ff ff c7 e7 e7 e7 e7 c3 ff
>ac68	ff ff 99 80 80 94 9c ff ff ff 83 99 99 99 99 ff
>ac78	ff ff c3 99 99 99 c3 ff ff ff 83 99 99 83 9f 9f
>ac88	ff ff c1 99 99 c1 f9 f9 ff ff 83 99 9f 9f 9f ff
>ac98	ff ff c1 9f c3 f9 83 ff ff e7 81 e7 e7 e7 f1 ff
>aca8	ff ff 99 99 99 99 c1 ff ff ff 99 99 99 c3 e7 ff
>acb8	ff ff 9c 94 80 c1 c9 ff ff ff 99 c3 e7 c3 99 ff
>acc8	ff ff 99 99 99 c1 f3 87 ff ff 81 f3 e7 cf 81 ff
>acd8	c3 cf cf cf cf cf c3 ff f3 ed cf 83 cf 9d 03 ff
>ace8	c3 f3 f3 f3 f3 f3 c3 ff ff e7 c3 81 e7 e7 e7 e7
>acf8	ff ef cf 80 80 cf ef ff ff ff ff ff ff ff ff ff
>ad08	e7 e7 e7 e7 ff ff e7 ff 99 99 99 ff ff ff ff ff
>ad18	99 99 00 99 00 99 99 ff e7 c1 9f c3 f9 83 e7 ff
>ad28	9d 99 f3 e7 cf 99 b9 ff c3 99 c3 c7 98 99 c0 ff
>ad38	f9 f3 e7 ff ff ff ff ff f3 e7 cf cf cf e7 f3 ff
>ad48	cf e7 f3 f3 f3 e7 cf ff ff 99 c3 00 c3 99 ff ff
>ad58	ff e7 e7 81 e7 e7 ff ff ff ff ff ff ff e7 e7 cf
>ad68	ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>ad78	ff fc f9 f3 e7 cf 9f ff c3 99 91 89 99 99 c3 ff
>ad88	e7 e7 c7 e7 e7 e7 81 ff c3 99 f9 f3 cf 9f 81 ff
>ad98	c3 99 f9 e3 f9 99 c3 ff f9 f1 e1 99 80 f9 f9 ff
>ada8	81 9f 83 f9 f9 99 c3 ff c3 99 9f 83 99 99 c3 ff
>adb8	81 99 f3 e7 e7 e7 e7 ff c3 99 99 c3 99 99 c3 ff
>adc8	c3 99 99 c1 f9 99 c3 ff ff ff e7 ff ff e7 ff ff
>add8	ff ff e7 ff ff e7 e7 cf f1 e7 cf 9f cf e7 f1 ff
>ade8	ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>adf8	c3 99 f9 f3 e7 ff e7 ff ff ff ff 00 00 ff ff ff
>ae08	e7 c3 99 81 99 99 99 ff 83 99 99 83 99 99 83 ff
>ae18	c3 99 9f 9f 9f 99 c3 ff 87 93 99 99 99 93 87 ff
>ae28	81 9f 9f 87 9f 9f 81 ff 81 9f 9f 87 9f 9f 9f ff
>ae38	c3 99 9f 91 99 99 c3 ff 99 99 99 81 99 99 99 ff
>ae48	c3 e7 e7 e7 e7 e7 c3 ff e1 f3 f3 f3 f3 93 c7 ff
>ae58	99 93 87 8f 87 93 99 ff 9f 9f 9f 9f 9f 9f 81 ff
>ae68	9c 88 80 94 9c 9c 9c ff 99 89 81 81 91 99 99 ff
>ae78	c3 99 99 99 99 99 c3 ff 83 99 99 83 9f 9f 9f ff
>ae88	c3 99 99 99 99 c3 f1 ff 83 99 99 83 87 93 99 ff
>ae98	c3 99 9f c3 f9 99 c3 ff 81 e7 e7 e7 e7 e7 e7 ff
>aea8	99 99 99 99 99 99 c3 ff 99 99 99 99 99 c3 e7 ff
>aeb8	9c 9c 9c 94 80 88 9c ff 99 99 c3 e7 c3 99 99 ff
>aec8	99 99 99 c3 e7 e7 e7 ff 81 f9 f3 e7 cf 9f 81 ff
>aed8	e7 e7 e7 00 00 e7 e7 e7 3f 3f cf cf 3f 3f cf cf
>aee8	e7 e7 e7 e7 e7 e7 e7 e7 cc cc 33 33 cc cc 33 33
>aef8	cc 66 33 99 cc 66 33 99 ff ff ff ff ff ff ff ff
>af08	0f 0f 0f 0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00
>af18	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>af28	3f 3f 3f 3f 3f 3f 3f 3f 33 33 cc cc 33 33 cc cc
>af38	fc fc fc fc fc fc fc fc ff ff ff ff 33 33 cc cc
>af48	33 66 cc 99 33 66 cc 99 fc fc fc fc fc fc fc fc
>af58	e7 e7 e7 e0 e0 e7 e7 e7 ff ff ff ff f0 f0 f0 f0
>af68	e7 e7 e7 e0 e0 ff ff ff ff ff ff 07 07 e7 e7 e7
>af78	ff ff ff ff ff ff 00 00 ff ff ff e0 e0 e7 e7 e7
>af88	e7 e7 e7 00 00 ff ff ff ff ff ff 00 00 e7 e7 e7
>af98	e7 e7 e7 07 07 e7 e7 e7 3f 3f 3f 3f 3f 3f 3f 3f
>afa8	1f 1f 1f 1f 1f 1f 1f 1f f8 f8 f8 f8 f8 f8 f8 f8
>afb8	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff
>afc8	ff ff ff ff ff 00 00 00 fe fc f9 93 87 8f 9f ff
>afd8	ff ff ff ff 0f 0f 0f 0f f0 f0 f0 f0 ff ff ff ff
>afe8	e7 e7 e7 07 07 ff ff ff 0f 0f 0f 0f ff ff ff ff
>aff8	0f 0f 0f 0f f0 f0 f0 f0
.b000					EXTStartPersonalise:
.b000	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.b002	9a		txs			txs
.b003	20 b8 b0	jsr $b0b8		jsr 	EXTReset 						; reset video
.b006	20 68 b0	jsr $b068		jsr 	EXTClearScreen 					; clear screen
.b009	4c 1a ef	jmp $ef1a		jmp 	Start 							; start main application
.b00c					EXTReadKeyPort:
.b00c	db		phz			phz
.b00d	20 24 b0	jsr $b024		jsr 	EXTSetupKeyAddress
.b010	ea		nop			nop 									; read keyboard
.b011	b2 04		lda ($04),z		lda 	(EXTZPWork),z
.b013	fb		plz			plz
.b014	c9 00		cmp #$00		cmp 	#0 								; set Z
.b016	60		rts			rts
.b017					EXTRemoveKeyPressed:
.b017	48		pha			pha
.b018	db		phz			phz
.b019	20 24 b0	jsr $b024		jsr 	EXTSetupKeyAddress
.b01c	a9 00		lda #$00		lda 	#0
.b01e	ea		nop			nop 									; read keyboard
.b01f	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b021	fb		plz			plz
.b022	68		pla			pla
.b023	60		rts			rts
.b024					EXTSetupKeyAddress:
.b024	a9 0f		lda #$0f		lda 	#$0F 							; set up to write to read keyboard.
.b026	85 07		sta $07			sta 	EXTZPWork+3
.b028	a9 fd		lda #$fd		lda 	#$FD
.b02a	85 06		sta $06			sta 	EXTZPWork+2
.b02c	a9 36		lda #$36		lda 	#$36
.b02e	85 05		sta $05			sta 	EXTZPWork+1
.b030	a9 10		lda #$10		lda 	#$10
.b032	85 04		sta $04			sta 	EXTZPWork+0
.b034	a3 00		ldz #$00		ldz 	#0
.b036	60		rts			rts
.b037					EXTCheckBreak:
.b037	db		phz			phz
.b038	20 24 b0	jsr $b024		jsr 	EXTSetupKeyAddress 				; point to keyboard
.b03b	e6 04		inc $04			inc 	EXTZPWork 						; point to modifiers.
.b03d	ea		nop			nop 									; read modifiers.
.b03e	b2 04		lda ($04),z		lda 	(EXTZPWork),z
.b040	fb		plz			plz 									; restore Z
.b041	29 05		and #$05		and 	#5								; break is LeftShift+Ctrl
.b043	c9 05		cmp #$05		cmp 	#5
.b045	f0 03		beq $b04a		beq 	_EXTCBYes
.b047	a9 00		lda #$00		lda 	#0
.b049	60		rts			rts
.b04a					_EXTCBYes:
.b04a	a9 01		lda #$01		lda 	#1
.b04c	60		rts			rts
.b04d					EXTReadScreen:
.b04d	5a		phy			phy 										; save Y
.b04e	8a		txa			txa 										; multiply XY by 2
.b04f	85 04		sta $04			sta 	EXTZPWork							; into EXTZPWork
.b051	98		tya			tya
.b052	09 10		ora #$10		ora 	#EXTScreen>>8 						; move into screen area
.b054	85 05		sta $05			sta 	EXTZPWork+1 						; read character there
.b056	a0 00		ldy #$00		ldy 	#0
.b058	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.b05a	7a		ply			ply 										; restore Y and exit.
.b05b	60		rts			rts
.b05c					EXTWriteScreen:
.b05c	5a		phy			phy
.b05d	48		pha			pha
.b05e	20 4d b0	jsr $b04d		jsr		EXTReadScreen 						; set up the address into EXTZPWork
.b061	a0 00		ldy #$00		ldy 	#0
.b063	68		pla			pla 										; restore and write.
.b064	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b066	7a		ply			ply
.b067	60		rts			rts
.b068					EXTClearScreen:
.b068	48		pha			pha 										; save registers
.b069	5a		phy			phy
.b06a	a9 00		lda #$00		lda 	#EXTScreen & $FF 					; set up pointer
.b06c	85 04		sta $04			sta 	EXTZPWork
.b06e	a9 10		lda #$10		lda 	#EXTScreen >> 8
.b070	85 05		sta $05			sta 	EXTZPWork+1
.b072	a0 00		ldy #$00		ldy 	#0
.b074					_EXTCSLoop:
.b074	a9 20		lda #$20		lda 	#32
.b076	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b078	c8		iny			iny
.b079	d0 f9		bne $b074		bne 	_EXTCSLoop
.b07b	e6 05		inc $05			inc 	EXTZPWork+1 						; next screen page
.b07d	a5 05		lda $05			lda 	EXTZPWork+1
.b07f	c9 18		cmp #$18		cmp 	#(EXTScreen>>8)+8 					; done 2k ?
.b081	d0 f1		bne $b074		bne 	_EXTCSLoop
.b083	7a		ply			ply 										; restore
.b084	68		pla			pla
.b085	60		rts			rts
.b086					EXTScrollDisplay:
.b086	48		pha			pha 										; save registers
.b087	5a		phy			phy
.b088	a9 00		lda #$00		lda 	#EXTScreen & $FF 					; set pointer to screen
.b08a	85 04		sta $04			sta 	EXTZPWork+0
.b08c	a9 10		lda #$10		lda 	#EXTScreen >> 8
.b08e	85 05		sta $05			sta 	EXTZPWork+1
.b090					_EXTScroll:
.b090	a0 28		ldy #$28		ldy 	#EXTWidth 							; x 2 because of two byte format.
.b092	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.b094	a0 00		ldy #$00		ldy 	#0
.b096	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b098	e6 04		inc $04			inc 	EXTZPWork 							; bump address
.b09a	d0 02		bne $b09e		bne 	_EXTNoCarry
.b09c	e6 05		inc $05			inc 	EXTZPWork+1
.b09e					_EXTNoCarry:
.b09e	a5 04		lda $04			lda 	EXTZPWork 							; done ?
.b0a0	c9 c0		cmp #$c0		cmp	 	#(EXTScreen+EXTWidth*(EXTHeight-1)) & $FF
.b0a2	d0 ec		bne $b090		bne 	_EXTScroll
.b0a4	a5 05		lda $05			lda 	EXTZPWork+1
.b0a6	c9 13		cmp #$13		cmp	 	#(EXTScreen+EXTWidth*(EXTHeight-1)) >> 8
.b0a8	d0 e6		bne $b090		bne 	_EXTScroll
.b0aa	a0 00		ldy #$00		ldy 	#0									; clear bottom line.
.b0ac					_EXTLastLine:
.b0ac	a9 20		lda #$20		lda 	#32
.b0ae	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b0b0	c8		iny			iny
.b0b1	c0 28		cpy #$28		cpy 	#EXTWidth
.b0b3	d0 f7		bne $b0ac		bne 	_EXTLastLine
.b0b5	7a		ply			ply 										; restore and exit.
.b0b6	68		pla			pla
.b0b7	60		rts			rts
.b0b8					EXTReset:
.b0b8	48		pha			pha 									; save registers
.b0b9	da		phx			phx
.b0ba	5a		phy			phy
.b0bb	a9 0f		lda #$0f		lda 	#$0F 							; set up to write to video system.
.b0bd	85 07		sta $07			sta 	EXTZPWork+3
.b0bf	a9 fd		lda #$fd		lda 	#$FD
.b0c1	85 06		sta $06			sta 	EXTZPWork+2
.b0c3	a9 30		lda #$30		lda 	#$30
.b0c5	85 05		sta $05			sta 	EXTZPWork+1
.b0c7	a9 00		lda #$00		lda 	#$00
.b0c9	85 04		sta $04			sta 	EXTZPWork+0
.b0cb	a3 2f		ldz #$2f		ldz 	#$2F 							; address already set up
.b0cd	a9 47		lda #$47		lda 	#$47
.b0cf	ea		nop			nop
.b0d0	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0d2	a3 2f		ldz #$2f		ldz 	#$2F 							; address already set up
.b0d4	a9 53		lda #$53		lda 	#$53
.b0d6	ea		nop			nop
.b0d7	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0d9	a3 30		ldz #$30		ldz 	#$30 							; address already set up
.b0db	a9 40		lda #$40		lda 	#$40
.b0dd	ea		nop			nop
.b0de	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0e0	a3 31		ldz #$31		ldz 	#$31 							; address already set up
.b0e2	a9 40		lda #$40		lda 	#$40
.b0e4	ea		nop			nop
.b0e5	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0e7	ad 31 d0	lda $d031		lda $d031	; VIC-III Control Register B
.b0ea	29 40		and #$40		and #$40	; bit-6 is 4mhz
.b0ec	8d 31 d0	sta $d031		sta $d031
.b0ef	a3 20		ldz #$20		ldz 	#$20 							; address already set up
.b0f1	a9 00		lda #$00		lda 	#0
.b0f3	ea		nop			nop
.b0f4	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0f6	a3 21		ldz #$21		ldz 	#$21 							; address already set up
.b0f8	a9 00		lda #$00		lda 	#0
.b0fa	ea		nop			nop
.b0fb	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0fd	a3 6f		ldz #$6f		ldz 	#$6F 							; address already set up
.b0ff	a9 80		lda #$80		lda 	#$80
.b101	ea		nop			nop
.b102	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b104	ad 66 d0	lda $d066		lda $d066
.b107	29 7f		and #$7f		and #$7F
.b109	8d 66 d0	sta $d066		sta $d066
.b10c	a3 6a		ldz #$6a		ldz 	#$6A 							; address already set up
.b10e	a9 00		lda #$00		lda 	#$00
.b110	ea		nop			nop
.b111	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b113	a3 6b		ldz #$6b		ldz 	#$6B 							; address already set up
.b115	a9 00		lda #$00		lda 	#$00
.b117	ea		nop			nop
.b118	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b11a	a3 78		ldz #$78		ldz 	#$78 							; address already set up
.b11c	a9 00		lda #$00		lda 	#$00
.b11e	ea		nop			nop
.b11f	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b121	a3 5f		ldz #$5f		ldz 	#$5F 							; address already set up
.b123	a9 00		lda #$00		lda 	#$00
.b125	ea		nop			nop
.b126	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b128	a3 5a		ldz #$5a		ldz 	#$5A 							; address already set up
.b12a	a9 78		lda #$78		lda 	#$78
.b12c	ea		nop			nop
.b12d	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b12f	a3 5d		ldz #$5d		ldz 	#$5D 							; address already set up
.b131	a9 c0		lda #$c0		lda 	#$C0
.b133	ea		nop			nop
.b134	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b136	a3 5c		ldz #$5c		ldz 	#$5C 							; address already set up
.b138	a9 50		lda #$50		lda 	#80
.b13a	ea		nop			nop
.b13b	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b13d	a9 ff		lda #$ff		lda #$ff
.b13f	8d 01 dd	sta $dd01		sta $DD01
.b142	8d 00 dd	sta $dd00		sta $DD00
.b145	a3 18		ldz #$18		ldz 	#$18 							; address already set up
.b147	a9 14		lda #$14		lda 	#$14
.b149	ea		nop			nop
.b14a	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b14c	a3 11		ldz #$11		ldz 	#$11 							; address already set up
.b14e	a9 1b		lda #$1b		lda 	#$1B
.b150	ea		nop			nop
.b151	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b153	a3 16		ldz #$16		ldz 	#$16 							; address already set up
.b155	a9 c8		lda #$c8		lda 	#$C8
.b157	ea		nop			nop
.b158	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b15a	a3 c5		ldz #$c5		ldz 	#$C5 							; address already set up
.b15c	a9 54		lda #$54		lda 	#$54
.b15e	ea		nop			nop
.b15f	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b161	a3 58		ldz #$58		ldz 	#$58 							; address already set up
.b163	a9 50		lda #$50		lda 	#80
.b165	ea		nop			nop
.b166	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b168	a3 59		ldz #$59		ldz 	#$59 							; address already set up
.b16a	a9 00		lda #$00		lda 	#0
.b16c	ea		nop			nop
.b16d	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b16f	a3 18		ldz #$18		ldz 	#$18 							; address already set up
.b171	a9 42		lda #$42		lda 	#$42
.b173	ea		nop			nop
.b174	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b176	a3 11		ldz #$11		ldz 	#$11 							; address already set up
.b178	a9 1b		lda #$1b		lda 	#$1B
.b17a	ea		nop			nop
.b17b	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b17d	a9 00		lda #$00		lda 	#$00							; colour RAM at $1F800-1FFFF (2kb)
.b17f	85 07		sta $07			sta 	EXTZPWork+3
.b181	a9 01		lda #$01		lda 	#$01
.b183	85 06		sta $06			sta 	EXTZPWork+2
.b185	a9 f8		lda #$f8		lda 	#$F8
.b187	85 05		sta $05			sta 	EXTZPWork+1
.b189	a9 00		lda #$00		lda 	#$00
.b18b	85 04		sta $04			sta 	EXTZPWork+0
.b18d	a3 00		ldz #$00		ldz 	#0
.b18f					_EXTClearColorRam:
.b18f	a9 08		lda #$08		lda 	#8 								; fill that with this colour.
.b191	ea		nop			nop
.b192	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b194	3b		dez			dez
.b195	d0 f8		bne $b18f		bne 	_EXTClearColorRam
.b197	e6 05		inc $05			inc 	EXTZPWork+1
.b199	d0 f4		bne $b18f		bne 	_EXTClearColorRam
.b19b	a2 00		ldx #$00		ldx 	#0 								; copy PET Font into memory.
.b19d					_EXTCopyCBMFont:
.b19d	bd 00 a0	lda $a000,x		lda 	EXTCBMFont,x
.b1a0	9d 00 08	sta $0800,x		sta 	EXTCharSet,x
.b1a3	bd 00 a1	lda $a100,x		lda 	EXTCBMFont+$100,x
.b1a6	9d 00 09	sta $0900,x		sta 	EXTCharSet+$100,x
.b1a9	bd 00 a2	lda $a200,x		lda 	EXTCBMFont+$200,x
.b1ac	9d 00 0a	sta $0a00,x		sta 	EXTCharSet+$200,x
.b1af	bd 00 a3	lda $a300,x		lda 	EXTCBMFont+$300,x
.b1b2	9d 00 0b	sta $0b00,x		sta 	EXTCharSet+$300,x
.b1b5	ca		dex			dex
.b1b6	d0 e5		bne $b19d		bne 	_EXTCopyCBMFont
.b1b8	7a		ply			ply 									; restore and exit.
.b1b9	fa		plx			plx
.b1ba	68		pla			pla
.b1bb	60		rts			rts

;******  Return to file: porting.asm


;******  Return to file: basic.asm


;******  Processing file: include/tokens.inc

.e000					KeywordVectorTable:
>e000	93 e7					.word	BFUNC_WordInd                 ; "!"        ($0080)
>e002	2d e1					.word	SyntaxError                   ; """        ($0081)
>e004	2d e1					.word	SyntaxError                   ; "#"        ($0082)
>e006	88 e7					.word	BFUNC_String                  ; "$"        ($0083)
>e008	28 e9					.word	BFUNC_Modulus                 ; "%"        ($0084)
>e00a	9a e7					.word	BFUNC_And                     ; "&"        ($0085)
>e00c	2d e1					.word	SyntaxError                   ; "'"        ($0086)
>e00e	2d e1					.word	SyntaxError                   ; "("        ($0087)
>e010	2d e1					.word	SyntaxError                   ; ")"        ($0088)
>e012	09 e8					.word	BFUNC_Multiply                ; "*"        ($0089)
>e014	3c e7					.word	BFUNC_Add                     ; "+"        ($008a)
>e016	62 e7					.word	BFUNC_Subtract                ; "-"        ($008b)
>e018	60 e8					.word	BFUNC_Divide                  ; "/"        ($008c)
>e01a	2d e1					.word	SyntaxError                   ; ":"        ($008d)
>e01c	2d e1					.word	SyntaxError                   ; ";"        ($008e)
>e01e	a6 e9					.word	BFUNC_LessEqual               ; "<="       ($008f)
>e020	47 e9					.word	BFUNC_NotEquals               ; "<>"       ($0090)
>e022	81 e9					.word	BFUNC_Less                    ; "<"        ($0091)
>e024	44 e9					.word	BFUNC_Equals                  ; "="        ($0092)
>e026	84 e9					.word	BFUNC_GreaterEqual            ; ">="       ($0093)
>e028	a3 e9					.word	BFUNC_Greater                 ; ">"        ($0094)
>e02a	8c e7					.word	BFUNC_ByteInd                 ; "?"        ($0095)
>e02c	e4 e7					.word	BFUNC_Xor                     ; "^"        ($0096)
>e02e	5e eb					.word	COMMAND_Assert                ; "assert"   ($0097)
>e030	5d ea					.word	UNARY_Abs                     ; "abs"      ($0098)
>e032	a5 eb					.word	COMMAND_Clear                 ; "clear"    ($0099)
>e034	19 ee					.word	COMMAND_CLS                   ; "cls"      ($009a)
>e036	48 ea					.word	UNARY_Ch                      ; "ch"       ($009b)
>e038	a0 ee					.word	COMMAND_Do                    ; "do"       ($009c)
>e03a	53 eb					.word	COMMAND_End                   ; "end"      ($009d)
>e03c	2d e1					.word	SyntaxError                   ; "for"      ($009e)
>e03e	2d e1					.word	SyntaxError                   ; "gosub"    ($009f)
>e040	2d e1					.word	SyntaxError                   ; "goto"     ($00a0)
>e042	2d e1					.word	SyntaxError                   ; "input"    ($00a1)
>e044	2d e1					.word	SyntaxError                   ; "if"       ($00a2)
>e046	1c ee					.word	COMMAND_List                  ; "list"     ($00a3)
>e048	2d e1					.word	SyntaxError                   ; "link"     ($00a4)
>e04a	17 ec					.word	COMMAND_Let                   ; "let"      ($00a5)
>e04c	06 ea					.word	UNARY_Len                     ; "len"      ($00a6)
>e04e	2d e1					.word	SyntaxError                   ; "next"     ($00a7)
>e050	8c eb					.word	COMMAND_NewExec               ; "new"      ($00a8)
>e052	db eb					.word	COMMAND_OldExec               ; "old"      ($00a9)
>e054	1f ed					.word	COMMAND_Print                 ; "print"    ($00aa)
>e056	7a ea					.word	UNARY_Page                    ; "page"     ($00ab)
>e058	82 eb					.word	COMMAND_Rem                   ; "rem"      ($00ac)
>e05a	ca ea					.word	COMMAND_Run                   ; "run"      ($00ad)
>e05c	8d ea					.word	UNARY_Rnd                     ; "rnd"      ($00ae)
>e05e	4b eb					.word	COMMAND_Stop                  ; "stop"     ($00af)
>e060	2d e1					.word	SyntaxError                   ; "step"     ($00b0)
>e062	2d e1					.word	SyntaxError                   ; "then"     ($00b1)
>e064	65 ea					.word	UNARY_Top                     ; "top"      ($00b2)
>e066	2d e1					.word	SyntaxError                   ; "to"       ($00b3)
>e068	a6 ee					.word	COMMAND_Until                 ; "until"    ($00b4)
>e06a	bf e7					.word	BFUNC_Or                      ; "|"        ($00b5)
>e06c	c5 e9					.word	BFUNC_StringCompare           ; "~"        ($00b6)
.e06e					TokenText:
>e06e	a1					.byte $a1                             ; $0080 !
>e06f	a2					.byte $a2                             ; $0081 "
>e070	a3					.byte $a3                             ; $0082 #
>e071	a4					.byte $a4                             ; $0083 $
>e072	a5					.byte $a5                             ; $0084 %
>e073	a6					.byte $a6                             ; $0085 &
>e074	a7					.byte $a7                             ; $0086 '
>e075	a8					.byte $a8                             ; $0087 (
>e076	a9					.byte $a9                             ; $0088 )
>e077	aa					.byte $aa                             ; $0089 *
>e078	ab					.byte $ab                             ; $008a +
>e079	ad					.byte $ad                             ; $008b -
>e07a	af					.byte $af                             ; $008c /
>e07b	ba					.byte $ba                             ; $008d :
>e07c	bb					.byte $bb                             ; $008e ;
>e07d	3c bd					.byte $3c,$bd                         ; $008f <=
>e07f	3c be					.byte $3c,$be                         ; $0090 <>
>e081	bc					.byte $bc                             ; $0091 <
>e082	bd					.byte $bd                             ; $0092 =
>e083	3e bd					.byte $3e,$bd                         ; $0093 >=
>e085	be					.byte $be                             ; $0094 >
>e086	bf					.byte $bf                             ; $0095 ?
>e087	de					.byte $de                             ; $0096 ^
>e088	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4         ; $0097 assert
>e08e	41 42 d3				.byte $41,$42,$d3                     ; $0098 abs
>e091	43 4c 45 41 d2				.byte $43,$4c,$45,$41,$d2             ; $0099 clear
>e096	43 4c d3				.byte $43,$4c,$d3                     ; $009a cls
>e099	43 c8					.byte $43,$c8                         ; $009b ch
>e09b	44 cf					.byte $44,$cf                         ; $009c do
>e09d	45 4e c4				.byte $45,$4e,$c4                     ; $009d end
>e0a0	46 4f d2				.byte $46,$4f,$d2                     ; $009e for
>e0a3	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2             ; $009f gosub
>e0a8	47 4f 54 cf				.byte $47,$4f,$54,$cf                 ; $00a0 goto
>e0ac	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4             ; $00a1 input
>e0b1	49 c6					.byte $49,$c6                         ; $00a2 if
>e0b3	4c 49 53 d4				.byte $4c,$49,$53,$d4                 ; $00a3 list
>e0b7	4c 49 4e cb				.byte $4c,$49,$4e,$cb                 ; $00a4 link
>e0bb	4c 45 d4				.byte $4c,$45,$d4                     ; $00a5 let
>e0be	4c 45 ce				.byte $4c,$45,$ce                     ; $00a6 len
>e0c1	4e 45 58 d4				.byte $4e,$45,$58,$d4                 ; $00a7 next
>e0c5	4e 45 d7				.byte $4e,$45,$d7                     ; $00a8 new
>e0c8	4f 4c c4				.byte $4f,$4c,$c4                     ; $00a9 old
>e0cb	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4             ; $00aa print
>e0d0	50 41 47 c5				.byte $50,$41,$47,$c5                 ; $00ab page
>e0d4	52 45 cd				.byte $52,$45,$cd                     ; $00ac rem
>e0d7	52 55 ce				.byte $52,$55,$ce                     ; $00ad run
>e0da	52 4e c4				.byte $52,$4e,$c4                     ; $00ae rnd
>e0dd	53 54 4f d0				.byte $53,$54,$4f,$d0                 ; $00af stop
>e0e1	53 54 45 d0				.byte $53,$54,$45,$d0                 ; $00b0 step
>e0e5	54 48 45 ce				.byte $54,$48,$45,$ce                 ; $00b1 then
>e0e9	54 4f d0				.byte $54,$4f,$d0                     ; $00b2 top
>e0ec	54 cf					.byte $54,$cf                         ; $00b3 to
>e0ee	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc             ; $00b4 until
>e0f3	fc					.byte $fc                             ; $00b5 |
>e0f4	fe					.byte $fe                             ; $00b6 ~
>e0f5	00					.byte $00
.e0f6					TokenTypeInformation:
>e0f6	04					.byte $04                             ; $0080 !
>e0f7	0a					.byte $0a                             ; $0081 "
>e0f8	0a					.byte $0a                             ; $0082 #
>e0f9	04					.byte $04                             ; $0083 $
>e0fa	03					.byte $03                             ; $0084 %
>e0fb	00					.byte $00                             ; $0085 &
>e0fc	0a					.byte $0a                             ; $0086 '
>e0fd	0a					.byte $0a                             ; $0087 (
>e0fe	0a					.byte $0a                             ; $0088 )
>e0ff	03					.byte $03                             ; $0089 *
>e100	02					.byte $02                             ; $008a +
>e101	02					.byte $02                             ; $008b -
>e102	03					.byte $03                             ; $008c /
>e103	0a					.byte $0a                             ; $008d :
>e104	0a					.byte $0a                             ; $008e ;
>e105	01					.byte $01                             ; $008f <=
>e106	01					.byte $01                             ; $0090 <>
>e107	01					.byte $01                             ; $0091 <
>e108	01					.byte $01                             ; $0092 =
>e109	01					.byte $01                             ; $0093 >=
>e10a	01					.byte $01                             ; $0094 >
>e10b	04					.byte $04                             ; $0095 ?
>e10c	00					.byte $00                             ; $0096 ^
>e10d	04					.byte $04                             ; $0097 assert
>e10e	09					.byte $09                             ; $0098 abs
>e10f	04					.byte $04                             ; $0099 clear
>e110	04					.byte $04                             ; $009a cls
>e111	09					.byte $09                             ; $009b ch
>e112	04					.byte $04                             ; $009c do
>e113	04					.byte $04                             ; $009d end
>e114	04					.byte $04                             ; $009e for
>e115	04					.byte $04                             ; $009f gosub
>e116	04					.byte $04                             ; $00a0 goto
>e117	04					.byte $04                             ; $00a1 input
>e118	04					.byte $04                             ; $00a2 if
>e119	04					.byte $04                             ; $00a3 list
>e11a	04					.byte $04                             ; $00a4 link
>e11b	04					.byte $04                             ; $00a5 let
>e11c	09					.byte $09                             ; $00a6 len
>e11d	04					.byte $04                             ; $00a7 next
>e11e	04					.byte $04                             ; $00a8 new
>e11f	04					.byte $04                             ; $00a9 old
>e120	04					.byte $04                             ; $00aa print
>e121	09					.byte $09                             ; $00ab page
>e122	04					.byte $04                             ; $00ac rem
>e123	04					.byte $04                             ; $00ad run
>e124	09					.byte $09                             ; $00ae rnd
>e125	04					.byte $04                             ; $00af stop
>e126	04					.byte $04                             ; $00b0 step
>e127	04					.byte $04                             ; $00b1 then
>e128	09					.byte $09                             ; $00b2 top
>e129	04					.byte $04                             ; $00b3 to
>e12a	04					.byte $04                             ; $00b4 until
>e12b	00					.byte $00                             ; $00b5 |
>e12c	01					.byte $01                             ; $00b6 ~
=$00					KTYPE_PRECBASE = $00
=$08					KTYPE_COMMAND = $08
=$09					KTYPE_UNARYFN = $09
=$0a					KTYPE_SYNTAX = $0a
=$0080					KW_PLING = $0080
=$0081					KW_DQUOTE = $0081
=$0082					KW_HASH = $0082
=$0083					KW_DOLLAR = $0083
=$0084					KW_PERCENT = $0084
=$0085					KW_AMPERSAND = $0085
=$0086					KW_SQUOTE = $0086
=$0087					KW_LPAREN = $0087
=$0088					KW_RPAREN = $0088
=$0089					KW_STAR = $0089
=$008a					KW_PLUS = $008a
=$008b					KW_MINUS = $008b
=$008c					KW_FSLASH = $008c
=$008d					KW_COLON = $008d
=$008e					KW_SEMICOLON = $008e
=$008f					KW_LESSEQUAL = $008f
=$0090					KW_LESSGREATER = $0090
=$0091					KW_LESS = $0091
=$0092					KW_EQUAL = $0092
=$0093					KW_GREATEREQUAL = $0093
=$0094					KW_GREATER = $0094
=$0095					KW_QUESTION = $0095
=$0096					KW_HAT = $0096
=$0097					KW_ASSERT = $0097
=$0098					KW_ABS = $0098
=$0099					KW_CLEAR = $0099
=$009a					KW_CLS = $009a
=$009b					KW_CH = $009b
=$009c					KW_DO = $009c
=$009d					KW_END = $009d
=$009e					KW_FOR = $009e
=$009f					KW_GOSUB = $009f
=$00a0					KW_GOTO = $00a0
=$00a1					KW_INPUT = $00a1
=$00a2					KW_IF = $00a2
=$00a3					KW_LIST = $00a3
=$00a4					KW_LINK = $00a4
=$00a5					KW_LET = $00a5
=$00a6					KW_LEN = $00a6
=$00a7					KW_NEXT = $00a7
=$00a8					KW_NEW = $00a8
=$00a9					KW_OLD = $00a9
=$00aa					KW_PRINT = $00aa
=$00ab					KW_PAGE = $00ab
=$00ac					KW_REM = $00ac
=$00ad					KW_RUN = $00ad
=$00ae					KW_RND = $00ae
=$00af					KW_STOP = $00af
=$00b0					KW_STEP = $00b0
=$00b1					KW_THEN = $00b1
=$00b2					KW_TOP = $00b2
=$00b3					KW_TO = $00b3
=$00b4					KW_UNTIL = $00b4
=$00b5					KW_BAR = $00b5
=$00b6					KW_TILDE = $00b6

;******  Return to file: basic.asm


;******  Processing file: general/support.asm

.e12d					SyntaxError:
.e12d	20 3d e1	jsr $e13d			jsr 	ReportError
>e130	53 59 4e 54 41 58 20 45				.text	"SYNTAX ERROR",0
>e138	52 52 4f 52 00
.e13d					ReportError:
.e13d	fa		plx				plx
.e13e	7a		ply				ply
.e13f	e8		inx				inx
.e140	d0 01		bne $e143			bne 	_REPrint
.e142	c8		iny				iny
.e143					_REPrint:
.e143	20 8f e4	jsr $e48f			jsr 	SIOPrintString
.e146	a5 21		lda $21				lda 	zCurrentLine+1 				; running from tokeniser buffer
.e148	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.e14a	f0 16		beq $e162			beq 	_RENoLineNumber
.e14c	a9 20		lda #$20			lda 	#" "
.e14e	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.e151	a9 40		lda #$40			lda 	#"@"
.e153	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.e156	a0 01		ldy #$01			ldy 	#1
.e158	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e15a	aa		tax				tax
.e15b	c8		iny				iny
.e15c	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e15e	a8		tay				tay
.e15f	20 6a e1	jsr $e16a			jsr 	PrintWordInteger
.e162					_RENoLineNumber:
.e162	a9 0d		lda #$0d			lda 	#13
.e164	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.e167	4c 59 ef	jmp $ef59			jmp 	WarmStart
.e16a					PrintWordInteger:
.e16a	8a		txa				txa
.e16b	a2 00		ldx #$00			ldx 	#0
.e16d	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e170	98		tya				tya
.e171	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e174	c8		iny				iny
.e175	a9 00		lda #$00			lda 	#0
.e177	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e17a	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e17d	20 e1 ed	jsr $ede1			jsr 	CPRPrintInteger
.e180	60		rts				rts
.e181					CheckNextCharacter:
.e181	8d 98 20	sta $2098			sta 	Temp1 						; save character to check
.e184					_CNCLoop:
.e184	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next
.e186	f0 0b		beq $e193			beq 	_CNCFail 					; end of line, so no character
.e188	c8		iny				iny
.e189	c9 20		cmp #$20			cmp 	#' ' 						; skip spaces
.e18b	f0 f7		beq $e184			beq 	_CNCLoop
.e18d	cd 98 20	cmp $2098			cmp 	Temp1 						; fail if not what was wanted
.e190	d0 01		bne $e193			bne 	_CNCFail
.e192	60		rts				rts
.e193					_CNCFail:
.e193	20 3d e1	jsr $e13d			jsr 	ReportError
>e196	4d 49 53 53 49 4e 47 20				.text 	"MISSING TOKEN",$00
>e19e	54 4f 4b 45 4e 00
.e1a4					CopyBasicCode:
.e1a4	a2 00		ldx #$00			ldx 	#0
.e1a6					_CopyLoop:
.e1a6	bd c4 ef	lda $efc4,x			lda 	BasicCode,x
.e1a9	9d 00 23	sta $2300,x			sta 	BasicProgram,x
.e1ac	bd c4 f0	lda $f0c4,x			lda 	BasicCode+$100,x
.e1af	9d 00 24	sta $2400,x			sta 	BasicProgram+$100,x
.e1b2	e8		inx				inx
.e1b3	d0 f1		bne $e1a6			bne 	_CopyLoop
.e1b5	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/data.asm

=$e1b6							currentPosData = *
>0020					zCurrentLine: 	.word 	?					; address of current line (offset word)
>0022					zLowMemory:		.word	?					; next free space after program (arrays,vars etc.)
>0024					zTemp1:			.word 	?					; temporary vars
>0026					zTemp2:			.word 	?
>0028					zTargetAddr: 	.dword 	? 					; address of LHS of assignment, list pointer.
>2000					FixedVariables:	.fill 	27*4 				; address of 26 x 4 byte fixed variables @A-Z
>206c					Control 		.byte 	? 					; 0 = normal, 1 = tokenise, 2 = run program.
>206d					InputLine:		.fill 	EXTWidth+1 			; screen input buffer, cannot cross page.
>2096					HighMemory:		.word 	?					; highest memory location available (2 bytes)
>2098					Temp1:			.dword	?					; 4 byte temporary stores.
>209c					SignCount:		.byte 	? 					; count of signs in divide.
>209d					StringBufferPos:.byte 	? 					; next free slot in string buffer
>209e					RandomSeed 		.word 	? 					; Random Number
>20a0					xCursor 		.byte 	? 					; cursor position
>20a1					yCursor 		.byte 	?
>20a2					breakCheckCount	.byte 	?					; how often check for break.
>20a3					basicStackIndex	.byte 	? 					; index into Basic Stack.
>20a4									.align	256
.2100					TokeniseBuffer:
>2100									.fill 	256
.2200					StringBuffer:
>2200									.fill 	256
.2300					BasicProgram:

;******  Return to file: basic.asm


;******  Processing file: general/evaluate.asm

.e1b6					EvaluateSNError:
.e1b6	4c 2d e1	jmp $e12d			jmp 	SyntaxError
.e1b9					EvaluateMissingQuote:
.e1b9	20 3d e1	jsr $e13d			jsr 	ReportError
>e1bc	4d 49 53 53 49 4e 47 20				.text 	"MISSING QUOTE",$00
>e1c4	51 55 4f 54 45 00
.e1ca					EvaluateStringFull:
.e1ca	20 3d e1	jsr $e13d			jsr 	ReportError
>e1cd	53 54 52 49 4e 47 20 42				.text 	"STRING BUFFER FULL",$00
>e1d5	55 46 46 45 52 20 46 55 4c 4c 00
.e1e0					EvaluateBadHex:
.e1e0	20 3d e1	jsr $e13d			jsr 	ReportError
>e1e3	42 41 44 20 48 45 58 00				.text 	"BAD HEX",$00
.e1eb					EvaluateAtomCurrentLevel:
.e1eb	a9 07		lda #$07			lda 	#7
.e1ed	80 04		bra $e1f3			bra 	EvaluateAtPrecedenceLevel
.e1ef					EvaluateBase:
.e1ef	a2 00		ldx #$00			ldx 	#0 							; reset the stack
.e1f1					EvaluateBaseCurrentLevel:
.e1f1	a9 00		lda #$00			lda 	#0 							; current precedence is zero
.e1f3					EvaluateAtPrecedenceLevel:
.e1f3	48		pha				pha 								; save precedence level
.e1f4	a9 00		lda #$00			lda 	#0 							; zero the result.
.e1f6	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e1f9	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e1fc	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e1ff	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e202					_EVALSkipSpace1:
.e202	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token, skipping over spaces.
.e204	f0 b0		beq $e1b6			beq 	EvaluateSNError 			; end of line, without token.
.e206	c8		iny				iny
.e207	c9 20		cmp #$20			cmp 	#32
.e209	f0 f7		beq $e202			beq 	_EVALSkipSpace1
.e20b	88		dey				dey 								; points at the token.
.e20c	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; is it opening quote ?
.e20e	f0 14		beq $e224			beq 	_EVALString  				; if so load in a constant string
.e210	c9 82		cmp #$82			cmp 	#KW_HASH 					; is it a hash, e.g. hexadecimal.
.e212	f0 36		beq $e24a			beq 	_EVALHexadecimal
.e214	c9 30		cmp #$30			cmp 	#'0'						; is it in range 0-9
.e216	90 04		bcc $e21c			bcc		_EVALGoKeywordVariable 		; yes, it's a keyword or variable.
.e218	c9 3a		cmp #$3a			cmp 	#'9'+1
.e21a	90 03		bcc $e21f			bcc 	_EVALDecimal
.e21c					_EVALGoKeywordVariable:
.e21c	4c a1 e2	jmp $e2a1			jmp 	_EVALKeywordVariable
.e21f					_EVALDecimal:
.e21f	20 fe e2	jsr $e2fe			jsr 	EVALGetDecConstant 			; get decimal constant
.e222	80 34		bra $e258			bra 	_EVALGotAtom 				; got atom.
.e224					_EVALString:
.e224	da		phx				phx 								; save X on stack
.e225	a9 22		lda #$22			lda 	#StringBuffer >> 8 			; set the address in the eval stack
.e227	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e22a	ad 9d 20	lda $209d			lda 	StringBufferPos 			; X = Buffer Position.
.e22d	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; that's the address of the new string
.e230	aa		tax				tax 								; put in X to build the string.
.e231	c8		iny				iny 								; skip over opening quote character
.e232					_EVALStringCopy:
.e232	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character.
.e234	c8		iny				iny
.e235	f0 82		beq $e1b9			beq		EvaluateMissingQuote 		; if zero, then there was no closing quote.
.e237	9d 00 22	sta $2200,x			sta 	StringBuffer,x 				; copy into the buffer
.e23a	e8		inx				inx 								; and bump that pointer.
.e23b	f0 8d		beq $e1ca			beq 	EvaluateStringFull 			; buffer is full.
.e23d	49 81		eor #$81			eor 	#KW_DQUOTE					; keep going if not closing quote.
.e23f	d0 f1		bne $e232			bne 	_EVALStringCopy
.e241	8e 9d 20	stx $209d			stx 	StringBufferPos 			; this is the new next free slot.
.e244	9d ff 21	sta $21ff,x			sta 	StringBuffer-1,x 			; write the zero (EOS) hence EOR to end string.
.e247	fa		plx				plx 								; restore X
.e248	80 0e		bra $e258			bra 	_EVALGotAtom 				; got the atom.
.e24a					_EVALHexaDecimal
.e24a	c8		iny				iny 								; skip over the '#'
.e24b	5a		phy				phy 								; save Y
.e24c	20 6a e3	jsr $e36a			jsr 	EVALGetHexConstant 			; load in hexadecimal constant
.e24f	8c 98 20	sty $2098			sty 	Temp1 						; has Y changed ?
.e252	68		pla				pla
.e253	cd 98 20	cmp $2098			cmp 	Temp1
.e256	f0 88		beq $e1e0			beq 	EvaluateBadHex 				; if not, error.
.e258					_EVALGotAtom:
.e258					_EVALGetOperator:
.e258	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token skip spaces.
.e25a	c8		iny				iny 								; this should be binary operator
.e25b	c9 20		cmp #$20			cmp 	#$20
.e25d	f0 f9		beq $e258			beq 	_EVALGetOperator
.e25f	88		dey				dey
.e260	09 00		ora #$00			ora 	#0 							; to be a binary token must be -ve
.e262	10 3b		bpl $e29f			bpl 	_EVALExitPullA 				; if +ve then exit now.
.e264	da		phx				phx 								; save X
.e265	aa		tax				tax 								; token in X
.e266	bd 76 e0	lda $e076,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e269	8d 98 20	sta $2098			sta 	Temp1 						; save precedence in Temp1
.e26c	fa		plx				plx 								; restore X
.e26d	c9 08		cmp #$08			cmp 	#8 							; if type >= 8, e.g. not binary, then exit.
.e26f	b0 2e		bcs $e29f			bcs 	_EVALExitPullA
.e271	68		pla				pla 								; get and save precedence level.
.e272	48		pha				pha
.e273	cd 98 20	cmp $2098			cmp 	Temp1 						; compare operator precedence - keyword precedence level.
.e276	f0 02		beq $e27a			beq 	_EVALDoCalc					; equal, do it.
.e278	b0 25		bcs $e29f			bcs 	_EVALExitPullA				; too high, then exit.
.e27a					_EVALDoCalc:
.e27a	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token, save on stack and skip it.
.e27c	c8		iny				iny
.e27d	48		pha				pha
.e27e	da		phx				phx
.e27f	e8		inx				inx 								; work out right hand side.
.e280	e8		inx				inx
.e281	e8		inx				inx
.e282	e8		inx				inx
.e283	ad 98 20	lda $2098			lda 	Temp1 						; get current operator precedence level.
.e286	1a		inc a				inc 	a 							; so work it out at the next level.
.e287	20 f3 e1	jsr $e1f3			jsr 	EvaluateAtPrecedenceLevel 	; work out the RHS.
.e28a	fa		plx				plx 								; fix X back.
.e28b	68		pla				pla 								; get keyword
.e28c					_EVALExecuteA:
.e28c	0a		asl a				asl 	a 							; shift left, drop bit 7
.e28d	8d 99 20	sta $2099			sta 	Temp1+1						; save in Temp1.1
.e290	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e292	8d 9a 20	sta $209a			sta 	Temp1+2 					; set at Temp1.2
.e295	a9 6c		lda #$6c			lda 	#$6C 						; make JMP (xxxx)
.e297	8d 98 20	sta $2098			sta 	Temp1+0
.e29a	20 98 20	jsr $2098			jsr 	Temp1 						; call that routine.
.e29d	80 b9		bra $e258			bra 	_EVALGotAtom 				; and loop back again.
.e29f					_EVALExitPullA:
.e29f	68		pla				pla 								; restore precedence.
.e2a0	60		rts				rts
.e2a1					_EVALKeywordVariable:
.e2a1	09 00		ora #$00			ora 	#0 							; check bit 7
.e2a3	10 0f		bpl $e2b4			bpl 	_EVALNotUnaryFunction 		; must be set for unary function
.e2a5	da		phx				phx
.e2a6	aa		tax				tax
.e2a7	bd 76 e0	lda $e076,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e2aa	fa		plx				plx
.e2ab	c9 09		cmp #$09			cmp 	#KTYPE_UNARYFN 				; is it a unary function
.e2ad	d0 05		bne $e2b4			bne 	_EVALNotUnaryFunction
.e2af	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token back
.e2b1	c8		iny				iny 								; consume it
.e2b2	80 d8		bra $e28c			bra 	_EVALExecuteA 				; execute TOS.
.e2b4					_EVALNotUnaryFunction:
.e2b4	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e2b6	10 3d		bpl $e2f5			bpl 	_EVALCheckVariable 			; if ASCII check variable
.e2b8	c9 8b		cmp #$8b			cmp 	#KW_MINUS 					; check negation
.e2ba	f0 0f		beq $e2cb			beq 	_EVALUnaryNegation
.e2bc	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; check left bracket.
.e2be	d0 14		bne $e2d4			bne		_EVALCheckUnaryOperator
.e2c0	c8		iny				iny 								; skip left bracket.
.e2c1	20 f1 e1	jsr $e1f1			jsr 	EvaluateBaseCurrentLevel 	; calculate what's in the bracket.
.e2c4	a9 88		lda #$88			lda 	#KW_RPAREN 					; check right bracket.
.e2c6	20 81 e1	jsr $e181			jsr 	CheckNextCharacter 			; check next character, after spaces.
.e2c9	80 8d		bra $e258			bra 	_EVALGotAtom
.e2cb					_EVALUnaryNegation:
.e2cb	c8		iny				iny 								; skip over the - sign.
.e2cc	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel 	; calculate what's being negatived (...)
.e2cf	20 03 e9	jsr $e903			jsr 	BFUNC_NegateAlways 			; negate it.
.e2d2	80 84		bra $e258			bra 	_EVALGotAtom
.e2d4					_EVALCheckUnaryOperator:
.e2d4	48		pha				pha 								; save indirection operator.
.e2d5	c8		iny				iny 								; skip over the operator
.e2d6	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel 	; calculate the address.
.e2d9	68		pla				pla 								; restore the operator
.e2da	c9 83		cmp #$83			cmp 	#KW_DOLLAR					; $ is for visual typing, it does nothing
.e2dc	f0 0e		beq $e2ec			beq 	_EVALGoGotAtom
.e2de	c9 95		cmp #$95			cmp 	#KW_QUESTION				; byte indirection
.e2e0	f0 07		beq $e2e9			beq 	_EVALByteRead
.e2e2	c9 80		cmp #$80			cmp 	#KW_PLING					; word indirection
.e2e4	f0 09		beq $e2ef			beq 	_EVALWordRead
.e2e6	4c 2d e1	jmp $e12d			jmp 	SyntaxError 				; give up.
.e2e9					_EVALByteRead:
.e2e9	20 a9 e3	jsr $e3a9			jsr 	EVALReadByteIndirect
.e2ec					_EVALGoGotAtom:
.e2ec	4c 58 e2	jmp $e258			jmp 	_EVALGotAtom
.e2ef					_EVALWordRead:
.e2ef	20 d2 e3	jsr $e3d2			jsr 	EVALReadWordIndirect
.e2f2	4c 58 e2	jmp $e258			jmp 	_EVALGotAtom
.e2f5					_EVALCheckVariable:
.e2f5	20 02 e4	jsr $e402			jsr 	VARReference 				; get variable reference to ZTemp1
.e2f8	20 e6 e3	jsr $e3e6			jsr 	EVALReadWordIndirectZTemp	; read that address into current stack level.
.e2fb	4c 58 e2	jmp $e258			jmp 	_EVALGotAtom 				; and go round.
.e2fe					EVALGetDecConstant:
.e2fe	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e300	c9 30		cmp #$30			cmp 	#'0'						; check in range 0-9.
.e302	90 04		bcc $e308			bcc 	_EVGDExit
.e304	c9 3a		cmp #$3a			cmp 	#'9'+1
.e306	90 01		bcc $e309			bcc 	_EVGDValue 					; if so has legal value
.e308					_EVGDExit:
.e308	60		rts				rts
.e309					_EVGDValue:
.e309	48		pha				pha 								; save value, Y on stack
.e30a	5a		phy				phy
.e30b	a0 03		ldy #$03			ldy 	#3 							; 3 shifts.
.e30d	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; push x1 value on stack.
.e310	48		pha				pha
.e311	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e314	48		pha				pha
.e315	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e318	48		pha				pha
.e319	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e31c	48		pha				pha
.e31d					_EVGDLoop:
.e31d	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; rotate left once.
.e320	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e323	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e326	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e329	c0 02		cpy #$02			cpy 	#2 							; if done it twice now
.e32b	d0 1d		bne $e34a			bne 	_EVGDNoAdd
.e32d	18		clc				clc 								; then it will be x 4, adding +1 => x 5
.e32e	68		pla				pla
.e32f	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e332	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e335	68		pla				pla
.e336	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e339	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e33c	68		pla				pla
.e33d	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e340	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e343	68		pla				pla
.e344	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e347	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e34a					_EVGDNoAdd:
.e34a	88		dey				dey
.e34b	d0 d0		bne $e31d			bne 	_EVGDLoop
.e34d	7a		ply				ply 								; restore YA
.e34e	68		pla				pla
.e34f	c8		iny				iny 								; next character
.e350	29 0f		and #$0f			and 	#15 						; force into range and put in.
.e352	18		clc				clc
.e353	7d 00 04	adc $0400,x			adc 	evalStack+0,x 				; add digit in
.e356	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e359	90 a3		bcc $e2fe			bcc 	EVALGetDecConstant 			; propogate constant through
.e35b	fe 01 04	inc $0401,x			inc 	evalStack+1,x
.e35e	d0 9e		bne $e2fe			bne 	EVALGetDecConstant
.e360	fe 02 04	inc $0402,x			inc 	evalStack+2,x
.e363	d0 99		bne $e2fe			bne 	EVALGetDecConstant
.e365	fe 03 04	inc $0403,x			inc 	evalStack+3,x
.e368	80 94		bra $e2fe			bra 	EVALGetDecConstant 			; go back and try again.
.e36a					EVALGetHexConstant:
.e36a	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e36c	20 9e e3	jsr $e39e			jsr 	EVALToUpper 				; make upper case
.e36f	38		sec				sec
.e370	e9 30		sbc #$30			sbc 	#"0" 						; range 0-9
.e372	90 0a		bcc $e37e			bcc 	_EVGHExit 					; exit if CC
.e374	c9 0a		cmp #$0a			cmp 	#9+1 						; if < 9 have a legal value.
.e376	90 07		bcc $e37f			bcc 	_EVGHValue
.e378	e9 07		sbc #$07			sbc 	#7 							; now in range 10-15 if okay.
.e37a	c9 10		cmp #$10			cmp 	#15+1
.e37c	90 01		bcc $e37f			bcc 	_EVGHValue
.e37e					_EVGHExit:
.e37e	60		rts				rts
.e37f					_EVGHValue:
.e37f	5a		phy				phy 								; save Y and new digit.
.e380	48		pha				pha
.e381	a0 04		ldy #$04			ldy 	#4 							; rotate left 4
.e383					_EVGHRotate:
.e383	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e386	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e389	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e38c	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e38f	88		dey				dey
.e390	d0 f1		bne $e383			bne 	_EVGHRotate
.e392	68		pla				pla 								; restore digit and X
.e393	7a		ply				ply
.e394	c8		iny				iny 								; next character
.e395	18		clc				clc
.e396	1d 00 04	ora $0400,x			ora 	evalStack+0,x 				; add digit in
.e399	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e39c	80 cc		bra $e36a			bra 	EVALGetHexConstant 			; go back and try again.
.e39e					EVALToUpper:
.e39e	c9 61		cmp #$61			cmp 	#'a'
.e3a0	90 06		bcc $e3a8			bcc 	_EVTUExit
.e3a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.e3a4	b0 02		bcs $e3a8			bcs 	_EVTUExit
.e3a6	49 20		eor #$20			eor 	#32
.e3a8					_EVTUExit:
.e3a8	60		rts				rts
.e3a9					EVALReadByteIndirect:
.e3a9	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e3ac	85 24		sta $24				sta 	zTemp1
.e3ae	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e3b1	85 25		sta $25				sta 	zTemp1+1
.e3b3	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e3b6	85 26		sta $26				sta 	zTemp1+2
.e3b8	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e3bb	85 27		sta $27				sta 	zTemp1+3
.e3bd	5a		phy				phy
.e3be	a0 00		ldy #$00			ldy 	#0 							; read byte
.e3c0	b1 24		lda ($24),y			lda 	(zTemp1),y
.e3c2	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3c5	7a		ply				ply
.e3c6	a9 00		lda #$00			lda 	#0 							; zero upper three bytes
.e3c8	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e3cb	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e3ce	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e3d1	60		rts				rts
.e3d2					EVALReadWordIndirect:
.e3d2	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e3d5	85 24		sta $24				sta 	zTemp1
.e3d7	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e3da	85 25		sta $25				sta 	zTemp1+1
.e3dc	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e3df	85 26		sta $26				sta 	zTemp1+2
.e3e1	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e3e4	85 27		sta $27				sta 	zTemp1+3
.e3e6					EVALReadWordIndirectZTemp:
.e3e6	5a		phy				phy
.e3e7	a0 00		ldy #$00			ldy 	#0 							; read word
.e3e9	b1 24		lda ($24),y			lda 	(zTemp1),y
.e3eb	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3ee	c8		iny				iny
.e3ef	b1 24		lda ($24),y			lda 	(zTemp1),y
.e3f1	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e3f4	c8		iny				iny
.e3f5	b1 24		lda ($24),y			lda 	(zTemp1),y
.e3f7	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e3fa	c8		iny				iny
.e3fb	b1 24		lda ($24),y			lda 	(zTemp1),y
.e3fd	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e400	7a		ply				ply
.e401	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/variable.asm

.e402					VARReference:
.e402	38		sec				sec 								; check range @-Z there
.e403	c9 40		cmp #$40			cmp 	#'@'
.e405	90 04		bcc $e40b			bcc 	_VARRError
.e407	c9 5b		cmp #$5b			cmp 	#'Z'+1 						; there are 27 variables @ and A-Z
.e409	90 03		bcc $e40e			bcc 	_VARROkay
.e40b					_VARRError:
.e40b	4c 2d e1	jmp $e12d			jmp		SyntaxError
.e40e					_VARROkay:
.e40e	c8		iny				iny 								; consume the variable.
.e40f	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it @@ AA BB CC ?
.e411	f0 1b		beq $e42e			beq 	_VARArrayAccess 			; array access AA0 AA1 etc.
.e413	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get that second character
.e415	88		dey				dey 								; point back to the first character
.e416	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; if ( then it is A(x) format.
.e418	f0 14		beq $e42e			beq 	_VARArrayAccess
.e41a	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; reget variable.
.e41c	c8		iny				iny
.e41d	29 1f		and #$1f			and		#31 						; mask out
.e41f	0a		asl a				asl 	a 							; x 4
.e420	0a		asl a				asl 	a
.e421	85 24		sta $24				sta 	zTemp1+0 					; rely on variables being page aligned.
.e423	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e425	85 25		sta $25				sta 	zTemp1+1
.e427	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.e429	85 26		sta $26				sta 	zTemp1+2
.e42b	85 27		sta $27				sta 	zTemp1+3 					; return with address set.
.e42d	60		rts				rts
.e42e					_VARArrayAccess:
.e42e	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get variable
.e430	c8		iny				iny
.e431	29 1f		and #$1f			and 	#31 						; mask it off
.e433	48		pha				pha 								; save on the stack.
.e434	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel 	; calculate the index.
.e437	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; multiply by four.
.e43a	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e43d	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e440	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e443	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e446	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e449	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e44c	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e44f	68		pla				pla 								; put address in zTemp1
.e450	0a		asl a				asl 	a 							; x 4
.e451	0a		asl a				asl 	a
.e452	85 24		sta $24				sta 	zTemp1+0 					; rely on variables being page aligned.
.e454	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e456	85 25		sta $25				sta 	zTemp1+1
.e458	5a		phy				phy
.e459	a0 00		ldy #$00			ldy 	#0 							; calculate	evalStack+0,3 + (zTemp)
.e45b	b1 24		lda ($24),y			lda 	(zTemp1),y
.e45d	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e460	48		pha				pha 								; save first result as we need the indirection.
.e461	c8		iny				iny 								; 2nd byte
.e462	b1 24		lda ($24),y			lda 	(zTemp1),y
.e464	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e467	85 25		sta $25				sta 	zTemp1+1
.e469	68		pla				pla 								; save the low byte.
.e46a	85 24		sta $24				sta 	zTemp1+0
.e46c	a9 00		lda #$00			lda 	#0
.e46e	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e471	85 26		sta $26				sta 	zTemp1+2
.e473	a9 00		lda #$00			lda 	#0
.e475	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e478	85 27		sta $27				sta 	zTemp1+3
.e47a	7a		ply				ply 								; restore Y, address setup
.e47b	60		rts				rts
.e47c	80 fe		bra $e47c	x1:		bra 	x1

;******  Return to file: basic.asm


;******  Processing file: general/screenio.asm

.e47e					SIOInitialise:
.e47e	20 b8 b0	jsr $b0b8			jsr 	EXTReset 					; reset video
.e481					SIOClearScreen:
.e481	20 68 b0	jsr $b068			jsr 	EXTClearScreen 				; clear screen
.e484					SIOHomeCursor:
.e484	48		pha				pha 								; home cursor
.e485	a9 00		lda #$00			lda 	#0
.e487	8d a0 20	sta $20a0			sta 	xCursor
.e48a	8d a1 20	sta $20a1			sta 	yCursor
.e48d	68		pla				pla
.e48e	60		rts				rts
.e48f					SIOPrintString:
.e48f	48		pha				pha 								; save registers
.e490	da		phx				phx
.e491	5a		phy				phy
.e492	86 26		stx $26				stx 	zTemp2 						; set up indirect pointer
.e494	84 27		sty $27				sty 	zTemp2+1
.e496	a0 00		ldy #$00			ldy 	#0
.e498					_SIOPSLoop:
.e498	b1 26		lda ($26),y			lda 	(zTemp2),y 					; read next, exit if 0
.e49a	f0 1c		beq $e4b8			beq 	_SIOPSExit
.e49c	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter 			; print and bump
.e49f	c8		iny				iny
.e4a0	d0 f6		bne $e498			bne 	_SIOPSLoop
.e4a2	20 3d e1	jsr $e13d			jsr 	ReportError
>e4a5	42 41 44 20 53 54 52 49				.text 	"BAD STRING PRINTED",$00
>e4ad	4e 47 20 50 52 49 4e 54 45 44 00
.e4b8					_SIOPSExit:
.e4b8	7a		ply				ply 								; restore and exit.
.e4b9	fa		plx				plx
.e4ba	68		pla				pla
.e4bb	60		rts				rts
.e4bc					SIOPrintCharacter:
.e4bc	48		pha				pha 								; save AXY
.e4bd	da		phx				phx
.e4be	5a		phy				phy
.e4bf	c9 0d		cmp #$0d			cmp 	#13 						; CR ?
.e4c1	f0 12		beq $e4d5			beq 	_SIOPReturn
.e4c3	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor 				; load cursor position in.
.e4c6	29 3f		and #$3f			and 	#$3F 						; PETSCII conversion
.e4c8	20 5c b0	jsr $b05c			jsr 	EXTWriteScreen 				; write character out.
.e4cb	ee a0 20	inc $20a0			inc 	xCursor 					; move right
.e4ce	ad a0 20	lda $20a0			lda 	xCursor 					; reached the RHS
.e4d1	c9 28		cmp #$28			cmp 	#EXTWidth
.e4d3	90 15		bcc $e4ea			bcc 	_SIOPExit
.e4d5					_SIOPReturn:
.e4d5	a9 00		lda #$00			lda 	#0 							; zero x
.e4d7	8d a0 20	sta $20a0			sta 	xCursor
.e4da	ee a1 20	inc $20a1			inc 	yCursor 					; go down
.e4dd	ad a1 20	lda $20a1			lda 	yCursor
.e4e0	c9 19		cmp #$19			cmp 	#EXTHeight 					; off the bottom ?
.e4e2	90 06		bcc $e4ea			bcc 	_SIOPExit
.e4e4	20 86 b0	jsr $b086			jsr 	EXTScrollDisplay 			; scroll display up
.e4e7	ce a1 20	dec $20a1			dec 	yCursor 					; cursor on bottom line.
.e4ea					_SIOPExit:
.e4ea	7a		ply				ply 								; restore and exit.
.e4eb	fa		plx				plx
.e4ec	68		pla				pla
.e4ed	60		rts				rts
.e4ee					SIOGetKey:
.e4ee	20 0c b0	jsr $b00c			jsr 	EXTReadKeyPort 				; wait for a key
.e4f1	f0 fb		beq $e4ee			beq 	SIOGetKey
.e4f3	20 9e e3	jsr $e39e			jsr 	EVALToUpper 				; capitalise it.
.e4f6	4c 17 b0	jmp $b017			jmp 	EXTRemoveKeyPressed 		; remove from the queue.
.e4f9					SIOReadLine:
.e4f9	48		pha				pha 								; save registers
.e4fa	da		phx				phx
.e4fb	5a		phy				phy
.e4fc					_SIORLoop:
.e4fc	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor 				; cursor in XY
.e4ff	20 4d b0	jsr $b04d			jsr 	EXTReadScreen 				; read the display.
.e502	48		pha				pha 								; save on stack.
.e503	a9 66		lda #$66			lda 	#102 						; write cursor out
.e505	20 5c b0	jsr $b05c			jsr 	EXTWriteScreen
.e508	20 ee e4	jsr $e4ee			jsr 	SIOGetKey
.e50b	aa		tax				tax 								; save in X
.e50c	68		pla				pla 								; old character
.e50d	da		phx				phx 								; save key pressed
.e50e	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor 				; cursor in XY
.e511	20 5c b0	jsr $b05c			jsr 	EXTWriteScreen
.e514	68		pla				pla
.e515	c9 01		cmp #$01			cmp 	#"A"-64 					; control characters
.e517	f0 29		beq $e542			beq 	_SIOCursorLeft
.e519	c9 13		cmp #$13			cmp 	#"S"-64
.e51b	f0 49		beq $e566			beq 	_SIOCursorDown
.e51d	c9 04		cmp #$04			cmp 	#"D"-64
.e51f	f0 2d		beq $e54e			beq 	_SIOCursorRight
.e521	c9 17		cmp #$17			cmp 	#"W"-64
.e523	f0 35		beq $e55a			beq 	_SIOCursorUp
.e525	c9 1a		cmp #$1a			cmp 	#"Z"-64
.e527	f0 49		beq $e572			beq 	_SIOClearScreen
.e529	c9 08		cmp #$08			cmp 	#"H"-64
.e52b	f0 4a		beq $e577			beq 	_SIOBackspace
.e52d	c9 0d		cmp #$0d			cmp 	#13 						; CR
.e52f	f0 0e		beq $e53f			beq 	_SIOGoReturn
.e531	c9 20		cmp #$20			cmp 	#32 						; any control
.e533	90 c7		bcc $e4fc			bcc 	_SIORLoop
.e535	48		pha				pha
.e536	20 b7 e5	jsr $e5b7			jsr 	_SIOInsert 					; insert a space for new character
.e539	68		pla				pla
.e53a	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter 			; print character in A
.e53d	80 bd		bra $e4fc			bra 	_SIORLoop
.e53f					_SIOGoReturn:
.e53f	4c e2 e5	jmp $e5e2			jmp 	_SIOReturn
.e542					_SIOCursorLeft:
.e542	ce a0 20	dec $20a0			dec 	xCursor
.e545	10 b5		bpl $e4fc			bpl 	_SIORLoop
.e547	a9 27		lda #$27			lda 	#EXTWidth-1
.e549					_SIOWXLoop:
.e549	8d a0 20	sta $20a0			sta 	xCursor
.e54c	80 ae		bra $e4fc			bra 	_SIORLoop
.e54e					_SIOCursorRight:
.e54e	ee a0 20	inc $20a0			inc 	xCursor
.e551	ad a0 20	lda $20a0			lda 	xCursor
.e554	49 28		eor #$28			eor 	#EXTWidth
.e556	d0 a4		bne $e4fc			bne 	_SIORLoop
.e558	80 ef		bra $e549			bra 	_SIOWXLoop
.e55a					_SIOCursorUp:
.e55a	ce a1 20	dec $20a1			dec 	yCursor
.e55d	10 9d		bpl $e4fc			bpl 	_SIORLoop
.e55f	a9 18		lda #$18			lda 	#EXTHeight-1
.e561					_SIOWYLoop:
.e561	8d a1 20	sta $20a1			sta 	yCursor
.e564	80 96		bra $e4fc			bra 	_SIORLoop
.e566					_SIOCursorDown:
.e566	ee a1 20	inc $20a1			inc 	yCursor
.e569	ad a1 20	lda $20a1			lda 	yCursor
.e56c	49 19		eor #$19			eor 	#EXTHeight
.e56e	d0 8c		bne $e4fc			bne 	_SIORLoop
.e570	80 ef		bra $e561			bra 	_SIOWYLoop
.e572					_SIOClearScreen:
.e572	20 81 e4	jsr $e481			jsr 	SIOClearScreen
.e575	80 85		bra $e4fc			bra 	_SIORLoop
.e577					_SIOBackspace:
.e577	ad a0 20	lda $20a0			lda 	xCursor 					; backspace possible ?
.e57a	f0 80		beq $e4fc			beq 	_SIORLoop 					; start of line, no.
.e57c	48		pha				pha 								; save position.
.e57d	c9 27		cmp #$27			cmp 	#EXTWidth-1 				; not required
.e57f	f0 1c		beq $e59d			beq 	_SIONoShift
.e581					_SIOShift2:
.e581	ee a0 20	inc $20a0			inc 	xCursor 					; copy character backward
.e584	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor
.e587	20 4d b0	jsr $b04d			jsr 	EXTReadScreen
.e58a	ce a0 20	dec $20a0			dec 	xCursor
.e58d	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor
.e590	20 5c b0	jsr $b05c			jsr 	EXTWriteScreen
.e593	ee a0 20	inc $20a0			inc 	xCursor
.e596	ad a0 20	lda $20a0			lda 	xCursor
.e599	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e59b	d0 e4		bne $e581			bne 	_SIOShift2
.e59d					_SIONoShift:
.e59d	a9 27		lda #$27			lda 	#EXTWidth-1 				; space on far end.
.e59f	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor
.e5a2	a9 20		lda #$20			lda 	#32
.e5a4	20 5c b0	jsr $b05c			jsr 	EXTWriteScreen
.e5a7	68		pla				pla 								; restore cursor, back one.
.e5a8	3a		dec a				dec 	a
.e5a9	8d a0 20	sta $20a0			sta 	xCursor
.e5ac	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor 				; overwrite
.e5af	a9 20		lda #$20			lda 	#32
.e5b1	20 5c b0	jsr $b05c			jsr 	EXTWriteScreen
.e5b4	4c fc e4	jmp $e4fc			jmp	 	_SIORLoop
.e5b7					_SIOInsert:
.e5b7	ad a0 20	lda $20a0			lda 	xCursor 					; at far right, nothing to do.
.e5ba	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e5bc	f0 23		beq $e5e1			beq 	_SIOIExit
.e5be	85 26		sta $26				sta 	zTemp2 						; save in temporary workspace.
.e5c0	a9 27		lda #$27			lda 	#EXTWidth-1 				; cursor at far right.
.e5c2	8d a0 20	sta $20a0			sta 	xCursor
.e5c5					_SIOShift:
.e5c5	ce a0 20	dec $20a0			dec 	xCursor 					; copy character forward
.e5c8	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor
.e5cb	20 4d b0	jsr $b04d			jsr 	EXTReadScreen
.e5ce	ee a0 20	inc $20a0			inc 	xCursor
.e5d1	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor
.e5d4	20 5c b0	jsr $b05c			jsr 	EXTWriteScreen
.e5d7	ce a0 20	dec $20a0			dec 	xCursor
.e5da	ad a0 20	lda $20a0			lda 	xCursor						; until shifted line to this point.
.e5dd	c5 26		cmp $26				cmp 	zTemp2
.e5df	d0 e4		bne $e5c5			bne 	_SIOShift
.e5e1					_SIOIExit:
.e5e1	60		rts				rts
.e5e2					_SIOReturn:
.e5e2	a9 00		lda #$00			lda 	#0 							; copy line in from screen.
.e5e4	8d a0 20	sta $20a0			sta 	xCursor
.e5e7					_SIOCopy:
.e5e7	20 1c e6	jsr $e61c			jsr 	SIOLoadCursor
.e5ea	20 4d b0	jsr $b04d			jsr 	EXTReadScreen
.e5ed	49 20		eor #$20			eor 	#$20
.e5ef	18		clc				clc
.e5f0	69 20		adc #$20			adc 	#$20
.e5f2	ae a0 20	ldx $20a0			ldx 	xCursor
.e5f5	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e5f8	ee a0 20	inc $20a0			inc 	xCursor
.e5fb	ad a0 20	lda $20a0			lda 	xCursor
.e5fe	c9 28		cmp #$28			cmp 	#EXTWidth
.e600	d0 e5		bne $e5e7			bne 	_SIOCopy
.e602	aa		tax				tax 								; X contains width
.e603					_SIOStrip:
.e603	ca		dex				dex									; back one
.e604	30 07		bmi $e60d			bmi		_SIOFound 					; if -ve gone too far
.e606	bd 6d 20	lda $206d,x			lda 	InputLine,x 				; is there a space here
.e609	c9 20		cmp #$20			cmp 	#' '
.e60b	f0 f6		beq $e603			beq 	_SIOStrip
.e60d					_SIOFound:
.e60d	e8		inx				inx
.e60e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.e610	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e613	a9 0d		lda #$0d			lda 	#13 						; print a CR and exit
.e615	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.e618	7a		ply				ply
.e619	fa		plx				plx
.e61a	68		pla				pla
.e61b	60		rts				rts
.e61c					SIOLoadCursor:
.e61c	48		pha				pha
.e61d	ad a1 20	lda $20a1			lda 	yCursor  					; Y Position
.e620	0a		asl a				asl 	a 							; x 2 	(80)
.e621	0a		asl a				asl 	a 							; x 2 	(160)
.e622	6d a1 20	adc $20a1			adc 	yCursor 					; x 5 	(200) (CC)
.e625	85 24		sta $24				sta 	zTemp1
.e627	a9 00		lda #$00			lda 	#0
.e629	85 25		sta $25				sta 	zTemp1+1
.e62b	06 24		asl $24				asl 	zTemp1						; x 10
.e62d	26 25		rol $25				rol 	zTemp1+1
.e62f	06 24		asl $24				asl 	zTemp1						; x 20
.e631	26 25		rol $25				rol 	zTemp1+1
.e633	06 24		asl $24				asl 	zTemp1						; x 40
.e635	26 25		rol $25				rol 	zTemp1+1 					; (CC)
.e637	a5 24		lda $24				lda 	zTemp1 						; add X
.e639	6d a0 20	adc $20a0			adc 	xCursor
.e63c	aa		tax				tax
.e63d	a5 25		lda $25				lda 	zTemp1+1
.e63f	69 00		adc #$00			adc 	#0
.e641	a8		tay				tay
.e642	68		pla				pla 								; restore and exit
.e643	60		rts				rts
.e644					SIOPrintHex:
.e644	48		pha				pha
.e645	48		pha				pha
.e646	a9 20		lda #$20			lda 	#32
.e648	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.e64b	68		pla				pla
.e64c	48		pha				pha
.e64d	4a		lsr a				lsr 	a
.e64e	4a		lsr a				lsr 	a
.e64f	4a		lsr a				lsr 	a
.e650	4a		lsr a				lsr 	a
.e651	20 5a e6	jsr $e65a			jsr 	_SIOPHex
.e654	68		pla				pla
.e655	20 5a e6	jsr $e65a			jsr 	_SIOPHex
.e658	68		pla				pla
.e659	60		rts				rts
.e65a					_SIOPHex:
.e65a	29 0f		and #$0f			and 	#15
.e65c	c9 0a		cmp #$0a			cmp 	#10
.e65e	90 02		bcc $e662			bcc 	_SIOPHex2
.e660	69 06		adc #$06			adc 	#6
.e662					_SIOPHex2:
.e662	69 30		adc #$30			adc 	#48
.e664	4c bc e4	jmp $e4bc			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: general/tokeniser.asm

.e667					TokeniseString:
.e667	a0 00		ldy #$00			ldy 	#0							; source
.e669	a2 00		ldx #$00			ldx 	#0 							; target
.e66b					_TokLoop:
.e66b	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get first
.e66d	f0 5d		beq $e6cc			beq 	_TokExit 					; End, exit.
.e66f	c9 20		cmp #$20			cmp 	#32 						; if space, copy it
.e671	f0 35		beq $e6a8			beq 	_TokCopy1
.e673	c9 22		cmp #$22			cmp 	#'"' 						; if string, copy that in.
.e675	f0 3a		beq $e6b1			beq 	_TokCopyString
.e677	c9 30		cmp #$30			cmp 	#"0" 						; punctuation, search for it.
.e679	90 22		bcc $e69d			bcc 	_TokPunctuation
.e67b	c9 3a		cmp #$3a			cmp 	#"9"+1 						; digits are just copied over.
.e67d	90 29		bcc $e6a8			bcc 	_TokCopy1
.e67f	c9 41		cmp #$41			cmp 	#"A"						; more punctuation
.e681	90 1a		bcc $e69d			bcc 	_TokPunctuation
.e683	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; and more punctuation
.e685	b0 16		bcs $e69d			bcs 	_TokPunctuation
.e687					_TokWord:
.e687	20 d2 e6	jsr $e6d2			jsr 	TokeniseSearch 				; search for tokenised word.
.e68a	b0 16		bcs $e6a2			bcs 	_TokFound 					; if successful, copy it out.
.e68c					_TokSkip:
.e68c	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy all A-Z as can't start token in mid word.
.e68e	c9 41		cmp #$41			cmp 	#"A"
.e690	90 d9		bcc $e66b			bcc 	_TokLoop
.e692	c9 5b		cmp #$5b			cmp 	#"Z"+1
.e694	b0 d5		bcs $e66b			bcs 	_TokLoop
.e696	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e699	e8		inx				inx
.e69a	c8		iny				iny
.e69b	80 ef		bra $e68c			bra 	_TokSkip
.e69d					_TokPunctuation:
.e69d	20 d2 e6	jsr $e6d2			jsr 	TokeniseSearch 				; find it.
.e6a0	90 06		bcc $e6a8			bcc 	_TokCopy1 					; if found, just copy 1 character
.e6a2					_TokFound:
.e6a2	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; save in tokenise buffer.
.e6a5	e8		inx				inx 								; advance target ; source is already advanced.
.e6a6	80 c3		bra $e66b			bra 	_TokLoop 					; do the next character.
.e6a8					_TokCopy1:
.e6a8	b1 24		lda ($24),y			lda 	(zTemp1),y
.e6aa	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6ad	e8		inx				inx
.e6ae	c8		iny				iny
.e6af	80 ba		bra $e66b			bra 	_TokLoop
.e6b1					_TokCopyString:
.e6b1	a9 81		lda #$81			lda 	#KW_DQUOTE 					; output double quote token
.e6b3	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6b6	e8		inx				inx 								; skip buffer and first quote.
.e6b7	c8		iny				iny
.e6b8					_TokCSLoop:
.e6b8	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get next character
.e6ba	f0 10		beq $e6cc			beq 	_TokExit 					; if EOL, then you have a mismatch, but we exit.
.e6bc	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; write to buffer
.e6bf	e8		inx				inx 								; advance both.
.e6c0	c8		iny				iny
.e6c1	c9 22		cmp #$22			cmp 	#'"'						; keep going till other quote found.
.e6c3	d0 f3		bne $e6b8			bne 	_TokCSLoop
.e6c5	a9 81		lda #$81			lda 	#KW_DQUOTE 					; add the trailing quote token, overwriting the
.e6c7	9d ff 20	sta $20ff,x			sta 	TokeniseBuffer-1,x 			; " character that's just been copied
.e6ca	80 9f		bra $e66b			bra 	_TokLoop
.e6cc					_TokExit:
.e6cc	a9 00		lda #$00			lda 	#0 							; mark the end of the tokenise buffer.
.e6ce	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6d1	60		rts				rts
.e6d2					TokeniseSearch:
.e6d2	48		pha				pha 								; save AXY
.e6d3	da		phx				phx
.e6d4	5a		phy				phy
.e6d5	a9 80		lda #$80			lda 	#128 						; zTemp2 keeps track of the token #
.e6d7	85 26		sta $26				sta 	zTemp2
.e6d9	a2 00		ldx #$00			ldx 	#0 							; index into TokenText table.
.e6db	bd 6e e0	lda $e06e,x	_TSNext:lda 	TokenText,x 				; get the first token character
.e6de	29 7f		and #$7f			and 	#$7F 						; bit 7 marks the end.
.e6e0	d1 24		cmp ($24),y			cmp 	(zTemp1),y 					; do the characters match.
.e6e2	f0 13		beq $e6f7			beq 	_TSTryFullMatch 			; if so, try the full match.
.e6e4					_TSGotoNext:
.e6e4	bd 6e e0	lda $e06e,x			lda 	TokenText,x 				; read it
.e6e7	e8		inx				inx 								; bump index
.e6e8	0a		asl a				asl 	a 							; shift into C
.e6e9	90 f9		bcc $e6e4			bcc 	_TSGotoNext 				; keep going until read the end character
.e6eb	e6 26		inc $26				inc 	zTemp2 						; bump the current token pointer.
.e6ed	bd 6e e0	lda $e06e,x			lda 	TokenText,x 				; look at the first character of the next token
.e6f0	d0 e9		bne $e6db			bne 	_TSNext 					; if non-zero, go to the next.
.e6f2					_TSFail:
.e6f2	7a		ply				ply 								; fail.
.e6f3	fa		plx				plx
.e6f4	68		pla				pla
.e6f5	18		clc				clc 				 				; return with carry clear.
.e6f6	60		rts				rts
.e6f7					_TSTryFullMatch:
.e6f7	da		phx				phx									; save X and Y.
.e6f8	5a		phy				phy
.e6f9					_TSFullMatch:
.e6f9	bd 6e e0	lda $e06e,x			lda 	TokenText,x 				; compare the 7 bits.
.e6fc	29 7f		and #$7f			and 	#$7F
.e6fe	d1 24		cmp ($24),y			cmp 	(zTemp1),y
.e700	d0 15		bne $e717			bne 	_TSFullFail 				; different, this one doesn't match.
.e702	bd 6e e0	lda $e06e,x			lda 	TokenText,x
.e705	e8		inx				inx 								; advance to next character
.e706	c8		iny				iny
.e707	0a		asl a				asl 	a 							; bit 7 of token text in C
.e708	90 ef		bcc $e6f9			bcc 	_TSFullMatch
.e70a	84 27		sty $27				sty 	zTemp2+1 					; save the Y after last
.e70c	68		pla				pla 								; so we don't restore Y
.e70d	68		pla				pla 								; or X from the full test.
.e70e	7a		ply				ply 								; restore original Y and X and A
.e70f	fa		plx				plx
.e710	68		pla				pla
.e711	a5 26		lda $26				lda 	zTemp2 						; and return token ID in A
.e713	a4 27		ldy $27				ldy 	zTemp2+1 					; Y after the tokenised text.
.e715	38		sec				sec 								; with carry set.
.e716	60		rts				rts
.e717					_TSFullFail:
.e717	7a		ply				ply 								; restore Y and X
.e718	fa		plx				plx
.e719	80 c9		bra $e6e4			bra 	_TSGotoNext 				; and go to the next token to test.
.e71b					TokeniseTest:
.e71b	a9 27		lda #$27			lda 	#TTString & $FF
.e71d	85 24		sta $24				sta 	zTemp1
.e71f	a9 e7		lda #$e7			lda 	#TTString >> 8
.e721	85 25		sta $25				sta 	zTemp1+1
.e723	20 67 e6	jsr $e667			jsr 	TokeniseString
.e726	ea		nop				nop
.e727					TTString:
>e727	20 41 42 43 44 20 34 31				.text 	' ABCD 41$"LENA"5LENA',0 			; 4 1 $[T] "LENA" 5 LEN[T] A
>e72f	24 22 4c 45 4e 41 22 35 4c 45 4e 41 00

;******  Return to file: basic.asm


;******  Processing file: binary/arithmetic.asm

.e73c					BFUNC_Add:
.e73c	18		clc				clc
.e73d	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e740	7d 04 04	adc $0404,x			adc 	evalStack+4,x
.e743	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e746	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e749	7d 05 04	adc $0405,x			adc 	evalStack+5,x
.e74c	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e74f	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e752	7d 06 04	adc $0406,x			adc 	evalStack+6,x
.e755	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e758	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e75b	7d 07 04	adc $0407,x			adc 	evalStack+7,x
.e75e	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e761	60		rts				rts
.e762					BFUNC_Subtract:
.e762	38		sec				sec
.e763	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e766	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e769	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e76c	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e76f	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e772	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e775	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e778	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e77b	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e77e	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e781	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e784	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e787	60		rts				rts
.e788					BFUNC_String:
.e788	20 3c e7	jsr $e73c			jsr 	BFUNC_Add
.e78b	60		rts				rts
.e78c					BFUNC_ByteInd:
.e78c	20 3c e7	jsr $e73c			jsr 	BFUNC_Add
.e78f	20 a9 e3	jsr $e3a9			jsr 	EVALReadByteIndirect
.e792	60		rts				rts
.e793					BFUNC_WordInd:
.e793	20 3c e7	jsr $e73c			jsr 	BFUNC_Add
.e796	20 d2 e3	jsr $e3d2			jsr 	EVALReadWordIndirect
.e799	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/binary.asm

.e79a					BFUNC_And:
.e79a	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e79d	3d 04 04	and $0404,x			and 	evalStack+4,x
.e7a0	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e7a3	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7a6	3d 05 04	and $0405,x			and 	evalStack+5,x
.e7a9	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7ac	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7af	3d 06 04	and $0406,x			and 	evalStack+6,x
.e7b2	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7b5	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7b8	3d 07 04	and $0407,x			and 	evalStack+7,x
.e7bb	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7be	60		rts				rts
.e7bf					BFUNC_Or:
.e7bf	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e7c2	1d 04 04	ora $0404,x			ora 	evalStack+4,x
.e7c5	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e7c8	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7cb	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e7ce	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7d1	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7d4	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e7d7	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7da	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7dd	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e7e0	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7e3	60		rts				rts
.e7e4					BFUNC_Xor:
.e7e4	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e7e7	5d 04 04	eor $0404,x			eor 	evalStack+4,x
.e7ea	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e7ed	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7f0	5d 05 04	eor $0405,x			eor 	evalStack+5,x
.e7f3	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7f6	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7f9	5d 06 04	eor $0406,x			eor 	evalStack+6,x
.e7fc	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7ff	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e802	5d 07 04	eor $0407,x			eor 	evalStack+7,x
.e805	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e808	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/multiply.asm

.e809					BFUNC_Multiply:
.e809	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy +0 to +8
.e80c	9d 08 04	sta $0408,x			sta 	evalStack+8,x
.e80f	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e812	9d 09 04	sta $0409,x			sta 	evalStack+9,x
.e815	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e818	9d 0a 04	sta $040a,x			sta 	evalStack+10,x
.e81b	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e81e	9d 0b 04	sta $040b,x			sta 	evalStack+11,x
.e821	a9 00		lda #$00			lda 	#0
.e823	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; zero +0
.e826	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e829	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e82c	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e82f					_BFMMultiply:
.e82f	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; get LSBit of 8-11
.e832	29 01		and #$01			and 	#1
.e834	f0 03		beq $e839			beq 	_BFMNoAdd
.e836	20 3c e7	jsr $e73c			jsr 	BFunc_Add 					; if bit set, add 4 to 0.
.e839					_BFMNoAdd:
.e839	1e 04 04	asl $0404,x			asl 	evalStack+4,x 				; shift +4 left
.e83c	3e 05 04	rol $0405,x			rol 	evalStack+5,x
.e83f	3e 06 04	rol $0406,x			rol 	evalStack+6,x
.e842	3e 07 04	rol $0407,x			rol 	evalStack+7,x
.e845	5e 0b 04	lsr $040b,x			lsr 	evalStack+11,x 				; shift +8 right
.e848	7e 0a 04	ror $040a,x			ror 	evalStack+10,x
.e84b	7e 09 04	ror $0409,x			ror 	evalStack+9,x
.e84e	7e 08 04	ror $0408,x			ror 	evalStack+8,x
.e851	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; continue if +8 is nonzero
.e854	1d 09 04	ora $0409,x			ora 	evalStack+9,x
.e857	1d 0a 04	ora $040a,x			ora 	evalStack+10,x
.e85a	1d 0b 04	ora $040b,x			ora 	evalStack+11,x
.e85d	d0 d0		bne $e82f			bne 	_BFMMultiply
.e85f	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/divide.asm

.e860					BFUNC_Divide:
.e860	bd 04 04	lda $0404,x			lda 	evalStack+4,x 				; check for /0
.e863	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e866	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e869	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e86c	d0 14		bne $e882			bne 	_BFDOkay
.e86e	20 3d e1	jsr $e13d			jsr 	ReportError
>e871	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",$00
>e879	20 42 59 20 5a 45 52 4f 00
.e882					_BFDOkay:
.e882	a9 00		lda #$00			lda 	#0 							; Temp1 is 'A' (and holds the remainder)
.e884	8d 98 20	sta $2098			sta 	Temp1 						; Q/Dividend/Left in +0
.e887	8d 99 20	sta $2099			sta 	Temp1+1 					; M/Divisor/Right in +4
.e88a	8d 9a 20	sta $209a			sta 	Temp1+2
.e88d	8d 9b 20	sta $209b			sta 	Temp1+3
.e890	8d 9c 20	sta $209c			sta 	SignCount 					; Count of signs.
.e893	20 fe e8	jsr $e8fe			jsr 	BFUNC_Negate 				; negate (and bump sign count)
.e896	da		phx				phx
.e897	e8		inx				inx
.e898	e8		inx				inx
.e899	e8		inx				inx
.e89a	e8		inx				inx
.e89b	20 fe e8	jsr $e8fe			jsr 	BFUNC_Negate
.e89e	fa		plx				plx
.e89f	5a		phy				phy 								; Y is the counter
.e8a0	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.e8a2					_BFDLoop:
.e8a2	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; shift AQ left.
.e8a5	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e8a8	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e8ab	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e8ae	2e 98 20	rol $2098			rol 	Temp1
.e8b1	2e 99 20	rol $2099			rol 	Temp1+1
.e8b4	2e 9a 20	rol $209a			rol 	Temp1+2
.e8b7	2e 9b 20	rol $209b			rol 	Temp1+3
.e8ba	38		sec				sec
.e8bb	ad 98 20	lda $2098			lda 	Temp1+0 					; Calculate A-M on stack.
.e8be	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e8c1	48		pha				pha
.e8c2	ad 99 20	lda $2099			lda 	Temp1+1
.e8c5	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e8c8	48		pha				pha
.e8c9	ad 9a 20	lda $209a			lda 	Temp1+2
.e8cc	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e8cf	48		pha				pha
.e8d0	ad 9b 20	lda $209b			lda 	Temp1+3
.e8d3	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e8d6	90 19		bcc $e8f1			bcc 	_BFDNoAdd
.e8d8	8d 9b 20	sta $209b			sta 	Temp1+3 					; update A
.e8db	68		pla				pla
.e8dc	8d 9a 20	sta $209a			sta 	Temp1+2
.e8df	68		pla				pla
.e8e0	8d 99 20	sta $2099			sta 	Temp1+1
.e8e3	68		pla				pla
.e8e4	8d 98 20	sta $2098			sta 	Temp1+0
.e8e7	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; set Q bit 1.
.e8ea	09 01		ora #$01			ora 	#1
.e8ec	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8ef	80 03		bra $e8f4			bra 	_BFDNext
.e8f1					_BFDNoAdd:
.e8f1	68		pla				pla 								; Throw away the intermediate calculations
.e8f2	68		pla				pla
.e8f3	68		pla				pla
.e8f4					_BFDNext:
.e8f4	88		dey				dey
.e8f5	d0 ab		bne $e8a2			bne 	_BFDLoop
.e8f7	7a		ply				ply 								; restore Y and exit
.e8f8	4e 9c 20	lsr $209c			lsr 	SignCount 					; if sign count odd,
.e8fb	b0 06		bcs $e903			bcs		BFUNC_NegateAlways 			; negate the result
.e8fd	60		rts				rts
.e8fe					BFUNC_Negate:
.e8fe	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e901	10 24		bpl $e927			bpl 	BFNExit
.e903					BFUNC_NegateAlways:
.e903	38		sec				sec
.e904	a9 00		lda #$00			lda 	#0
.e906	fd 00 04	sbc $0400,x			sbc 	evalStack+0,x
.e909	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e90c	a9 00		lda #$00			lda 	#0
.e90e	fd 01 04	sbc $0401,x			sbc 	evalStack+1,x
.e911	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e914	a9 00		lda #$00			lda 	#0
.e916	fd 02 04	sbc $0402,x			sbc 	evalStack+2,x
.e919	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e91c	a9 00		lda #$00			lda 	#0
.e91e	fd 03 04	sbc $0403,x			sbc 	evalStack+3,x
.e921	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e924	ee 9c 20	inc $209c			inc 	SignCount
.e927					BFNExit:
.e927	60		rts				rts
.e928					BFUNC_Modulus:
.e928	20 60 e8	jsr $e860			jsr 	BFUNC_Divide 				; start with division.
.e92b	ad 98 20	lda $2098			lda 	Temp1+0 					; copy remainder
.e92e	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e931	ad 99 20	lda $2099			lda 	Temp1+1
.e934	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e937	ad 9a 20	lda $209a			lda 	Temp1+2
.e93a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e93d	ad 9b 20	lda $209b			lda 	Temp1+3
.e940	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e943	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/compare.asm

.e944					BFUNC_Equals:
.e944	18		clc				clc
.e945	80 01		bra $e948			bra 	BFUNC_EqualCheck
.e947					BFUNC_NotEquals:
.e947	38		sec				sec
.e948					BFUNC_EqualCheck:
.e948	08		php				php									; save invert flag
.e949	ad 00 04	lda $0400			lda 	evalStack+0 				; check equality
.e94c	cd 04 04	cmp $0404			cmp 	evalStack+4
.e94f	d0 1c		bne $e96d			bne 	COMP_Fail
.e951	ad 01 04	lda $0401			lda 	evalStack+1
.e954	cd 05 04	cmp $0405			cmp 	evalStack+5
.e957	d0 14		bne $e96d			bne 	COMP_Fail
.e959	ad 02 04	lda $0402			lda 	evalStack+2
.e95c	cd 06 04	cmp $0406			cmp 	evalStack+6
.e95f	d0 0c		bne $e96d			bne 	COMP_Fail
.e961	ad 03 04	lda $0403			lda 	evalStack+3
.e964	cd 07 04	cmp $0407			cmp 	evalStack+7
.e967	d0 04		bne $e96d			bne 	COMP_Fail
.e969					COMP_Succeed:
.e969	a9 ff		lda #$ff			lda 	#$FF
.e96b	80 02		bra $e96f			bra 	COMP_SetResult
.e96d					COMP_Fail:
.e96d	a9 00		lda #$00			lda 	#0 							; here return 0
.e96f					COMP_SetResult:
.e96f	28		plp				plp 								; but if CS
.e970	90 02		bcc $e974			bcc 	COMP_Accept
.e972	49 ff		eor #$ff			eor 	#$FF 						; invert that
.e974					COMP_Accept:
.e974	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; write to result.
.e977	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e97a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e97d	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e980	60		rts				rts
.e981					BFUNC_Less:
.e981	18		clc				clc
.e982	80 01		bra $e985			bra 	BFUNC_LessCheck
.e984					BFUNC_GreaterEqual:
.e984	38		sec				sec
.e985					BFUNC_LessCheck:
.e985	08		php				php
.e986	38		sec				sec
.e987	ad 00 04	lda $0400			lda 	evalStack+0 				; compare using direct subtraction
.e98a	ed 04 04	sbc $0404			sbc 	evalStack+4
.e98d	ad 01 04	lda $0401			lda 	evalStack+1
.e990	ed 05 04	sbc $0405			sbc 	evalStack+5
.e993	ad 02 04	lda $0402			lda 	evalStack+2
.e996	ed 06 04	sbc $0406			sbc 	evalStack+6
.e999	ad 03 04	lda $0403			lda 	evalStack+3
.e99c	ed 07 04	sbc $0407			sbc 	evalStack+7
.e99f	30 c8		bmi $e969			bmi 	COMP_Succeed
.e9a1	80 ca		bra $e96d			bra 	COMP_Fail
.e9a3					BFUNC_Greater:
.e9a3	18		clc				clc
.e9a4	80 01		bra $e9a7			bra 	BFUNC_GreaterCheck
.e9a6					BFUNC_LessEqual:
.e9a6	38		sec				sec
.e9a7					BFUNC_GreaterCheck:
.e9a7	08		php				php
.e9a8	38		sec				sec
.e9a9	ad 04 04	lda $0404			lda 	evalStack+4 				; compare using direct subtraction
.e9ac	ed 00 04	sbc $0400			sbc 	evalStack+0
.e9af	ad 05 04	lda $0405			lda 	evalStack+5
.e9b2	ed 01 04	sbc $0401			sbc 	evalStack+1
.e9b5	ad 06 04	lda $0406			lda 	evalStack+6
.e9b8	ed 02 04	sbc $0402			sbc 	evalStack+2
.e9bb	ad 07 04	lda $0407			lda 	evalStack+7
.e9be	ed 03 04	sbc $0403			sbc 	evalStack+3
.e9c1	30 a6		bmi $e969			bmi 	COMP_Succeed
.e9c3	80 a8		bra $e96d			bra 	COMP_Fail

;******  Return to file: basic.asm


;******  Processing file: binary/scompare.asm

.e9c5					BFUNC_StringCompare:
.e9c5	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get address into temporaries.
.e9c8	85 24		sta $24				sta 	zTemp1
.e9ca	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e9cd	85 25		sta $25				sta 	zTemp1+1
.e9cf	bd 04 04	lda $0404,x			lda 	evalStack+4,x
.e9d2	85 26		sta $26				sta 	zTemp2
.e9d4	bd 05 04	lda $0405,x			lda 	evalStack+5,x
.e9d7	85 27		sta $27				sta 	zTemp2+1
.e9d9	5a		phy				phy
.e9da	a0 00		ldy #$00			ldy 	#0
.e9dc					_BFSCLoop:
.e9dc	b1 24		lda ($24),y			lda 	(zTemp1),y 					; comparison
.e9de	38		sec				sec
.e9df	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.e9e1	d0 15		bne $e9f8			bne		_BFSCDifferent 				; return different result.
.e9e3	c8		iny				iny
.e9e4	c9 00		cmp #$00			cmp 	#0							; until both EOS.
.e9e6	d0 f4		bne $e9dc			bne 	_BFSCLoop
.e9e8	7a		ply				ply
.e9e9	a9 00		lda #$00			lda 	#0
.e9eb					_BFSCSetAll:
.e9eb	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e9ee	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e9f1	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e9f4	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e9f7	60		rts				rts
.e9f8					_BFSCDifferent:
.e9f8	7a		ply				ply
.e9f9	a9 ff		lda #$ff			lda 	#255 						; if CC set all as <
.e9fb	90 ee		bcc $e9eb			bcc 	_BFSCSetAll
.e9fd	a9 00		lda #$00			lda 	#0 							; set all zero
.e9ff	20 eb e9	jsr $e9eb			jsr 	_BFSCSetAll
.ea02	fe 00 04	inc $0400,x			inc 	evalStack+0,x 				; and make it one.
.ea05	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: unary/unary.asm

.ea06					UNARY_Len:
.ea06	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ea09	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.ea0c	85 24		sta $24				sta 	zTemp1
.ea0e	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ea11	85 25		sta $25				sta 	zTemp1+1
.ea13	5a		phy				phy
.ea14	a0 00		ldy #$00			ldy 	#0 							; now figure out its length.
.ea16					_ULGetLength:
.ea16	b1 24		lda ($24),y			lda 	(zTemp1),y 					; read character
.ea18	f0 1d		beq $ea37			beq 	_ULFoundEOL 				; found end of line.
.ea1a	c8		iny				iny
.ea1b	d0 f9		bne $ea16			bne 	_ULGetLength 				; scan 256 only.
.ea1d	20 3d e1	jsr $e13d			jsr 	ReportError
>ea20	43 41 4e 4e 4f 54 20 46				.text 	"CANNOT FIND STRING END",$00
>ea28	49 4e 44 20 53 54 52 49 4e 47 20 45 4e 44 00
.ea37					_ULFoundEOL:
.ea37	98		tya				tya 								; length in A, restore Y
.ea38	7a		ply				ply
.ea39					UNARY_ReturnByte:
.ea39	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea3c	a9 00		lda #$00			lda 	#0 							; clear the rests
.ea3e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea41	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea44	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea47	60		rts				rts
.ea48					UNARY_Ch:
.ea48	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ea4b	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.ea4e	85 24		sta $24				sta 	zTemp1
.ea50	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ea53	85 25		sta $25				sta 	zTemp1+1
.ea55	5a		phy				phy
.ea56	a0 00		ldy #$00			ldy 	#0 							; now get first character
.ea58	b1 24		lda ($24),y			lda 	(zTemp1),y
.ea5a	7a		ply				ply
.ea5b	80 dc		bra $ea39			bra 	UNARY_ReturnByte 			; return that byte.
.ea5d					UNARY_Abs:
.ea5d	ea		nop				nop
.ea5e	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ea61	20 fe e8	jsr $e8fe			jsr 	BFUNC_Negate 				; there's an ABS routine in divide
.ea64	60		rts				rts
.ea65					UNARY_Top:
.ea65	ad 96 20	lda $2096			lda 	highMemory
.ea68	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea6b	ad 97 20	lda $2097			lda 	highMemory+1
.ea6e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea71	a9 00		lda #$00			lda 	#0
.ea73	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea76	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea79	60		rts				rts
.ea7a					UNARY_Page:
.ea7a	a9 00		lda #$00			lda 	#BasicProgram & $FF
.ea7c	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea7f	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ea81	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea84	a9 00		lda #$00			lda 	#0
.ea86	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea89	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea8c	60		rts				rts
.ea8d					UNARY_Rnd:
.ea8d	20 98 ea	jsr $ea98			jsr 	Random16 					; call 16 bit RNG twice
.ea90	e8		inx				inx
.ea91	e8		inx				inx
.ea92	20 98 ea	jsr $ea98			jsr 	Random16
.ea95	ca		dex				dex
.ea96	ca		dex				dex
.ea97	60		rts				rts
.ea98					Random16:
.ea98	ad 9e 20	lda $209e			lda 	RandomSeed 					; initialise if nonzero
.ea9b	0d 9f 20	ora $209f			ora 	RandomSeed+1
.ea9e	d0 0d		bne $eaad			bne 	_R16_NoInit
.eaa0	ee 9e 20	inc $209e			inc 	RandomSeed 					; by setting low to 1
.eaa3	5a		phy				phy
.eaa4	a0 14		ldy #$14			ldy 	#20 						; call it 20 times to get it started
.eaa6					_R16_Setup:
.eaa6	20 98 ea	jsr $ea98			jsr 	Random16
.eaa9	88		dey				dey
.eaaa	d0 fa		bne $eaa6			bne 	_R16_Setup
.eaac	7a		ply				ply
.eaad					_R16_NoInit:
.eaad	4e 9f 20	lsr $209f			lsr 	RandomSeed+1				; shift seed right
.eab0	6e 9e 20	ror $209e			ror 	RandomSeed
.eab3	90 08		bcc $eabd			bcc 	_R16_NoXor
.eab5	ad 9f 20	lda $209f			lda 	RandomSeed+1				; xor MSB with $B4 if bit set.
.eab8	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.eaba	8d 9f 20	sta $209f			sta 	RandomSeed+1
.eabd					_R16_NoXor:
.eabd	ad 9e 20	lda $209e			lda 	RandomSeed					; copy result to evaluate stack.
.eac0	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.eac3	ad 9f 20	lda $209f			lda 	RandomSeed+1
.eac6	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eac9	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/execute.asm

.eaca					COMMAND_Run:
.eaca	20 a5 eb	jsr $eba5			jsr 	COMMAND_Clear 				; clear everything for a new run.
.eacd	a2 00		ldx #$00			ldx 	#BasicProgram & 255 		; start from here
.eacf	a0 23		ldy #$23			ldy 	#BasicProgram >> 8
.ead1	86 20		stx $20				stx 	zCurrentLine 				; set current line.
.ead3	84 21		sty $21				sty 	zCurrentLine+1
.ead5					CRUNNewLine:
.ead5	a0 00		ldy #$00			ldy 	#0 							; look at the offset, end of program
.ead7	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ead9	f0 78		beq $eb53			beq 	COMMAND_End 				; if zero, off end of program so stop.
.eadb	a0 03		ldy #$03			ldy 	#3 							; offset to first token.
.eadd					CRUNNextInstruction:
.eadd	ee a2 20	inc $20a2			inc 	breakCheckCount 			; don't check every time, might be slow.
.eae0	ad a2 20	lda $20a2			lda 	breakCheckCount
.eae3	29 1f		and #$1f			and 	#$1F 						; checking once in 32.
.eae5	f0 0e		beq $eaf5			beq 	_CRUNNoCheck
.eae7	20 37 b0	jsr $b037			jsr 	EXTCheckBreak
.eaea	f0 09		beq $eaf5			beq 	_CRUNNoCheck
.eaec	20 3d e1	jsr $e13d			jsr 	ReportError
>eaef	42 52 45 41 4b 00				.text 	"BREAK",$00
.eaf5					_CRUNNoCheck:
.eaf5	a9 00		lda #$00			lda 	#0 							; reset the string buffer position
.eaf7	8d 9d 20	sta $209d			sta 	StringBufferPos
.eafa	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token
.eafc	f0 0b		beq $eb09			beq 	CRUNNextLine 				; if zero, then end of line.
.eafe					CRUNNotEndOfLine:
.eafe	c9 20		cmp #$20			cmp 	#' '
.eb00	f0 04		beq $eb06			beq 	CRUNSkipLoop
.eb02	c9 8d		cmp #$8d			cmp 	#KW_Colon 					; check for a colon first.
.eb04	d0 1b		bne $eb21			bne 	CRUNExecuteOne 				; if not that, execute the token.
.eb06					CRUNSkipLoop:
.eb06	c8		iny				iny		 							; if colon, skip it and loop round.
.eb07	80 d4		bra $eadd			bra 	CRUNNextInstruction
.eb09					CRUNNextLine:
.eb09	a5 21		lda $21				lda 	zCurrentLine+1 				; running from input
.eb0b	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.eb0d	f0 0f		beq $eb1e			beq		CRUNWarmStart
.eb0f	a0 00		ldy #$00			ldy 	#0 							; add offset from line to line pointer
.eb11	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.eb13	18		clc				clc
.eb14	65 20		adc $20				adc 	zCurrentLine
.eb16	85 20		sta $20				sta 	zCurrentLine
.eb18	90 bb		bcc $ead5			bcc 	CRUNNewLine
.eb1a	e6 21		inc $21				inc 	zCurrentLine+1
.eb1c	80 b7		bra $ead5			bra 	CRUNNewLine
.eb1e					CRUNWarmStart:
.eb1e	4c 59 ef	jmp $ef59			jmp 	WarmStart
.eb21					CRUNExecuteOne:
.eb21	09 00		ora #$00			ora 	#0 							; if it is a character might be a variable.
.eb23	10 21		bpl $eb46			bpl		_CRUNX1TryLet
.eb25	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; likewise if ! something ? something $ something
.eb27	f0 1d		beq $eb46			beq 	_CRUNX1TryLet
.eb29	c9 80		cmp #$80			cmp 	#KW_PLING
.eb2b	f0 19		beq $eb46			beq 	_CRUNX1TryLet
.eb2d	c9 95		cmp #$95			cmp 	#KW_QUESTION
.eb2f	f0 15		beq $eb46			beq 	_CRUNX1TryLet
.eb31	c8		iny				iny 								; skip over loaded token
.eb32	0a		asl a				asl 	a 							; double lower keyword byte, clears bit 7.
.eb33	8d 99 20	sta $2099			sta 	Temp1+1 					; this is the low byte into the KVT
.eb36	8a		txa				txa
.eb37	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.eb39	8d 9a 20	sta $209a			sta 	Temp1+2
.eb3c	a9 6c		lda #$6c			lda 	#$6C 						; make it jump indirect
.eb3e	8d 98 20	sta $2098			sta 	Temp1+0
.eb41	20 98 20	jsr $2098			jsr 	Temp1 						; call instruction
.eb44	80 97		bra $eadd			bra 	CRUNNextInstruction 		; do next instruction.
.eb46					_CRUNX1TryLet:
.eb46	20 17 ec	jsr $ec17			jsr 	COMMAND_Let 				; try doing a LET if not a keyword.
.eb49	80 92		bra $eadd			bra 	CRUNNextInstruction
.eb4b					COMMAND_Stop:
.eb4b	20 3d e1	jsr $e13d			jsr 	ReportError
>eb4e	53 54 4f 50 00					.text 	"STOP",$00
.eb53					COMMAND_End:
.eb53	ad 15 f0	lda $f015			lda 	StartBehaviour 				; running program
.eb56	c9 52		cmp #$52			cmp 	#"R"
.eb58	d0 01		bne $eb5b			bne 	_CEWarmStart
>eb5a	02						.byte 	2
.eb5b					_CEWarmStart:
.eb5b	4c 59 ef	jmp $ef59			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: commands/miscellany.asm

.eb5e					COMMAND_Assert:
.eb5e	20 ef e1	jsr $e1ef			jsr 	EvaluateBase 				; evaluate the expression
.eb61	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check non zero
.eb64	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.eb67	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eb6a	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eb6d	d0 12		bne $eb81			bne 	_CMDAExit
.eb6f	ea		nop				nop
.eb70	20 3d e1	jsr $e13d			jsr 	ReportError
>eb73	41 53 53 45 52 54 20 46				.text 	"ASSERT FAILED",$00
>eb7b	41 49 4c 45 44 00
.eb81					_CMDAExit:
.eb81	60		rts				rts
.eb82					COMMAND_Rem:
.eb82	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character token.
.eb84	f0 05		beq $eb8b			beq 	_CREMExit 					; End of line, then exit.
.eb86	c8		iny				iny 								; something to skip
.eb87	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; if not a colon
.eb89	d0 f7		bne $eb82			bne 	COMMAND_Rem 				; keep searching
.eb8b					_CREMExit:
.eb8b	60		rts				rts
.eb8c					COMMAND_NewExec:
.eb8c	20 92 eb	jsr $eb92			jsr 	COMMAND_NewCode
.eb8f	4c 59 ef	jmp $ef59			jmp 	WarmStart
.eb92					COMMAND_NewCode:
.eb92	a9 00		lda #$00			lda 	#0 							; erase the actual program.
.eb94	8d 00 23	sta $2300			sta 	BasicProgram 				; by zeroing the initial offset.
.eb97	20 a5 eb	jsr $eba5			jsr 	COMMAND_Clear 				; clear non fixed variable, reset stack and low mem pointer
.eb9a	a9 00		lda #$00			lda 	#endMemory & $FF 			; reset high memory pointer.
.eb9c	8d 96 20	sta $2096			sta 	HighMemory
.eb9f	a9 80		lda #$80			lda 	#endMemory >> 8
.eba1	8d 97 20	sta $2097			sta 	HighMemory+1
.eba4	60		rts				rts
.eba5					COMMAND_Clear:
.eba5	a2 00		ldx #$00			ldx 	#0	 						; clear variables @A-Z
.eba7					_CCClearVar:
.eba7	a9 00		lda #$00			lda 	#$00
.eba9	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.ebac	e8		inx				inx
.ebad	e0 6c		cpx #$6c			cpx 	#27*4
.ebaf	10 f6		bpl $eba7			bpl 	_CCClearVar
.ebb1	a9 00		lda #$00			lda 	#0 							; reset BASIC stack index
.ebb3	8d a3 20	sta $20a3			sta 	basicStackIndex
.ebb6	a9 ff		lda #$ff			lda 	#$FF 						; put invalid token on TOS, so when pulled.
.ebb8	8d 00 02	sta $0200			sta 	basicStack 					; causes an error.
.ebbb	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; now find where the program ends.
.ebbd	85 22		sta $22				sta 	zLowMemory
.ebbf	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ebc1	85 23		sta $23				sta 	zLowMemory+1
.ebc3					_CCFindEnd:
.ebc3	a0 00		ldy #$00			ldy 	#0 							; look at next offset
.ebc5	b1 22		lda ($22),y			lda 	(zLowMemory),y 				; if zero, reached the end.
.ebc7	f0 0b		beq $ebd4			beq 	_CCFoundEnd
.ebc9	18		clc				clc 								; go to next line.
.ebca	65 22		adc $22				adc 	zLowMemory
.ebcc	85 22		sta $22				sta 	zLowMemory
.ebce	90 f3		bcc $ebc3			bcc 	_CCFindEnd
.ebd0	e6 23		inc $23				inc 	zLowMemory+1
.ebd2	80 ef		bra $ebc3			bra 	_CCFindEnd
.ebd4					_CCFoundEnd:
.ebd4	e6 22		inc $22				inc 	zLowMemory 					; variables etc. start after end of program.
.ebd6	d0 02		bne $ebda			bne 	_CCNoCarry 					; skip over zero end offset.
.ebd8	e6 23		inc $23				inc 	zLowMemory+1
.ebda					_CCNoCarry:
.ebda	60		rts				rts
.ebdb					COMMAND_OldExec:
.ebdb	20 e1 eb	jsr $ebe1			jsr 	COMMAND_OldCode
.ebde	4c 59 ef	jmp $ef59			jmp 	WarmStart
.ebe1					COMMAND_OldCode:
.ebe1	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; point zLowMemory to the first line.
.ebe3	85 22		sta $22				sta 	zLowMemory
.ebe5	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ebe7	85 23		sta $23				sta 	zLowMemory+1
.ebe9	a0 03		ldy #$03			ldy 	#3 							; look for the $00 end of line marker.
.ebeb					_COScan:
.ebeb	b1 22		lda ($22),y			lda 	(zLowMemory),y 				; look at next byte pair
.ebed	c8		iny				iny
.ebee	f0 0d		beq $ebfd			beq 	_COFail 					; can't find marker, corrupted maybe ?
.ebf0	c9 00		cmp #$00			cmp 	#0 							; until $00 found.
.ebf2	d0 f7		bne $ebeb			bne 	_COScan
.ebf4	98		tya				tya 								; Y is the new offset to the next instruction
.ebf5	a0 00		ldy #$00			ldy 	#0 							; overwrite the old one
.ebf7	91 22		sta ($22),y			sta 	(zLowMemory),y
.ebf9	20 a5 eb	jsr $eba5			jsr 	COMMAND_Clear 				; reset variables, stacks and pointers.
.ebfc	60		rts				rts
.ebfd					_COFail:
.ebfd	20 3d e1	jsr $e13d			jsr 	ReportError
>ec00	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER PROGRAM",$00
>ec08	45 43 4f 56 45 52 20 50 52 4f 47 52 41 4d 00

;******  Return to file: basic.asm


;******  Processing file: commands/let.asm

.ec17					COMMAND_Let:
.ec17	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get first token not space
.ec19	f0 58		beq $ec73			beq 	_CLESyntax
.ec1b	c8		iny				iny
.ec1c	c9 20		cmp #$20			cmp 	#32
.ec1e	f0 f7		beq $ec17			beq 	COMMAND_Let
.ec20	88		dey				dey
.ec21	c9 95		cmp #$95			cmp 	#KW_QUESTION				; check for first being indirect.
.ec23	f0 51		beq $ec76			beq 	_CLEIndirect 				; e.g. !x = 42
.ec25	c9 80		cmp #$80			cmp 	#KW_PLING
.ec27	f0 4d		beq $ec76			beq 	_CLEIndirect
.ec29	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ec2b	f0 49		beq $ec76			beq 	_CLEIndirect
.ec2d	a2 00		ldx #$00			ldx 	#0 							; clear evaluation stack.
.ec2f	20 02 e4	jsr $e402			jsr 	VARReference 				; get a variable reference.
.ec32	a5 24		lda $24				lda 	zTemp1 						; copy into target addr
.ec34	85 28		sta $28				sta 	zTargetAddr
.ec36	a5 25		lda $25				lda 	zTemp1+1
.ec38	85 29		sta $29				sta 	zTargetAddr+1
.ec3a	a5 26		lda $26				lda 	zTemp1+2
.ec3c	85 2a		sta $2a				sta 	zTargetAddr+2
.ec3e	a5 27		lda $27				lda 	zTemp1+3
.ec40	85 2b		sta $2b				sta 	zTargetAddr+3
.ec42					_CLEGetBinLHSOp:
.ec42	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ec44	f0 2d		beq $ec73			beq 	_CLESyntax
.ec46	c8		iny				iny
.ec47	c9 20		cmp #$20			cmp 	#' '
.ec49	f0 f7		beq $ec42			beq 	_CLEGetBinLHSOp
.ec4b	88		dey				dey
.ec4c	c9 95		cmp #$95			cmp 	#KW_QUESTION 				; got some sort of reference, check
.ec4e	f0 45		beq $ec95			beq 	_CLEBinaryLHTerm  			; if that's a basis for indirection ?
.ec50	c9 80		cmp #$80			cmp 	#KW_PLING
.ec52	f0 41		beq $ec95			beq 	_CLEBinaryLHTerm
.ec54	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ec56	f0 3d		beq $ec95			beq 	_CLEBinaryLHTerm
.ec58	a9 80		lda #$80			lda 	#KW_PLING 					; we want to do a 32 bit write.
.ec5a					_CLEWriteToAddress:
.ec5a	48		pha				pha 								; save write-type.
.ec5b	a9 92		lda #$92			lda 	#KW_EQUAL 					; check for '=' sign.
.ec5d	20 81 e1	jsr $e181			jsr 	CheckNextCharacter
.ec60	20 ef e1	jsr $e1ef			jsr 	EvaluateBase 				; evaluate the RHS.
.ec63	68		pla				pla
.ec64	c9 80		cmp #$80			cmp 	#KW_PLING
.ec66	f0 6e		beq $ecd6			beq 	_CLEWordWrite
.ec68	c9 95		cmp #$95			cmp 	#KW_QUESTION
.ec6a	f0 60		beq $eccc			beq 	_CLEByteWrite
.ec6c	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ec6e					_ErrorInternal:
.ec6e	d0 fe		bne $ec6e			bne 	_ErrorInternal
.ec70	4c f2 ec	jmp $ecf2			jmp 	_CLEStringWrite
.ec73					_CLESyntax:
.ec73	4c 2d e1	jmp $e12d			jmp 	SyntaxError
.ec76					_CLEIndirect:
.ec76	48		pha				pha 								; save operator on stack
.ec77	c8		iny				iny									; advance over cursor
.ec78	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ec7a	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel
.ec7d	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy that as the address.
.ec80	85 28		sta $28				sta 	zTargetAddr+0
.ec82	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ec85	85 29		sta $29				sta 	zTargetAddr+1
.ec87	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ec8a	85 2a		sta $2a				sta 	zTargetAddr+2
.ec8c	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ec8f	85 2b		sta $2b				sta 	zTargetAddr+3
.ec91	68		pla				pla 								; restore operator.
.ec92	4c 5a ec	jmp $ec5a			jmp 	_CLEWriteToAddress
.ec95					_CLEBinaryLHTerm:
.ec95	48		pha				pha 								; save operator on stack
.ec96	c8		iny				iny 								; skip over it.
.ec97	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ec99	20 eb e1	jsr $e1eb			jsr 	EvaluateAtomCurrentLevel
.ec9c	a5 28		lda $28				lda 	zTargetAddr 				; copy zTargetAddr to zTemp1. Technically
.ec9e	85 24		sta $24				sta 	zTemp1 						; a four byte address.....
.eca0	a5 29		lda $29				lda 	zTargetAddr+1
.eca2	85 25		sta $25				sta 	zTemp1+1 					; we only worry about 4 byte value
.eca4	5a		phy				phy 								; save Y
.eca5	18		clc				clc 								; add variable evaluated to (zTargetAddr)
.eca6	a0 00		ldy #$00			ldy 	#0
.eca8	b1 24		lda ($24),y			lda 	(zTemp1),y
.ecaa	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.ecad	85 28		sta $28				sta 	zTargetAddr+0
.ecaf	c8		iny				iny
.ecb0	b1 24		lda ($24),y			lda 	(zTemp1),y
.ecb2	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.ecb5	85 29		sta $29				sta 	zTargetAddr+1
.ecb7	c8		iny				iny
.ecb8	b1 24		lda ($24),y			lda 	(zTemp1),y
.ecba	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.ecbd	85 2a		sta $2a				sta 	zTargetAddr+2
.ecbf	c8		iny				iny
.ecc0	b1 24		lda ($24),y			lda 	(zTemp1),y
.ecc2	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.ecc5	85 2b		sta $2b				sta 	zTargetAddr+3
.ecc7	7a		ply				ply 								; restore Y
.ecc8	68		pla				pla 								; restore the operator.
.ecc9	4c 5a ec	jmp $ec5a			jmp 	_CLEWriteToAddress
.eccc					_CLEByteWrite:
.eccc	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get the byte to write.
.eccf	5a		phy				phy 								; write the byte preserving Y
.ecd0	a0 00		ldy #$00			ldy 	#0
.ecd2	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ecd4	7a		ply				ply
.ecd5	60		rts				rts
.ecd6					_CLEWordWrite:
.ecd6	5a		phy				phy
.ecd7	a0 00		ldy #$00			ldy 	#0
.ecd9	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ecdc	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ecde	c8		iny				iny
.ecdf	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ece2	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ece4	c8		iny				iny
.ece5	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ece8	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ecea	c8		iny				iny
.eceb	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ecee	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ecf0	7a		ply				ply 								; restore Y
.ecf1	60		rts				rts
.ecf2					_CLEStringWrite:
.ecf2	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; source string -> zTemp1
.ecf5	85 24		sta $24				sta 	zTemp1
.ecf7	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ecfa	85 25		sta $25				sta 	zTemp1+1
.ecfc	5a		phy				phy
.ecfd	a0 00		ldy #$00			ldy 	#0
.ecff					_CLEStringCopy:
.ecff	b1 24		lda ($24),y			lda 	(zTemp1),y
.ed01	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ed03	c9 00		cmp #$00			cmp 	#0
.ed05	f0 16		beq $ed1d			beq	 	_CLEStringWritten
.ed07	c8		iny				iny
.ed08	d0 f5		bne $ecff			bne 	_CLEStringCopy
.ed0a	20 3d e1	jsr $e13d			jsr 	ReportError
>ed0d	42 41 44 20 53 54 52 49				.text 	"BAD STRING COPY",$00
>ed15	4e 47 20 43 4f 50 59 00
.ed1d					_CLEStringWritten:
.ed1d	7a		ply				ply
.ed1e	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/print.asm

.ed1f					COMMAND_Print:
.ed1f	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; look at next character
.ed21	f0 15		beq $ed38			beq 	_CPRExitNL 					; zero end of line.
.ed23	c8		iny				iny
.ed24	c9 20		cmp #$20			cmp 	#' '
.ed26	f0 f7		beq $ed1f			beq 	COMMAND_Print
.ed28	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; colon, end of line
.ed2a	f0 0c		beq $ed38			beq 	_CPRExitNL
.ed2c	c9 8e		cmp #$8e			cmp 	#KW_SEMICOLON 				; semicolon ?
.ed2e	d0 0e		bne $ed3e			bne 	_CPRNotSemicolon
.ed30	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look at next character, is ; last thing
.ed32	f0 09		beq $ed3d			beq 	_CPRExit
.ed34	c9 8d		cmp #$8d			cmp 	#KW_COLON
.ed36	d0 e7		bne $ed1f			bne 	COMMAND_Print 				; if not, just go back round again
.ed38					_CPRExitNL:
.ed38	a9 0d		lda #$0d			lda 	#13
.ed3a	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.ed3d					_CPRExit:
.ed3d	60		rts				rts
.ed3e					_CPRNotSemicolon:
.ed3e	c9 86		cmp #$86			cmp 	#KW_SQUOTE 					; single quote
.ed40	f0 2b		beq $ed6d			beq 	_CPRNewLine 				; new line
.ed42	c9 81		cmp #$81			cmp 	#KW_DQUOTE 					; double quote
.ed44	d0 2e		bne $ed74			bne 	_CPRNotQuote
.ed46					_CPRPrintText:
.ed46	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next character
.ed48	f0 0a		beq $ed54			beq 	_CPRError 					; if zero no closing quote
.ed4a	c8		iny				iny
.ed4b	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; double quote
.ed4d	f0 d0		beq $ed1f			beq 	COMMAND_Print 				; go round again.
.ed4f	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter 			; print and do next character
.ed52	80 f2		bra $ed46			bra 	_CPRPrintText
.ed54					_CPRError:
.ed54	20 3d e1	jsr $e13d			jsr 	ReportError
>ed57	4d 49 53 53 49 4e 47 20				.text 	"MISSING CLOSING QUOTE",$00
>ed5f	43 4c 4f 53 49 4e 47 20 51 55 4f 54 45 00
.ed6d					_CPRNewLine:
.ed6d	a9 0d		lda #$0d			lda 	#13
.ed6f	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.ed72	80 ab		bra $ed1f			bra 	COMMAND_Print
.ed74					_CPRNotQuote:
.ed74	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; not a string ?
.ed76	d0 11		bne $ed89			bne 	_CPRNumber 					; print a number.
.ed78	20 ef e1	jsr $e1ef			jsr 	EvaluateBase 				; this is the address to print.
.ed7b	5a		phy				phy
.ed7c	bc 01 04	ldy $0401,x			ldy 	evalStack+1,x 				; get the address
.ed7f	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ed82	aa		tax				tax
.ed83	20 8f e4	jsr $e48f			jsr 	SIOPrintString
.ed86	7a		ply				ply
.ed87	80 96		bra $ed1f			bra 	COMMAND_Print
.ed89					_CPRNumber:
.ed89	c9 85		cmp #$85			cmp 	#KW_AMPERSAND
.ed8b	f0 17		beq $eda4			beq 	_CPRHexadecimal
.ed8d	88		dey				dey 								; must be 1st char of expr
.ed8e	20 ef e1	jsr $e1ef			jsr 	EvaluateBase 				; this is the value to print.
.ed91	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; is it -ve
.ed94	10 08		bpl $ed9e			bpl 	_CPRIsPositive
.ed96	20 03 e9	jsr $e903			jsr 	BFUNC_NegateAlways 			; negate it
.ed99	a9 2d		lda #$2d			lda 	#"-" 						; print - it.
.ed9b	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.ed9e					_CPRIsPositive:
.ed9e	20 e1 ed	jsr $ede1			jsr 	CPRPrintInteger 			; Print string at current eval stack, base 10.
.eda1	4c 1f ed	jmp $ed1f			jmp 	COMMAND_Print
.eda4					_CPRHexadecimal:
.eda4	20 ef e1	jsr $e1ef			jsr 	EvaluateBase 				; this is the value to print.
.eda7	20 ad ed	jsr $edad			jsr 	_CPRPrintRecHex 			; hex version of it.
.edaa	4c 1f ed	jmp $ed1f			jmp 	COMMAND_Print
.edad					_CPRPrintRecHex:
.edad	ad 00 04	lda $0400			lda 	evalStack+0 				; get the remainder
.edb0	29 0f		and #$0f			and 	#15 						; and put on stack
.edb2	48		pha				pha
.edb3	a2 04		ldx #$04			ldx 	#4 							; divide by 16
.edb5					_CPRShiftDiv:
.edb5	4e 03 04	lsr $0403			lsr 	evalStack+3
.edb8	6e 02 04	ror $0402			ror 	evalStack+2
.edbb	6e 01 04	ror $0401			ror		evalStack+1
.edbe	6e 00 04	ror $0400			ror		evalStack+0
.edc1	ca		dex				dex
.edc2	d0 f1		bne $edb5			bne 	_CPRShiftDiv
.edc4	ad 00 04	lda $0400			lda 	evalStack+0 				; any more to print
.edc7	0d 01 04	ora $0401			ora 	evalStack+1
.edca	0d 02 04	ora $0402			ora 	evalStack+2
.edcd	0d 03 04	ora $0403			ora 	evalStack+3
.edd0	f0 03		beq $edd5			beq 	_CPRNoHexRec
.edd2	20 ad ed	jsr $edad			jsr 	_CPRPrintRecHex
.edd5					_CPRNoHexRec:
.edd5	68		pla				pla 								; original remainder.
.edd6	c9 0a		cmp #$0a			cmp 	#10
.edd8	90 02		bcc $eddc			bcc		_CPRNH2
.edda	69 06		adc #$06			adc 	#6
.eddc	69 30		adc #$30	_CPRNH2:adc 	#48
.edde	4c bc e4	jmp $e4bc			jmp 	SIOPrintCharacter
.ede1					CPRPrintInteger:
.ede1	48		pha				pha 								; save on stack.
.ede2	da		phx				phx
.ede3	5a		phy				phy
.ede4	20 eb ed	jsr $edeb			jsr 	_CPRPrintRec 				; recursive print call
.ede7	7a		ply				ply
.ede8	fa		plx				plx
.ede9	68		pla				pla
.edea	60		rts				rts
.edeb					_CPRPrintRec:
.edeb	a9 0a		lda #$0a			lda 	#10 						; save base
.eded	9d 04 04	sta $0404,x			sta 	evalStack+4,x 				; put in next slot.
.edf0	a9 00		lda #$00			lda 	#0 							; clear upper 3 bytes
.edf2	9d 05 04	sta $0405,x			sta 	evalStack+5,x
.edf5	9d 06 04	sta $0406,x			sta 	evalStack+6,x
.edf8	9d 07 04	sta $0407,x			sta 	evalStack+7,x
.edfb	20 60 e8	jsr $e860			jsr 	BFUNC_Divide 				; divide by 10.
.edfe	ad 98 20	lda $2098			lda 	Temp1+0		 				; push remainder on stack
.ee01	48		pha				pha
.ee02	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; is the result #0
.ee05	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.ee08	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.ee0b	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.ee0e	f0 03		beq $ee13			beq 	_CPRNoRecurse
.ee10	20 eb ed	jsr $edeb			jsr 	_CPRPrintRec 				; recursive print.
.ee13					_CPRNoRecurse:
.ee13	68		pla				pla
.ee14	09 30		ora #$30			ora 	#"0"
.ee16	4c bc e4	jmp $e4bc			jmp 	SIOPrintCharacter
.ee19					COMMAND_CLS:
.ee19	4c 81 e4	jmp $e481			jmp 	SIOClearScreen

;******  Return to file: basic.asm


;******  Processing file: commands/list.asm

.ee1c					COMMAND_List:
.ee1c	5a		phy				phy
.ee1d	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set target address
.ee1f	85 28		sta $28				sta 	zTargetAddr
.ee21	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ee23	85 29		sta $29				sta 	zTargetAddr+1
.ee25	a9 10		lda #$10			lda 	#16 						; print 16 lines
.ee27	85 2a		sta $2a				sta 	zTargetAddr+2
.ee29					_CLLILoop:
.ee29	a0 00		ldy #$00			ldy 	#0
.ee2b	b1 28		lda ($28),y			lda 	(zTargetAddr),y 			; if that offset is zero exit
.ee2d	f0 14		beq $ee43			beq 	_CLLIExit
.ee2f	20 45 ee	jsr $ee45			jsr 	CLIOneLine 					; list one line.
.ee32	a0 00		ldy #$00			ldy 	#0 							; advance pointer to next.
.ee34	18		clc				clc
.ee35	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ee37	65 28		adc $28				adc 	zTargetAddr
.ee39	85 28		sta $28				sta 	zTargetAddr
.ee3b	90 02		bcc $ee3f			bcc 	_CLLINoCarry
.ee3d	e6 29		inc $29				inc 	zTargetAddr+1
.ee3f					_CLLINoCarry:
.ee3f	c6 2a		dec $2a				dec 	zTargetAddr+2 				; done all of them ?
.ee41	d0 e6		bne $ee29			bne 	_CLLILoop
.ee43					_CLLIExit:
.ee43	7a		ply				ply
.ee44	60		rts				rts
.ee45					CLIOneLine:
.ee45	a0 01		ldy #$01			ldy 	#1 							; get line#
.ee47	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ee49	8d 00 04	sta $0400			sta 	evalStack+0
.ee4c	c8		iny				iny
.ee4d	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ee4f	8d 01 04	sta $0401			sta 	evalStack+1
.ee52	a9 00		lda #$00			lda 	#0
.ee54	aa		tax				tax
.ee55	8d 02 04	sta $0402			sta 	evalStack+2
.ee58	8d 03 04	sta $0403			sta 	evalStack+3
.ee5b	20 e1 ed	jsr $ede1			jsr 	CPRPrintInteger 			; print line#
.ee5e	a9 20		lda #$20			lda 	#32
.ee60	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.ee63	a0 03		ldy #$03			ldy 	#3 							; where to start
.ee65					_CLIOutput:
.ee65	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ee67	c8		iny				iny
.ee68	09 00		ora #$00			ora 	#0
.ee6a	f0 0c		beq $ee78			beq 	_CLIExit
.ee6c	10 05		bpl $ee73			bpl		_CLISingle
.ee6e	20 7e ee	jsr $ee7e			jsr 	CLIPrintToken
.ee71	80 f2		bra $ee65			bra 	_CLIOutput
.ee73					_CLISingle:
.ee73	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.ee76	80 ed		bra $ee65			bra 	_CLIOutput
.ee78					_CLIExit:
.ee78	a9 0d		lda #$0d			lda 	#13 						; new line.
.ee7a	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.ee7d	60		rts				rts
.ee7e					CLIPrintToken:
.ee7e	5a		phy				phy 								; save Y
.ee7f	29 7f		and #$7f			and 	#$7F 						; 7 bit token -> Y
.ee81	a8		tay				tay
.ee82	a2 00		ldx #$00			ldx 	#0 							; offset into token text table.
.ee84					_CLIFind:
.ee84	88		dey				dey 								; decrement counter
.ee85	30 09		bmi $ee90			bmi 	_CLIFoundToken 				; if -ve found the token.
.ee87					_CLISkip:
.ee87	bd 6e e0	lda $e06e,x			lda 	TokenText,x
.ee8a	e8		inx				inx
.ee8b	0a		asl a				asl		a
.ee8c	90 f9		bcc $ee87			bcc 	_CLISkip
.ee8e	80 f4		bra $ee84			bra 	_CLIFind
.ee90					_CLIFoundToken:
.ee90	7a		ply				ply
.ee91					_CLIPrintIt:
.ee91	bd 6e e0	lda $e06e,x			lda 	TokenText,x
.ee94	e8		inx				inx
.ee95	48		pha				pha
.ee96	29 7f		and #$7f			and 	#$7F
.ee98	20 bc e4	jsr $e4bc			jsr 	SIOPrintCharacter
.ee9b	68		pla				pla
.ee9c	0a		asl a				asl 	a
.ee9d	90 f2		bcc $ee91			bcc 	_CLIPrintIt
.ee9f	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/dountil.asm

.eea0					COMMAND_Do:
.eea0	a9 9c		lda #$9c			lda 	#KW_DO						; push position with a DO token.
.eea2	20 c0 ee	jsr $eec0			jsr 	CDOPushPosOnStack
.eea5	60		rts				rts
.eea6					COMMAND_Until:
.eea6	a9 9c		lda #$9c			lda 	#KW_DO 						; check TOS is a Do.
.eea8	20 fe ee	jsr $eefe			jsr 	CDOCheckTopStack
.eeab	a2 00		ldx #$00			ldx 	#0 							; evaluate the test
.eead	20 ef e1	jsr $e1ef			jsr 	EvaluateBase
.eeb0	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check if zero
.eeb3	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.eeb6	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eeb9	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eebc	f0 2a		beq $eee8			beq 	CDOPullPosOffStack 			; zero, restore the position.
.eebe	80 1e		bra $eede			bra 	CDOThrowPosOffStack			; non-zero chuck it.
.eec0					CDOPushPosOnStack:
.eec0	ae a3 20	ldx $20a3			ldx 	basicStackIndex
.eec3	48		pha				pha
.eec4	98		tya				tya
.eec5	9d 01 02	sta $0201,x			sta 	BasicStack+1,x 				; +1 	Y Position
.eec8	a5 20		lda $20				lda 	zCurrentLine
.eeca	9d 02 02	sta $0202,x			sta 	BasicStack+2,x 				; +2 	low of pos
.eecd	a5 21		lda $21				lda 	zCurrentLine+1
.eecf	9d 03 02	sta $0203,x			sta 	BasicStack+3,x 				; +3 	high of pos
.eed2	68		pla				pla
.eed3	9d 04 02	sta $0204,x			sta 	BasicStack+4,x 				; +4 	token on stack
.eed6	e8		inx				inx
.eed7	e8		inx				inx
.eed8	e8		inx				inx
.eed9	e8		inx				inx 								; always points to TOS.
.eeda	8e a3 20	stx $20a3			stx 	basicStackIndex
.eedd	60		rts				rts
.eede					CDOThrowPosOffStack:
.eede	ad a3 20	lda $20a3			lda 	basicStackIndex
.eee1	38		sec				sec
.eee2	e9 04		sbc #$04			sbc 	#4
.eee4	8d a3 20	sta $20a3			sta 	basicStackIndex
.eee7	60		rts				rts
.eee8					CDOPullPosOffStack:
.eee8	ae a3 20	ldx $20a3			ldx 	basicStackIndex
.eeeb	ca		dex				dex
.eeec	ca		dex				dex
.eeed	ca		dex				dex
.eeee	ca		dex				dex
.eeef	bd 01 02	lda $0201,x			lda 	BasicStack+1,x 					; get position back.
.eef2	a8		tay				tay
.eef3	bd 02 02	lda $0202,x			lda 	BasicStack+2,x
.eef6	85 20		sta $20				sta 	zCurrentLine
.eef8	bd 03 02	lda $0203,x			lda 	BasicStack+3,x
.eefb	85 21		sta $21				sta 	zCurrentLine+1
.eefd	60		rts				rts
.eefe					CDOCheckTopStack:
.eefe	ae a3 20	ldx $20a3			ldx 	basicStackIndex 			; if match
.ef01	dd 00 02	cmp $0200,x			cmp 	BasicStack+0,x
.ef04	d0 01		bne $ef07			bne 	_CDOCTSError
.ef06	60		rts				rts
.ef07					_CDOCTSError:
.ef07	20 3d e1	jsr $e13d			jsr 	ReportError
>ef0a	53 54 52 55 43 54 55 52				.text 	"STRUCTURE MIXED",$00
>ef12	45 20 4d 49 58 45 44 00

;******  Return to file: basic.asm

.ef1a					Start:
.ef1a	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.ef1c	9a		txs			txs
.ef1d	20 7e e4	jsr $e47e			jsr 	SIOInitialise 				; initialise the I/O system.
.ef20	a2 9e		ldx #$9e			ldx 	#BootMsg1 & 255 			; boot text.
.ef22	a0 ef		ldy #$ef			ldy 	#BootMsg1 >> 8
.ef24	20 8f e4	jsr $e48f			jsr 	SIOPrintString
.ef27	a2 ff		ldx #$ff			ldx 	#(endMemory-startMemory-1) & $FF
.ef29	a0 5f		ldy #$5f			ldy 	#(endMemory-startMemory-1) >> 8
.ef2b	20 6a e1	jsr $e16a			jsr 	PrintWordInteger
.ef2e	a2 b5		ldx #$b5			ldx 	#BootMsg2 & 255
.ef30	a0 ef		ldy #$ef			ldy 	#BootMsg2 >> 8
.ef32	20 8f e4	jsr $e48f			jsr 	SIOPrintString
.ef35	20 a4 e1	jsr $e1a4			jsr 	CopyBasicCode 				; it into the BASIC area.
.ef38	ad 15 f0	lda $f015			lda 	StartBehaviour 				; what to do ?
.ef3b	c9 43		cmp #$43			cmp 	#'C'						; execute from command line
.ef3d	f0 17		beq $ef56			beq		CommandLine
.ef3f	c9 52		cmp #$52			cmp 	#'R' 						; run program in memory.
.ef41	f0 07		beq $ef4a			beq	 	RunProgram
.ef43	c9 54		cmp #$54			cmp 	#'T'						; tokenise test
.ef45	f0 4b		beq $ef92			beq 	TokeniseExec
.ef47	4c 2d e1	jmp $e12d			jmp		SyntaxError
.ef4a					RunProgram:
.ef4a	20 a4 e1	jsr $e1a4			jsr 	CopyBasicCode
.ef4d	20 92 eb	jsr $eb92			jsr 	COMMAND_NewCode 			; do a new
.ef50	20 e1 eb	jsr $ebe1			jsr 	COMMAND_OldCode 			; get back the old program as we're deving.
.ef53	4c ca ea	jmp $eaca			jmp 	COMMAND_Run
.ef56					CommandLine:
.ef56	20 92 eb	jsr $eb92			jsr 	Command_NewCode
.ef59					WarmStart:
.ef59	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.ef5b	9a		txs			txs
.ef5c	20 f9 e4	jsr $e4f9			jsr 	SIOReadLine 				; read input line.
.ef5f	a9 6d		lda #$6d			lda 	#InputLine & $FF 			; tokenise the line
.ef61	85 24		sta $24				sta 	zTemp1
.ef63	a9 20		lda #$20			lda 	#InputLine >> 8
.ef65	85 25		sta $25				sta 	zTemp1+1
.ef67	20 67 e6	jsr $e667			jsr 	TokeniseString
.ef6a	a9 00		lda #$00			lda 	#TokeniseBuffer & $FF 		; point current line to tokenised input buffer.
.ef6c	85 20		sta $20				sta 	zCurrentLine
.ef6e	a9 21		lda #$21			lda 	#TokeniseBuffer >> 8
.ef70	85 21		sta $21				sta 	zCurrentLine+1
.ef72	a0 00		ldy #$00			ldy 	#0
.ef74					_WSSkipSpace:
.ef74	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ef76	c8		iny				iny
.ef77	c9 20		cmp #$20			cmp 	#' '
.ef79	f0 f9		beq $ef74			beq 	_WSSkipSpace
.ef7b	88		dey				dey
.ef7c	c9 30		cmp #$30			cmp 	#"0" 						; if not a digit
.ef7e	90 0f		bcc $ef8f			bcc 	_WSExecute
.ef80	c9 3a		cmp #$3a			cmp 	#"9"+1
.ef82	b0 0b		bcs $ef8f			bcs 	_WSExecute
.ef84	20 3d e1	jsr $e13d			jsr 	ReportError
>ef87	4e 4f 20 45 44 49 54 00				.text 	"NO EDIT",$00
.ef8f					_WSExecute:
.ef8f	4c dd ea	jmp $eadd			jmp 	CRUNNextInstruction
.ef92					TokeniseExec:
.ef92	a9 c4		lda #$c4			lda 	#BasicCode & $FF 			; if so tokenise whatever I've put in the basic code
.ef94	85 24		sta $24				sta 	zTemp1 						; area
.ef96	a9 ef		lda #$ef			lda 	#BasicCode >> 8
.ef98	85 25		sta $25				sta 	zTemp1+1
.ef9a	20 67 e6	jsr $e667			jsr 	TokeniseString
>ef9d	02						.byte 	2
.ef9e					BootMsg1:
>ef9e	2a 2a 2a 20 41 54 4f 4d				.text 	"*** ATOMIC BASIC ***",13,13,0
>efa6	49 43 20 42 41 53 49 43 20 2a 2a 2a 0d 0d 00
.efb5					BootMsg2:
>efb5	20 42 59 54 45 53 20 46				.text	" BYTES FREE.",13,13,0
>efbd	52 45 45 2e 0d 0d 00
.efc4					BasicCode:

;******  Processing file: include/basic_generated.inc

>efc4	0b 64 00 41 20 92 20 30			.byte $0b,$64,$00,$41,$20,$92,$20,$30,$8d,$9c,$00,$09,$2c,$01,$58,$20,$92,$20,$30,$00,$25,$2d,$01,$9c,$8d,$58,$20,$92,$20,$58,$20,$8a,$20,$31,$8d,$aa,$20,$41,$81,$20,$81,$58,$81,$20,$81,$41,$89,$58,$8d,$b4,$20,$58,$20,$92,$20,$35,$00,$17,$2e,$01,$41,$20,$92,$20,$41,$20,$8a,$20,$31,$8d,$b4,$20,$41,$20,$92,$20,$33,$8d,$af,$00,$00
>efcc	8d 9c 00 09 2c 01 58 20 92 20 30 00 25 2d 01 9c
>efdc	8d 58 20 92 20 58 20 8a 20 31 8d aa 20 41 81 20
>efec	81 58 81 20 81 41 89 58 8d b4 20 58 20 92 20 35
>effc	00 17 2e 01 41 20 92 20 41 20 8a 20 31 8d b4 20
>f00c	41 20 92 20 33 8d af 00 00
.f015					StartBehaviour:
>f015	52					.text "R"

;******  Return to file: basic.asm


;******  End of listing
