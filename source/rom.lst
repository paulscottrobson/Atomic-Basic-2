
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q --m4510 -D TARGET=1 -b -L rom.lst -o rom.bin basic.asm
; Tue Jul 30 22:55:30 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: basic.asm


;******  Processing file: porting.asm

.fff8					EXTDummyInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word 	EXTDummyInterrupt
>fffc	46 f2						.word 	Start
>fffe	f8 ff						.word 	EXTDummyInterrupt
=4					EXTZPWork = 4								; Zero Page work for Personality (4 bytes)
=8					IOCursorX = 8 								; Cursor position
=9					IOCursorY = 9
=$20							zeroPage 	= $20 					; first ZP byte to use
=$2000							startMemory = $2000 				; first non ZP byte to use
=$8000							endMemory   = $8000 				; last non ZP byte to use
=$200							basicStack  = $200 					; stack for BASIC
=$400							evalStack   = $400 					; stack for evaluation of expressions

;******  Processing file: personalities/personality_mega65.asm

=80					EXTWidth = 80 								; screen width
=25					EXTHeight = 25 								; screen height
=$2000					EXTLowMemory = $2000 						; Workspace RAM starts here
=$8000					EXTHighMemory = $8000 						; Workspace RAM ends here
=$1000					EXTScreen = $1000							; 2k screen RAM here
=$800					EXTCharSet = $800							; 2k character set (0-7F) here
>0000	00 00					.word 	0 								; forces it to be a 64k ROM (at least)
.a000					EXTCBMFont:
>a000	3c 66 6e 6e 60 62 3c 00			.binary "c64-chargen.rom"
>a008	18 3c 66 7e 66 66 66 00 7c 66 66 7c 66 66 7c 00
>a018	3c 66 60 60 60 66 3c 00 78 6c 66 66 66 6c 78 00
>a028	7e 60 60 78 60 60 7e 00 7e 60 60 78 60 60 60 00
>a038	3c 66 60 6e 66 66 3c 00 66 66 66 7e 66 66 66 00
>a048	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c 6c 38 00
>a058	66 6c 78 70 78 6c 66 00 60 60 60 60 60 60 7e 00
>a068	63 77 7f 6b 63 63 63 00 66 76 7e 7e 6e 66 66 00
>a078	3c 66 66 66 66 66 3c 00 7c 66 66 7c 60 60 60 00
>a088	3c 66 66 66 66 3c 0e 00 7c 66 66 7c 78 6c 66 00
>a098	3c 66 60 3c 06 66 3c 00 7e 18 18 18 18 18 18 00
>a0a8	66 66 66 66 66 66 3c 00 66 66 66 66 66 3c 18 00
>a0b8	63 63 63 6b 7f 77 63 00 66 66 3c 18 3c 66 66 00
>a0c8	66 66 66 3c 18 18 18 00 7e 06 0c 18 30 60 7e 00
>a0d8	3c 30 30 30 30 30 3c 00 0c 12 30 7c 30 62 fc 00
>a0e8	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 7e 18 18 18 18
>a0f8	00 10 30 7f 7f 30 10 00 00 00 00 00 00 00 00 00
>a108	18 18 18 18 00 00 18 00 66 66 66 00 00 00 00 00
>a118	66 66 ff 66 ff 66 66 00 18 3e 60 3c 06 7c 18 00
>a128	62 66 0c 18 30 66 46 00 3c 66 3c 38 67 66 3f 00
>a138	06 0c 18 00 00 00 00 00 0c 18 30 30 30 18 0c 00
>a148	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>a158	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>a168	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a178	00 03 06 0c 18 30 60 00 3c 66 6e 76 66 66 3c 00
>a188	18 18 38 18 18 18 7e 00 3c 66 06 0c 30 60 7e 00
>a198	3c 66 06 1c 06 66 3c 00 06 0e 1e 66 7f 06 06 00
>a1a8	7e 60 7c 06 06 66 3c 00 3c 66 60 7c 66 66 3c 00
>a1b8	7e 66 0c 18 18 18 18 00 3c 66 66 3c 66 66 3c 00
>a1c8	3c 66 66 3e 06 66 3c 00 00 00 18 00 00 18 00 00
>a1d8	00 00 18 00 00 18 18 30 0e 18 30 60 30 18 0e 00
>a1e8	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a1f8	3c 66 06 0c 18 00 18 00 00 00 00 ff ff 00 00 00
>a208	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>a218	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>a228	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>a238	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>a248	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>a258	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>a268	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>a278	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>a288	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>a298	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>a2a8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>a2b8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>a2c8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>a2d8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>a2e8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>a2f8	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>a308	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a318	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a328	c0 c0 c0 c0 c0 c0 c0 c0 cc cc 33 33 cc cc 33 33
>a338	03 03 03 03 03 03 03 03 00 00 00 00 cc cc 33 33
>a348	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>a358	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>a368	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>a378	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>a388	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>a398	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>a3a8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a3b8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a3c8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>a3d8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a3e8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a3f8	f0 f0 f0 f0 0f 0f 0f 0f c3 99 91 91 9f 99 c3 ff
>a408	e7 c3 99 81 99 99 99 ff 83 99 99 83 99 99 83 ff
>a418	c3 99 9f 9f 9f 99 c3 ff 87 93 99 99 99 93 87 ff
>a428	81 9f 9f 87 9f 9f 81 ff 81 9f 9f 87 9f 9f 9f ff
>a438	c3 99 9f 91 99 99 c3 ff 99 99 99 81 99 99 99 ff
>a448	c3 e7 e7 e7 e7 e7 c3 ff e1 f3 f3 f3 f3 93 c7 ff
>a458	99 93 87 8f 87 93 99 ff 9f 9f 9f 9f 9f 9f 81 ff
>a468	9c 88 80 94 9c 9c 9c ff 99 89 81 81 91 99 99 ff
>a478	c3 99 99 99 99 99 c3 ff 83 99 99 83 9f 9f 9f ff
>a488	c3 99 99 99 99 c3 f1 ff 83 99 99 83 87 93 99 ff
>a498	c3 99 9f c3 f9 99 c3 ff 81 e7 e7 e7 e7 e7 e7 ff
>a4a8	99 99 99 99 99 99 c3 ff 99 99 99 99 99 c3 e7 ff
>a4b8	9c 9c 9c 94 80 88 9c ff 99 99 c3 e7 c3 99 99 ff
>a4c8	99 99 99 c3 e7 e7 e7 ff 81 f9 f3 e7 cf 9f 81 ff
>a4d8	c3 cf cf cf cf cf c3 ff f3 ed cf 83 cf 9d 03 ff
>a4e8	c3 f3 f3 f3 f3 f3 c3 ff ff e7 c3 81 e7 e7 e7 e7
>a4f8	ff ef cf 80 80 cf ef ff ff ff ff ff ff ff ff ff
>a508	e7 e7 e7 e7 ff ff e7 ff 99 99 99 ff ff ff ff ff
>a518	99 99 00 99 00 99 99 ff e7 c1 9f c3 f9 83 e7 ff
>a528	9d 99 f3 e7 cf 99 b9 ff c3 99 c3 c7 98 99 c0 ff
>a538	f9 f3 e7 ff ff ff ff ff f3 e7 cf cf cf e7 f3 ff
>a548	cf e7 f3 f3 f3 e7 cf ff ff 99 c3 00 c3 99 ff ff
>a558	ff e7 e7 81 e7 e7 ff ff ff ff ff ff ff e7 e7 cf
>a568	ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>a578	ff fc f9 f3 e7 cf 9f ff c3 99 91 89 99 99 c3 ff
>a588	e7 e7 c7 e7 e7 e7 81 ff c3 99 f9 f3 cf 9f 81 ff
>a598	c3 99 f9 e3 f9 99 c3 ff f9 f1 e1 99 80 f9 f9 ff
>a5a8	81 9f 83 f9 f9 99 c3 ff c3 99 9f 83 99 99 c3 ff
>a5b8	81 99 f3 e7 e7 e7 e7 ff c3 99 99 c3 99 99 c3 ff
>a5c8	c3 99 99 c1 f9 99 c3 ff ff ff e7 ff ff e7 ff ff
>a5d8	ff ff e7 ff ff e7 e7 cf f1 e7 cf 9f cf e7 f1 ff
>a5e8	ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>a5f8	c3 99 f9 f3 e7 ff e7 ff ff ff ff 00 00 ff ff ff
>a608	f7 e3 c1 80 80 e3 c1 ff e7 e7 e7 e7 e7 e7 e7 e7
>a618	ff ff ff 00 00 ff ff ff ff ff 00 00 ff ff ff ff
>a628	ff 00 00 ff ff ff ff ff ff ff ff ff 00 00 ff ff
>a638	cf cf cf cf cf cf cf cf f3 f3 f3 f3 f3 f3 f3 f3
>a648	ff ff ff 1f 0f c7 e7 e7 e7 e7 e3 f0 f8 ff ff ff
>a658	e7 e7 c7 0f 1f ff ff ff 3f 3f 3f 3f 3f 3f 00 00
>a668	3f 1f 8f c7 e3 f1 f8 fc fc f8 f1 e3 c7 8f 1f 3f
>a678	00 00 3f 3f 3f 3f 3f 3f 00 00 fc fc fc fc fc fc
>a688	ff c3 81 81 81 81 c3 ff ff ff ff ff ff 00 00 ff
>a698	c9 80 80 80 c1 e3 f7 ff 9f 9f 9f 9f 9f 9f 9f 9f
>a6a8	ff ff ff f8 f0 e3 e7 e7 3c 18 81 c3 c3 81 18 3c
>a6b8	ff c3 81 99 99 81 c3 ff e7 e7 99 99 e7 e7 c3 ff
>a6c8	f9 f9 f9 f9 f9 f9 f9 f9 f7 e3 c1 80 c1 e3 f7 ff
>a6d8	e7 e7 e7 00 00 e7 e7 e7 3f 3f cf cf 3f 3f cf cf
>a6e8	e7 e7 e7 e7 e7 e7 e7 e7 ff ff fc c1 89 c9 c9 ff
>a6f8	00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff
>a708	0f 0f 0f 0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00
>a718	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a728	3f 3f 3f 3f 3f 3f 3f 3f 33 33 cc cc 33 33 cc cc
>a738	fc fc fc fc fc fc fc fc ff ff ff ff 33 33 cc cc
>a748	00 01 03 07 0f 1f 3f 7f fc fc fc fc fc fc fc fc
>a758	e7 e7 e7 e0 e0 e7 e7 e7 ff ff ff ff f0 f0 f0 f0
>a768	e7 e7 e7 e0 e0 ff ff ff ff ff ff 07 07 e7 e7 e7
>a778	ff ff ff ff ff ff 00 00 ff ff ff e0 e0 e7 e7 e7
>a788	e7 e7 e7 00 00 ff ff ff ff ff ff 00 00 e7 e7 e7
>a798	e7 e7 e7 07 07 e7 e7 e7 3f 3f 3f 3f 3f 3f 3f 3f
>a7a8	1f 1f 1f 1f 1f 1f 1f 1f f8 f8 f8 f8 f8 f8 f8 f8
>a7b8	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff
>a7c8	ff ff ff ff ff 00 00 00 fc fc fc fc fc fc 00 00
>a7d8	ff ff ff ff 0f 0f 0f 0f f0 f0 f0 f0 ff ff ff ff
>a7e8	e7 e7 e7 07 07 ff ff ff 0f 0f 0f 0f ff ff ff ff
>a7f8	0f 0f 0f 0f f0 f0 f0 f0 3c 66 6e 6e 60 62 3c 00
>a808	00 00 3c 06 3e 66 3e 00 00 60 60 7c 66 66 7c 00
>a818	00 00 3c 60 60 60 3c 00 00 06 06 3e 66 66 3e 00
>a828	00 00 3c 66 7e 60 3c 00 00 0e 18 3e 18 18 18 00
>a838	00 00 3e 66 66 3e 06 7c 00 60 60 7c 66 66 66 00
>a848	00 18 00 38 18 18 3c 00 00 06 00 06 06 06 06 3c
>a858	00 60 60 6c 78 6c 66 00 00 38 18 18 18 18 3c 00
>a868	00 00 66 7f 7f 6b 63 00 00 00 7c 66 66 66 66 00
>a878	00 00 3c 66 66 66 3c 00 00 00 7c 66 66 7c 60 60
>a888	00 00 3e 66 66 3e 06 06 00 00 7c 66 60 60 60 00
>a898	00 00 3e 60 3c 06 7c 00 00 18 7e 18 18 18 0e 00
>a8a8	00 00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00
>a8b8	00 00 63 6b 7f 3e 36 00 00 00 66 3c 18 3c 66 00
>a8c8	00 00 66 66 66 3e 0c 78 00 00 7e 0c 18 30 7e 00
>a8d8	3c 30 30 30 30 30 3c 00 0c 12 30 7c 30 62 fc 00
>a8e8	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 7e 18 18 18 18
>a8f8	00 10 30 7f 7f 30 10 00 00 00 00 00 00 00 00 00
>a908	18 18 18 18 00 00 18 00 66 66 66 00 00 00 00 00
>a918	66 66 ff 66 ff 66 66 00 18 3e 60 3c 06 7c 18 00
>a928	62 66 0c 18 30 66 46 00 3c 66 3c 38 67 66 3f 00
>a938	06 0c 18 00 00 00 00 00 0c 18 30 30 30 18 0c 00
>a948	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>a958	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>a968	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a978	00 03 06 0c 18 30 60 00 3c 66 6e 76 66 66 3c 00
>a988	18 18 38 18 18 18 7e 00 3c 66 06 0c 30 60 7e 00
>a998	3c 66 06 1c 06 66 3c 00 06 0e 1e 66 7f 06 06 00
>a9a8	7e 60 7c 06 06 66 3c 00 3c 66 60 7c 66 66 3c 00
>a9b8	7e 66 0c 18 18 18 18 00 3c 66 66 3c 66 66 3c 00
>a9c8	3c 66 66 3e 06 66 3c 00 00 00 18 00 00 18 00 00
>a9d8	00 00 18 00 00 18 18 30 0e 18 30 60 30 18 0e 00
>a9e8	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a9f8	3c 66 06 0c 18 00 18 00 00 00 00 ff ff 00 00 00
>aa08	18 3c 66 7e 66 66 66 00 7c 66 66 7c 66 66 7c 00
>aa18	3c 66 60 60 60 66 3c 00 78 6c 66 66 66 6c 78 00
>aa28	7e 60 60 78 60 60 7e 00 7e 60 60 78 60 60 60 00
>aa38	3c 66 60 6e 66 66 3c 00 66 66 66 7e 66 66 66 00
>aa48	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c 6c 38 00
>aa58	66 6c 78 70 78 6c 66 00 60 60 60 60 60 60 7e 00
>aa68	63 77 7f 6b 63 63 63 00 66 76 7e 7e 6e 66 66 00
>aa78	3c 66 66 66 66 66 3c 00 7c 66 66 7c 60 60 60 00
>aa88	3c 66 66 66 66 3c 0e 00 7c 66 66 7c 78 6c 66 00
>aa98	3c 66 60 3c 06 66 3c 00 7e 18 18 18 18 18 18 00
>aaa8	66 66 66 66 66 66 3c 00 66 66 66 66 66 3c 18 00
>aab8	63 63 63 6b 7f 77 63 00 66 66 3c 18 3c 66 66 00
>aac8	66 66 66 3c 18 18 18 00 7e 06 0c 18 30 60 7e 00
>aad8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>aae8	18 18 18 18 18 18 18 18 33 33 cc cc 33 33 cc cc
>aaf8	33 99 cc 66 33 99 cc 66 00 00 00 00 00 00 00 00
>ab08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>ab18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>ab28	c0 c0 c0 c0 c0 c0 c0 c0 cc cc 33 33 cc cc 33 33
>ab38	03 03 03 03 03 03 03 03 00 00 00 00 cc cc 33 33
>ab48	cc 99 33 66 cc 99 33 66 03 03 03 03 03 03 03 03
>ab58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>ab68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>ab78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>ab88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>ab98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>aba8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>abb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>abc8	00 00 00 00 00 ff ff ff 01 03 06 6c 78 70 60 00
>abd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>abe8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>abf8	f0 f0 f0 f0 0f 0f 0f 0f c3 99 91 91 9f 99 c3 ff
>ac08	ff ff c3 f9 c1 99 c1 ff ff 9f 9f 83 99 99 83 ff
>ac18	ff ff c3 9f 9f 9f c3 ff ff f9 f9 c1 99 99 c1 ff
>ac28	ff ff c3 99 81 9f c3 ff ff f1 e7 c1 e7 e7 e7 ff
>ac38	ff ff c1 99 99 c1 f9 83 ff 9f 9f 83 99 99 99 ff
>ac48	ff e7 ff c7 e7 e7 c3 ff ff f9 ff f9 f9 f9 f9 c3
>ac58	ff 9f 9f 93 87 93 99 ff ff c7 e7 e7 e7 e7 c3 ff
>ac68	ff ff 99 80 80 94 9c ff ff ff 83 99 99 99 99 ff
>ac78	ff ff c3 99 99 99 c3 ff ff ff 83 99 99 83 9f 9f
>ac88	ff ff c1 99 99 c1 f9 f9 ff ff 83 99 9f 9f 9f ff
>ac98	ff ff c1 9f c3 f9 83 ff ff e7 81 e7 e7 e7 f1 ff
>aca8	ff ff 99 99 99 99 c1 ff ff ff 99 99 99 c3 e7 ff
>acb8	ff ff 9c 94 80 c1 c9 ff ff ff 99 c3 e7 c3 99 ff
>acc8	ff ff 99 99 99 c1 f3 87 ff ff 81 f3 e7 cf 81 ff
>acd8	c3 cf cf cf cf cf c3 ff f3 ed cf 83 cf 9d 03 ff
>ace8	c3 f3 f3 f3 f3 f3 c3 ff ff e7 c3 81 e7 e7 e7 e7
>acf8	ff ef cf 80 80 cf ef ff ff ff ff ff ff ff ff ff
>ad08	e7 e7 e7 e7 ff ff e7 ff 99 99 99 ff ff ff ff ff
>ad18	99 99 00 99 00 99 99 ff e7 c1 9f c3 f9 83 e7 ff
>ad28	9d 99 f3 e7 cf 99 b9 ff c3 99 c3 c7 98 99 c0 ff
>ad38	f9 f3 e7 ff ff ff ff ff f3 e7 cf cf cf e7 f3 ff
>ad48	cf e7 f3 f3 f3 e7 cf ff ff 99 c3 00 c3 99 ff ff
>ad58	ff e7 e7 81 e7 e7 ff ff ff ff ff ff ff e7 e7 cf
>ad68	ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>ad78	ff fc f9 f3 e7 cf 9f ff c3 99 91 89 99 99 c3 ff
>ad88	e7 e7 c7 e7 e7 e7 81 ff c3 99 f9 f3 cf 9f 81 ff
>ad98	c3 99 f9 e3 f9 99 c3 ff f9 f1 e1 99 80 f9 f9 ff
>ada8	81 9f 83 f9 f9 99 c3 ff c3 99 9f 83 99 99 c3 ff
>adb8	81 99 f3 e7 e7 e7 e7 ff c3 99 99 c3 99 99 c3 ff
>adc8	c3 99 99 c1 f9 99 c3 ff ff ff e7 ff ff e7 ff ff
>add8	ff ff e7 ff ff e7 e7 cf f1 e7 cf 9f cf e7 f1 ff
>ade8	ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>adf8	c3 99 f9 f3 e7 ff e7 ff ff ff ff 00 00 ff ff ff
>ae08	e7 c3 99 81 99 99 99 ff 83 99 99 83 99 99 83 ff
>ae18	c3 99 9f 9f 9f 99 c3 ff 87 93 99 99 99 93 87 ff
>ae28	81 9f 9f 87 9f 9f 81 ff 81 9f 9f 87 9f 9f 9f ff
>ae38	c3 99 9f 91 99 99 c3 ff 99 99 99 81 99 99 99 ff
>ae48	c3 e7 e7 e7 e7 e7 c3 ff e1 f3 f3 f3 f3 93 c7 ff
>ae58	99 93 87 8f 87 93 99 ff 9f 9f 9f 9f 9f 9f 81 ff
>ae68	9c 88 80 94 9c 9c 9c ff 99 89 81 81 91 99 99 ff
>ae78	c3 99 99 99 99 99 c3 ff 83 99 99 83 9f 9f 9f ff
>ae88	c3 99 99 99 99 c3 f1 ff 83 99 99 83 87 93 99 ff
>ae98	c3 99 9f c3 f9 99 c3 ff 81 e7 e7 e7 e7 e7 e7 ff
>aea8	99 99 99 99 99 99 c3 ff 99 99 99 99 99 c3 e7 ff
>aeb8	9c 9c 9c 94 80 88 9c ff 99 99 c3 e7 c3 99 99 ff
>aec8	99 99 99 c3 e7 e7 e7 ff 81 f9 f3 e7 cf 9f 81 ff
>aed8	e7 e7 e7 00 00 e7 e7 e7 3f 3f cf cf 3f 3f cf cf
>aee8	e7 e7 e7 e7 e7 e7 e7 e7 cc cc 33 33 cc cc 33 33
>aef8	cc 66 33 99 cc 66 33 99 ff ff ff ff ff ff ff ff
>af08	0f 0f 0f 0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00
>af18	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>af28	3f 3f 3f 3f 3f 3f 3f 3f 33 33 cc cc 33 33 cc cc
>af38	fc fc fc fc fc fc fc fc ff ff ff ff 33 33 cc cc
>af48	33 66 cc 99 33 66 cc 99 fc fc fc fc fc fc fc fc
>af58	e7 e7 e7 e0 e0 e7 e7 e7 ff ff ff ff f0 f0 f0 f0
>af68	e7 e7 e7 e0 e0 ff ff ff ff ff ff 07 07 e7 e7 e7
>af78	ff ff ff ff ff ff 00 00 ff ff ff e0 e0 e7 e7 e7
>af88	e7 e7 e7 00 00 ff ff ff ff ff ff 00 00 e7 e7 e7
>af98	e7 e7 e7 07 07 e7 e7 e7 3f 3f 3f 3f 3f 3f 3f 3f
>afa8	1f 1f 1f 1f 1f 1f 1f 1f f8 f8 f8 f8 f8 f8 f8 f8
>afb8	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff
>afc8	ff ff ff ff ff 00 00 00 fe fc f9 93 87 8f 9f ff
>afd8	ff ff ff ff 0f 0f 0f 0f f0 f0 f0 f0 ff ff ff ff
>afe8	e7 e7 e7 07 07 ff ff ff 0f 0f 0f 0f ff ff ff ff
>aff8	0f 0f 0f 0f f0 f0 f0 f0
.b000					EXTStartPersonalise:
.b000	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.b002	9a		txs			txs
.b003	20 d6 b0	jsr $b0d6		jsr 	EXTReset 						; reset video
.b006	20 86 b0	jsr $b086		jsr 	EXTClearScreen 					; clear screen
.b009	4c 46 f2	jmp $f246		jmp 	Start 							; start main application
.b00c					EXTReadKeyPort:
.b00c	db		phz			phz
.b00d	20 42 b0	jsr $b042		jsr 	EXTSetupKeyAddress
.b010	ea		nop			nop 									; read keyboard
.b011	b2 04		lda ($04),z		lda 	(EXTZPWork),z
.b013	fb		plz			plz
.b014	c9 14		cmp #$14		cmp 	#20
.b016	d0 02		bne $b01a		bne 	_KMNo
.b018	a9 08		lda #$08		lda 	#"H"-64
.b01a					_KMNo:
.b01a	c9 91		cmp #$91		cmp 	#145
.b01c	d0 02		bne $b020		bne 	_KMNo
.b01e	a9 17		lda #$17		lda 	#"W"-64
.b020					_KMNo:
.b020	c9 11		cmp #$11		cmp 	#17
.b022	d0 02		bne $b026		bne 	_KMNo
.b024	a9 13		lda #$13		lda 	#"S"-64
.b026					_KMNo:
.b026	c9 9d		cmp #$9d		cmp 	#157
.b028	d0 02		bne $b02c		bne 	_KMNo
.b02a	a9 01		lda #$01		lda 	#"A"-64
.b02c					_KMNo:
.b02c	c9 1d		cmp #$1d		cmp 	#29
.b02e	d0 02		bne $b032		bne 	_KMNo
.b030	a9 04		lda #$04		lda 	#"D"-64
.b032					_KMNo:
.b032	c9 00		cmp #$00		cmp 	#0 								; set Z
.b034	60		rts			rts
.b035					EXTRemoveKeyPressed:
.b035	48		pha			pha
.b036	db		phz			phz
.b037	20 42 b0	jsr $b042		jsr 	EXTSetupKeyAddress
.b03a	a9 00		lda #$00		lda 	#0
.b03c	ea		nop			nop 									; read keyboard
.b03d	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b03f	fb		plz			plz
.b040	68		pla			pla
.b041	60		rts			rts
.b042					EXTSetupKeyAddress:
.b042	a9 0f		lda #$0f		lda 	#$0F 							; set up to write to read keyboard.
.b044	85 07		sta $07			sta 	EXTZPWork+3
.b046	a9 fd		lda #$fd		lda 	#$FD
.b048	85 06		sta $06			sta 	EXTZPWork+2
.b04a	a9 36		lda #$36		lda 	#$36
.b04c	85 05		sta $05			sta 	EXTZPWork+1
.b04e	a9 10		lda #$10		lda 	#$10
.b050	85 04		sta $04			sta 	EXTZPWork+0
.b052	a3 00		ldz #$00		ldz 	#0
.b054	60		rts			rts
.b055					EXTCheckBreak:
.b055	db		phz			phz
.b056	20 42 b0	jsr $b042		jsr 	EXTSetupKeyAddress 				; point to keyboard
.b059	e6 04		inc $04			inc 	EXTZPWork 						; point to modifiers.
.b05b	ea		nop			nop 									; read modifiers.
.b05c	b2 04		lda ($04),z		lda 	(EXTZPWork),z
.b05e	fb		plz			plz 									; restore Z
.b05f	29 05		and #$05		and 	#5								; break is LeftShift+Ctrl
.b061	c9 05		cmp #$05		cmp 	#5
.b063	f0 03		beq $b068		beq 	_EXTCBYes
.b065	a9 00		lda #$00		lda 	#0
.b067	60		rts			rts
.b068					_EXTCBYes:
.b068	a9 01		lda #$01		lda 	#1
.b06a	60		rts			rts
.b06b					EXTReadScreen:
.b06b	5a		phy			phy 										; save Y
.b06c	8a		txa			txa 										; multiply XY by 2
.b06d	85 04		sta $04			sta 	EXTZPWork							; into EXTZPWork
.b06f	98		tya			tya
.b070	09 10		ora #$10		ora 	#EXTScreen>>8 						; move into screen area
.b072	85 05		sta $05			sta 	EXTZPWork+1 						; read character there
.b074	a0 00		ldy #$00		ldy 	#0
.b076	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.b078	7a		ply			ply 										; restore Y and exit.
.b079	60		rts			rts
.b07a					EXTWriteScreen:
.b07a	5a		phy			phy
.b07b	48		pha			pha
.b07c	20 6b b0	jsr $b06b		jsr		EXTReadScreen 						; set up the address into EXTZPWork
.b07f	a0 00		ldy #$00		ldy 	#0
.b081	68		pla			pla 										; restore and write.
.b082	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b084	7a		ply			ply
.b085	60		rts			rts
.b086					EXTClearScreen:
.b086	48		pha			pha 										; save registers
.b087	5a		phy			phy
.b088	a9 00		lda #$00		lda 	#EXTScreen & $FF 					; set up pointer
.b08a	85 04		sta $04			sta 	EXTZPWork
.b08c	a9 10		lda #$10		lda 	#EXTScreen >> 8
.b08e	85 05		sta $05			sta 	EXTZPWork+1
.b090	a0 00		ldy #$00		ldy 	#0
.b092					_EXTCSLoop:
.b092	a9 20		lda #$20		lda 	#32
.b094	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b096	c8		iny			iny
.b097	d0 f9		bne $b092		bne 	_EXTCSLoop
.b099	e6 05		inc $05			inc 	EXTZPWork+1 						; next screen page
.b09b	a5 05		lda $05			lda 	EXTZPWork+1
.b09d	c9 18		cmp #$18		cmp 	#(EXTScreen>>8)+8 					; done 2k ?
.b09f	d0 f1		bne $b092		bne 	_EXTCSLoop
.b0a1	7a		ply			ply 										; restore
.b0a2	68		pla			pla
.b0a3	60		rts			rts
.b0a4					EXTScrollDisplay:
.b0a4	48		pha			pha 										; save registers
.b0a5	5a		phy			phy
.b0a6	a9 00		lda #$00		lda 	#EXTScreen & $FF 					; set pointer to screen
.b0a8	85 04		sta $04			sta 	EXTZPWork+0
.b0aa	a9 10		lda #$10		lda 	#EXTScreen >> 8
.b0ac	85 05		sta $05			sta 	EXTZPWork+1
.b0ae					_EXTScroll:
.b0ae	a0 50		ldy #$50		ldy 	#EXTWidth 							; x 2 because of two byte format.
.b0b0	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.b0b2	a0 00		ldy #$00		ldy 	#0
.b0b4	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b0b6	e6 04		inc $04			inc 	EXTZPWork 							; bump address
.b0b8	d0 02		bne $b0bc		bne 	_EXTNoCarry
.b0ba	e6 05		inc $05			inc 	EXTZPWork+1
.b0bc					_EXTNoCarry:
.b0bc	a5 04		lda $04			lda 	EXTZPWork 							; done ?
.b0be	c9 80		cmp #$80		cmp	 	#(EXTScreen+EXTWidth*(EXTHeight-1)) & $FF
.b0c0	d0 ec		bne $b0ae		bne 	_EXTScroll
.b0c2	a5 05		lda $05			lda 	EXTZPWork+1
.b0c4	c9 17		cmp #$17		cmp	 	#(EXTScreen+EXTWidth*(EXTHeight-1)) >> 8
.b0c6	d0 e6		bne $b0ae		bne 	_EXTScroll
.b0c8	a0 00		ldy #$00		ldy 	#0									; clear bottom line.
.b0ca					_EXTLastLine:
.b0ca	a9 20		lda #$20		lda 	#32
.b0cc	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b0ce	c8		iny			iny
.b0cf	c0 50		cpy #$50		cpy 	#EXTWidth
.b0d1	d0 f7		bne $b0ca		bne 	_EXTLastLine
.b0d3	7a		ply			ply 										; restore and exit.
.b0d4	68		pla			pla
.b0d5	60		rts			rts
.b0d6					EXTReset:
.b0d6	48		pha			pha 									; save registers
.b0d7	da		phx			phx
.b0d8	5a		phy			phy
.b0d9	a9 0f		lda #$0f		lda 	#$0F 							; set up to write to video system.
.b0db	85 07		sta $07			sta 	EXTZPWork+3
.b0dd	a9 fd		lda #$fd		lda 	#$FD
.b0df	85 06		sta $06			sta 	EXTZPWork+2
.b0e1	a9 30		lda #$30		lda 	#$30
.b0e3	85 05		sta $05			sta 	EXTZPWork+1
.b0e5	a9 00		lda #$00		lda 	#$00
.b0e7	85 04		sta $04			sta 	EXTZPWork+0
.b0e9	a3 2f		ldz #$2f		ldz 	#$2F 							; address already set up
.b0eb	a9 a5		lda #$a5		lda 	#$A5
.b0ed	ea		nop			nop
.b0ee	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0f0	a3 2f		ldz #$2f		ldz 	#$2F 							; address already set up
.b0f2	a9 96		lda #$96		lda 	#$96
.b0f4	ea		nop			nop
.b0f5	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0f7	a3 30		ldz #$30		ldz 	#$30 							; address already set up
.b0f9	a9 40		lda #$40		lda 	#$40
.b0fb	ea		nop			nop
.b0fc	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0fe	a3 31		ldz #$31		ldz 	#$31 							; address already set up
.b100	a9 80		lda #$80		lda 	#$80
.b102	ea		nop			nop
.b103	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b105	a3 20		ldz #$20		ldz 	#$20 							; address already set up
.b107	a9 00		lda #$00		lda 	#0
.b109	ea		nop			nop
.b10a	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b10c	a3 21		ldz #$21		ldz 	#$21 							; address already set up
.b10e	a9 00		lda #$00		lda 	#0
.b110	ea		nop			nop
.b111	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b113	a3 01		ldz #$01		ldz 	#$01 							; address already set up
.b115	a9 ff		lda #$ff		lda 	#$FF
.b117	ea		nop			nop
.b118	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b11a	a3 00		ldz #$00		ldz 	#$00 							; address already set up
.b11c	a9 ff		lda #$ff		lda 	#$FF
.b11e	ea		nop			nop
.b11f	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b121	a3 16		ldz #$16		ldz 	#$16 							; address already set up
.b123	a9 c8		lda #$c8		lda 	#$C8
.b125	ea		nop			nop
.b126	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b128	a3 18		ldz #$18		ldz 	#$18 							; address already set up
.b12a	a9 42		lda #$42		lda 	#$42
.b12c	ea		nop			nop
.b12d	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b12f	a3 11		ldz #$11		ldz 	#$11 							; address already set up
.b131	a9 18		lda #$18		lda 	#$18
.b133	ea		nop			nop
.b134	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b136					ClearColourRAM:
.b136	a9 00		lda #$00		lda 	#$00							; colour RAM at $1F800-1FFFF (2kb)
.b138	85 07		sta $07			sta 	EXTZPWork+3
.b13a	a9 01		lda #$01		lda 	#$01
.b13c	85 06		sta $06			sta 	EXTZPWork+2
.b13e	a9 f8		lda #$f8		lda 	#$F8
.b140	85 05		sta $05			sta 	EXTZPWork+1
.b142	a9 00		lda #$00		lda 	#$00
.b144	85 04		sta $04			sta 	EXTZPWork+0
.b146	a3 00		ldz #$00		ldz 	#0
.b148					_EXTClearColorRam:
.b148	a9 03		lda #$03		lda 	#3 								; fill that with this colour.
.b14a	ea		nop			nop
.b14b	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b14d	3b		dez			dez
.b14e	d0 f8		bne $b148		bne 	_EXTClearColorRam
.b150	e6 05		inc $05			inc 	EXTZPWork+1
.b152	d0 f4		bne $b148		bne 	_EXTClearColorRam
.b154	a2 00		ldx #$00		ldx 	#0 								; copy PET Font into memory.
.b156					_EXTCopyCBMFont:
.b156	bd 00 a8	lda $a800,x		lda 	EXTCBMFont+$800,x 				; +$800 uses the lower case c/set
.b159	9d 00 08	sta $0800,x		sta 	EXTCharSet,x
.b15c	bd 00 a1	lda $a100,x		lda 	EXTCBMFont+$100,x
.b15f	9d 00 09	sta $0900,x		sta 	EXTCharSet+$100,x
.b162	bd 00 a2	lda $a200,x		lda 	EXTCBMFont+$200,x
.b165	9d 00 0a	sta $0a00,x		sta 	EXTCharSet+$200,x
.b168	bd 00 a3	lda $a300,x		lda 	EXTCBMFont+$300,x
.b16b	9d 00 0b	sta $0b00,x		sta 	EXTCharSet+$300,x
.b16e	ca		dex			dex
.b16f	d0 e5		bne $b156		bne 	_EXTCopyCBMFont
.b171	7a		ply			ply 									; restore and exit.
.b172	fa		plx			plx
.b173	68		pla			pla
.b174	60		rts			rts

;******  Return to file: porting.asm


;******  Return to file: basic.asm


;******  Processing file: include/tokens.inc

.e000					KeywordVectorTable:
>e000	03 e9					.word	BFUNC_WordInd                 ; "!"        ($0080)
>e002	5c e1					.word	SyntaxError                   ; """        ($0081)
>e004	5c e1					.word	SyntaxError                   ; "#"        ($0082)
>e006	f8 e8					.word	BFUNC_String                  ; "$"        ($0083)
>e008	c2 ea					.word	BFUNC_Modulus                 ; "%"        ($0084)
>e00a	0a e9					.word	BFUNC_And                     ; "&"        ($0085)
>e00c	5c e1					.word	SyntaxError                   ; "'"        ($0086)
>e00e	5c e1					.word	SyntaxError                   ; "("        ($0087)
>e010	5c e1					.word	SyntaxError                   ; ")"        ($0088)
>e012	de ea					.word	BFUNC_Multiply                ; "*"        ($0089)
>e014	ac e8					.word	BFUNC_Add                     ; "+"        ($008a)
>e016	5c e1					.word	SyntaxError                   ; ","        ($008b)
>e018	d2 e8					.word	BFUNC_Subtract                ; "-"        ($008c)
>e01a	fa e9					.word	BFUNC_Divide                  ; "/"        ($008d)
>e01c	5c e1					.word	SyntaxError                   ; ":"        ($008e)
>e01e	5c e1					.word	SyntaxError                   ; ";"        ($008f)
>e020	db e9					.word	BFUNC_LessEqual               ; "<="       ($0090)
>e022	7c e9					.word	BFUNC_NotEquals               ; "<>"       ($0091)
>e024	b6 e9					.word	BFUNC_Less                    ; "<"        ($0092)
>e026	79 e9					.word	BFUNC_Equals                  ; "="        ($0093)
>e028	b9 e9					.word	BFUNC_GreaterEqual            ; ">="       ($0094)
>e02a	d8 e9					.word	BFUNC_Greater                 ; ">"        ($0095)
>e02c	fc e8					.word	BFUNC_ByteInd                 ; "?"        ($0096)
>e02e	54 e9					.word	BFUNC_Xor                     ; "^"        ($0097)
>e030	e4 ef					.word	COMMAND_Assert                ; "assert"   ($0098)
>e032	cd eb					.word	UNARY_Abs                     ; "abs"      ($0099)
>e034	2b f0					.word	COMMAND_Clear                 ; "clear"    ($009a)
>e036	af f1					.word	COMMAND_CLS                   ; "cls"      ($009b)
>e038	b8 eb					.word	UNARY_Ch                      ; "ch"       ($009c)
>e03a	59 ec					.word	COMMAND_Dim                   ; "dim"      ($009d)
>e03c	e2 ec					.word	COMMAND_Do                    ; "do"       ($009e)
>e03e	00 ee					.word	COMMAND_ELSE                  ; "else"     ($009f)
>e040	3b f2					.word	COMMAND_End                   ; "end"      ($00a0)
>e042	5c e1					.word	SyntaxError                   ; "for"      ($00a1)
>e044	6f ed					.word	COMMAND_Gosub                 ; "gosub"    ($00a2)
>e046	5c ed					.word	COMMAND_Goto                  ; "goto"     ($00a3)
>e048	ea eb					.word	UNARY_Get                     ; "get"      ($00a4)
>e04a	44 ec					.word	UNARY_IOAddr                  ; "ioaddr"   ($00a5)
>e04c	5c e1					.word	SyntaxError                   ; "input"    ($00a6)
>e04e	ce ed					.word	COMMAND_IF                    ; "if"       ($00a7)
>e050	44 ef					.word	COMMAND_List                  ; "list"     ($00a8)
>e052	5c e1					.word	SyntaxError                   ; "link"     ($00a9)
>e054	09 ee					.word	COMMAND_Let                   ; "let"      ($00aa)
>e056	76 eb					.word	UNARY_Len                     ; "len"      ($00ab)
>e058	5c e1					.word	SyntaxError                   ; "next"     ($00ac)
>e05a	12 f0					.word	COMMAND_NewExec               ; "new"      ($00ad)
>e05c	61 f0					.word	COMMAND_OldExec               ; "old"      ($00ae)
>e05e	a1 f0					.word	COMMAND_Print                 ; "print"    ($00af)
>e060	f4 eb					.word	UNARY_Page                    ; "page"     ($00b0)
>e062	7b ed					.word	COMMAND_Return                ; "return"   ($00b1)
>e064	08 f0					.word	COMMAND_Rem                   ; "rem"      ($00b2)
>e066	b2 f1					.word	COMMAND_Run                   ; "run"      ($00b3)
>e068	9d f0					.word	COMMAND_RST                   ; "rst"      ($00b4)
>e06a	07 ec					.word	UNARY_Rnd                     ; "rnd"      ($00b5)
>e06c	33 f2					.word	COMMAND_Stop                  ; "stop"     ($00b6)
>e06e	5c e1					.word	SyntaxError                   ; "step"     ($00b7)
>e070	ec ed					.word	COMMAND_THEN                  ; "then"     ($00b8)
>e072	d5 eb					.word	UNARY_Top                     ; "top"      ($00b9)
>e074	5c e1					.word	SyntaxError                   ; "to"       ($00ba)
>e076	e8 ec					.word	COMMAND_Until                 ; "until"    ($00bb)
>e078	2f e9					.word	BFUNC_Or                      ; "|"        ($00bc)
>e07a	35 eb					.word	BFUNC_StringCompare           ; "~"        ($00bd)
.e07c					TokenText:
>e07c	a1					.byte $a1                             ; $0080 !
>e07d	a2					.byte $a2                             ; $0081 "
>e07e	a3					.byte $a3                             ; $0082 #
>e07f	a4					.byte $a4                             ; $0083 $
>e080	a5					.byte $a5                             ; $0084 %
>e081	a6					.byte $a6                             ; $0085 &
>e082	a7					.byte $a7                             ; $0086 '
>e083	a8					.byte $a8                             ; $0087 (
>e084	a9					.byte $a9                             ; $0088 )
>e085	aa					.byte $aa                             ; $0089 *
>e086	ab					.byte $ab                             ; $008a +
>e087	ac					.byte $ac                             ; $008b ,
>e088	ad					.byte $ad                             ; $008c -
>e089	af					.byte $af                             ; $008d /
>e08a	ba					.byte $ba                             ; $008e :
>e08b	bb					.byte $bb                             ; $008f ;
>e08c	3c bd					.byte $3c,$bd                         ; $0090 <=
>e08e	3c be					.byte $3c,$be                         ; $0091 <>
>e090	bc					.byte $bc                             ; $0092 <
>e091	bd					.byte $bd                             ; $0093 =
>e092	3e bd					.byte $3e,$bd                         ; $0094 >=
>e094	be					.byte $be                             ; $0095 >
>e095	bf					.byte $bf                             ; $0096 ?
>e096	de					.byte $de                             ; $0097 ^
>e097	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4         ; $0098 assert
>e09d	41 42 d3				.byte $41,$42,$d3                     ; $0099 abs
>e0a0	43 4c 45 41 d2				.byte $43,$4c,$45,$41,$d2             ; $009a clear
>e0a5	43 4c d3				.byte $43,$4c,$d3                     ; $009b cls
>e0a8	43 c8					.byte $43,$c8                         ; $009c ch
>e0aa	44 49 cd				.byte $44,$49,$cd                     ; $009d dim
>e0ad	44 cf					.byte $44,$cf                         ; $009e do
>e0af	45 4c 53 c5				.byte $45,$4c,$53,$c5                 ; $009f else
>e0b3	45 4e c4				.byte $45,$4e,$c4                     ; $00a0 end
>e0b6	46 4f d2				.byte $46,$4f,$d2                     ; $00a1 for
>e0b9	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2             ; $00a2 gosub
>e0be	47 4f 54 cf				.byte $47,$4f,$54,$cf                 ; $00a3 goto
>e0c2	47 45 d4				.byte $47,$45,$d4                     ; $00a4 get
>e0c5	49 4f 41 44 44 d2			.byte $49,$4f,$41,$44,$44,$d2         ; $00a5 ioaddr
>e0cb	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4             ; $00a6 input
>e0d0	49 c6					.byte $49,$c6                         ; $00a7 if
>e0d2	4c 49 53 d4				.byte $4c,$49,$53,$d4                 ; $00a8 list
>e0d6	4c 49 4e cb				.byte $4c,$49,$4e,$cb                 ; $00a9 link
>e0da	4c 45 d4				.byte $4c,$45,$d4                     ; $00aa let
>e0dd	4c 45 ce				.byte $4c,$45,$ce                     ; $00ab len
>e0e0	4e 45 58 d4				.byte $4e,$45,$58,$d4                 ; $00ac next
>e0e4	4e 45 d7				.byte $4e,$45,$d7                     ; $00ad new
>e0e7	4f 4c c4				.byte $4f,$4c,$c4                     ; $00ae old
>e0ea	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4             ; $00af print
>e0ef	50 41 47 c5				.byte $50,$41,$47,$c5                 ; $00b0 page
>e0f3	52 45 54 55 52 ce			.byte $52,$45,$54,$55,$52,$ce         ; $00b1 return
>e0f9	52 45 cd				.byte $52,$45,$cd                     ; $00b2 rem
>e0fc	52 55 ce				.byte $52,$55,$ce                     ; $00b3 run
>e0ff	52 53 d4				.byte $52,$53,$d4                     ; $00b4 rst
>e102	52 4e c4				.byte $52,$4e,$c4                     ; $00b5 rnd
>e105	53 54 4f d0				.byte $53,$54,$4f,$d0                 ; $00b6 stop
>e109	53 54 45 d0				.byte $53,$54,$45,$d0                 ; $00b7 step
>e10d	54 48 45 ce				.byte $54,$48,$45,$ce                 ; $00b8 then
>e111	54 4f d0				.byte $54,$4f,$d0                     ; $00b9 top
>e114	54 cf					.byte $54,$cf                         ; $00ba to
>e116	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc             ; $00bb until
>e11b	fc					.byte $fc                             ; $00bc |
>e11c	fe					.byte $fe                             ; $00bd ~
>e11d	00					.byte $00
.e11e					TokenTypeInformation:
>e11e	04					.byte $04                             ; $0080 !
>e11f	0a					.byte $0a                             ; $0081 "
>e120	0a					.byte $0a                             ; $0082 #
>e121	04					.byte $04                             ; $0083 $
>e122	03					.byte $03                             ; $0084 %
>e123	00					.byte $00                             ; $0085 &
>e124	0a					.byte $0a                             ; $0086 '
>e125	0a					.byte $0a                             ; $0087 (
>e126	0a					.byte $0a                             ; $0088 )
>e127	03					.byte $03                             ; $0089 *
>e128	02					.byte $02                             ; $008a +
>e129	0a					.byte $0a                             ; $008b ,
>e12a	02					.byte $02                             ; $008c -
>e12b	03					.byte $03                             ; $008d /
>e12c	0a					.byte $0a                             ; $008e :
>e12d	0a					.byte $0a                             ; $008f ;
>e12e	01					.byte $01                             ; $0090 <=
>e12f	01					.byte $01                             ; $0091 <>
>e130	01					.byte $01                             ; $0092 <
>e131	01					.byte $01                             ; $0093 =
>e132	01					.byte $01                             ; $0094 >=
>e133	01					.byte $01                             ; $0095 >
>e134	04					.byte $04                             ; $0096 ?
>e135	00					.byte $00                             ; $0097 ^
>e136	08					.byte $08                             ; $0098 assert
>e137	09					.byte $09                             ; $0099 abs
>e138	08					.byte $08                             ; $009a clear
>e139	08					.byte $08                             ; $009b cls
>e13a	09					.byte $09                             ; $009c ch
>e13b	08					.byte $08                             ; $009d dim
>e13c	08					.byte $08                             ; $009e do
>e13d	08					.byte $08                             ; $009f else
>e13e	08					.byte $08                             ; $00a0 end
>e13f	08					.byte $08                             ; $00a1 for
>e140	08					.byte $08                             ; $00a2 gosub
>e141	08					.byte $08                             ; $00a3 goto
>e142	09					.byte $09                             ; $00a4 get
>e143	09					.byte $09                             ; $00a5 ioaddr
>e144	08					.byte $08                             ; $00a6 input
>e145	08					.byte $08                             ; $00a7 if
>e146	08					.byte $08                             ; $00a8 list
>e147	08					.byte $08                             ; $00a9 link
>e148	08					.byte $08                             ; $00aa let
>e149	09					.byte $09                             ; $00ab len
>e14a	08					.byte $08                             ; $00ac next
>e14b	08					.byte $08                             ; $00ad new
>e14c	08					.byte $08                             ; $00ae old
>e14d	08					.byte $08                             ; $00af print
>e14e	09					.byte $09                             ; $00b0 page
>e14f	08					.byte $08                             ; $00b1 return
>e150	08					.byte $08                             ; $00b2 rem
>e151	08					.byte $08                             ; $00b3 run
>e152	08					.byte $08                             ; $00b4 rst
>e153	09					.byte $09                             ; $00b5 rnd
>e154	08					.byte $08                             ; $00b6 stop
>e155	08					.byte $08                             ; $00b7 step
>e156	08					.byte $08                             ; $00b8 then
>e157	09					.byte $09                             ; $00b9 top
>e158	08					.byte $08                             ; $00ba to
>e159	08					.byte $08                             ; $00bb until
>e15a	00					.byte $00                             ; $00bc |
>e15b	01					.byte $01                             ; $00bd ~
=$00					KTYPE_PRECBASE = $00
=$08					KTYPE_COMMAND = $08
=$09					KTYPE_UNARYFN = $09
=$0a					KTYPE_SYNTAX = $0a
=$0080					KW_PLING = $0080
=$0081					KW_DQUOTE = $0081
=$0082					KW_HASH = $0082
=$0083					KW_DOLLAR = $0083
=$0084					KW_PERCENT = $0084
=$0085					KW_AMPERSAND = $0085
=$0086					KW_SQUOTE = $0086
=$0087					KW_LPAREN = $0087
=$0088					KW_RPAREN = $0088
=$0089					KW_STAR = $0089
=$008a					KW_PLUS = $008a
=$008b					KW_COMMA = $008b
=$008c					KW_MINUS = $008c
=$008d					KW_FSLASH = $008d
=$008e					KW_COLON = $008e
=$008f					KW_SEMICOLON = $008f
=$0090					KW_LESSEQUAL = $0090
=$0091					KW_LESSGREATER = $0091
=$0092					KW_LESS = $0092
=$0093					KW_EQUAL = $0093
=$0094					KW_GREATEREQUAL = $0094
=$0095					KW_GREATER = $0095
=$0096					KW_QUESTION = $0096
=$0097					KW_HAT = $0097
=$0098					KW_ASSERT = $0098
=$0099					KW_ABS = $0099
=$009a					KW_CLEAR = $009a
=$009b					KW_CLS = $009b
=$009c					KW_CH = $009c
=$009d					KW_DIM = $009d
=$009e					KW_DO = $009e
=$009f					KW_ELSE = $009f
=$00a0					KW_END = $00a0
=$00a1					KW_FOR = $00a1
=$00a2					KW_GOSUB = $00a2
=$00a3					KW_GOTO = $00a3
=$00a4					KW_GET = $00a4
=$00a5					KW_IOADDR = $00a5
=$00a6					KW_INPUT = $00a6
=$00a7					KW_IF = $00a7
=$00a8					KW_LIST = $00a8
=$00a9					KW_LINK = $00a9
=$00aa					KW_LET = $00aa
=$00ab					KW_LEN = $00ab
=$00ac					KW_NEXT = $00ac
=$00ad					KW_NEW = $00ad
=$00ae					KW_OLD = $00ae
=$00af					KW_PRINT = $00af
=$00b0					KW_PAGE = $00b0
=$00b1					KW_RETURN = $00b1
=$00b2					KW_REM = $00b2
=$00b3					KW_RUN = $00b3
=$00b4					KW_RST = $00b4
=$00b5					KW_RND = $00b5
=$00b6					KW_STOP = $00b6
=$00b7					KW_STEP = $00b7
=$00b8					KW_THEN = $00b8
=$00b9					KW_TOP = $00b9
=$00ba					KW_TO = $00ba
=$00bb					KW_UNTIL = $00bb
=$00bc					KW_BAR = $00bc
=$00bd					KW_TILDE = $00bd

;******  Return to file: basic.asm


;******  Processing file: general/support.asm

.e15c					SyntaxError:
.e15c	20 6c e1	jsr $e16c			jsr 	ReportError
>e15f	53 59 4e 54 41 58 20 45				.text	"SYNTAX ERROR",0
>e167	52 52 4f 52 00
.e16c					ReportError:
.e16c	fa		plx				plx
.e16d	7a		ply				ply
.e16e	e8		inx				inx
.e16f	d0 01		bne $e172			bne 	_REPrint
.e171	c8		iny				iny
.e172					_REPrint:
.e172	20 f2 e4	jsr $e4f2			jsr 	SIOPrintString
.e175	a5 21		lda $21				lda 	zCurrentLine+1 				; running from tokeniser buffer
.e177	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.e179	f0 13		beq $e18e			beq 	_RENoLineNumber
.e17b	a2 96		ldx #$96			ldx 	#_REAt & $FF
.e17d	a0 e1		ldy #$e1			ldy 	#_REAt >> 8
.e17f	20 f2 e4	jsr $e4f2			jsr 	SIOPrintString
.e182	a0 01		ldy #$01			ldy 	#1
.e184	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e186	aa		tax				tax
.e187	c8		iny				iny
.e188	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e18a	a8		tay				tay
.e18b	20 9b e1	jsr $e19b			jsr 	PrintWordInteger
.e18e					_RENoLineNumber:
.e18e	a9 0d		lda #$0d			lda 	#13
.e190	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.e193	4c 82 f2	jmp $f282			jmp 	WarmStart
>e196	20 41 54 20 00			_REAt:	.text 	" AT ",0
.e19b					PrintWordInteger:
.e19b	8a		txa				txa
.e19c	a2 00		ldx #$00			ldx 	#0
.e19e	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e1a1	98		tya				tya
.e1a2	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e1a5	c8		iny				iny
.e1a6	a9 00		lda #$00			lda 	#0
.e1a8	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e1ab	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e1ae	20 77 f1	jsr $f177			jsr 	CPRPrintInteger
.e1b1	60		rts				rts
.e1b2					CheckNextCharacter:
.e1b2	8d c0 20	sta $20c0			sta 	Temp1 						; save character to check
.e1b5					_CNCLoop:
.e1b5	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next
.e1b7	f0 0b		beq $e1c4			beq 	_CNCFail 					; end of line, so no character
.e1b9	c8		iny				iny
.e1ba	c9 20		cmp #$20			cmp 	#' ' 						; skip spaces
.e1bc	f0 f7		beq $e1b5			beq 	_CNCLoop
.e1be	cd c0 20	cmp $20c0			cmp 	Temp1 						; fail if not what was wanted
.e1c1	d0 01		bne $e1c4			bne 	_CNCFail
.e1c3	60		rts				rts
.e1c4					_CNCFail:
.e1c4	20 6c e1	jsr $e16c			jsr 	ReportError
>e1c7	4d 49 53 53 49 4e 47 20				.text 	"MISSING TOKEN",$00
>e1cf	54 4f 4b 45 4e 00
.e1d5					CopyBasicCode:
.e1d5	a2 00		ldx #$00			ldx 	#0
.e1d7					_CopyLoop:
.e1d7	bd e8 f2	lda $f2e8,x			lda 	BasicCode,x
.e1da	9d 00 23	sta $2300,x			sta 	BasicProgram,x
.e1dd	bd e8 f3	lda $f3e8,x			lda 	BasicCode+$100,x
.e1e0	9d 00 24	sta $2400,x			sta 	BasicProgram+$100,x
.e1e3	e8		inx				inx
.e1e4	d0 f1		bne $e1d7			bne 	_CopyLoop
.e1e6	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/data.asm

=$e1e7							currentPosData = *
>0020					zCurrentLine: 	.word 	?					; address of current line (offset word)
>0022					zLowMemory:		.word	?					; next free space after program (arrays,vars etc.)
>0024					zTemp1:			.word 	?					; temporary vars
>0026					zTemp2:			.word 	?
>0028					zTargetAddr: 	.dword 	? 					; address of LHS of assignment, list pointer.
>2000					FixedVariables:	.fill 	27*4 				; address of 26 x 4 byte fixed variables @A-Z
>206c					Control 		.byte 	? 					; 0 = normal, 1 = tokenise, 2 = run program.
>206d					InputLine:		.fill 	EXTWidth+1 			; screen input buffer, cannot cross page.
>20be					HighMemory:		.word 	?					; highest memory location available (2 bytes)
>20c0					Temp1:			.dword	?					; 4 byte temporary stores.
>20c4					SignCount:		.byte 	? 					; count of signs in divide.
>20c5					StringBufferPos:.byte 	? 					; next free slot in string buffer
>20c6					RandomSeed 		.word 	? 					; Random Number
>20c8					xCursor 		.byte 	? 					; cursor position
>20c9					yCursor 		.byte 	?
>20ca					breakCheckCount	.byte 	?					; how often check for break.
>20cb					basicStackIndex	.byte 	? 					; index into Basic Stack.
>20cc									.align	256
.2100					TokeniseBuffer:
>2100									.fill 	256
.2200					StringBuffer:
>2200									.fill 	256
.2300					BasicProgram:

;******  Return to file: basic.asm


;******  Processing file: general/evaluate.asm

.e1e7					EvaluateSNError:
.e1e7	4c 5c e1	jmp $e15c			jmp 	SyntaxError
.e1ea					EvaluateMissingQuote:
.e1ea	20 6c e1	jsr $e16c			jsr 	ReportError
>e1ed	4d 49 53 53 49 4e 47 20				.text 	"MISSING QUOTE",$00
>e1f5	51 55 4f 54 45 00
.e1fb					EvaluateStringFull:
.e1fb	20 6c e1	jsr $e16c			jsr 	ReportError
>e1fe	53 54 52 49 4e 47 20 42				.text 	"STRING BUFFER FULL",$00
>e206	55 46 46 45 52 20 46 55 4c 4c 00
.e211					EvaluateBadHex:
.e211	20 6c e1	jsr $e16c			jsr 	ReportError
>e214	42 41 44 20 48 45 58 00				.text 	"BAD HEX",$00
.e21c					EvaluateAtomCurrentLevel:
.e21c	a9 07		lda #$07			lda 	#7
.e21e	80 04		bra $e224			bra 	EvaluateAtPrecedenceLevel
.e220					EvaluateBase:
.e220	a2 00		ldx #$00			ldx 	#0 							; reset the stack
.e222					EvaluateBaseCurrentLevel:
.e222	a9 00		lda #$00			lda 	#0 							; current precedence is zero
.e224					EvaluateAtPrecedenceLevel:
.e224	48		pha				pha 								; save precedence level
.e225	a9 00		lda #$00			lda 	#0 							; zero the result.
.e227	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e22a	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e22d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e230	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e233					_EVALSkipSpace1:
.e233	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token, skipping over spaces.
.e235	f0 b0		beq $e1e7			beq 	EvaluateSNError 			; end of line, without token.
.e237	c8		iny				iny
.e238	c9 20		cmp #$20			cmp 	#32
.e23a	f0 f7		beq $e233			beq 	_EVALSkipSpace1
.e23c	88		dey				dey 								; points at the token.
.e23d	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; is it opening quote ?
.e23f	f0 14		beq $e255			beq 	_EVALString  				; if so load in a constant string
.e241	c9 82		cmp #$82			cmp 	#KW_HASH 					; is it a hash, e.g. hexadecimal.
.e243	f0 36		beq $e27b			beq 	_EVALHexadecimal
.e245	c9 30		cmp #$30			cmp 	#'0'						; is it in range 0-9
.e247	90 04		bcc $e24d			bcc		_EVALGoKeywordVariable 		; yes, it's a keyword or variable.
.e249	c9 3a		cmp #$3a			cmp 	#'9'+1
.e24b	90 03		bcc $e250			bcc 	_EVALDecimal
.e24d					_EVALGoKeywordVariable:
.e24d	4c d2 e2	jmp $e2d2			jmp 	_EVALKeywordVariable
.e250					_EVALDecimal:
.e250	20 2f e3	jsr $e32f			jsr 	EVALGetDecConstant 			; get decimal constant
.e253	80 34		bra $e289			bra 	_EVALGotAtom 				; got atom.
.e255					_EVALString:
.e255	da		phx				phx 								; save X on stack
.e256	a9 22		lda #$22			lda 	#StringBuffer >> 8 			; set the address in the eval stack
.e258	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e25b	ad c5 20	lda $20c5			lda 	StringBufferPos 			; X = Buffer Position.
.e25e	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; that's the address of the new string
.e261	aa		tax				tax 								; put in X to build the string.
.e262	c8		iny				iny 								; skip over opening quote character
.e263					_EVALStringCopy:
.e263	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character.
.e265	c8		iny				iny
.e266	f0 82		beq $e1ea			beq		EvaluateMissingQuote 		; if zero, then there was no closing quote.
.e268	9d 00 22	sta $2200,x			sta 	StringBuffer,x 				; copy into the buffer
.e26b	e8		inx				inx 								; and bump that pointer.
.e26c	f0 8d		beq $e1fb			beq 	EvaluateStringFull 			; buffer is full.
.e26e	49 81		eor #$81			eor 	#KW_DQUOTE					; keep going if not closing quote.
.e270	d0 f1		bne $e263			bne 	_EVALStringCopy
.e272	8e c5 20	stx $20c5			stx 	StringBufferPos 			; this is the new next free slot.
.e275	9d ff 21	sta $21ff,x			sta 	StringBuffer-1,x 			; write the zero (EOS) hence EOR to end string.
.e278	fa		plx				plx 								; restore X
.e279	80 0e		bra $e289			bra 	_EVALGotAtom 				; got the atom.
.e27b					_EVALHexaDecimal
.e27b	c8		iny				iny 								; skip over the '#'
.e27c	5a		phy				phy 								; save Y
.e27d	20 9b e3	jsr $e39b			jsr 	EVALGetHexConstant 			; load in hexadecimal constant
.e280	8c c0 20	sty $20c0			sty 	Temp1 						; has Y changed ?
.e283	68		pla				pla
.e284	cd c0 20	cmp $20c0			cmp 	Temp1
.e287	f0 88		beq $e211			beq 	EvaluateBadHex 				; if not, error.
.e289					_EVALGotAtom:
.e289					_EVALGetOperator:
.e289	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token skip spaces.
.e28b	c8		iny				iny 								; this should be binary operator
.e28c	c9 20		cmp #$20			cmp 	#$20
.e28e	f0 f9		beq $e289			beq 	_EVALGetOperator
.e290	88		dey				dey
.e291	09 00		ora #$00			ora 	#0 							; to be a binary token must be -ve
.e293	10 3b		bpl $e2d0			bpl 	_EVALExitPullA 				; if +ve then exit now.
.e295	da		phx				phx 								; save X
.e296	aa		tax				tax 								; token in X
.e297	bd 9e e0	lda $e09e,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e29a	8d c0 20	sta $20c0			sta 	Temp1 						; save precedence in Temp1
.e29d	fa		plx				plx 								; restore X
.e29e	c9 08		cmp #$08			cmp 	#8 							; if type >= 8, e.g. not binary, then exit.
.e2a0	b0 2e		bcs $e2d0			bcs 	_EVALExitPullA
.e2a2	68		pla				pla 								; get and save precedence level.
.e2a3	48		pha				pha
.e2a4	cd c0 20	cmp $20c0			cmp 	Temp1 						; compare operator precedence - keyword precedence level.
.e2a7	f0 02		beq $e2ab			beq 	_EVALDoCalc					; equal, do it.
.e2a9	b0 25		bcs $e2d0			bcs 	_EVALExitPullA				; too high, then exit.
.e2ab					_EVALDoCalc:
.e2ab	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token, save on stack and skip it.
.e2ad	c8		iny				iny
.e2ae	48		pha				pha
.e2af	da		phx				phx
.e2b0	e8		inx				inx 								; work out right hand side.
.e2b1	e8		inx				inx
.e2b2	e8		inx				inx
.e2b3	e8		inx				inx
.e2b4	ad c0 20	lda $20c0			lda 	Temp1 						; get current operator precedence level.
.e2b7	1a		inc a				inc 	a 							; so work it out at the next level.
.e2b8	20 24 e2	jsr $e224			jsr 	EvaluateAtPrecedenceLevel 	; work out the RHS.
.e2bb	fa		plx				plx 								; fix X back.
.e2bc	68		pla				pla 								; get keyword
.e2bd					_EVALExecuteA:
.e2bd	0a		asl a				asl 	a 							; shift left, drop bit 7
.e2be	8d c1 20	sta $20c1			sta 	Temp1+1						; save in Temp1.1
.e2c1	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e2c3	8d c2 20	sta $20c2			sta 	Temp1+2 					; set at Temp1.2
.e2c6	a9 6c		lda #$6c			lda 	#$6C 						; make JMP (xxxx)
.e2c8	8d c0 20	sta $20c0			sta 	Temp1+0
.e2cb	20 c0 20	jsr $20c0			jsr 	Temp1 						; call that routine.
.e2ce	80 b9		bra $e289			bra 	_EVALGotAtom 				; and loop back again.
.e2d0					_EVALExitPullA:
.e2d0	68		pla				pla 								; restore precedence.
.e2d1	60		rts				rts
.e2d2					_EVALKeywordVariable:
.e2d2	09 00		ora #$00			ora 	#0 							; check bit 7
.e2d4	10 0f		bpl $e2e5			bpl 	_EVALNotUnaryFunction 		; must be set for unary function
.e2d6	da		phx				phx
.e2d7	aa		tax				tax
.e2d8	bd 9e e0	lda $e09e,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e2db	fa		plx				plx
.e2dc	c9 09		cmp #$09			cmp 	#KTYPE_UNARYFN 				; is it a unary function
.e2de	d0 05		bne $e2e5			bne 	_EVALNotUnaryFunction
.e2e0	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token back
.e2e2	c8		iny				iny 								; consume it
.e2e3	80 d8		bra $e2bd			bra 	_EVALExecuteA 				; execute TOS.
.e2e5					_EVALNotUnaryFunction:
.e2e5	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e2e7	10 3d		bpl $e326			bpl 	_EVALCheckVariable 			; if ASCII check variable
.e2e9	c9 8c		cmp #$8c			cmp 	#KW_MINUS 					; check negation
.e2eb	f0 0f		beq $e2fc			beq 	_EVALUnaryNegation
.e2ed	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; check left bracket.
.e2ef	d0 14		bne $e305			bne		_EVALCheckUnaryOperator
.e2f1	c8		iny				iny 								; skip left bracket.
.e2f2	20 22 e2	jsr $e222			jsr 	EvaluateBaseCurrentLevel 	; calculate what's in the bracket.
.e2f5	a9 88		lda #$88			lda 	#KW_RPAREN 					; check right bracket.
.e2f7	20 b2 e1	jsr $e1b2			jsr 	CheckNextCharacter 			; check next character, after spaces.
.e2fa	80 8d		bra $e289			bra 	_EVALGotAtom
.e2fc					_EVALUnaryNegation:
.e2fc	c8		iny				iny 								; skip over the - sign.
.e2fd	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel 	; calculate what's being negatived (...)
.e300	20 9d ea	jsr $ea9d			jsr 	BFUNC_NegateAlways 			; negate it.
.e303	80 84		bra $e289			bra 	_EVALGotAtom
.e305					_EVALCheckUnaryOperator:
.e305	48		pha				pha 								; save indirection operator.
.e306	c8		iny				iny 								; skip over the operator
.e307	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel 	; calculate the address.
.e30a	68		pla				pla 								; restore the operator
.e30b	c9 83		cmp #$83			cmp 	#KW_DOLLAR					; $ is for visual typing, it does nothing
.e30d	f0 0e		beq $e31d			beq 	_EVALGoGotAtom
.e30f	c9 96		cmp #$96			cmp 	#KW_QUESTION				; byte indirection
.e311	f0 07		beq $e31a			beq 	_EVALByteRead
.e313	c9 80		cmp #$80			cmp 	#KW_PLING					; word indirection
.e315	f0 09		beq $e320			beq 	_EVALWordRead
.e317	4c 5c e1	jmp $e15c			jmp 	SyntaxError 				; give up.
.e31a					_EVALByteRead:
.e31a	20 da e3	jsr $e3da			jsr 	EVALReadByteIndirect
.e31d					_EVALGoGotAtom:
.e31d	4c 89 e2	jmp $e289			jmp 	_EVALGotAtom
.e320					_EVALWordRead:
.e320	20 10 e4	jsr $e410			jsr 	EVALReadWordIndirect
.e323	4c 89 e2	jmp $e289			jmp 	_EVALGotAtom
.e326					_EVALCheckVariable:
.e326	20 65 e4	jsr $e465			jsr 	VARReference 				; get variable reference to ZTemp1
.e329	20 24 e4	jsr $e424			jsr 	EVALReadWordIndirectZTemp	; read that address into current stack level.
.e32c	4c 89 e2	jmp $e289			jmp 	_EVALGotAtom 				; and go round.
.e32f					EVALGetDecConstant:
.e32f	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e331	c9 30		cmp #$30			cmp 	#'0'						; check in range 0-9.
.e333	90 04		bcc $e339			bcc 	_EVGDExit
.e335	c9 3a		cmp #$3a			cmp 	#'9'+1
.e337	90 01		bcc $e33a			bcc 	_EVGDValue 					; if so has legal value
.e339					_EVGDExit:
.e339	60		rts				rts
.e33a					_EVGDValue:
.e33a	48		pha				pha 								; save value, Y on stack
.e33b	5a		phy				phy
.e33c	a0 03		ldy #$03			ldy 	#3 							; 3 shifts.
.e33e	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; push x1 value on stack.
.e341	48		pha				pha
.e342	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e345	48		pha				pha
.e346	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e349	48		pha				pha
.e34a	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e34d	48		pha				pha
.e34e					_EVGDLoop:
.e34e	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; rotate left once.
.e351	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e354	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e357	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e35a	c0 02		cpy #$02			cpy 	#2 							; if done it twice now
.e35c	d0 1d		bne $e37b			bne 	_EVGDNoAdd
.e35e	18		clc				clc 								; then it will be x 4, adding +1 => x 5
.e35f	68		pla				pla
.e360	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e363	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e366	68		pla				pla
.e367	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e36a	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e36d	68		pla				pla
.e36e	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e371	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e374	68		pla				pla
.e375	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e378	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e37b					_EVGDNoAdd:
.e37b	88		dey				dey
.e37c	d0 d0		bne $e34e			bne 	_EVGDLoop
.e37e	7a		ply				ply 								; restore YA
.e37f	68		pla				pla
.e380	c8		iny				iny 								; next character
.e381	29 0f		and #$0f			and 	#15 						; force into range and put in.
.e383	18		clc				clc
.e384	7d 00 04	adc $0400,x			adc 	evalStack+0,x 				; add digit in
.e387	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e38a	90 a3		bcc $e32f			bcc 	EVALGetDecConstant 			; propogate constant through
.e38c	fe 01 04	inc $0401,x			inc 	evalStack+1,x
.e38f	d0 9e		bne $e32f			bne 	EVALGetDecConstant
.e391	fe 02 04	inc $0402,x			inc 	evalStack+2,x
.e394	d0 99		bne $e32f			bne 	EVALGetDecConstant
.e396	fe 03 04	inc $0403,x			inc 	evalStack+3,x
.e399	80 94		bra $e32f			bra 	EVALGetDecConstant 			; go back and try again.
.e39b					EVALGetHexConstant:
.e39b	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e39d	20 cf e3	jsr $e3cf			jsr 	EVALToUpper 				; make upper case
.e3a0	38		sec				sec
.e3a1	e9 30		sbc #$30			sbc 	#"0" 						; range 0-9
.e3a3	90 0a		bcc $e3af			bcc 	_EVGHExit 					; exit if CC
.e3a5	c9 0a		cmp #$0a			cmp 	#9+1 						; if < 9 have a legal value.
.e3a7	90 07		bcc $e3b0			bcc 	_EVGHValue
.e3a9	e9 07		sbc #$07			sbc 	#7 							; now in range 10-15 if okay.
.e3ab	c9 10		cmp #$10			cmp 	#15+1
.e3ad	90 01		bcc $e3b0			bcc 	_EVGHValue
.e3af					_EVGHExit:
.e3af	60		rts				rts
.e3b0					_EVGHValue:
.e3b0	5a		phy				phy 								; save Y and new digit.
.e3b1	48		pha				pha
.e3b2	a0 04		ldy #$04			ldy 	#4 							; rotate left 4
.e3b4					_EVGHRotate:
.e3b4	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e3b7	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e3ba	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e3bd	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e3c0	88		dey				dey
.e3c1	d0 f1		bne $e3b4			bne 	_EVGHRotate
.e3c3	68		pla				pla 								; restore digit and X
.e3c4	7a		ply				ply
.e3c5	c8		iny				iny 								; next character
.e3c6	18		clc				clc
.e3c7	1d 00 04	ora $0400,x			ora 	evalStack+0,x 				; add digit in
.e3ca	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3cd	80 cc		bra $e39b			bra 	EVALGetHexConstant 			; go back and try again.
.e3cf					EVALToUpper:
.e3cf	c9 61		cmp #$61			cmp 	#'a'
.e3d1	90 06		bcc $e3d9			bcc 	_EVTUExit
.e3d3	c9 7b		cmp #$7b			cmp 	#'z'+1
.e3d5	b0 02		bcs $e3d9			bcs 	_EVTUExit
.e3d7	49 20		eor #$20			eor 	#32
.e3d9					_EVTUExit:
.e3d9	60		rts				rts
.e3da					EVALReadByteIndirect:
.e3da	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e3dd	85 24		sta $24				sta 	zTemp1
.e3df	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e3e2	85 25		sta $25				sta 	zTemp1+1
.e3e4	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e3e7	85 26		sta $26				sta 	zTemp1+2
.e3e9	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e3ec	85 27		sta $27				sta 	zTemp1+3
.e3ee	a5 26		lda $26				lda 	zTemp1+2 					; address $0000xxxx
.e3f0	05 27		ora $27				ora 	zTemp1+3
.e3f2	f0 07		beq $e3fb			beq 	_ERBBase
.e3f4	a3 00		ldz #$00			ldz 	#0 							; read from far memory.
.e3f6	ea		nop				nop
.e3f7	b2 24		lda ($24),z			lda 	(zTemp1),z
.e3f9	80 06		bra $e401			bra 	_ERBExit
.e3fb					_ERBBase:
.e3fb	5a		phy				phy
.e3fc	a0 00		ldy #$00			ldy 	#0 							; read byte
.e3fe	b1 24		lda ($24),y			lda 	(zTemp1),y
.e400	7a		ply				ply
.e401					_ERBExit:
.e401	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e404	a9 00		lda #$00			lda 	#0 							; zero upper three bytes
.e406	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e409	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e40c	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e40f	60		rts				rts
.e410					EVALReadWordIndirect:
.e410	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e413	85 24		sta $24				sta 	zTemp1
.e415	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e418	85 25		sta $25				sta 	zTemp1+1
.e41a	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e41d	85 26		sta $26				sta 	zTemp1+2
.e41f	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e422	85 27		sta $27				sta 	zTemp1+3
.e424					EVALReadWordIndirectZTemp:
.e424	a5 26		lda $26				lda 	zTemp1+2 					; address $0000xxxx
.e426	05 27		ora $27				ora 	zTemp1+3
.e428	f0 1f		beq $e449			beq 	_ERWBase
.e42a	a3 00		ldz #$00			ldz 	#0 							; read from far memory.
.e42c	ea		nop				nop
.e42d	b2 24		lda ($24),z			lda 	(zTemp1),z
.e42f	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e432	1b		inz				inz
.e433	ea		nop				nop
.e434	b2 24		lda ($24),z			lda 	(zTemp1),z
.e436	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e439	1b		inz				inz
.e43a	ea		nop				nop
.e43b	b2 24		lda ($24),z			lda 	(zTemp1),z
.e43d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e440	1b		inz				inz
.e441	ea		nop				nop
.e442	b2 24		lda ($24),z			lda 	(zTemp1),z
.e444	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e447	80 1b		bra $e464			bra 	_ERWExit
.e449					_ERWBase
.e449	5a		phy				phy
.e44a	a0 00		ldy #$00			ldy 	#0 							; read word
.e44c	b1 24		lda ($24),y			lda 	(zTemp1),y
.e44e	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e451	c8		iny				iny
.e452	b1 24		lda ($24),y			lda 	(zTemp1),y
.e454	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e457	c8		iny				iny
.e458	b1 24		lda ($24),y			lda 	(zTemp1),y
.e45a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e45d	c8		iny				iny
.e45e	b1 24		lda ($24),y			lda 	(zTemp1),y
.e460	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e463	7a		ply				ply
.e464					_ERWExit:
.e464	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/variable.asm

.e465					VARReference:
.e465	38		sec				sec 								; check range @-Z there
.e466	c9 40		cmp #$40			cmp 	#'@'
.e468	90 04		bcc $e46e			bcc 	_VARRError
.e46a	c9 5b		cmp #$5b			cmp 	#'Z'+1 						; there are 27 variables @ and A-Z
.e46c	90 03		bcc $e471			bcc 	_VARROkay
.e46e					_VARRError:
.e46e	4c 5c e1	jmp $e15c			jmp		SyntaxError
.e471					_VARROkay:
.e471	c8		iny				iny 								; consume the variable.
.e472	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it @@ AA BB CC ?
.e474	f0 1b		beq $e491			beq 	_VARArrayAccess 			; array access AA0 AA1 etc.
.e476	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get that second character
.e478	88		dey				dey 								; point back to the first character
.e479	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; if ( then it is A(x) format.
.e47b	f0 14		beq $e491			beq 	_VARArrayAccess
.e47d	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; reget variable.
.e47f	c8		iny				iny
.e480	29 1f		and #$1f			and		#31 						; mask out
.e482	0a		asl a				asl 	a 							; x 4
.e483	0a		asl a				asl 	a
.e484	85 24		sta $24				sta 	zTemp1+0 					; rely on variables being page aligned.
.e486	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e488	85 25		sta $25				sta 	zTemp1+1
.e48a	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.e48c	85 26		sta $26				sta 	zTemp1+2
.e48e	85 27		sta $27				sta 	zTemp1+3 					; return with address set.
.e490	60		rts				rts
.e491					_VARArrayAccess:
.e491	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get variable
.e493	c8		iny				iny
.e494	29 1f		and #$1f			and 	#31 						; mask it off
.e496	48		pha				pha 								; save on the stack.
.e497	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel 	; calculate the index.
.e49a	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; multiply by four.
.e49d	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e4a0	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e4a3	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e4a6	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e4a9	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e4ac	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e4af	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e4b2	68		pla				pla 								; put address in zTemp1
.e4b3	0a		asl a				asl 	a 							; x 4
.e4b4	0a		asl a				asl 	a
.e4b5	85 24		sta $24				sta 	zTemp1+0 					; rely on variables being page aligned.
.e4b7	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e4b9	85 25		sta $25				sta 	zTemp1+1
.e4bb	5a		phy				phy
.e4bc	a0 00		ldy #$00			ldy 	#0 							; calculate	evalStack+0,3 + (zTemp)
.e4be	b1 24		lda ($24),y			lda 	(zTemp1),y
.e4c0	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e4c3	48		pha				pha 								; save first result as we need the indirection.
.e4c4	c8		iny				iny 								; 2nd byte
.e4c5	b1 24		lda ($24),y			lda 	(zTemp1),y
.e4c7	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e4ca	85 25		sta $25				sta 	zTemp1+1
.e4cc	68		pla				pla 								; save the low byte.
.e4cd	85 24		sta $24				sta 	zTemp1+0
.e4cf	a9 00		lda #$00			lda 	#0
.e4d1	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e4d4	85 26		sta $26				sta 	zTemp1+2
.e4d6	a9 00		lda #$00			lda 	#0
.e4d8	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e4db	85 27		sta $27				sta 	zTemp1+3
.e4dd	7a		ply				ply 								; restore Y, address setup
.e4de	60		rts				rts
.e4df	80 fe		bra $e4df	x1:		bra 	x1

;******  Return to file: basic.asm


;******  Processing file: general/screenio.asm

.e4e1					SIOInitialise:
.e4e1	20 d6 b0	jsr $b0d6			jsr 	EXTReset 					; reset video
.e4e4					SIOClearScreen:
.e4e4	20 86 b0	jsr $b086			jsr 	EXTClearScreen 				; clear screen
.e4e7					SIOHomeCursor:
.e4e7	48		pha				pha 								; home cursor
.e4e8	a9 00		lda #$00			lda 	#0
.e4ea	8d c8 20	sta $20c8			sta 	xCursor
.e4ed	8d c9 20	sta $20c9			sta 	yCursor
.e4f0	68		pla				pla
.e4f1	60		rts				rts
.e4f2					SIOPrintString:
.e4f2	48		pha				pha 								; save registers
.e4f3	da		phx				phx
.e4f4	5a		phy				phy
.e4f5	86 26		stx $26				stx 	zTemp2 						; set up indirect pointer
.e4f7	84 27		sty $27				sty 	zTemp2+1
.e4f9	a0 00		ldy #$00			ldy 	#0
.e4fb					_SIOPSLoop:
.e4fb	b1 26		lda ($26),y			lda 	(zTemp2),y 					; read next, exit if 0
.e4fd	f0 1c		beq $e51b			beq 	_SIOPSExit
.e4ff	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter 			; print and bump
.e502	c8		iny				iny
.e503	d0 f6		bne $e4fb			bne 	_SIOPSLoop
.e505	20 6c e1	jsr $e16c			jsr 	ReportError
>e508	42 41 44 20 53 54 52 49				.text 	"BAD STRING PRINTED",$00
>e510	4e 47 20 50 52 49 4e 54 45 44 00
.e51b					_SIOPSExit:
.e51b	7a		ply				ply 								; restore and exit.
.e51c	fa		plx				plx
.e51d	68		pla				pla
.e51e	60		rts				rts
.e51f					SIOPrintCharacter:
.e51f	48		pha				pha 								; save AXY
.e520	da		phx				phx
.e521	5a		phy				phy
.e522	c9 0d		cmp #$0d			cmp 	#13 						; CR ?
.e524	f0 16		beq $e53c			beq 	_SIOPReturn
.e526	c9 09		cmp #$09			cmp 	#9
.e528	f0 2b		beq $e555			beq 	_SIOPTab
.e52a	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor 				; load cursor position in.
.e52d	29 3f		and #$3f			and 	#$3F 						; PETSCII conversion
.e52f	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen 				; write character out.
.e532	ee c8 20	inc $20c8			inc 	xCursor 					; move right
.e535	ad c8 20	lda $20c8			lda 	xCursor 					; reached the RHS
.e538	c9 50		cmp #$50			cmp 	#EXTWidth
.e53a	90 15		bcc $e551			bcc 	_SIOPExit
.e53c					_SIOPReturn:
.e53c	a9 00		lda #$00			lda 	#0 							; zero x
.e53e	8d c8 20	sta $20c8			sta 	xCursor
.e541	ee c9 20	inc $20c9			inc 	yCursor 					; go down
.e544	ad c9 20	lda $20c9			lda 	yCursor
.e547	c9 19		cmp #$19			cmp 	#EXTHeight 					; off the bottom ?
.e549	90 06		bcc $e551			bcc 	_SIOPExit
.e54b	20 a4 b0	jsr $b0a4			jsr 	EXTScrollDisplay 			; scroll display up
.e54e	ce c9 20	dec $20c9			dec 	yCursor 					; cursor on bottom line.
.e551					_SIOPExit:
.e551	7a		ply				ply 								; restore and exit.
.e552	fa		plx				plx
.e553	68		pla				pla
.e554	60		rts				rts
.e555					_SIOPTab:
.e555	a9 20		lda #$20			lda 	#32 						; tab.
.e557	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.e55a	ad c8 20	lda $20c8			lda 	xCursor
.e55d	29 07		and #$07			and 	#7
.e55f	d0 f4		bne $e555			bne 	_SIOPTab
.e561	80 ee		bra $e551			bra 	_SIOPExit
.e563					SIOGetKey:
.e563	20 0c b0	jsr $b00c			jsr 	EXTReadKeyPort 				; wait for a key
.e566	f0 fb		beq $e563			beq 	SIOGetKey
.e568	20 cf e3	jsr $e3cf			jsr 	EVALToUpper 				; capitalise it.
.e56b	4c 35 b0	jmp $b035			jmp 	EXTRemoveKeyPressed 		; remove from the queue.
.e56e					SIOReadLine:
.e56e	48		pha				pha 								; save registers
.e56f	da		phx				phx
.e570	5a		phy				phy
.e571					_SIORLoop:
.e571	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor 				; cursor in XY
.e574	20 6b b0	jsr $b06b			jsr 	EXTReadScreen 				; read the display.
.e577	48		pha				pha 								; save on stack.
.e578	a9 66		lda #$66			lda 	#102 						; write cursor out
.e57a	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e57d	20 63 e5	jsr $e563			jsr 	SIOGetKey
.e580	aa		tax				tax 								; save in X
.e581	68		pla				pla 								; old character
.e582	da		phx				phx 								; save key pressed
.e583	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor 				; cursor in XY
.e586	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e589	68		pla				pla
.e58a	c9 01		cmp #$01			cmp 	#"A"-64 					; control characters
.e58c	f0 29		beq $e5b7			beq 	_SIOCursorLeft
.e58e	c9 13		cmp #$13			cmp 	#"S"-64
.e590	f0 49		beq $e5db			beq 	_SIOCursorDown
.e592	c9 04		cmp #$04			cmp 	#"D"-64
.e594	f0 2d		beq $e5c3			beq 	_SIOCursorRight
.e596	c9 17		cmp #$17			cmp 	#"W"-64
.e598	f0 35		beq $e5cf			beq 	_SIOCursorUp
.e59a	c9 1a		cmp #$1a			cmp 	#"Z"-64
.e59c	f0 49		beq $e5e7			beq 	_SIOClearScreen
.e59e	c9 08		cmp #$08			cmp 	#"H"-64
.e5a0	f0 4a		beq $e5ec			beq 	_SIOBackspace
.e5a2	c9 0d		cmp #$0d			cmp 	#13 						; CR
.e5a4	f0 0e		beq $e5b4			beq 	_SIOGoReturn
.e5a6	c9 20		cmp #$20			cmp 	#32 						; any control
.e5a8	90 c7		bcc $e571			bcc 	_SIORLoop
.e5aa	48		pha				pha
.e5ab	20 2a e6	jsr $e62a			jsr 	_SIOInsert 					; insert a space for new character
.e5ae	68		pla				pla
.e5af	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter 			; print character in A
.e5b2	80 bd		bra $e571			bra 	_SIORLoop
.e5b4					_SIOGoReturn:
.e5b4	4c 55 e6	jmp $e655			jmp 	_SIOReturn
.e5b7					_SIOCursorLeft:
.e5b7	ce c8 20	dec $20c8			dec 	xCursor
.e5ba	10 b5		bpl $e571			bpl 	_SIORLoop
.e5bc	a9 4f		lda #$4f			lda 	#EXTWidth-1
.e5be					_SIOWXLoop:
.e5be	8d c8 20	sta $20c8			sta 	xCursor
.e5c1	80 ae		bra $e571			bra 	_SIORLoop
.e5c3					_SIOCursorRight:
.e5c3	ee c8 20	inc $20c8			inc 	xCursor
.e5c6	ad c8 20	lda $20c8			lda 	xCursor
.e5c9	49 50		eor #$50			eor 	#EXTWidth
.e5cb	d0 a4		bne $e571			bne 	_SIORLoop
.e5cd	80 ef		bra $e5be			bra 	_SIOWXLoop
.e5cf					_SIOCursorUp:
.e5cf	ce c9 20	dec $20c9			dec 	yCursor
.e5d2	10 9d		bpl $e571			bpl 	_SIORLoop
.e5d4	a9 18		lda #$18			lda 	#EXTHeight-1
.e5d6					_SIOWYLoop:
.e5d6	8d c9 20	sta $20c9			sta 	yCursor
.e5d9	80 96		bra $e571			bra 	_SIORLoop
.e5db					_SIOCursorDown:
.e5db	ee c9 20	inc $20c9			inc 	yCursor
.e5de	ad c9 20	lda $20c9			lda 	yCursor
.e5e1	49 19		eor #$19			eor 	#EXTHeight
.e5e3	d0 8c		bne $e571			bne 	_SIORLoop
.e5e5	80 ef		bra $e5d6			bra 	_SIOWYLoop
.e5e7					_SIOClearScreen:
.e5e7	20 e4 e4	jsr $e4e4			jsr 	SIOClearScreen
.e5ea	80 85		bra $e571			bra 	_SIORLoop
.e5ec					_SIOBackspace:
.e5ec	ad c8 20	lda $20c8			lda 	xCursor 					; backspace possible ?
.e5ef	f0 80		beq $e571			beq 	_SIORLoop 					; start of line, no.
.e5f1	48		pha				pha 								; save position.
.e5f2	c9 4f		cmp #$4f			cmp 	#EXTWidth-1 				; not required
.e5f4	f0 1f		beq $e615			beq 	_SIONoShift
.e5f6	ce c8 20	dec $20c8			dec 	xCursor
.e5f9					_SIOShift2:
.e5f9	ee c8 20	inc $20c8			inc 	xCursor 					; copy character backward
.e5fc	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor
.e5ff	20 6b b0	jsr $b06b			jsr 	EXTReadScreen
.e602	ce c8 20	dec $20c8			dec 	xCursor
.e605	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor
.e608	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e60b	ee c8 20	inc $20c8			inc 	xCursor
.e60e	ad c8 20	lda $20c8			lda 	xCursor
.e611	c9 4f		cmp #$4f			cmp 	#EXTWidth-1
.e613	d0 e4		bne $e5f9			bne 	_SIOShift2
.e615					_SIONoShift:
.e615	a9 4f		lda #$4f			lda 	#EXTWidth-1 				; space on far end.
.e617	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor
.e61a	a9 20		lda #$20			lda 	#32
.e61c	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e61f	68		pla				pla 								; restore cursor, back one.
.e620	3a		dec a				dec 	a
.e621	8d c8 20	sta $20c8			sta 	xCursor
.e624	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor 				; overwrite
.e627	4c 71 e5	jmp $e571			jmp	 	_SIORLoop
.e62a					_SIOInsert:
.e62a	ad c8 20	lda $20c8			lda 	xCursor 					; at far right, nothing to do.
.e62d	c9 4f		cmp #$4f			cmp 	#EXTWidth-1
.e62f	f0 23		beq $e654			beq 	_SIOIExit
.e631	85 26		sta $26				sta 	zTemp2 						; save in temporary workspace.
.e633	a9 4f		lda #$4f			lda 	#EXTWidth-1 				; cursor at far right.
.e635	8d c8 20	sta $20c8			sta 	xCursor
.e638					_SIOShift:
.e638	ce c8 20	dec $20c8			dec 	xCursor 					; copy character forward
.e63b	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor
.e63e	20 6b b0	jsr $b06b			jsr 	EXTReadScreen
.e641	ee c8 20	inc $20c8			inc 	xCursor
.e644	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor
.e647	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e64a	ce c8 20	dec $20c8			dec 	xCursor
.e64d	ad c8 20	lda $20c8			lda 	xCursor						; until shifted line to this point.
.e650	c5 26		cmp $26				cmp 	zTemp2
.e652	d0 e4		bne $e638			bne 	_SIOShift
.e654					_SIOIExit:
.e654	60		rts				rts
.e655					_SIOReturn:
.e655	a9 00		lda #$00			lda 	#0 							; copy line in from screen.
.e657	8d c8 20	sta $20c8			sta 	xCursor
.e65a					_SIOCopy:
.e65a	20 8f e6	jsr $e68f			jsr 	SIOLoadCursor
.e65d	20 6b b0	jsr $b06b			jsr 	EXTReadScreen
.e660	49 20		eor #$20			eor 	#$20
.e662	18		clc				clc
.e663	69 20		adc #$20			adc 	#$20
.e665	ae c8 20	ldx $20c8			ldx 	xCursor
.e668	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e66b	ee c8 20	inc $20c8			inc 	xCursor
.e66e	ad c8 20	lda $20c8			lda 	xCursor
.e671	c9 50		cmp #$50			cmp 	#EXTWidth
.e673	d0 e5		bne $e65a			bne 	_SIOCopy
.e675	aa		tax				tax 								; X contains width
.e676					_SIOStrip:
.e676	ca		dex				dex									; back one
.e677	30 07		bmi $e680			bmi		_SIOFound 					; if -ve gone too far
.e679	bd 6d 20	lda $206d,x			lda 	InputLine,x 				; is there a space here
.e67c	c9 20		cmp #$20			cmp 	#' '
.e67e	f0 f6		beq $e676			beq 	_SIOStrip
.e680					_SIOFound:
.e680	e8		inx				inx
.e681	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.e683	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e686	a9 0d		lda #$0d			lda 	#13 						; print a CR and exit
.e688	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.e68b	7a		ply				ply
.e68c	fa		plx				plx
.e68d	68		pla				pla
.e68e	60		rts				rts
.e68f					SIOLoadCursor:
.e68f	48		pha				pha
.e690	ad c9 20	lda $20c9			lda 	yCursor  					; Y Position
.e693	0a		asl a				asl 	a 							; x 2 	(80)
.e694	0a		asl a				asl 	a 							; x 2 	(160)
.e695	6d c9 20	adc $20c9			adc 	yCursor 					; x 5 	(200) (CC)
.e698	85 24		sta $24				sta 	zTemp1
.e69a	a9 00		lda #$00			lda 	#0
.e69c	85 25		sta $25				sta 	zTemp1+1
.e69e	06 24		asl $24				asl 	zTemp1						; x 10
.e6a0	26 25		rol $25				rol 	zTemp1+1
.e6a2	06 24		asl $24				asl 	zTemp1						; x 20
.e6a4	26 25		rol $25				rol 	zTemp1+1
.e6a6	06 24		asl $24				asl 	zTemp1						; x 40
.e6a8	26 25		rol $25				rol 	zTemp1+1 					;
.e6aa	06 24		asl $24				asl 	zTemp1						; x 80
.e6ac	26 25		rol $25				rol 	zTemp1+1 					; (CC)
.e6ae	a5 24		lda $24				lda 	zTemp1 						; add X
.e6b0	6d c8 20	adc $20c8			adc 	xCursor
.e6b3	aa		tax				tax
.e6b4	a5 25		lda $25				lda 	zTemp1+1
.e6b6	69 00		adc #$00			adc 	#0
.e6b8	a8		tay				tay
.e6b9	68		pla				pla 								; restore and exit
.e6ba	60		rts				rts
.e6bb					SIOPrintHex:
.e6bb	48		pha				pha
.e6bc	48		pha				pha
.e6bd	a9 20		lda #$20			lda 	#32
.e6bf	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.e6c2	68		pla				pla
.e6c3	48		pha				pha
.e6c4	4a		lsr a				lsr 	a
.e6c5	4a		lsr a				lsr 	a
.e6c6	4a		lsr a				lsr 	a
.e6c7	4a		lsr a				lsr 	a
.e6c8	20 d1 e6	jsr $e6d1			jsr 	_SIOPHex
.e6cb	68		pla				pla
.e6cc	20 d1 e6	jsr $e6d1			jsr 	_SIOPHex
.e6cf	68		pla				pla
.e6d0	60		rts				rts
.e6d1					_SIOPHex:
.e6d1	29 0f		and #$0f			and 	#15
.e6d3	c9 0a		cmp #$0a			cmp 	#10
.e6d5	90 02		bcc $e6d9			bcc 	_SIOPHex2
.e6d7	69 06		adc #$06			adc 	#6
.e6d9					_SIOPHex2:
.e6d9	69 30		adc #$30			adc 	#48
.e6db	4c 1f e5	jmp $e51f			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: general/tokeniser.asm

.e6de					TokeniseString:
.e6de	a0 00		ldy #$00			ldy 	#0							; source
.e6e0	a2 00		ldx #$00			ldx 	#0 							; target
.e6e2					_TokLoop:
.e6e2	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get first
.e6e4	f0 5d		beq $e743			beq 	_TokExit 					; End, exit.
.e6e6	c9 20		cmp #$20			cmp 	#32 						; if space, copy it
.e6e8	f0 35		beq $e71f			beq 	_TokCopy1
.e6ea	c9 22		cmp #$22			cmp 	#'"' 						; if string, copy that in.
.e6ec	f0 3a		beq $e728			beq 	_TokCopyString
.e6ee	c9 30		cmp #$30			cmp 	#"0" 						; punctuation, search for it.
.e6f0	90 22		bcc $e714			bcc 	_TokPunctuation
.e6f2	c9 3a		cmp #$3a			cmp 	#"9"+1 						; digits are just copied over.
.e6f4	90 29		bcc $e71f			bcc 	_TokCopy1
.e6f6	c9 41		cmp #$41			cmp 	#"A"						; more punctuation
.e6f8	90 1a		bcc $e714			bcc 	_TokPunctuation
.e6fa	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; and more punctuation
.e6fc	b0 16		bcs $e714			bcs 	_TokPunctuation
.e6fe					_TokWord:
.e6fe	20 49 e7	jsr $e749			jsr 	TokeniseSearch 				; search for tokenised word.
.e701	b0 16		bcs $e719			bcs 	_TokFound 					; if successful, copy it out.
.e703					_TokSkip:
.e703	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy all A-Z as can't start token in mid word.
.e705	c9 41		cmp #$41			cmp 	#"A"
.e707	90 d9		bcc $e6e2			bcc 	_TokLoop
.e709	c9 5b		cmp #$5b			cmp 	#"Z"+1
.e70b	b0 d5		bcs $e6e2			bcs 	_TokLoop
.e70d	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e710	e8		inx				inx
.e711	c8		iny				iny
.e712	80 ef		bra $e703			bra 	_TokSkip
.e714					_TokPunctuation:
.e714	20 49 e7	jsr $e749			jsr 	TokeniseSearch 				; find it.
.e717	90 06		bcc $e71f			bcc 	_TokCopy1 					; if found, just copy 1 character
.e719					_TokFound:
.e719	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; save in tokenise buffer.
.e71c	e8		inx				inx 								; advance target ; source is already advanced.
.e71d	80 c3		bra $e6e2			bra 	_TokLoop 					; do the next character.
.e71f					_TokCopy1:
.e71f	b1 24		lda ($24),y			lda 	(zTemp1),y
.e721	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e724	e8		inx				inx
.e725	c8		iny				iny
.e726	80 ba		bra $e6e2			bra 	_TokLoop
.e728					_TokCopyString:
.e728	a9 81		lda #$81			lda 	#KW_DQUOTE 					; output double quote token
.e72a	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e72d	e8		inx				inx 								; skip buffer and first quote.
.e72e	c8		iny				iny
.e72f					_TokCSLoop:
.e72f	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get next character
.e731	f0 10		beq $e743			beq 	_TokExit 					; if EOL, then you have a mismatch, but we exit.
.e733	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; write to buffer
.e736	e8		inx				inx 								; advance both.
.e737	c8		iny				iny
.e738	c9 22		cmp #$22			cmp 	#'"'						; keep going till other quote found.
.e73a	d0 f3		bne $e72f			bne 	_TokCSLoop
.e73c	a9 81		lda #$81			lda 	#KW_DQUOTE 					; add the trailing quote token, overwriting the
.e73e	9d ff 20	sta $20ff,x			sta 	TokeniseBuffer-1,x 			; " character that's just been copied
.e741	80 9f		bra $e6e2			bra 	_TokLoop
.e743					_TokExit:
.e743	a9 00		lda #$00			lda 	#0 							; mark the end of the tokenise buffer.
.e745	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e748	60		rts				rts
.e749					TokeniseSearch:
.e749	48		pha				pha 								; save AXY
.e74a	da		phx				phx
.e74b	5a		phy				phy
.e74c	a9 80		lda #$80			lda 	#128 						; zTemp2 keeps track of the token #
.e74e	85 26		sta $26				sta 	zTemp2
.e750	a2 00		ldx #$00			ldx 	#0 							; index into TokenText table.
.e752	bd 7c e0	lda $e07c,x	_TSNext:lda 	TokenText,x 				; get the first token character
.e755	29 7f		and #$7f			and 	#$7F 						; bit 7 marks the end.
.e757	d1 24		cmp ($24),y			cmp 	(zTemp1),y 					; do the characters match.
.e759	f0 13		beq $e76e			beq 	_TSTryFullMatch 			; if so, try the full match.
.e75b					_TSGotoNext:
.e75b	bd 7c e0	lda $e07c,x			lda 	TokenText,x 				; read it
.e75e	e8		inx				inx 								; bump index
.e75f	0a		asl a				asl 	a 							; shift into C
.e760	90 f9		bcc $e75b			bcc 	_TSGotoNext 				; keep going until read the end character
.e762	e6 26		inc $26				inc 	zTemp2 						; bump the current token pointer.
.e764	bd 7c e0	lda $e07c,x			lda 	TokenText,x 				; look at the first character of the next token
.e767	d0 e9		bne $e752			bne 	_TSNext 					; if non-zero, go to the next.
.e769					_TSFail:
.e769	7a		ply				ply 								; fail.
.e76a	fa		plx				plx
.e76b	68		pla				pla
.e76c	18		clc				clc 				 				; return with carry clear.
.e76d	60		rts				rts
.e76e					_TSTryFullMatch:
.e76e	da		phx				phx									; save X and Y.
.e76f	5a		phy				phy
.e770					_TSFullMatch:
.e770	bd 7c e0	lda $e07c,x			lda 	TokenText,x 				; compare the 7 bits.
.e773	29 7f		and #$7f			and 	#$7F
.e775	d1 24		cmp ($24),y			cmp 	(zTemp1),y
.e777	d0 15		bne $e78e			bne 	_TSFullFail 				; different, this one doesn't match.
.e779	bd 7c e0	lda $e07c,x			lda 	TokenText,x
.e77c	e8		inx				inx 								; advance to next character
.e77d	c8		iny				iny
.e77e	0a		asl a				asl 	a 							; bit 7 of token text in C
.e77f	90 ef		bcc $e770			bcc 	_TSFullMatch
.e781	84 27		sty $27				sty 	zTemp2+1 					; save the Y after last
.e783	68		pla				pla 								; so we don't restore Y
.e784	68		pla				pla 								; or X from the full test.
.e785	7a		ply				ply 								; restore original Y and X and A
.e786	fa		plx				plx
.e787	68		pla				pla
.e788	a5 26		lda $26				lda 	zTemp2 						; and return token ID in A
.e78a	a4 27		ldy $27				ldy 	zTemp2+1 					; Y after the tokenised text.
.e78c	38		sec				sec 								; with carry set.
.e78d	60		rts				rts
.e78e					_TSFullFail:
.e78e	7a		ply				ply 								; restore Y and X
.e78f	fa		plx				plx
.e790	80 c9		bra $e75b			bra 	_TSGotoNext 				; and go to the next token to test.
.e792					TokeniseTest:
.e792	a9 9e		lda #$9e			lda 	#TTString & $FF
.e794	85 24		sta $24				sta 	zTemp1
.e796	a9 e7		lda #$e7			lda 	#TTString >> 8
.e798	85 25		sta $25				sta 	zTemp1+1
.e79a	20 de e6	jsr $e6de			jsr 	TokeniseString
.e79d	ea		nop				nop
.e79e					TTString:
>e79e	20 41 42 43 44 20 34 31				.text 	' ABCD 41$"LENA"5LENA',0 			; 4 1 $[T] "LENA" 5 LEN[T] A
>e7a6	24 22 4c 45 4e 41 22 35 4c 45 4e 41 00

;******  Return to file: basic.asm


;******  Processing file: general/editor.asm

.e7b3					EditProgram:
.e7b3	a2 00		ldx #$00			ldx 	#0
.e7b5	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel 	; get the line number
.e7b8	bd 02 04	lda $0402,x			lda 	evalStack+2,x 				; upper bytes must be zero
.e7bb	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.e7be	d0 37		bne $e7f7			bne 	_EPBadLine
.e7c0	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; lower bytes must be non-zero
.e7c3	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.e7c6	f0 2f		beq $e7f7			beq 	_EPBadLine
.e7c8	5a		phy				phy 								; save position
.e7c9	20 03 e8	jsr $e803			jsr 	EDFindLine 					; locate the line.
.e7cc	90 12		bcc $e7e0			bcc 	_EPNotFound 				; skip delete if not found.
.e7ce	a5 24		lda $24				lda 	zTemp1 						; save the target address, as we will
.e7d0	48		pha				pha 								; insert the line, if done, at the same
.e7d1	a5 25		lda $25				lda 	zTemp1+1 					; place
.e7d3	48		pha				pha
.e7d4	20 2b f0	jsr $f02b			jsr 	COMMAND_Clear 				; clear all vars, make sure zLowMemory is right.
.e7d7	20 3a e8	jsr $e83a			jsr 	EDDeleteLine 				; delete the line at zTemp1
.e7da	68		pla				pla 								; restore the target address.
.e7db	85 25		sta $25				sta 	zTemp1+1
.e7dd	68		pla				pla
.e7de	85 24		sta $24				sta 	zTemp1
.e7e0					_EPNotFound
.e7e0	20 2b f0	jsr $f02b			jsr 	COMMAND_Clear 				; set up all the pointers again and reset everything.
.e7e3	7a		ply				ply 								; get pointer back
.e7e4					_EPSkipSpaces:
.e7e4	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get character
.e7e6	f0 0c		beq $e7f4			beq 	_EPGoWarmStart 				; EOL, just delete, so warm start.
.e7e8	c8		iny				iny
.e7e9	c9 20		cmp #$20			cmp 	#32
.e7eb	f0 f7		beq $e7e4			beq 	_EPSkipSpaces
.e7ed	88		dey				dey
.e7ee	20 5a e8	jsr $e85a			jsr 	EDInsertLine 				; insert the line.
.e7f1	20 2b f0	jsr $f02b			jsr 	COMMAND_Clear 				; set up all the pointers again and reset everything.
.e7f4					_EPGoWarmStart:
.e7f4	4c 82 f2	jmp $f282			jmp 	WarmStart
.e7f7					_EPBadLine:
.e7f7	20 6c e1	jsr $e16c			jsr 	ReportError
>e7fa	42 41 44 20 4c 49 4e 45				.text 	"BAD LINE",$00
>e802	00
.e803					EDFindLine:
.e803	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set zTemp1
.e805	85 24		sta $24				sta 	zTemp1
.e807	a9 23		lda #$23			lda 	#BasicProgram >> 8
.e809	85 25		sta $25				sta 	zTemp1+1
.e80b					_EDFLLoop:
.e80b	a0 00		ldy #$00			ldy 	#0 							; reached the end
.e80d	b1 24		lda ($24),y			lda 	(zTemp1),y
.e80f	f0 25		beq $e836			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.e811	c8		iny				iny
.e812	38		sec				sec
.e813	ad 00 04	lda $0400			lda 	evalStack+0					; subtract the current from the target
.e816	f1 24		sbc ($24),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.e818	aa		tax				tax	 								; this will return 10.
.e819	ad 01 04	lda $0401			lda 	evalStack+1
.e81c	c8		iny				iny
.e81d	f1 24		sbc ($24),y			sbc 	(zTemp1),y
.e81f	90 15		bcc $e836			bcc 	_EDFLFail					; if target < current then failed.
.e821	d0 04		bne $e827			bne 	_EDFLNext 					; if non-zero then goto next
.e823	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.e825	f0 11		beq $e838			beq 	_EDFLFound
.e827					_EDFLNext:
.e827	a0 00		ldy #$00			ldy 	#0 							; get offset
.e829	18		clc				clc
.e82a	b1 24		lda ($24),y			lda 	(zTemp1),y
.e82c	65 24		adc $24				adc 	zTemp1 						; add to pointer
.e82e	85 24		sta $24				sta 	zTemp1
.e830	90 d9		bcc $e80b			bcc 	_EDFLLoop
.e832	e6 25		inc $25				inc 	zTemp1+1 					; carry out.
.e834	80 d5		bra $e80b			bra 	_EDFLLoop
.e836					_EDFLFail:
.e836	18		clc				clc
.e837	60		rts				rts
.e838					_EDFLFound:
.e838	38		sec				sec
.e839	60		rts				rts
.e83a					EDDeleteLine:
.e83a	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.e83c	a2 00		ldx #$00			ldx 	#0
.e83e	b1 24		lda ($24),y			lda 	(zTemp1),y
.e840	a8		tay				tay 								; put in Y
.e841					_EDDelLoop:
.e841	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get it
.e843	81 24		sta ($24,x)			sta 	(zTemp1,x) 					; write it.
.e845	a5 24		lda $24				lda 	zTemp1 						; check if pointer has reached the end of
.e847	c5 22		cmp $22				cmp		zLowMemory 					; low memory. We will have copied down an
.e849	d0 06		bne $e851			bne 	_EDDelNext 					; extra pile of stuff - technically should
.e84b	a5 25		lda $25				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.e84d	c5 23		cmp $23				cmp 	zLowMemory+1				; doesn't really matter.
.e84f	f0 08		beq $e859			beq		_EDDelExit
.e851					_EDDelNext:
.e851	e6 24		inc $24				inc 	zTemp1 						; go to next byte.
.e853	d0 ec		bne $e841			bne 	_EDDelLoop
.e855	e6 25		inc $25				inc 	zTemp1+1
.e857	80 e8		bra $e841			bra 	_EDDelLoop
.e859					_EDDelExit:
.e859	60		rts				rts
.e85a					EDInsertLine:
.e85a	98		tya				tya 								; make zCurrentLine point to the actual new line.
.e85b	18		clc				clc
.e85c	65 20		adc $20				adc 	zCurrentLine
.e85e	85 20		sta $20				sta 	zCurrentLine
.e860	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.e862					_EDGetLength:
.e862	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e864	c8		iny				iny
.e865	c9 00		cmp #$00			cmp 	#0
.e867	d0 f9		bne $e862			bne 	_EDGetLength
.e869	88		dey				dey 								; fix up.
.e86a	98		tya				tya
.e86b	18		clc				clc
.e86c	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.e86e	48		pha				pha 								; save total size (e.g. offset)
.e86f	a8		tay				tay 								; in Y
.e870	a2 00		ldx #$00			ldx 	#0
.e872					_EDInsLoop:
.e872	a1 22		lda ($22,x)			lda 	(zLowMemory,x)				; copy it up
.e874	91 22		sta ($22),y			sta 	(zLowMemory),y
.e876	a5 22		lda $22				lda 	zLowMemory 					; reached the insert point (zTemp1)
.e878	c5 24		cmp $24				cmp 	zTemp1
.e87a	d0 06		bne $e882			bne 	_EDINextShift
.e87c	a5 23		lda $23				lda 	zLowMemory+1
.e87e	c5 25		cmp $25				cmp 	zTemp1+1
.e880	f0 0a		beq $e88c			beq 	_EDIShiftOver
.e882					_EDINextShift:
.e882	a5 22		lda $22				lda 	zLowMemory 					; decrement the copy pointer.
.e884	d0 02		bne $e888			bne 	_EDINoBorrow
.e886	c6 23		dec $23				dec 	zLowMemory+1
.e888					_EDINoBorrow:
.e888	c6 22		dec $22				dec 	zLowMemory
.e88a	80 e6		bra $e872			bra 	_EDInsLoop
.e88c					_EDIShiftOver:
.e88c	68		pla				pla 								; this is the size + others, e.g. offset
.e88d	a0 00		ldy #$00			ldy 	#0
.e88f	91 22		sta ($22),y			sta 	(zLowMemory),y 				; write that out.
.e891	ad 00 04	lda $0400			lda 	evalStack+0 				; write LIne# out
.e894	c8		iny				iny
.e895	91 22		sta ($22),y			sta 	(zLowMemory),y
.e897	ad 01 04	lda $0401			lda 	evalStack+1
.e89a	c8		iny				iny
.e89b	91 22		sta ($22),y			sta 	(zLowMemory),y
.e89d	c8		iny				iny 								; where the code goes.
.e89e	a2 00		ldx #$00			ldx 	#0 							; comes from
.e8a0					_EDICopyCode:
.e8a0	a1 20		lda ($20,x)			lda 	(zCurrentLine,x)			; read from the current line
.e8a2	91 22		sta ($22),y			sta 	(zLowMemory),y 				; write out
.e8a4	c8		iny				iny 								; bump pointers
.e8a5	e6 20		inc $20				inc 	zCurrentLine
.e8a7	c9 00		cmp #$00			cmp 	#0 							; until zero copied
.e8a9	d0 f5		bne $e8a0			bne 	_EDICopyCode
.e8ab	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/arithmetic.asm

.e8ac					BFUNC_Add:
.e8ac	18		clc				clc
.e8ad	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e8b0	7d 04 04	adc $0404,x			adc 	evalStack+4,x
.e8b3	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8b6	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e8b9	7d 05 04	adc $0405,x			adc 	evalStack+5,x
.e8bc	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e8bf	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e8c2	7d 06 04	adc $0406,x			adc 	evalStack+6,x
.e8c5	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e8c8	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e8cb	7d 07 04	adc $0407,x			adc 	evalStack+7,x
.e8ce	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e8d1	60		rts				rts
.e8d2					BFUNC_Subtract:
.e8d2	38		sec				sec
.e8d3	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e8d6	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e8d9	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8dc	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e8df	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e8e2	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e8e5	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e8e8	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e8eb	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e8ee	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e8f1	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e8f4	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e8f7	60		rts				rts
.e8f8					BFUNC_String:
.e8f8	20 ac e8	jsr $e8ac			jsr 	BFUNC_Add
.e8fb	60		rts				rts
.e8fc					BFUNC_ByteInd:
.e8fc	20 ac e8	jsr $e8ac			jsr 	BFUNC_Add
.e8ff	20 da e3	jsr $e3da			jsr 	EVALReadByteIndirect
.e902	60		rts				rts
.e903					BFUNC_WordInd:
.e903	20 ac e8	jsr $e8ac			jsr 	BFUNC_Add
.e906	20 10 e4	jsr $e410			jsr 	EVALReadWordIndirect
.e909	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/binary.asm

.e90a					BFUNC_And:
.e90a	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e90d	3d 04 04	and $0404,x			and 	evalStack+4,x
.e910	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e913	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e916	3d 05 04	and $0405,x			and 	evalStack+5,x
.e919	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e91c	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e91f	3d 06 04	and $0406,x			and 	evalStack+6,x
.e922	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e925	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e928	3d 07 04	and $0407,x			and 	evalStack+7,x
.e92b	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e92e	60		rts				rts
.e92f					BFUNC_Or:
.e92f	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e932	1d 04 04	ora $0404,x			ora 	evalStack+4,x
.e935	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e938	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e93b	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e93e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e941	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e944	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e947	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e94a	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e94d	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e950	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e953	60		rts				rts
.e954					BFUNC_Xor:
.e954	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e957	5d 04 04	eor $0404,x			eor 	evalStack+4,x
.e95a	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e95d	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e960	5d 05 04	eor $0405,x			eor 	evalStack+5,x
.e963	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e966	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e969	5d 06 04	eor $0406,x			eor 	evalStack+6,x
.e96c	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e96f	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e972	5d 07 04	eor $0407,x			eor 	evalStack+7,x
.e975	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e978	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/compare.asm

.e979					BFUNC_Equals:
.e979	18		clc				clc
.e97a	80 01		bra $e97d			bra 	BFUNC_EqualCheck
.e97c					BFUNC_NotEquals:
.e97c	38		sec				sec
.e97d					BFUNC_EqualCheck:
.e97d	08		php				php									; save invert flag
.e97e	ad 00 04	lda $0400			lda 	evalStack+0 				; check equality
.e981	cd 04 04	cmp $0404			cmp 	evalStack+4
.e984	d0 1c		bne $e9a2			bne 	COMP_Fail
.e986	ad 01 04	lda $0401			lda 	evalStack+1
.e989	cd 05 04	cmp $0405			cmp 	evalStack+5
.e98c	d0 14		bne $e9a2			bne 	COMP_Fail
.e98e	ad 02 04	lda $0402			lda 	evalStack+2
.e991	cd 06 04	cmp $0406			cmp 	evalStack+6
.e994	d0 0c		bne $e9a2			bne 	COMP_Fail
.e996	ad 03 04	lda $0403			lda 	evalStack+3
.e999	cd 07 04	cmp $0407			cmp 	evalStack+7
.e99c	d0 04		bne $e9a2			bne 	COMP_Fail
.e99e					COMP_Succeed:
.e99e	a9 ff		lda #$ff			lda 	#$FF
.e9a0	80 02		bra $e9a4			bra 	COMP_SetResult
.e9a2					COMP_Fail:
.e9a2	a9 00		lda #$00			lda 	#0 							; here return 0
.e9a4					COMP_SetResult:
.e9a4	28		plp				plp 								; but if CS
.e9a5	90 02		bcc $e9a9			bcc 	COMP_Accept
.e9a7	49 ff		eor #$ff			eor 	#$FF 						; invert that
.e9a9					COMP_Accept:
.e9a9	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; write to result.
.e9ac	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e9af	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e9b2	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e9b5	60		rts				rts
.e9b6					BFUNC_Less:
.e9b6	18		clc				clc
.e9b7	80 01		bra $e9ba			bra 	BFUNC_LessCheck
.e9b9					BFUNC_GreaterEqual:
.e9b9	38		sec				sec
.e9ba					BFUNC_LessCheck:
.e9ba	08		php				php
.e9bb	38		sec				sec
.e9bc	ad 00 04	lda $0400			lda 	evalStack+0 				; compare using direct subtraction
.e9bf	ed 04 04	sbc $0404			sbc 	evalStack+4
.e9c2	ad 01 04	lda $0401			lda 	evalStack+1
.e9c5	ed 05 04	sbc $0405			sbc 	evalStack+5
.e9c8	ad 02 04	lda $0402			lda 	evalStack+2
.e9cb	ed 06 04	sbc $0406			sbc 	evalStack+6
.e9ce	ad 03 04	lda $0403			lda 	evalStack+3
.e9d1	ed 07 04	sbc $0407			sbc 	evalStack+7
.e9d4	30 c8		bmi $e99e			bmi 	COMP_Succeed
.e9d6	80 ca		bra $e9a2			bra 	COMP_Fail
.e9d8					BFUNC_Greater:
.e9d8	18		clc				clc
.e9d9	80 01		bra $e9dc			bra 	BFUNC_GreaterCheck
.e9db					BFUNC_LessEqual:
.e9db	38		sec				sec
.e9dc					BFUNC_GreaterCheck:
.e9dc	08		php				php
.e9dd	38		sec				sec
.e9de	ad 04 04	lda $0404			lda 	evalStack+4 				; compare using direct subtraction
.e9e1	ed 00 04	sbc $0400			sbc 	evalStack+0
.e9e4	ad 05 04	lda $0405			lda 	evalStack+5
.e9e7	ed 01 04	sbc $0401			sbc 	evalStack+1
.e9ea	ad 06 04	lda $0406			lda 	evalStack+6
.e9ed	ed 02 04	sbc $0402			sbc 	evalStack+2
.e9f0	ad 07 04	lda $0407			lda 	evalStack+7
.e9f3	ed 03 04	sbc $0403			sbc 	evalStack+3
.e9f6	30 a6		bmi $e99e			bmi 	COMP_Succeed
.e9f8	80 a8		bra $e9a2			bra 	COMP_Fail

;******  Return to file: basic.asm


;******  Processing file: binary/divide.asm

.e9fa					BFUNC_Divide:
.e9fa	bd 04 04	lda $0404,x			lda 	evalStack+4,x 				; check for /0
.e9fd	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.ea00	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.ea03	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.ea06	d0 14		bne $ea1c			bne 	_BFDOkay
.ea08	20 6c e1	jsr $e16c			jsr 	ReportError
>ea0b	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",$00
>ea13	20 42 59 20 5a 45 52 4f 00
.ea1c					_BFDOkay:
.ea1c	a9 00		lda #$00			lda 	#0 							; Temp1 is 'A' (and holds the remainder)
.ea1e	8d c0 20	sta $20c0			sta 	Temp1 						; Q/Dividend/Left in +0
.ea21	8d c1 20	sta $20c1			sta 	Temp1+1 					; M/Divisor/Right in +4
.ea24	8d c2 20	sta $20c2			sta 	Temp1+2
.ea27	8d c3 20	sta $20c3			sta 	Temp1+3
.ea2a	8d c4 20	sta $20c4			sta 	SignCount 					; Count of signs.
.ea2d	20 98 ea	jsr $ea98			jsr 	BFUNC_Negate 				; negate (and bump sign count)
.ea30	da		phx				phx
.ea31	e8		inx				inx
.ea32	e8		inx				inx
.ea33	e8		inx				inx
.ea34	e8		inx				inx
.ea35	20 98 ea	jsr $ea98			jsr 	BFUNC_Negate
.ea38	fa		plx				plx
.ea39	5a		phy				phy 								; Y is the counter
.ea3a	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.ea3c					_BFDLoop:
.ea3c	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; shift AQ left.
.ea3f	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.ea42	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.ea45	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.ea48	2e c0 20	rol $20c0			rol 	Temp1
.ea4b	2e c1 20	rol $20c1			rol 	Temp1+1
.ea4e	2e c2 20	rol $20c2			rol 	Temp1+2
.ea51	2e c3 20	rol $20c3			rol 	Temp1+3
.ea54	38		sec				sec
.ea55	ad c0 20	lda $20c0			lda 	Temp1+0 					; Calculate A-M on stack.
.ea58	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.ea5b	48		pha				pha
.ea5c	ad c1 20	lda $20c1			lda 	Temp1+1
.ea5f	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.ea62	48		pha				pha
.ea63	ad c2 20	lda $20c2			lda 	Temp1+2
.ea66	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.ea69	48		pha				pha
.ea6a	ad c3 20	lda $20c3			lda 	Temp1+3
.ea6d	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.ea70	90 19		bcc $ea8b			bcc 	_BFDNoAdd
.ea72	8d c3 20	sta $20c3			sta 	Temp1+3 					; update A
.ea75	68		pla				pla
.ea76	8d c2 20	sta $20c2			sta 	Temp1+2
.ea79	68		pla				pla
.ea7a	8d c1 20	sta $20c1			sta 	Temp1+1
.ea7d	68		pla				pla
.ea7e	8d c0 20	sta $20c0			sta 	Temp1+0
.ea81	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; set Q bit 1.
.ea84	09 01		ora #$01			ora 	#1
.ea86	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea89	80 03		bra $ea8e			bra 	_BFDNext
.ea8b					_BFDNoAdd:
.ea8b	68		pla				pla 								; Throw away the intermediate calculations
.ea8c	68		pla				pla
.ea8d	68		pla				pla
.ea8e					_BFDNext:
.ea8e	88		dey				dey
.ea8f	d0 ab		bne $ea3c			bne 	_BFDLoop
.ea91	7a		ply				ply 								; restore Y and exit
.ea92	4e c4 20	lsr $20c4			lsr 	SignCount 					; if sign count odd,
.ea95	b0 06		bcs $ea9d			bcs		BFUNC_NegateAlways 			; negate the result
.ea97	60		rts				rts
.ea98					BFUNC_Negate:
.ea98	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ea9b	10 24		bpl $eac1			bpl 	BFNExit
.ea9d					BFUNC_NegateAlways:
.ea9d	38		sec				sec
.ea9e	a9 00		lda #$00			lda 	#0
.eaa0	fd 00 04	sbc $0400,x			sbc 	evalStack+0,x
.eaa3	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.eaa6	a9 00		lda #$00			lda 	#0
.eaa8	fd 01 04	sbc $0401,x			sbc 	evalStack+1,x
.eaab	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eaae	a9 00		lda #$00			lda 	#0
.eab0	fd 02 04	sbc $0402,x			sbc 	evalStack+2,x
.eab3	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.eab6	a9 00		lda #$00			lda 	#0
.eab8	fd 03 04	sbc $0403,x			sbc 	evalStack+3,x
.eabb	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.eabe	ee c4 20	inc $20c4			inc 	SignCount
.eac1					BFNExit:
.eac1	60		rts				rts
.eac2					BFUNC_Modulus:
.eac2	20 fa e9	jsr $e9fa			jsr 	BFUNC_Divide 				; start with division.
.eac5	ad c0 20	lda $20c0			lda 	Temp1+0 					; copy remainder
.eac8	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.eacb	ad c1 20	lda $20c1			lda 	Temp1+1
.eace	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ead1	ad c2 20	lda $20c2			lda 	Temp1+2
.ead4	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ead7	ad c3 20	lda $20c3			lda 	Temp1+3
.eada	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.eadd	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/multiply.asm

.eade					BFUNC_Multiply:
.eade	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy +0 to +8
.eae1	9d 08 04	sta $0408,x			sta 	evalStack+8,x
.eae4	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eae7	9d 09 04	sta $0409,x			sta 	evalStack+9,x
.eaea	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.eaed	9d 0a 04	sta $040a,x			sta 	evalStack+10,x
.eaf0	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.eaf3	9d 0b 04	sta $040b,x			sta 	evalStack+11,x
.eaf6	a9 00		lda #$00			lda 	#0
.eaf8	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; zero +0
.eafb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eafe	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.eb01	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.eb04					_BFMMultiply:
.eb04	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; get LSBit of 8-11
.eb07	29 01		and #$01			and 	#1
.eb09	f0 03		beq $eb0e			beq 	_BFMNoAdd
.eb0b	20 ac e8	jsr $e8ac			jsr 	BFunc_Add 					; if bit set, add 4 to 0.
.eb0e					_BFMNoAdd:
.eb0e	1e 04 04	asl $0404,x			asl 	evalStack+4,x 				; shift +4 left
.eb11	3e 05 04	rol $0405,x			rol 	evalStack+5,x
.eb14	3e 06 04	rol $0406,x			rol 	evalStack+6,x
.eb17	3e 07 04	rol $0407,x			rol 	evalStack+7,x
.eb1a	5e 0b 04	lsr $040b,x			lsr 	evalStack+11,x 				; shift +8 right
.eb1d	7e 0a 04	ror $040a,x			ror 	evalStack+10,x
.eb20	7e 09 04	ror $0409,x			ror 	evalStack+9,x
.eb23	7e 08 04	ror $0408,x			ror 	evalStack+8,x
.eb26	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; continue if +8 is nonzero
.eb29	1d 09 04	ora $0409,x			ora 	evalStack+9,x
.eb2c	1d 0a 04	ora $040a,x			ora 	evalStack+10,x
.eb2f	1d 0b 04	ora $040b,x			ora 	evalStack+11,x
.eb32	d0 d0		bne $eb04			bne 	_BFMMultiply
.eb34	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/scompare.asm

.eb35					BFUNC_StringCompare:
.eb35	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get address into temporaries.
.eb38	85 24		sta $24				sta 	zTemp1
.eb3a	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eb3d	85 25		sta $25				sta 	zTemp1+1
.eb3f	bd 04 04	lda $0404,x			lda 	evalStack+4,x
.eb42	85 26		sta $26				sta 	zTemp2
.eb44	bd 05 04	lda $0405,x			lda 	evalStack+5,x
.eb47	85 27		sta $27				sta 	zTemp2+1
.eb49	5a		phy				phy
.eb4a	a0 00		ldy #$00			ldy 	#0
.eb4c					_BFSCLoop:
.eb4c	b1 24		lda ($24),y			lda 	(zTemp1),y 					; comparison
.eb4e	38		sec				sec
.eb4f	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.eb51	d0 15		bne $eb68			bne		_BFSCDifferent 				; return different result.
.eb53	c8		iny				iny
.eb54	c9 00		cmp #$00			cmp 	#0							; until both EOS.
.eb56	d0 f4		bne $eb4c			bne 	_BFSCLoop
.eb58	7a		ply				ply
.eb59	a9 00		lda #$00			lda 	#0
.eb5b					_BFSCSetAll:
.eb5b	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.eb5e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eb61	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.eb64	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.eb67	60		rts				rts
.eb68					_BFSCDifferent:
.eb68	7a		ply				ply
.eb69	a9 ff		lda #$ff			lda 	#255 						; if CC set all as <
.eb6b	90 ee		bcc $eb5b			bcc 	_BFSCSetAll
.eb6d	a9 00		lda #$00			lda 	#0 							; set all zero
.eb6f	20 5b eb	jsr $eb5b			jsr 	_BFSCSetAll
.eb72	fe 00 04	inc $0400,x			inc 	evalStack+0,x 				; and make it one.
.eb75	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: unary/unary.asm

.eb76					UNARY_Len:
.eb76	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.eb79	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.eb7c	85 24		sta $24				sta 	zTemp1
.eb7e	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eb81	85 25		sta $25				sta 	zTemp1+1
.eb83	5a		phy				phy
.eb84	a0 00		ldy #$00			ldy 	#0 							; now figure out its length.
.eb86					_ULGetLength:
.eb86	b1 24		lda ($24),y			lda 	(zTemp1),y 					; read character
.eb88	f0 1d		beq $eba7			beq 	_ULFoundEOL 				; found end of line.
.eb8a	c8		iny				iny
.eb8b	d0 f9		bne $eb86			bne 	_ULGetLength 				; scan 256 only.
.eb8d	20 6c e1	jsr $e16c			jsr 	ReportError
>eb90	43 41 4e 4e 4f 54 20 46				.text 	"CANNOT FIND STRING END",$00
>eb98	49 4e 44 20 53 54 52 49 4e 47 20 45 4e 44 00
.eba7					_ULFoundEOL:
.eba7	98		tya				tya 								; length in A, restore Y
.eba8	7a		ply				ply
.eba9					UNARY_ReturnByte:
.eba9	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ebac	a9 00		lda #$00			lda 	#0 							; clear the rests
.ebae	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ebb1	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ebb4	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ebb7	60		rts				rts
.ebb8					UNARY_Ch:
.ebb8	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ebbb	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.ebbe	85 24		sta $24				sta 	zTemp1
.ebc0	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ebc3	85 25		sta $25				sta 	zTemp1+1
.ebc5	5a		phy				phy
.ebc6	a0 00		ldy #$00			ldy 	#0 							; now get first character
.ebc8	b1 24		lda ($24),y			lda 	(zTemp1),y
.ebca	7a		ply				ply
.ebcb	80 dc		bra $eba9			bra 	UNARY_ReturnByte 			; return that byte.
.ebcd					UNARY_Abs:
.ebcd	ea		nop				nop
.ebce	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ebd1	20 98 ea	jsr $ea98			jsr 	BFUNC_Negate 				; there's an ABS routine in divide
.ebd4	60		rts				rts
.ebd5					UNARY_Top:
.ebd5	ad be 20	lda $20be			lda 	highMemory
.ebd8	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ebdb	ad bf 20	lda $20bf			lda 	highMemory+1
.ebde	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ebe1	a9 00		lda #$00			lda 	#0
.ebe3	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ebe6	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ebe9	60		rts				rts
.ebea					UNARY_Get:
.ebea	20 0c b0	jsr $b00c			jsr 	EXTReadKeyPort
.ebed	f0 fb		beq $ebea			beq 	UNARY_Get
.ebef	20 35 b0	jsr $b035			jsr 	EXTRemoveKeyPressed
.ebf2	80 b5		bra $eba9			bra 	UNARY_ReturnByte
.ebf4					UNARY_Page:
.ebf4	a9 00		lda #$00			lda 	#BasicProgram & $FF
.ebf6	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ebf9	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ebfb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ebfe	a9 00		lda #$00			lda 	#0
.ec00	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ec03	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ec06	60		rts				rts
.ec07					UNARY_Rnd:
.ec07	20 12 ec	jsr $ec12			jsr 	Random16 					; call 16 bit RNG twice
.ec0a	e8		inx				inx
.ec0b	e8		inx				inx
.ec0c	20 12 ec	jsr $ec12			jsr 	Random16
.ec0f	ca		dex				dex
.ec10	ca		dex				dex
.ec11	60		rts				rts
.ec12					Random16:
.ec12	ad c6 20	lda $20c6			lda 	RandomSeed 					; initialise if nonzero
.ec15	0d c7 20	ora $20c7			ora 	RandomSeed+1
.ec18	d0 0d		bne $ec27			bne 	_R16_NoInit
.ec1a	ee c6 20	inc $20c6			inc 	RandomSeed 					; by setting low to 1
.ec1d	5a		phy				phy
.ec1e	a0 14		ldy #$14			ldy 	#20 						; call it 20 times to get it started
.ec20					_R16_Setup:
.ec20	20 12 ec	jsr $ec12			jsr 	Random16
.ec23	88		dey				dey
.ec24	d0 fa		bne $ec20			bne 	_R16_Setup
.ec26	7a		ply				ply
.ec27					_R16_NoInit:
.ec27	4e c7 20	lsr $20c7			lsr 	RandomSeed+1				; shift seed right
.ec2a	6e c6 20	ror $20c6			ror 	RandomSeed
.ec2d	90 08		bcc $ec37			bcc 	_R16_NoXor
.ec2f	ad c7 20	lda $20c7			lda 	RandomSeed+1				; xor MSB with $B4 if bit set.
.ec32	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.ec34	8d c7 20	sta $20c7			sta 	RandomSeed+1
.ec37					_R16_NoXor:
.ec37	ad c6 20	lda $20c6			lda 	RandomSeed					; copy result to evaluate stack.
.ec3a	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ec3d	ad c7 20	lda $20c7			lda 	RandomSeed+1
.ec40	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ec43	60		rts				rts
.ec44					UNARY_IOAddr:
.ec44	a9 0f		lda #$0f			lda 	#$0F
.ec46	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ec49	a9 fd		lda #$fd			lda 	#$FD
.ec4b	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ec4e	a9 30		lda #$30			lda 	#$30
.ec50	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ec53	a9 00		lda #$00			lda 	#$00
.ec55	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ec58	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/dim.asm

.ec59					COMMAND_Dim:
.ec59	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; skip over , and space
.ec5b	f0 0b		beq $ec68			beq 	_CDIMExit
.ec5d	c8		iny				iny
.ec5e	c9 8b		cmp #$8b			cmp 	#KW_COMMA
.ec60	f0 f7		beq $ec59			beq 	COMMAND_Dim
.ec62	c9 20		cmp #$20			cmp 	#" "
.ec64	f0 f3		beq $ec59			beq 	COMMAND_Dim
.ec66	80 04		bra $ec6c			bra 	_CDIMDoDim
.ec68					_CDIMExit:
.ec68	60		rts				rts
.ec69					_CDIMSyntax:
.ec69	4c 5c e1	jmp $e15c			jmp 	SyntaxError
.ec6c					_CDIMDoDim:
.ec6c	c9 40		cmp #$40			cmp 	#"@"						; check it is @A-Z
.ec6e	90 f9		bcc $ec69			bcc 	_CDIMSyntax
.ec70	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ec72	b0 f5		bcs $ec69			bcs 	_CDIMSyntax
.ec74	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it followed by a duplicate
.ec76	d0 03		bne $ec7b			bne 	_CDIMNoDouble
.ec78	c8		iny				iny 								; yes, so skip it to the size.
.ec79	09 80		ora #$80			ora 	#$80 						; and set bit 7 to indicate AA(x) e.g. 4 bytes.
.ec7b					_CDIMNoDouble:
.ec7b	48		pha				pha 								; save array 'name'
.ec7c	a2 00		ldx #$00			ldx 	#0 							; count it bottom stack level.
.ec7e	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel
.ec81	ee 00 04	inc $0400			inc 	evalStack+0 				; add extra element
.ec84	d0 03		bne $ec89			bne 	_CDIMAlloc
.ec86	ee 01 04	inc $0401			inc 	evalStack+1
.ec89					_CDIMAlloc:
.ec89	68		pla				pla 								; get bit 7
.ec8a	48		pha				pha
.ec8b	10 0c		bpl $ec99			bpl 	_CDIMNotWord 				; if not set, then A(x) not AA(x) so use byte size.
.ec8d	0e 00 04	asl $0400			asl 	evalStack+0 				; shift left x 2
.ec90	2e 01 04	rol $0401			rol 	evalStack+1
.ec93	0e 00 04	asl $0400			asl 	evalStack+0 				; won't bother about the upper 16 bits.
.ec96	2e 01 04	rol $0401			rol 	evalStack+1
.ec99					_CDIMNotWord:
.ec99	68		pla				pla 								; variable back
.ec9a	29 1f		and #$1f			and 	#$1F 						; lower 5 bits
.ec9c	0a		asl a				asl 	a 							; x 4 now index into variable.
.ec9d	0a		asl a				asl 	a
.ec9e	aa		tax				tax
.ec9f	a5 22		lda $22				lda 	zLowMemory 					; copy low memory into variable
.eca1	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.eca4	a5 23		lda $23				lda 	zLowMemory+1
.eca6	9d 01 20	sta $2001,x			sta 	FixedVariables+1,x
.eca9	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.ecab	9d 02 20	sta $2002,x			sta 	FixedVariables+2,x
.ecae	9d 03 20	sta $2003,x			sta 	FixedVariables+3,x
.ecb1	18		clc				clc
.ecb2	a5 22		lda $22				lda 	zLowMemory
.ecb4	6d 00 04	adc $0400			adc 	evalStack+0
.ecb7	85 22		sta $22				sta 	zLowMemory
.ecb9	a5 23		lda $23				lda 	zLowMemory+1
.ecbb	6d 01 04	adc $0401			adc 	evalStack+1
.ecbe	85 23		sta $23				sta 	zLowMemory+1
.ecc0	b0 0f		bcs $ecd1			bcs 	_CDIMMemory					; out of memory ?
.ecc2	ad be 20	lda $20be			lda 	HighMemory
.ecc5	38		sec				sec
.ecc6	e5 22		sbc $22				sbc 	zLowMemory
.ecc8	ad bf 20	lda $20bf			lda 	HighMemory+1
.eccb	e5 23		sbc $23				sbc 	zLowMemory+1
.eccd	90 02		bcc $ecd1			bcc 	_CDIMMemory
.eccf	80 88		bra $ec59			bra 	Command_DIM 				; go back try another.
.ecd1					_CDIMMemory:
.ecd1	20 6c e1	jsr $e16c			jsr 	ReportError
>ecd4	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",$00
>ecdc	45 4d 4f 52 59 00

;******  Return to file: basic.asm


;******  Processing file: commands/dountil.asm

.ece2					COMMAND_Do:
.ece2	a9 9e		lda #$9e			lda 	#KW_DO						; push position with a DO token.
.ece4	20 02 ed	jsr $ed02			jsr 	CDOPushPosOnStack
.ece7	60		rts				rts
.ece8					COMMAND_Until:
.ece8	a9 9e		lda #$9e			lda 	#KW_DO 						; check TOS is a Do.
.ecea	20 40 ed	jsr $ed40			jsr 	CDOCheckTopStack
.eced	a2 00		ldx #$00			ldx 	#0 							; evaluate the test
.ecef	20 20 e2	jsr $e220			jsr 	EvaluateBase
.ecf2	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check if zero
.ecf5	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.ecf8	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.ecfb	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.ecfe	f0 2a		beq $ed2a			beq 	CDOPullPosOffStack 			; zero, restore the position.
.ed00	80 1e		bra $ed20			bra 	CDOThrowPosOffStack			; non-zero chuck it.
.ed02					CDOPushPosOnStack:
.ed02	ae cb 20	ldx $20cb			ldx 	basicStackIndex
.ed05	48		pha				pha
.ed06	98		tya				tya
.ed07	9d 01 02	sta $0201,x			sta 	BasicStack+1,x 				; +1 	Y Position
.ed0a	a5 20		lda $20				lda 	zCurrentLine
.ed0c	9d 02 02	sta $0202,x			sta 	BasicStack+2,x 				; +2 	low of pos
.ed0f	a5 21		lda $21				lda 	zCurrentLine+1
.ed11	9d 03 02	sta $0203,x			sta 	BasicStack+3,x 				; +3 	high of pos
.ed14	68		pla				pla
.ed15	9d 04 02	sta $0204,x			sta 	BasicStack+4,x 				; +4 	token on stack
.ed18	e8		inx				inx
.ed19	e8		inx				inx
.ed1a	e8		inx				inx
.ed1b	e8		inx				inx 								; always points to TOS.
.ed1c	8e cb 20	stx $20cb			stx 	basicStackIndex
.ed1f	60		rts				rts
.ed20					CDOThrowPosOffStack:
.ed20	ad cb 20	lda $20cb			lda 	basicStackIndex
.ed23	38		sec				sec
.ed24	e9 04		sbc #$04			sbc 	#4
.ed26	8d cb 20	sta $20cb			sta 	basicStackIndex
.ed29	60		rts				rts
.ed2a					CDOPullPosOffStack:
.ed2a	ae cb 20	ldx $20cb			ldx 	basicStackIndex
.ed2d	ca		dex				dex
.ed2e	ca		dex				dex
.ed2f	ca		dex				dex
.ed30	ca		dex				dex
.ed31	bd 01 02	lda $0201,x			lda 	BasicStack+1,x 					; get position back.
.ed34	a8		tay				tay
.ed35	bd 02 02	lda $0202,x			lda 	BasicStack+2,x
.ed38	85 20		sta $20				sta 	zCurrentLine
.ed3a	bd 03 02	lda $0203,x			lda 	BasicStack+3,x
.ed3d	85 21		sta $21				sta 	zCurrentLine+1
.ed3f	60		rts				rts
.ed40					CDOCheckTopStack:
.ed40	ae cb 20	ldx $20cb			ldx 	basicStackIndex 			; if match
.ed43	dd 00 02	cmp $0200,x			cmp 	BasicStack+0,x
.ed46	d0 01		bne $ed49			bne 	_CDOCTSError
.ed48	60		rts				rts
.ed49					_CDOCTSError:
.ed49	20 6c e1	jsr $e16c			jsr 	ReportError
>ed4c	53 54 52 55 43 54 55 52				.text 	"STRUCTURE MIXED",$00
>ed54	45 20 4d 49 58 45 44 00

;******  Return to file: basic.asm


;******  Processing file: commands/goto.asm

.ed5c					COMMAND_Goto:
.ed5c	a2 00		ldx #$00			ldx 	#0 							; evaluate the linenumber
.ed5e	20 20 e2	jsr $e220			jsr 	EvaluateBase
.ed61					CMDGoto:
.ed61	20 86 ed	jsr $ed86			jsr 	FindProgramLine 			; find that program Line, put in zTargetAddr
.ed64	a5 28		lda $28				lda 	zTargetAddr 				; new line
.ed66	85 20		sta $20				sta 	zCurrentLine
.ed68	a5 29		lda $29				lda 	zTargetAddr+1
.ed6a	85 21		sta $21				sta 	zCurrentLine+1
.ed6c	a0 03		ldy #$03			ldy 	#3
.ed6e	60		rts				rts
.ed6f					COMMAND_Gosub:
.ed6f	a2 00		ldx #$00			ldx 	#0 							; evaluate the linenumber
.ed71	20 20 e2	jsr $e220			jsr 	EvaluateBase
.ed74	a9 a2		lda #$a2			lda 	#KW_GOSUB
.ed76	20 02 ed	jsr $ed02			jsr 	CDOPushPosOnStack 			; save return address on stack.
.ed79	80 e6		bra $ed61			bra 	CMDGoto
.ed7b					COMMAND_Return:
.ed7b	a9 a2		lda #$a2			lda 	#KW_GOSUB 					; check GOSUB on BASIC Stack.
.ed7d	20 40 ed	jsr $ed40			jsr 	CDOCheckTopStack
.ed80	20 2a ed	jsr $ed2a			jsr 	CDOPullPosOffStack 			; restore
.ed83	4c 20 ed	jmp $ed20			jmp 	CDOThrowPosOffStack 		; and drop it.
.ed86					FindProgramLine:
.ed86	ad 02 04	lda $0402			lda 	evalStack+2 				; check in range 0-65535
.ed89	0d 03 04	ora $0403			ora 	evalStack+3
.ed8c	d0 2e		bne $edbc			bne		_FPLFail
.ed8e	a9 00		lda #$00			lda 	#BasicProgram & 255 		; start of code
.ed90	85 28		sta $28				sta 	zTargetAddr
.ed92	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ed94	85 29		sta $29				sta 	zTargetAddr+1
.ed96					_FPLLoop:
.ed96	a0 00		ldy #$00			ldy 	#0 							; reached end
.ed98	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ed9a	f0 20		beq $edbc			beq 	_FPLFail
.ed9c	c8		iny				iny 								; check line numbers
.ed9d	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ed9f	cd 00 04	cmp $0400			cmp 	evalStack+0
.eda2	d0 09		bne $edad			bne 	_FPLNext
.eda4	c8		iny				iny
.eda5	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.eda7	cd 01 04	cmp $0401			cmp 	evalStack+1
.edaa	d0 01		bne $edad			bne 	_FPLNext
.edac	60		rts				rts
.edad					_FPLNext:
.edad	a0 00		ldy #$00			ldy 	#0 							; go to next
.edaf	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.edb1	18		clc				clc
.edb2	65 28		adc $28				adc 	zTargetAddr
.edb4	85 28		sta $28				sta 	zTargetAddr
.edb6	90 de		bcc $ed96			bcc 	_FPLLoop
.edb8	e6 29		inc $29				inc 	zTargetAddr+1
.edba	80 da		bra $ed96			bra 	_FPLLoop
.edbc					_FPLFail:
.edbc	20 6c e1	jsr $e16c			jsr 	ReportError
>edbf	4c 49 4e 45 20 4e 4f 54				.text 	"LINE NOT FOUND",$00
>edc7	20 46 4f 55 4e 44 00

;******  Return to file: basic.asm


;******  Processing file: commands/if.asm

.edce					COMMAND_IF:
.edce	a2 00		ldx #$00			ldx 	#0 							; do test
.edd0	20 20 e2	jsr $e220			jsr 	EvaluateBase
.edd3	ad 00 04	lda $0400			lda 	evalStack+0 				; check if test 0
.edd6	0d 01 04	ora $0401			ora 	evalStack+1
.edd9	0d 02 04	ora $0402			ora 	evalStack+2
.eddc	0d 03 04	ora $0403			ora 	evalStack+3
.eddf	f0 01		beq $ede2			beq 	_CIFSkip 					; if not, then skip to ELSE token or EOL.
.ede1					_CIFExit:
.ede1	60		rts				rts
.ede2					_CIFSkip:
.ede2	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; found EOL ?
.ede4	f0 fb		beq $ede1			beq 	_CIFExit
.ede6	c8		iny				iny 								; is it ELSE
.ede7	c9 9f		cmp #$9f			cmp 	#KW_ELSE
.ede9	d0 f7		bne $ede2			bne 	_CIFSkip 					; no, keep going
.edeb	60		rts				rts
.edec					COMMAND_THEN:
.edec	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; find first non space
.edee	c8		iny				iny
.edef	c9 20		cmp #$20			cmp 	#" "
.edf1	f0 f9		beq $edec			beq 	COMMAND_THEN
.edf3	88		dey				dey
.edf4	c9 30		cmp #$30			cmp 	#"0" 						; THEN x is THEN GOTO x
.edf6	90 07		bcc $edff			bcc 	_CTHNoBranch
.edf8	c9 3a		cmp #$3a			cmp 	#"9"+1
.edfa	b0 03		bcs $edff			bcs 	_CTHNoBranch
.edfc	4c 5c ed	jmp $ed5c			jmp 	Command_GOTO 				; so do the GOTO code.
.edff					_CTHNoBranch:
.edff	60		rts				rts
.ee00					COMMAND_ELSE:
.ee00	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ee02	c8		iny				iny
.ee03	c9 00		cmp #$00			cmp 	#0
.ee05	d0 f9		bne $ee00			bne 	COMMAND_ELSE
.ee07	88		dey				dey
.ee08	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/let.asm

.ee09					COMMAND_Let:
.ee09	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get first token not space
.ee0b	f0 58		beq $ee65			beq 	_CLESyntax
.ee0d	c8		iny				iny
.ee0e	c9 20		cmp #$20			cmp 	#32
.ee10	f0 f7		beq $ee09			beq 	COMMAND_Let
.ee12	88		dey				dey
.ee13	c9 96		cmp #$96			cmp 	#KW_QUESTION				; check for first being indirect.
.ee15	f0 51		beq $ee68			beq 	_CLEIndirect 				; e.g. !x = 42
.ee17	c9 80		cmp #$80			cmp 	#KW_PLING
.ee19	f0 4d		beq $ee68			beq 	_CLEIndirect
.ee1b	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ee1d	f0 49		beq $ee68			beq 	_CLEIndirect
.ee1f	a2 00		ldx #$00			ldx 	#0 							; clear evaluation stack.
.ee21	20 65 e4	jsr $e465			jsr 	VARReference 				; get a variable reference.
.ee24	a5 24		lda $24				lda 	zTemp1 						; copy into target addr
.ee26	85 28		sta $28				sta 	zTargetAddr
.ee28	a5 25		lda $25				lda 	zTemp1+1
.ee2a	85 29		sta $29				sta 	zTargetAddr+1
.ee2c	a5 26		lda $26				lda 	zTemp1+2
.ee2e	85 2a		sta $2a				sta 	zTargetAddr+2
.ee30	a5 27		lda $27				lda 	zTemp1+3
.ee32	85 2b		sta $2b				sta 	zTargetAddr+3
.ee34					_CLEGetBinLHSOp:
.ee34	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ee36	f0 2d		beq $ee65			beq 	_CLESyntax
.ee38	c8		iny				iny
.ee39	c9 20		cmp #$20			cmp 	#' '
.ee3b	f0 f7		beq $ee34			beq 	_CLEGetBinLHSOp
.ee3d	88		dey				dey
.ee3e	c9 96		cmp #$96			cmp 	#KW_QUESTION 				; got some sort of reference, check
.ee40	f0 45		beq $ee87			beq 	_CLEBinaryLHTerm  			; if that's a basis for indirection ?
.ee42	c9 80		cmp #$80			cmp 	#KW_PLING
.ee44	f0 41		beq $ee87			beq 	_CLEBinaryLHTerm
.ee46	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ee48	f0 3d		beq $ee87			beq 	_CLEBinaryLHTerm
.ee4a	a9 80		lda #$80			lda 	#KW_PLING 					; we want to do a 32 bit write.
.ee4c					_CLEWriteToAddress:
.ee4c	48		pha				pha 								; save write-type.
.ee4d	a9 93		lda #$93			lda 	#KW_EQUAL 					; check for '=' sign.
.ee4f	20 b2 e1	jsr $e1b2			jsr 	CheckNextCharacter
.ee52	20 20 e2	jsr $e220			jsr 	EvaluateBase 				; evaluate the RHS.
.ee55	68		pla				pla
.ee56	c9 80		cmp #$80			cmp 	#KW_PLING
.ee58	f0 7d		beq $eed7			beq 	_CLEWordWrite
.ee5a	c9 96		cmp #$96			cmp 	#KW_QUESTION
.ee5c	f0 60		beq $eebe			beq 	_CLEByteWrite
.ee5e	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ee60					_ErrorInternal:
.ee60	d0 fe		bne $ee60			bne 	_ErrorInternal
.ee62	4c 17 ef	jmp $ef17			jmp 	_CLEStringWrite
.ee65					_CLESyntax:
.ee65	4c 5c e1	jmp $e15c			jmp 	SyntaxError
.ee68					_CLEIndirect:
.ee68	48		pha				pha 								; save operator on stack
.ee69	c8		iny				iny									; advance over cursor
.ee6a	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ee6c	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel
.ee6f	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy that as the address.
.ee72	85 28		sta $28				sta 	zTargetAddr+0
.ee74	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ee77	85 29		sta $29				sta 	zTargetAddr+1
.ee79	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ee7c	85 2a		sta $2a				sta 	zTargetAddr+2
.ee7e	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ee81	85 2b		sta $2b				sta 	zTargetAddr+3
.ee83	68		pla				pla 								; restore operator.
.ee84	4c 4c ee	jmp $ee4c			jmp 	_CLEWriteToAddress
.ee87					_CLEBinaryLHTerm:
.ee87	48		pha				pha 								; save operator on stack
.ee88	c8		iny				iny 								; skip over it.
.ee89	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ee8b	20 1c e2	jsr $e21c			jsr 	EvaluateAtomCurrentLevel
.ee8e	a5 28		lda $28				lda 	zTargetAddr 				; copy zTargetAddr to zTemp1. Technically
.ee90	85 24		sta $24				sta 	zTemp1 						; a four byte address.....
.ee92	a5 29		lda $29				lda 	zTargetAddr+1
.ee94	85 25		sta $25				sta 	zTemp1+1 					; we only worry about 4 byte value
.ee96	5a		phy				phy 								; save Y
.ee97	18		clc				clc 								; add variable evaluated to (zTargetAddr)
.ee98	a0 00		ldy #$00			ldy 	#0
.ee9a	b1 24		lda ($24),y			lda 	(zTemp1),y
.ee9c	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.ee9f	85 28		sta $28				sta 	zTargetAddr+0
.eea1	c8		iny				iny
.eea2	b1 24		lda ($24),y			lda 	(zTemp1),y
.eea4	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.eea7	85 29		sta $29				sta 	zTargetAddr+1
.eea9	c8		iny				iny
.eeaa	b1 24		lda ($24),y			lda 	(zTemp1),y
.eeac	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.eeaf	85 2a		sta $2a				sta 	zTargetAddr+2
.eeb1	c8		iny				iny
.eeb2	b1 24		lda ($24),y			lda 	(zTemp1),y
.eeb4	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.eeb7	85 2b		sta $2b				sta 	zTargetAddr+3
.eeb9	7a		ply				ply 								; restore Y
.eeba	68		pla				pla 								; restore the operator.
.eebb	4c 4c ee	jmp $ee4c			jmp 	_CLEWriteToAddress
.eebe					_CLEByteWrite:
.eebe	a5 2a		lda $2a				lda 	zTargetAddr+2
.eec0	05 2b		ora $2b				ora 	zTargetAddr+3
.eec2	d0 0a		bne $eece			bne 	_CLEByteWriteExt
.eec4	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get the byte to write.
.eec7	5a		phy				phy 								; write the byte preserving Y
.eec8	a0 00		ldy #$00			ldy 	#0
.eeca	91 28		sta ($28),y			sta 	(zTargetAddr),y
.eecc	7a		ply				ply
.eecd	60		rts				rts
.eece					_CLEByteWriteExt:
.eece	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.eed1	a3 00		ldz #$00			ldz 	#0
.eed3	ea		nop				nop
.eed4	92 28		sta ($28),z			sta 	(zTargetAddr),z
.eed6	60		rts				rts
.eed7					_CLEWordWrite:
.eed7	a5 2a		lda $2a				lda 	zTargetAddr+2
.eed9	05 2b		ora $2b				ora 	zTargetAddr+3
.eedb	d0 1c		bne $eef9			bne 	_CLEWordWriteExt
.eedd	5a		phy				phy
.eede	a0 00		ldy #$00			ldy 	#0
.eee0	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.eee3	91 28		sta ($28),y			sta 	(zTargetAddr),y
.eee5	c8		iny				iny
.eee6	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eee9	91 28		sta ($28),y			sta 	(zTargetAddr),y
.eeeb	c8		iny				iny
.eeec	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.eeef	91 28		sta ($28),y			sta 	(zTargetAddr),y
.eef1	c8		iny				iny
.eef2	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.eef5	91 28		sta ($28),y			sta 	(zTargetAddr),y
.eef7	7a		ply				ply 								; restore Y
.eef8	60		rts				rts
.eef9					_CLEWordWriteExt:
.eef9	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.eefc	a3 00		ldz #$00			ldz 	#0
.eefe	ea		nop				nop
.eeff	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ef01	1b		inz				inz
.ef02	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ef05	ea		nop				nop
.ef06	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ef08	1b		inz				inz
.ef09	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ef0c	ea		nop				nop
.ef0d	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ef0f	1b		inz				inz
.ef10	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ef13	ea		nop				nop
.ef14	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ef16	60		rts				rts
.ef17					_CLEStringWrite:
.ef17	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; source string -> zTemp1
.ef1a	85 24		sta $24				sta 	zTemp1
.ef1c	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ef1f	85 25		sta $25				sta 	zTemp1+1
.ef21	5a		phy				phy
.ef22	a0 00		ldy #$00			ldy 	#0
.ef24					_CLEStringCopy:
.ef24	b1 24		lda ($24),y			lda 	(zTemp1),y
.ef26	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ef28	c9 00		cmp #$00			cmp 	#0
.ef2a	f0 16		beq $ef42			beq	 	_CLEStringWritten
.ef2c	c8		iny				iny
.ef2d	d0 f5		bne $ef24			bne 	_CLEStringCopy
.ef2f	20 6c e1	jsr $e16c			jsr 	ReportError
>ef32	42 41 44 20 53 54 52 49				.text 	"BAD STRING COPY",$00
>ef3a	4e 47 20 43 4f 50 59 00
.ef42					_CLEStringWritten:
.ef42	7a		ply				ply
.ef43	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/list.asm

.ef44					COMMAND_List:
.ef44	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look first non space
.ef46	c8		iny				iny
.ef47	c9 20		cmp #$20			cmp 	#' '
.ef49	f0 f9		beq $ef44			beq 	COMMAND_List
.ef4b	88		dey				dey
.ef4c	c9 30		cmp #$30			cmp 	#"0" 						; not digit, list all
.ef4e	90 0e		bcc $ef5e			bcc 	_CLIAll
.ef50	c9 3a		cmp #$3a			cmp 	#"9"+1
.ef52	b0 0a		bcs $ef5e			bcs 	_CLIAll
.ef54	a2 00		ldx #$00			ldx 	#0 							; evaluate the linenumber
.ef56	20 20 e2	jsr $e220			jsr 	EvaluateBase
.ef59	20 86 ed	jsr $ed86			jsr 	FindProgramLine 			; find that program Line, put in zTargetAddr
.ef5c	80 09		bra $ef67			bra 	_CLIMain 					; list it.
.ef5e					_CLIAll:
.ef5e	5a		phy				phy
.ef5f	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set target address
.ef61	85 28		sta $28				sta 	zTargetAddr
.ef63	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ef65	85 29		sta $29				sta 	zTargetAddr+1
.ef67					_CLIMain:
.ef67	a9 10		lda #$10			lda 	#16 						; print 16 lines
.ef69	85 2a		sta $2a				sta 	zTargetAddr+2
.ef6b					_CLLILoop:
.ef6b	a0 00		ldy #$00			ldy 	#0
.ef6d	b1 28		lda ($28),y			lda 	(zTargetAddr),y 			; if that offset is zero exit
.ef6f	f0 14		beq $ef85			beq 	_CLLIExit
.ef71	20 89 ef	jsr $ef89			jsr 	CLIOneLine 					; list one line.
.ef74	a0 00		ldy #$00			ldy 	#0 							; advance pointer to next.
.ef76	18		clc				clc
.ef77	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ef79	65 28		adc $28				adc 	zTargetAddr
.ef7b	85 28		sta $28				sta 	zTargetAddr
.ef7d	90 02		bcc $ef81			bcc 	_CLLINoCarry
.ef7f	e6 29		inc $29				inc 	zTargetAddr+1
.ef81					_CLLINoCarry:
.ef81	c6 2a		dec $2a				dec 	zTargetAddr+2 				; done all of them ?
.ef83	d0 e6		bne $ef6b			bne 	_CLLILoop
.ef85					_CLLIExit:
.ef85	7a		ply				ply
.ef86	4c 82 f2	jmp $f282			jmp 	WarmStart
.ef89					CLIOneLine:
.ef89	a0 01		ldy #$01			ldy 	#1 							; get line#
.ef8b	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ef8d	8d 00 04	sta $0400			sta 	evalStack+0
.ef90	c8		iny				iny
.ef91	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.ef93	8d 01 04	sta $0401			sta 	evalStack+1
.ef96	a9 00		lda #$00			lda 	#0
.ef98	aa		tax				tax
.ef99	8d 02 04	sta $0402			sta 	evalStack+2
.ef9c	8d 03 04	sta $0403			sta 	evalStack+3
.ef9f	20 77 f1	jsr $f177			jsr 	CPRPrintInteger 			; print line#
.efa2	a9 20		lda #$20			lda 	#32
.efa4	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.efa7	a0 03		ldy #$03			ldy 	#3 							; where to start
.efa9					_CLIOutput:
.efa9	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.efab	c8		iny				iny
.efac	09 00		ora #$00			ora 	#0
.efae	f0 0c		beq $efbc			beq 	_CLIExit
.efb0	10 05		bpl $efb7			bpl		_CLISingle
.efb2	20 c2 ef	jsr $efc2			jsr 	CLIPrintToken
.efb5	80 f2		bra $efa9			bra 	_CLIOutput
.efb7					_CLISingle:
.efb7	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.efba	80 ed		bra $efa9			bra 	_CLIOutput
.efbc					_CLIExit:
.efbc	a9 0d		lda #$0d			lda 	#13 						; new line.
.efbe	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.efc1	60		rts				rts
.efc2					CLIPrintToken:
.efc2	5a		phy				phy 								; save Y
.efc3	29 7f		and #$7f			and 	#$7F 						; 7 bit token -> Y
.efc5	a8		tay				tay
.efc6	a2 00		ldx #$00			ldx 	#0 							; offset into token text table.
.efc8					_CLIFind:
.efc8	88		dey				dey 								; decrement counter
.efc9	30 09		bmi $efd4			bmi 	_CLIFoundToken 				; if -ve found the token.
.efcb					_CLISkip:
.efcb	bd 7c e0	lda $e07c,x			lda 	TokenText,x
.efce	e8		inx				inx
.efcf	0a		asl a				asl		a
.efd0	90 f9		bcc $efcb			bcc 	_CLISkip
.efd2	80 f4		bra $efc8			bra 	_CLIFind
.efd4					_CLIFoundToken:
.efd4	7a		ply				ply
.efd5					_CLIPrintIt:
.efd5	bd 7c e0	lda $e07c,x			lda 	TokenText,x
.efd8	e8		inx				inx
.efd9	48		pha				pha
.efda	29 7f		and #$7f			and 	#$7F
.efdc	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.efdf	68		pla				pla
.efe0	0a		asl a				asl 	a
.efe1	90 f2		bcc $efd5			bcc 	_CLIPrintIt
.efe3	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/miscellany.asm

.efe4					COMMAND_Assert:
.efe4	20 20 e2	jsr $e220			jsr 	EvaluateBase 				; evaluate the expression
.efe7	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check non zero
.efea	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.efed	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eff0	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eff3	d0 12		bne $f007			bne 	_CMDAExit
.eff5	ea		nop				nop
.eff6	20 6c e1	jsr $e16c			jsr 	ReportError
>eff9	41 53 53 45 52 54 20 46				.text 	"ASSERT FAILED",$00
>f001	41 49 4c 45 44 00
.f007					_CMDAExit:
.f007	60		rts				rts
.f008					COMMAND_Rem:
.f008	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character token.
.f00a	f0 05		beq $f011			beq 	_CREMExit 					; End of line, then exit.
.f00c	c8		iny				iny 								; something to skip
.f00d	c9 8e		cmp #$8e			cmp 	#KW_COLON 					; if not a colon
.f00f	d0 f7		bne $f008			bne 	COMMAND_Rem 				; keep searching
.f011					_CREMExit:
.f011	60		rts				rts
.f012					COMMAND_NewExec:
.f012	20 18 f0	jsr $f018			jsr 	COMMAND_NewCode
.f015	4c 82 f2	jmp $f282			jmp 	WarmStart
.f018					COMMAND_NewCode:
.f018	a9 00		lda #$00			lda 	#0 							; erase the actual program.
.f01a	8d 00 23	sta $2300			sta 	BasicProgram 				; by zeroing the initial offset.
.f01d	20 2b f0	jsr $f02b			jsr 	COMMAND_Clear 				; clear non fixed variable, reset stack and low mem pointer
.f020	a9 00		lda #$00			lda 	#endMemory & $FF 			; reset high memory pointer.
.f022	8d be 20	sta $20be			sta 	HighMemory
.f025	a9 80		lda #$80			lda 	#endMemory >> 8
.f027	8d bf 20	sta $20bf			sta 	HighMemory+1
.f02a	60		rts				rts
.f02b					COMMAND_Clear:
.f02b	a2 00		ldx #$00			ldx 	#0	 						; clear variables @A-Z
.f02d					_CCClearVar:
.f02d	a9 00		lda #$00			lda 	#$00
.f02f	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.f032	e8		inx				inx
.f033	e0 6c		cpx #$6c			cpx 	#27*4
.f035	10 f6		bpl $f02d			bpl 	_CCClearVar
.f037	a9 00		lda #$00			lda 	#0 							; reset BASIC stack index
.f039	8d cb 20	sta $20cb			sta 	basicStackIndex
.f03c	a9 ff		lda #$ff			lda 	#$FF 						; put invalid token on TOS, so when pulled.
.f03e	8d 00 02	sta $0200			sta 	basicStack 					; causes an error.
.f041	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; now find where the program ends.
.f043	85 22		sta $22				sta 	zLowMemory
.f045	a9 23		lda #$23			lda 	#BasicProgram >> 8
.f047	85 23		sta $23				sta 	zLowMemory+1
.f049					_CCFindEnd:
.f049	a0 00		ldy #$00			ldy 	#0 							; look at next offset
.f04b	b1 22		lda ($22),y			lda 	(zLowMemory),y 				; if zero, reached the end.
.f04d	f0 0b		beq $f05a			beq 	_CCFoundEnd
.f04f	18		clc				clc 								; go to next line.
.f050	65 22		adc $22				adc 	zLowMemory
.f052	85 22		sta $22				sta 	zLowMemory
.f054	90 f3		bcc $f049			bcc 	_CCFindEnd
.f056	e6 23		inc $23				inc 	zLowMemory+1
.f058	80 ef		bra $f049			bra 	_CCFindEnd
.f05a					_CCFoundEnd:
.f05a	e6 22		inc $22				inc 	zLowMemory 					; variables etc. start after end of program.
.f05c	d0 02		bne $f060			bne 	_CCNoCarry 					; skip over zero end offset.
.f05e	e6 23		inc $23				inc 	zLowMemory+1
.f060					_CCNoCarry:
.f060	60		rts				rts
.f061					COMMAND_OldExec:
.f061	20 67 f0	jsr $f067			jsr 	COMMAND_OldCode
.f064	4c 82 f2	jmp $f282			jmp 	WarmStart
.f067					COMMAND_OldCode:
.f067	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; point zLowMemory to the first line.
.f069	85 22		sta $22				sta 	zLowMemory
.f06b	a9 23		lda #$23			lda 	#BasicProgram >> 8
.f06d	85 23		sta $23				sta 	zLowMemory+1
.f06f	a0 03		ldy #$03			ldy 	#3 							; look for the $00 end of line marker.
.f071					_COScan:
.f071	b1 22		lda ($22),y			lda 	(zLowMemory),y 				; look at next byte pair
.f073	c8		iny				iny
.f074	f0 0d		beq $f083			beq 	_COFail 					; can't find marker, corrupted maybe ?
.f076	c9 00		cmp #$00			cmp 	#0 							; until $00 found.
.f078	d0 f7		bne $f071			bne 	_COScan
.f07a	98		tya				tya 								; Y is the new offset to the next instruction
.f07b	a0 00		ldy #$00			ldy 	#0 							; overwrite the old one
.f07d	91 22		sta ($22),y			sta 	(zLowMemory),y
.f07f	20 2b f0	jsr $f02b			jsr 	COMMAND_Clear 				; reset variables, stacks and pointers.
.f082	60		rts				rts
.f083					_COFail:
.f083	20 6c e1	jsr $e16c			jsr 	ReportError
>f086	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER PROGRAM",$00
>f08e	45 43 4f 56 45 52 20 50 52 4f 47 52 41 4d 00
.f09d					COMMAND_RST:
.f09d	20 d6 b0	jsr $b0d6			jsr 	EXTReset
.f0a0	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/print.asm

.f0a1					COMMAND_Print:
.f0a1	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; look at next character
.f0a3	f0 29		beq $f0ce			beq 	_CPRExitNL 					; zero end of line.
.f0a5	c8		iny				iny
.f0a6	c9 20		cmp #$20			cmp 	#' '
.f0a8	f0 f7		beq $f0a1			beq 	COMMAND_Print
.f0aa	c9 8e		cmp #$8e			cmp 	#KW_COLON 					; colon, end of line
.f0ac	f0 20		beq $f0ce			beq 	_CPRExitNL
.f0ae	c9 8b		cmp #$8b			cmp 	#KW_COMMA 					; comma, tab
.f0b0	f0 0d		beq $f0bf			beq 	_CPRTab
.f0b2	c9 8f		cmp #$8f			cmp 	#KW_SEMICOLON 				; semicolon ?
.f0b4	d0 1e		bne $f0d4			bne 	_CPRNotSemicolon
.f0b6	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look at next character, is ; last thing
.f0b8	f0 19		beq $f0d3			beq 	_CPRExit
.f0ba	c9 8e		cmp #$8e			cmp 	#KW_COLON
.f0bc	d0 e3		bne $f0a1			bne 	COMMAND_Print 				; if not, just go back round again
.f0be	60		rts				rts
.f0bf	a9 09		lda #$09	_CPRTab:lda 	#9 							; print tab.
.f0c1	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.f0c4	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look at next.
.f0c6	f0 0b		beq $f0d3			beq 	_CPRExit 					; exit if 0 or :
.f0c8	c9 8e		cmp #$8e			cmp 	#KW_COLON
.f0ca	f0 07		beq $f0d3			beq 	_CPRExit
.f0cc	80 d3		bra $f0a1			bra 	COMMAND_Print
.f0ce					_CPRExitNL:
.f0ce	a9 0d		lda #$0d			lda 	#13
.f0d0	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.f0d3					_CPRExit:
.f0d3	60		rts				rts
.f0d4					_CPRNotSemicolon:
.f0d4	c9 86		cmp #$86			cmp 	#KW_SQUOTE 					; single quote
.f0d6	f0 2b		beq $f103			beq 	_CPRNewLine 				; new line
.f0d8	c9 81		cmp #$81			cmp 	#KW_DQUOTE 					; double quote
.f0da	d0 2e		bne $f10a			bne 	_CPRNotQuote
.f0dc					_CPRPrintText:
.f0dc	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next character
.f0de	f0 0a		beq $f0ea			beq 	_CPRError 					; if zero no closing quote
.f0e0	c8		iny				iny
.f0e1	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; double quote
.f0e3	f0 bc		beq $f0a1			beq 	COMMAND_Print 				; go round again.
.f0e5	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter 			; print and do next character
.f0e8	80 f2		bra $f0dc			bra 	_CPRPrintText
.f0ea					_CPRError:
.f0ea	20 6c e1	jsr $e16c			jsr 	ReportError
>f0ed	4d 49 53 53 49 4e 47 20				.text 	"MISSING CLOSING QUOTE",$00
>f0f5	43 4c 4f 53 49 4e 47 20 51 55 4f 54 45 00
.f103					_CPRNewLine:
.f103	a9 0d		lda #$0d			lda 	#13
.f105	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.f108	80 97		bra $f0a1			bra 	COMMAND_Print
.f10a					_CPRNotQuote:
.f10a	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; not a string ?
.f10c	d0 11		bne $f11f			bne 	_CPRNumber 					; print a number.
.f10e	20 20 e2	jsr $e220			jsr 	EvaluateBase 				; this is the address to print.
.f111	5a		phy				phy
.f112	bc 01 04	ldy $0401,x			ldy 	evalStack+1,x 				; get the address
.f115	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.f118	aa		tax				tax
.f119	20 f2 e4	jsr $e4f2			jsr 	SIOPrintString
.f11c	7a		ply				ply
.f11d	80 82		bra $f0a1			bra 	COMMAND_Print
.f11f					_CPRNumber:
.f11f	c9 85		cmp #$85			cmp 	#KW_AMPERSAND
.f121	f0 17		beq $f13a			beq 	_CPRHexadecimal
.f123	88		dey				dey 								; must be 1st char of expr
.f124	20 20 e2	jsr $e220			jsr 	EvaluateBase 				; this is the value to print.
.f127	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; is it -ve
.f12a	10 08		bpl $f134			bpl 	_CPRIsPositive
.f12c	20 9d ea	jsr $ea9d			jsr 	BFUNC_NegateAlways 			; negate it
.f12f	a9 2d		lda #$2d			lda 	#"-" 						; print - it.
.f131	20 1f e5	jsr $e51f			jsr 	SIOPrintCharacter
.f134					_CPRIsPositive:
.f134	20 77 f1	jsr $f177			jsr 	CPRPrintInteger 			; Print string at current eval stack, base 10.
.f137	4c a1 f0	jmp $f0a1			jmp 	COMMAND_Print
.f13a					_CPRHexadecimal:
.f13a	20 20 e2	jsr $e220			jsr 	EvaluateBase 				; this is the value to print.
.f13d	20 43 f1	jsr $f143			jsr 	_CPRPrintRecHex 			; hex version of it.
.f140	4c a1 f0	jmp $f0a1			jmp 	COMMAND_Print
.f143					_CPRPrintRecHex:
.f143	ad 00 04	lda $0400			lda 	evalStack+0 				; get the remainder
.f146	29 0f		and #$0f			and 	#15 						; and put on stack
.f148	48		pha				pha
.f149	a2 04		ldx #$04			ldx 	#4 							; divide by 16
.f14b					_CPRShiftDiv:
.f14b	4e 03 04	lsr $0403			lsr 	evalStack+3
.f14e	6e 02 04	ror $0402			ror 	evalStack+2
.f151	6e 01 04	ror $0401			ror		evalStack+1
.f154	6e 00 04	ror $0400			ror		evalStack+0
.f157	ca		dex				dex
.f158	d0 f1		bne $f14b			bne 	_CPRShiftDiv
.f15a	ad 00 04	lda $0400			lda 	evalStack+0 				; any more to print
.f15d	0d 01 04	ora $0401			ora 	evalStack+1
.f160	0d 02 04	ora $0402			ora 	evalStack+2
.f163	0d 03 04	ora $0403			ora 	evalStack+3
.f166	f0 03		beq $f16b			beq 	_CPRNoHexRec
.f168	20 43 f1	jsr $f143			jsr 	_CPRPrintRecHex
.f16b					_CPRNoHexRec:
.f16b	68		pla				pla 								; original remainder.
.f16c	c9 0a		cmp #$0a			cmp 	#10
.f16e	90 02		bcc $f172			bcc		_CPRNH2
.f170	69 06		adc #$06			adc 	#6
.f172	69 30		adc #$30	_CPRNH2:adc 	#48
.f174	4c 1f e5	jmp $e51f			jmp 	SIOPrintCharacter
.f177					CPRPrintInteger:
.f177	48		pha				pha 								; save on stack.
.f178	da		phx				phx
.f179	5a		phy				phy
.f17a	20 81 f1	jsr $f181			jsr 	_CPRPrintRec 				; recursive print call
.f17d	7a		ply				ply
.f17e	fa		plx				plx
.f17f	68		pla				pla
.f180	60		rts				rts
.f181					_CPRPrintRec:
.f181	a9 0a		lda #$0a			lda 	#10 						; save base
.f183	9d 04 04	sta $0404,x			sta 	evalStack+4,x 				; put in next slot.
.f186	a9 00		lda #$00			lda 	#0 							; clear upper 3 bytes
.f188	9d 05 04	sta $0405,x			sta 	evalStack+5,x
.f18b	9d 06 04	sta $0406,x			sta 	evalStack+6,x
.f18e	9d 07 04	sta $0407,x			sta 	evalStack+7,x
.f191	20 fa e9	jsr $e9fa			jsr 	BFUNC_Divide 				; divide by 10.
.f194	ad c0 20	lda $20c0			lda 	Temp1+0		 				; push remainder on stack
.f197	48		pha				pha
.f198	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; is the result #0
.f19b	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.f19e	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.f1a1	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.f1a4	f0 03		beq $f1a9			beq 	_CPRNoRecurse
.f1a6	20 81 f1	jsr $f181			jsr 	_CPRPrintRec 				; recursive print.
.f1a9					_CPRNoRecurse:
.f1a9	68		pla				pla
.f1aa	09 30		ora #$30			ora 	#"0"
.f1ac	4c 1f e5	jmp $e51f			jmp 	SIOPrintCharacter
.f1af					COMMAND_CLS:
.f1af	4c e4 e4	jmp $e4e4			jmp 	SIOClearScreen

;******  Return to file: basic.asm


;******  Processing file: commands/execute.asm

.f1b2					COMMAND_Run:
.f1b2	20 2b f0	jsr $f02b			jsr 	COMMAND_Clear 				; clear everything for a new run.
.f1b5	a2 00		ldx #$00			ldx 	#BasicProgram & 255 		; start from here
.f1b7	a0 23		ldy #$23			ldy 	#BasicProgram >> 8
.f1b9	86 20		stx $20				stx 	zCurrentLine 				; set current line.
.f1bb	84 21		sty $21				sty 	zCurrentLine+1
.f1bd					CRUNNewLine:
.f1bd	a0 00		ldy #$00			ldy 	#0 							; look at the offset, end of program
.f1bf	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.f1c1	f0 78		beq $f23b			beq 	COMMAND_End 				; if zero, off end of program so stop.
.f1c3	a0 03		ldy #$03			ldy 	#3 							; offset to first token.
.f1c5					CRUNNextInstruction:
.f1c5	ee ca 20	inc $20ca			inc 	breakCheckCount 			; don't check every time, might be slow.
.f1c8	ad ca 20	lda $20ca			lda 	breakCheckCount
.f1cb	29 1f		and #$1f			and 	#$1F 						; checking once in 32.
.f1cd	f0 0e		beq $f1dd			beq 	_CRUNNoCheck
.f1cf	20 55 b0	jsr $b055			jsr 	EXTCheckBreak
.f1d2	f0 09		beq $f1dd			beq 	_CRUNNoCheck
.f1d4	20 6c e1	jsr $e16c			jsr 	ReportError
>f1d7	42 52 45 41 4b 00				.text 	"BREAK",$00
.f1dd					_CRUNNoCheck:
.f1dd	a9 00		lda #$00			lda 	#0 							; reset the string buffer position
.f1df	8d c5 20	sta $20c5			sta 	StringBufferPos
.f1e2	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token
.f1e4	f0 0b		beq $f1f1			beq 	CRUNNextLine 				; if zero, then end of line.
.f1e6					CRUNNotEndOfLine:
.f1e6	c9 20		cmp #$20			cmp 	#' '
.f1e8	f0 04		beq $f1ee			beq 	CRUNSkipLoop
.f1ea	c9 8e		cmp #$8e			cmp 	#KW_Colon 					; check for a colon first.
.f1ec	d0 1b		bne $f209			bne 	CRUNExecuteOne 				; if not that, execute the token.
.f1ee					CRUNSkipLoop:
.f1ee	c8		iny				iny		 							; if colon, skip it and loop round.
.f1ef	80 d4		bra $f1c5			bra 	CRUNNextInstruction
.f1f1					CRUNNextLine:
.f1f1	a5 21		lda $21				lda 	zCurrentLine+1 				; running from input
.f1f3	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.f1f5	f0 0f		beq $f206			beq		CRUNWarmStart
.f1f7	a0 00		ldy #$00			ldy 	#0 							; add offset from line to line pointer
.f1f9	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.f1fb	18		clc				clc
.f1fc	65 20		adc $20				adc 	zCurrentLine
.f1fe	85 20		sta $20				sta 	zCurrentLine
.f200	90 bb		bcc $f1bd			bcc 	CRUNNewLine
.f202	e6 21		inc $21				inc 	zCurrentLine+1
.f204	80 b7		bra $f1bd			bra 	CRUNNewLine
.f206					CRUNWarmStart:
.f206	4c 82 f2	jmp $f282			jmp 	WarmStart
.f209					CRUNExecuteOne:
.f209	09 00		ora #$00			ora 	#0 							; if it is a character might be a variable.
.f20b	10 21		bpl $f22e			bpl		_CRUNX1TryLet
.f20d	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; likewise if ! something ? something $ something
.f20f	f0 1d		beq $f22e			beq 	_CRUNX1TryLet
.f211	c9 80		cmp #$80			cmp 	#KW_PLING
.f213	f0 19		beq $f22e			beq 	_CRUNX1TryLet
.f215	c9 96		cmp #$96			cmp 	#KW_QUESTION
.f217	f0 15		beq $f22e			beq 	_CRUNX1TryLet
.f219	c8		iny				iny 								; skip over loaded token
.f21a	0a		asl a				asl 	a 							; double lower keyword byte, clears bit 7.
.f21b	8d c1 20	sta $20c1			sta 	Temp1+1 					; this is the low byte into the KVT
.f21e	8a		txa				txa
.f21f	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.f221	8d c2 20	sta $20c2			sta 	Temp1+2
.f224	a9 6c		lda #$6c			lda 	#$6C 						; make it jump indirect
.f226	8d c0 20	sta $20c0			sta 	Temp1+0
.f229	20 c0 20	jsr $20c0			jsr 	Temp1 						; call instruction
.f22c	80 97		bra $f1c5			bra 	CRUNNextInstruction 		; do next instruction.
.f22e					_CRUNX1TryLet:
.f22e	20 09 ee	jsr $ee09			jsr 	COMMAND_Let 				; try doing a LET if not a keyword.
.f231	80 92		bra $f1c5			bra 	CRUNNextInstruction
.f233					COMMAND_Stop:
.f233	20 6c e1	jsr $e16c			jsr 	ReportError
>f236	53 54 4f 50 00					.text 	"STOP",$00
.f23b					COMMAND_End:
.f23b	ad 22 f3	lda $f322			lda 	StartBehaviour 				; running program
.f23e	c9 52		cmp #$52			cmp 	#"R"
.f240	d0 01		bne $f243			bne 	_CEWarmStart
>f242	02						.byte 	2
.f243					_CEWarmStart:
.f243	4c 82 f2	jmp $f282			jmp 	WarmStart

;******  Return to file: basic.asm

.f246					Start:
.f246	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.f248	9a		txs			txs
.f249	20 e1 e4	jsr $e4e1			jsr 	SIOInitialise 				; initialise the I/O system.
.f24c	a2 c2		ldx #$c2			ldx 	#BootMsg1 & 255 			; boot text.
.f24e	a0 f2		ldy #$f2			ldy 	#BootMsg1 >> 8
.f250	20 f2 e4	jsr $e4f2			jsr 	SIOPrintString
.f253	a2 ff		ldx #$ff			ldx 	#(endMemory-startMemory-1) & $FF
.f255	a0 5f		ldy #$5f			ldy 	#(endMemory-startMemory-1) >> 8
.f257	20 9b e1	jsr $e19b			jsr 	PrintWordInteger
.f25a	a2 d9		ldx #$d9			ldx 	#BootMsg2 & 255
.f25c	a0 f2		ldy #$f2			ldy 	#BootMsg2 >> 8
.f25e	20 f2 e4	jsr $e4f2			jsr 	SIOPrintString
.f261	ad 22 f3	lda $f322			lda 	StartBehaviour 				; what to do ?
.f264	c9 43		cmp #$43			cmp 	#'C'						; execute from command line
.f266	f0 17		beq $f27f			beq		CommandLine
.f268	c9 52		cmp #$52			cmp 	#'R' 						; run program in memory.
.f26a	f0 07		beq $f273			beq	 	RunProgram
.f26c	c9 54		cmp #$54			cmp 	#'T'						; tokenise test
.f26e	f0 46		beq $f2b6			beq 	TokeniseExec
.f270	4c 5c e1	jmp $e15c			jmp		SyntaxError
.f273					RunProgram:
.f273	20 d5 e1	jsr $e1d5			jsr 	CopyBasicCode
.f276	20 18 f0	jsr $f018			jsr 	COMMAND_NewCode 			; do a new
.f279	20 67 f0	jsr $f067			jsr 	COMMAND_OldCode 			; get back the old program as we're deving.
.f27c	4c b2 f1	jmp $f1b2			jmp 	COMMAND_Run
.f27f					CommandLine:
.f27f	20 18 f0	jsr $f018			jsr 	Command_NewCode
.f282					WarmStart:
.f282	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.f284	9a		txs			txs
.f285	20 6e e5	jsr $e56e			jsr 	SIOReadLine 				; read input line.
.f288	a9 6d		lda #$6d			lda 	#InputLine & $FF 			; tokenise the line
.f28a	85 24		sta $24				sta 	zTemp1
.f28c	a9 20		lda #$20			lda 	#InputLine >> 8
.f28e	85 25		sta $25				sta 	zTemp1+1
.f290	20 de e6	jsr $e6de			jsr 	TokeniseString
.f293	a9 00		lda #$00			lda 	#TokeniseBuffer & $FF 		; point current line to tokenised input buffer.
.f295	85 20		sta $20				sta 	zCurrentLine
.f297	a9 21		lda #$21			lda 	#TokeniseBuffer >> 8
.f299	85 21		sta $21				sta 	zCurrentLine+1
.f29b	a0 00		ldy #$00			ldy 	#0
.f29d					_WSSkipSpace:
.f29d	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.f29f	c8		iny				iny
.f2a0	c9 20		cmp #$20			cmp 	#' '
.f2a2	f0 f9		beq $f29d			beq 	_WSSkipSpace
.f2a4	88		dey				dey
.f2a5	c9 30		cmp #$30			cmp 	#"0" 						; if not a digit
.f2a7	90 0a		bcc $f2b3			bcc 	_WSExecute
.f2a9	c9 3a		cmp #$3a			cmp 	#"9"+1
.f2ab	b0 06		bcs $f2b3			bcs 	_WSExecute
.f2ad	20 b3 e7	jsr $e7b3			jsr 	EditProgram
.f2b0	4c 82 f2	jmp $f282			jmp 	WarmStart
.f2b3					_WSExecute:
.f2b3	4c c5 f1	jmp $f1c5			jmp 	CRUNNextInstruction
.f2b6					TokeniseExec:
.f2b6	a9 e8		lda #$e8			lda 	#BasicCode & $FF 			; if so tokenise whatever I've put in the basic code
.f2b8	85 24		sta $24				sta 	zTemp1 						; area
.f2ba	a9 f2		lda #$f2			lda 	#BasicCode >> 8
.f2bc	85 25		sta $25				sta 	zTemp1+1
.f2be	20 de e6	jsr $e6de			jsr 	TokeniseString
>f2c1	02						.byte 	2
.f2c2					BootMsg1:
>f2c2	2a 2a 2a 20 41 54 4f 4d				.text 	"*** ATOMIC BASIC ***",13,13,0
>f2ca	49 43 20 42 41 53 49 43 20 2a 2a 2a 0d 0d 00
.f2d9					BootMsg2:
>f2d9	20 42 59 54 45 53 20 46				.text	" BYTES FREE.",13,13,0
>f2e1	52 45 45 2e 0d 0d 00
.f2e8					BasicCode:

;******  Processing file: include/basic_generated.inc

>f2e8	19 01 00 4d 93 a5 8e 4d			.byte $19,$01,$00,$4d,$93,$a5,$8e,$4d,$96,$34,$37,$93,$82,$34,$37,$8e,$4d,$96,$34,$37,$93,$83,$35,$33,$00,$1b,$02,$00,$af,$81,$4d,$20,$53,$45,$54,$20,$55,$50,$20,$56,$49,$43,$20,$49,$56,$20,$49,$4e,$49,$54,$81,$00,$05,$03,$00,$b6,$00,$00
>f2f0	96 34 37 93 82 34 37 8e 4d 96 34 37 93 83 35 33
>f300	00 1b 02 00 af 81 4d 20 53 45 54 20 55 50 20 56
>f310	49 43 20 49 56 20 49 4e 49 54 81 00 05 03 00 b6
>f320	00 00
.f322					StartBehaviour:
>f322	43					.text "C"

;******  Return to file: basic.asm


;******  End of listing
