
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -D TARGET=2 -b -L rom.lst -o rom.bin basic.asm
; Mon Jul 29 15:33:06 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: basic.asm


;******  Processing file: porting.asm

.fff8					EXTDummyInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word 	EXTDummyInterrupt
>fffc	34 ee						.word 	Start
>fffe	f8 ff						.word 	EXTDummyInterrupt
=4					EXTZPWork = 4								; Zero Page work for Personality (4 bytes)
=8					IOCursorX = 8 								; Cursor position
=9					IOCursorY = 9
=$20							zeroPage 	= $20 					; first ZP byte to use
=$2000							startMemory = $2000 				; first non ZP byte to use
=$8000							endMemory   = $8000 				; last non ZP byte to use
=$200							basicStack  = $200 					; stack for BASIC
=$400							evalStack   = $400 					; stack for evaluation of expressions

;******  Processing file: personalities/personality_6502.asm

>0000	00					.byte 	0
=40					EXTWidth = 40 								; screen width
=25					EXTHeight = 25 								; screen height
=$0800					EXTLowMemory = $0800 						; Workspace RAM starts here
=$6000					EXTHighMemory = $6000 						; Workspace RAM ends here
=$b000					PScreen = $B000								; 1k screen RAM here
=$b800					PKeyboard = $B800							; Keyboard port.
=$b801					PBreak = $B801 								; Break key.
.a000					EXTStartPersonalise:
.a000	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.a002	9a		txs			txs
.a003	20 82 a0	jsr $a082		jsr 	EXTReset 						; reset video
.a006	20 38 a0	jsr $a038		jsr 	EXTClearScreen 					; clear screen
.a009	4c 34 ee	jmp $ee34		jmp 	Start 							; start main application
.a00c					EXTReadKeyPort:
.a00c	ad 00 b8	lda $b800		lda 	PKeyboard							; read key
.a00f	09 00		ora #$00		ora 	#0
.a011	60		rts			rts
.a012					EXTRemoveKeyPressed:
.a012	48		pha			pha 										; key pressed clear queue byte.
.a013	a9 00		lda #$00		lda 	#0
.a015	8d 00 b8	sta $b800		sta 	PKeyboard
.a018	68		pla			pla
.a019	60		rts			rts
.a01a					EXTCheckBreak:
.a01a	ad 01 b8	lda $b801		lda 	PBreak
.a01d	60		rts			rts
.a01e					EXTReadScreen:
.a01e	5a		phy			phy 										; save Y
.a01f	86 04		stx $04			stx 	EXTZPWork							; into EXTZPWork
.a021	98		tya			tya
.a022	09 b0		ora #$b0		ora 	#PScreen>>8 						; move into screen area
.a024	85 05		sta $05			sta 	EXTZPWork+1 						; read character there
.a026	a0 00		ldy #$00		ldy 	#0
.a028	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a02a	7a		ply			ply 										; restore Y and exit.
.a02b	60		rts			rts
.a02c					EXTWriteScreen:
.a02c	5a		phy			phy
.a02d	48		pha			pha
.a02e	20 1e a0	jsr $a01e		jsr		EXTReadScreen 						; set up the address into EXTZPWork
.a031	a0 00		ldy #$00		ldy 	#0
.a033	68		pla			pla 										; restore and write.
.a034	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a036	7a		ply			ply
.a037	60		rts			rts
.a038					EXTClearScreen:
.a038	48		pha			pha 										; save registers
.a039	da		phx			phx
.a03a	a2 00		ldx #$00		ldx 	#0
.a03c					_EXTCSLoop:
.a03c	a9 20		lda #$20		lda 	#32
.a03e	9d 00 b0	sta $b000,x		sta 	PScreen+0,x
.a041	9d 00 b1	sta $b100,x		sta 	PScreen+$100,x
.a044	9d 00 b2	sta $b200,x		sta 	PScreen+$200,x
.a047	9d 00 b3	sta $b300,x		sta 	PScreen+$300,x
.a04a	e8		inx			inx
.a04b	d0 ef		bne $a03c		bne 	_EXTCSLoop
.a04d	fa		plx			plx 										; restore
.a04e	68		pla			pla
.a04f	60		rts			rts
.a050					EXTScrollDisplay:
.a050	48		pha			pha 										; save registers
.a051	5a		phy			phy
.a052	a9 00		lda #$00		lda 	#PScreen & $FF 					; set pointer to screen
.a054	85 04		sta $04			sta 	EXTZPWork+0
.a056	a9 b0		lda #$b0		lda 	#PScreen >> 8
.a058	85 05		sta $05			sta 	EXTZPWork+1
.a05a					_EXTScroll:
.a05a	a0 28		ldy #$28		ldy 	#EXTWidth
.a05c	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a05e	a0 00		ldy #$00		ldy 	#0
.a060	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a062	e6 04		inc $04			inc 	EXTZPWork 							; bump address
.a064	d0 02		bne $a068		bne 	_EXTNoCarry
.a066	e6 05		inc $05			inc 	EXTZPWork+1
.a068					_EXTNoCarry:
.a068	a5 04		lda $04			lda 	EXTZPWork 							; done ?
.a06a	c9 c0		cmp #$c0		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) & $FF
.a06c	d0 ec		bne $a05a		bne 	_EXTScroll
.a06e	a5 05		lda $05			lda 	EXTZPWork+1
.a070	c9 b3		cmp #$b3		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) >> 8
.a072	d0 e6		bne $a05a		bne 	_EXTScroll
.a074	a0 00		ldy #$00		ldy 	#0									; clear bottom line.
.a076					_EXTLastLine:
.a076	a9 20		lda #$20		lda 	#32
.a078	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a07a	c8		iny			iny
.a07b	c0 28		cpy #$28		cpy 	#EXTWidth
.a07d	d0 f7		bne $a076		bne 	_EXTLastLine
.a07f	7a		ply			ply 										; restore and exit.
.a080	68		pla			pla
.a081	60		rts			rts
.a082					EXTReset:
.a082	60		rts			rts

;******  Return to file: porting.asm


;******  Return to file: basic.asm


;******  Processing file: include/tokens.inc

.e000					KeywordVectorTable:
>e000	65 e7					.word	BFUNC_WordInd                 ; "!"        ($0080)
>e002	19 e1					.word	SyntaxError                   ; """        ($0081)
>e004	19 e1					.word	SyntaxError                   ; "#"        ($0082)
>e006	5a e7					.word	BFUNC_String                  ; "$"        ($0083)
>e008	fa e8					.word	BFUNC_Modulus                 ; "%"        ($0084)
>e00a	6c e7					.word	BFUNC_And                     ; "&"        ($0085)
>e00c	19 e1					.word	SyntaxError                   ; "'"        ($0086)
>e00e	19 e1					.word	SyntaxError                   ; "("        ($0087)
>e010	19 e1					.word	SyntaxError                   ; ")"        ($0088)
>e012	db e7					.word	BFUNC_Multiply                ; "*"        ($0089)
>e014	0e e7					.word	BFUNC_Add                     ; "+"        ($008a)
>e016	34 e7					.word	BFUNC_Subtract                ; "-"        ($008b)
>e018	32 e8					.word	BFUNC_Divide                  ; "/"        ($008c)
>e01a	19 e1					.word	SyntaxError                   ; ":"        ($008d)
>e01c	19 e1					.word	SyntaxError                   ; ";"        ($008e)
>e01e	78 e9					.word	BFUNC_LessEqual               ; "<="       ($008f)
>e020	19 e9					.word	BFUNC_NotEquals               ; "<>"       ($0090)
>e022	53 e9					.word	BFUNC_Less                    ; "<"        ($0091)
>e024	16 e9					.word	BFUNC_Equals                  ; "="        ($0092)
>e026	56 e9					.word	BFUNC_GreaterEqual            ; ">="       ($0093)
>e028	75 e9					.word	BFUNC_Greater                 ; ">"        ($0094)
>e02a	5e e7					.word	BFUNC_ByteInd                 ; "?"        ($0095)
>e02c	b6 e7					.word	BFUNC_Xor                     ; "^"        ($0096)
>e02e	05 eb					.word	COMMAND_Assert                ; "assert"   ($0097)
>e030	2f ea					.word	UNARY_Abs                     ; "abs"      ($0098)
>e032	46 eb					.word	COMMAND_Clear                 ; "clear"    ($0099)
>e034	1a ea					.word	UNARY_Ch                      ; "ch"       ($009a)
>e036	19 e1					.word	SyntaxError                   ; "do"       ($009b)
>e038	fa ea					.word	COMMAND_End                   ; "end"      ($009c)
>e03a	19 e1					.word	SyntaxError                   ; "for"      ($009d)
>e03c	19 e1					.word	SyntaxError                   ; "gosub"    ($009e)
>e03e	19 e1					.word	SyntaxError                   ; "goto"     ($009f)
>e040	19 e1					.word	SyntaxError                   ; "input"    ($00a0)
>e042	19 e1					.word	SyntaxError                   ; "if"       ($00a1)
>e044	b2 ed					.word	COMMAND_List                  ; "list"     ($00a2)
>e046	19 e1					.word	SyntaxError                   ; "loop"     ($00a3)
>e048	19 e1					.word	SyntaxError                   ; "link"     ($00a4)
>e04a	b0 eb					.word	COMMAND_Let                   ; "let"      ($00a5)
>e04c	d8 e9					.word	UNARY_Len                     ; "len"      ($00a6)
>e04e	19 e1					.word	SyntaxError                   ; "next"     ($00a7)
>e050	33 eb					.word	COMMAND_New                   ; "new"      ($00a8)
>e052	7a eb					.word	COMMAND_Old                   ; "old"      ($00a9)
>e054	b8 ec					.word	COMMAND_Print                 ; "print"    ($00aa)
>e056	29 eb					.word	COMMAND_Rem                   ; "rem"      ($00ab)
>e058	4c ea					.word	UNARY_Rnd                     ; "rnd"      ($00ac)
>e05a	f2 ea					.word	COMMAND_Stop                  ; "stop"     ($00ad)
>e05c	19 e1					.word	SyntaxError                   ; "step"     ($00ae)
>e05e	19 e1					.word	SyntaxError                   ; "then"     ($00af)
>e060	37 ea					.word	UNARY_Top                     ; "top"      ($00b0)
>e062	19 e1					.word	SyntaxError                   ; "to"       ($00b1)
>e064	91 e7					.word	BFUNC_Or                      ; "|"        ($00b2)
>e066	97 e9					.word	BFUNC_StringCompare           ; "~"        ($00b3)
.e068					TokenText:
>e068	a1					.byte $a1                             ; $0080 !
>e069	a2					.byte $a2                             ; $0081 "
>e06a	a3					.byte $a3                             ; $0082 #
>e06b	a4					.byte $a4                             ; $0083 $
>e06c	a5					.byte $a5                             ; $0084 %
>e06d	a6					.byte $a6                             ; $0085 &
>e06e	a7					.byte $a7                             ; $0086 '
>e06f	a8					.byte $a8                             ; $0087 (
>e070	a9					.byte $a9                             ; $0088 )
>e071	aa					.byte $aa                             ; $0089 *
>e072	ab					.byte $ab                             ; $008a +
>e073	ad					.byte $ad                             ; $008b -
>e074	af					.byte $af                             ; $008c /
>e075	ba					.byte $ba                             ; $008d :
>e076	bb					.byte $bb                             ; $008e ;
>e077	3c bd					.byte $3c,$bd                         ; $008f <=
>e079	3c be					.byte $3c,$be                         ; $0090 <>
>e07b	bc					.byte $bc                             ; $0091 <
>e07c	bd					.byte $bd                             ; $0092 =
>e07d	3e bd					.byte $3e,$bd                         ; $0093 >=
>e07f	be					.byte $be                             ; $0094 >
>e080	bf					.byte $bf                             ; $0095 ?
>e081	de					.byte $de                             ; $0096 ^
>e082	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4         ; $0097 assert
>e088	41 42 d3				.byte $41,$42,$d3                     ; $0098 abs
>e08b	43 4c 45 41 d2				.byte $43,$4c,$45,$41,$d2             ; $0099 clear
>e090	43 c8					.byte $43,$c8                         ; $009a ch
>e092	44 cf					.byte $44,$cf                         ; $009b do
>e094	45 4e c4				.byte $45,$4e,$c4                     ; $009c end
>e097	46 4f d2				.byte $46,$4f,$d2                     ; $009d for
>e09a	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2             ; $009e gosub
>e09f	47 4f 54 cf				.byte $47,$4f,$54,$cf                 ; $009f goto
>e0a3	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4             ; $00a0 input
>e0a8	49 c6					.byte $49,$c6                         ; $00a1 if
>e0aa	4c 49 53 d4				.byte $4c,$49,$53,$d4                 ; $00a2 list
>e0ae	4c 4f 4f d0				.byte $4c,$4f,$4f,$d0                 ; $00a3 loop
>e0b2	4c 49 4e cb				.byte $4c,$49,$4e,$cb                 ; $00a4 link
>e0b6	4c 45 d4				.byte $4c,$45,$d4                     ; $00a5 let
>e0b9	4c 45 ce				.byte $4c,$45,$ce                     ; $00a6 len
>e0bc	4e 45 58 d4				.byte $4e,$45,$58,$d4                 ; $00a7 next
>e0c0	4e 45 d7				.byte $4e,$45,$d7                     ; $00a8 new
>e0c3	4f 4c c4				.byte $4f,$4c,$c4                     ; $00a9 old
>e0c6	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4             ; $00aa print
>e0cb	52 45 cd				.byte $52,$45,$cd                     ; $00ab rem
>e0ce	52 4e c4				.byte $52,$4e,$c4                     ; $00ac rnd
>e0d1	53 54 4f d0				.byte $53,$54,$4f,$d0                 ; $00ad stop
>e0d5	53 54 45 d0				.byte $53,$54,$45,$d0                 ; $00ae step
>e0d9	54 48 45 ce				.byte $54,$48,$45,$ce                 ; $00af then
>e0dd	54 4f d0				.byte $54,$4f,$d0                     ; $00b0 top
>e0e0	54 cf					.byte $54,$cf                         ; $00b1 to
>e0e2	fc					.byte $fc                             ; $00b2 |
>e0e3	fe					.byte $fe                             ; $00b3 ~
>e0e4	00					.byte $00
.e0e5					TokenTypeInformation:
>e0e5	04					.byte $04                             ; $0080 !
>e0e6	0a					.byte $0a                             ; $0081 "
>e0e7	0a					.byte $0a                             ; $0082 #
>e0e8	04					.byte $04                             ; $0083 $
>e0e9	03					.byte $03                             ; $0084 %
>e0ea	00					.byte $00                             ; $0085 &
>e0eb	0a					.byte $0a                             ; $0086 '
>e0ec	0a					.byte $0a                             ; $0087 (
>e0ed	0a					.byte $0a                             ; $0088 )
>e0ee	03					.byte $03                             ; $0089 *
>e0ef	02					.byte $02                             ; $008a +
>e0f0	02					.byte $02                             ; $008b -
>e0f1	03					.byte $03                             ; $008c /
>e0f2	0a					.byte $0a                             ; $008d :
>e0f3	0a					.byte $0a                             ; $008e ;
>e0f4	01					.byte $01                             ; $008f <=
>e0f5	01					.byte $01                             ; $0090 <>
>e0f6	01					.byte $01                             ; $0091 <
>e0f7	01					.byte $01                             ; $0092 =
>e0f8	01					.byte $01                             ; $0093 >=
>e0f9	01					.byte $01                             ; $0094 >
>e0fa	04					.byte $04                             ; $0095 ?
>e0fb	00					.byte $00                             ; $0096 ^
>e0fc	04					.byte $04                             ; $0097 assert
>e0fd	09					.byte $09                             ; $0098 abs
>e0fe	04					.byte $04                             ; $0099 clear
>e0ff	09					.byte $09                             ; $009a ch
>e100	04					.byte $04                             ; $009b do
>e101	04					.byte $04                             ; $009c end
>e102	04					.byte $04                             ; $009d for
>e103	04					.byte $04                             ; $009e gosub
>e104	04					.byte $04                             ; $009f goto
>e105	04					.byte $04                             ; $00a0 input
>e106	04					.byte $04                             ; $00a1 if
>e107	04					.byte $04                             ; $00a2 list
>e108	04					.byte $04                             ; $00a3 loop
>e109	04					.byte $04                             ; $00a4 link
>e10a	04					.byte $04                             ; $00a5 let
>e10b	09					.byte $09                             ; $00a6 len
>e10c	04					.byte $04                             ; $00a7 next
>e10d	04					.byte $04                             ; $00a8 new
>e10e	04					.byte $04                             ; $00a9 old
>e10f	04					.byte $04                             ; $00aa print
>e110	04					.byte $04                             ; $00ab rem
>e111	09					.byte $09                             ; $00ac rnd
>e112	04					.byte $04                             ; $00ad stop
>e113	04					.byte $04                             ; $00ae step
>e114	04					.byte $04                             ; $00af then
>e115	09					.byte $09                             ; $00b0 top
>e116	04					.byte $04                             ; $00b1 to
>e117	00					.byte $00                             ; $00b2 |
>e118	01					.byte $01                             ; $00b3 ~
=$00					KTYPE_PRECBASE = $00
=$08					KTYPE_COMMAND = $08
=$09					KTYPE_UNARYFN = $09
=$0a					KTYPE_SYNTAX = $0a
=$0080					KW_PLING = $0080
=$0081					KW_DQUOTE = $0081
=$0082					KW_HASH = $0082
=$0083					KW_DOLLAR = $0083
=$0084					KW_PERCENT = $0084
=$0085					KW_AMPERSAND = $0085
=$0086					KW_SQUOTE = $0086
=$0087					KW_LPAREN = $0087
=$0088					KW_RPAREN = $0088
=$0089					KW_STAR = $0089
=$008a					KW_PLUS = $008a
=$008b					KW_MINUS = $008b
=$008c					KW_FSLASH = $008c
=$008d					KW_COLON = $008d
=$008e					KW_SEMICOLON = $008e
=$008f					KW_LESSEQUAL = $008f
=$0090					KW_LESSGREATER = $0090
=$0091					KW_LESS = $0091
=$0092					KW_EQUAL = $0092
=$0093					KW_GREATEREQUAL = $0093
=$0094					KW_GREATER = $0094
=$0095					KW_QUESTION = $0095
=$0096					KW_HAT = $0096
=$0097					KW_ASSERT = $0097
=$0098					KW_ABS = $0098
=$0099					KW_CLEAR = $0099
=$009a					KW_CH = $009a
=$009b					KW_DO = $009b
=$009c					KW_END = $009c
=$009d					KW_FOR = $009d
=$009e					KW_GOSUB = $009e
=$009f					KW_GOTO = $009f
=$00a0					KW_INPUT = $00a0
=$00a1					KW_IF = $00a1
=$00a2					KW_LIST = $00a2
=$00a3					KW_LOOP = $00a3
=$00a4					KW_LINK = $00a4
=$00a5					KW_LET = $00a5
=$00a6					KW_LEN = $00a6
=$00a7					KW_NEXT = $00a7
=$00a8					KW_NEW = $00a8
=$00a9					KW_OLD = $00a9
=$00aa					KW_PRINT = $00aa
=$00ab					KW_REM = $00ab
=$00ac					KW_RND = $00ac
=$00ad					KW_STOP = $00ad
=$00ae					KW_STEP = $00ae
=$00af					KW_THEN = $00af
=$00b0					KW_TOP = $00b0
=$00b1					KW_TO = $00b1
=$00b2					KW_BAR = $00b2
=$00b3					KW_TILDE = $00b3

;******  Return to file: basic.asm


;******  Processing file: general/support.asm

.e119					SyntaxError:
.e119	20 29 e1	jsr $e129			jsr 	ReportError
>e11c	53 59 4e 54 41 58 20 45				.text	"SYNTAX ERROR",0
>e124	52 52 4f 52 00
.e129					ReportError:
.e129	fa		plx				plx
.e12a	7a		ply				ply
.e12b	e8		inx				inx
.e12c	d0 01		bne $e12f			bne 	_REPrint
.e12e	c8		iny				iny
.e12f					_REPrint:
.e12f	20 61 e4	jsr $e461			jsr 	SIOPrintString
.e132	a5 21		lda $21				lda 	zCurrentLine+1 				; running from tokeniser buffer
.e134	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.e136	f0 25		beq $e15d			beq 	_RENoLineNumber
.e138	a9 20		lda #$20			lda 	#" "
.e13a	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.e13d	a9 40		lda #$40			lda 	#"@"
.e13f	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.e142	a0 01		ldy #$01			ldy 	#1
.e144	a2 00		ldx #$00			ldx 	#0
.e146	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e148	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e14b	c8		iny				iny
.e14c	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e14e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e151	c8		iny				iny
.e152	a9 00		lda #$00			lda 	#0
.e154	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e157	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e15a	20 7a ed	jsr $ed7a			jsr 	CPRPrintInteger
.e15d					_RENoLineNumber:
.e15d	a9 0d		lda #$0d			lda 	#13
.e15f	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.e162	4c 58 ee	jmp $ee58			jmp 	WarmStart
.e165					CheckNextCharacter:
.e165	8d 98 20	sta $2098			sta 	Temp1 						; save character to check
.e168					_CNCLoop:
.e168	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next
.e16a	f0 0b		beq $e177			beq 	_CNCFail 					; end of line, so no character
.e16c	c8		iny				iny
.e16d	c9 20		cmp #$20			cmp 	#' ' 						; skip spaces
.e16f	f0 f7		beq $e168			beq 	_CNCLoop
.e171	cd 98 20	cmp $2098			cmp 	Temp1 						; fail if not what was wanted
.e174	d0 01		bne $e177			bne 	_CNCFail
.e176	60		rts				rts
.e177					_CNCFail:
.e177	20 29 e1	jsr $e129			jsr 	ReportError
>e17a	4d 49 53 53 49 4e 47 20				.text 	"MISSING TOKEN",$00
>e182	54 4f 4b 45 4e 00

;******  Return to file: basic.asm


;******  Processing file: general/data.asm

=$e188							currentPosData = *
>0020					zCurrentLine: 	.word 	?					; address of current line (offset word)
>0022					zBasicStack:	.word 	? 					; stack for BASIC.
>0024					zLowMemory:		.word	?					; next free space after program (arrays,vars etc.)
>0026					zTemp1:			.word 	?					; temporary vars
>0028					zTemp2:			.word 	?
>002a					zTargetAddr: 	.dword 	? 					; address of LHS of assignment, list pointer.
>2000					FixedVariables:	.fill 	27*4 				; address of 26 x 4 byte fixed variables @A-Z
>206c					Control 		.byte 	? 					; 0 = normal, 1 = tokenise, 2 = run program.
>206d					InputLine:		.fill 	EXTWidth+1 			; screen input buffer, cannot cross page.
>2096					HighMemory:		.word 	?					; highest memory location available (2 bytes)
>2098					Temp1:			.dword	?					; 4 byte temporary stores.
>209c					SignCount:		.byte 	? 					; count of signs in divide.
>209d					StringBufferPos:.byte 	? 					; next free slot in string buffer
>209e					RandomSeed 		.word 	? 					; Random Number
>20a0					xCursor 		.byte 	? 					; cursor position
>20a1					yCursor 		.byte 	?
>20a2									.align	256
.2100					TokeniseBuffer:
>2100									.fill 	256
.2200					StringBuffer:
>2200									.fill 	256
.2300					BasicProgram:

;******  Return to file: basic.asm


;******  Processing file: general/evaluate.asm

.e188					EvaluateSNError:
.e188	4c 19 e1	jmp $e119			jmp 	SyntaxError
.e18b					EvaluateMissingQuote:
.e18b	20 29 e1	jsr $e129			jsr 	ReportError
>e18e	4d 49 53 53 49 4e 47 20				.text 	"MISSING QUOTE",$00
>e196	51 55 4f 54 45 00
.e19c					EvaluateStringFull:
.e19c	20 29 e1	jsr $e129			jsr 	ReportError
>e19f	53 54 52 49 4e 47 20 42				.text 	"STRING BUFFER FULL",$00
>e1a7	55 46 46 45 52 20 46 55 4c 4c 00
.e1b2					EvaluateBadHex:
.e1b2	20 29 e1	jsr $e129			jsr 	ReportError
>e1b5	42 41 44 20 48 45 58 00				.text 	"BAD HEX",$00
.e1bd					EvaluateAtomCurrentLevel:
.e1bd	a9 07		lda #$07			lda 	#7
.e1bf	80 04		bra $e1c5			bra 	EvaluateAtPrecedenceLevel
.e1c1					EvaluateBase:
.e1c1	a2 00		ldx #$00			ldx 	#0 							; reset the stack
.e1c3					EvaluateBaseCurrentLevel:
.e1c3	a9 00		lda #$00			lda 	#0 							; current precedence is zero
.e1c5					EvaluateAtPrecedenceLevel:
.e1c5	48		pha				pha 								; save precedence level
.e1c6	a9 00		lda #$00			lda 	#0 							; zero the result.
.e1c8	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e1cb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e1ce	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e1d1	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e1d4					_EVALSkipSpace1:
.e1d4	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token, skipping over spaces.
.e1d6	f0 b0		beq $e188			beq 	EvaluateSNError 			; end of line, without token.
.e1d8	c8		iny				iny
.e1d9	c9 20		cmp #$20			cmp 	#32
.e1db	f0 f7		beq $e1d4			beq 	_EVALSkipSpace1
.e1dd	88		dey				dey 								; points at the token.
.e1de	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; is it opening quote ?
.e1e0	f0 14		beq $e1f6			beq 	_EVALString  				; if so load in a constant string
.e1e2	c9 82		cmp #$82			cmp 	#KW_HASH 					; is it a hash, e.g. hexadecimal.
.e1e4	f0 36		beq $e21c			beq 	_EVALHexadecimal
.e1e6	c9 30		cmp #$30			cmp 	#'0'						; is it in range 0-9
.e1e8	90 04		bcc $e1ee			bcc		_EVALGoKeywordVariable 		; yes, it's a keyword or variable.
.e1ea	c9 3a		cmp #$3a			cmp 	#'9'+1
.e1ec	90 03		bcc $e1f1			bcc 	_EVALDecimal
.e1ee					_EVALGoKeywordVariable:
.e1ee	4c 73 e2	jmp $e273			jmp 	_EVALKeywordVariable
.e1f1					_EVALDecimal:
.e1f1	20 d0 e2	jsr $e2d0			jsr 	EVALGetDecConstant 			; get decimal constant
.e1f4	80 34		bra $e22a			bra 	_EVALGotAtom 				; got atom.
.e1f6					_EVALString:
.e1f6	da		phx				phx 								; save X on stack
.e1f7	a9 22		lda #$22			lda 	#StringBuffer >> 8 			; set the address in the eval stack
.e1f9	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e1fc	ad 9d 20	lda $209d			lda 	StringBufferPos 			; X = Buffer Position.
.e1ff	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; that's the address of the new string
.e202	aa		tax				tax 								; put in X to build the string.
.e203	c8		iny				iny 								; skip over opening quote character
.e204					_EVALStringCopy:
.e204	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character.
.e206	c8		iny				iny
.e207	f0 82		beq $e18b			beq		EvaluateMissingQuote 		; if zero, then there was no closing quote.
.e209	9d 00 22	sta $2200,x			sta 	StringBuffer,x 				; copy into the buffer
.e20c	e8		inx				inx 								; and bump that pointer.
.e20d	f0 8d		beq $e19c			beq 	EvaluateStringFull 			; buffer is full.
.e20f	49 81		eor #$81			eor 	#KW_DQUOTE					; keep going if not closing quote.
.e211	d0 f1		bne $e204			bne 	_EVALStringCopy
.e213	8e 9d 20	stx $209d			stx 	StringBufferPos 			; this is the new next free slot.
.e216	9d ff 21	sta $21ff,x			sta 	StringBuffer-1,x 			; write the zero (EOS) hence EOR to end string.
.e219	fa		plx				plx 								; restore X
.e21a	80 0e		bra $e22a			bra 	_EVALGotAtom 				; got the atom.
.e21c					_EVALHexaDecimal
.e21c	c8		iny				iny 								; skip over the '#'
.e21d	5a		phy				phy 								; save Y
.e21e	20 3c e3	jsr $e33c			jsr 	EVALGetHexConstant 			; load in hexadecimal constant
.e221	8c 98 20	sty $2098			sty 	Temp1 						; has Y changed ?
.e224	68		pla				pla
.e225	cd 98 20	cmp $2098			cmp 	Temp1
.e228	f0 88		beq $e1b2			beq 	EvaluateBadHex 				; if not, error.
.e22a					_EVALGotAtom:
.e22a					_EVALGetOperator:
.e22a	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token skip spaces.
.e22c	c8		iny				iny 								; this should be binary operator
.e22d	c9 20		cmp #$20			cmp 	#$20
.e22f	f0 f9		beq $e22a			beq 	_EVALGetOperator
.e231	88		dey				dey
.e232	09 00		ora #$00			ora 	#0 							; to be a binary token must be -ve
.e234	10 3b		bpl $e271			bpl 	_EVALExitPullA 				; if +ve then exit now.
.e236	da		phx				phx 								; save X
.e237	aa		tax				tax 								; token in X
.e238	bd 65 e0	lda $e065,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e23b	8d 98 20	sta $2098			sta 	Temp1 						; save precedence in Temp1
.e23e	fa		plx				plx 								; restore X
.e23f	c9 08		cmp #$08			cmp 	#8 							; if type >= 8, e.g. not binary, then exit.
.e241	b0 2e		bcs $e271			bcs 	_EVALExitPullA
.e243	68		pla				pla 								; get and save precedence level.
.e244	48		pha				pha
.e245	cd 98 20	cmp $2098			cmp 	Temp1 						; compare operator precedence - keyword precedence level.
.e248	f0 02		beq $e24c			beq 	_EVALDoCalc					; equal, do it.
.e24a	b0 25		bcs $e271			bcs 	_EVALExitPullA				; too high, then exit.
.e24c					_EVALDoCalc:
.e24c	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token, save on stack and skip it.
.e24e	c8		iny				iny
.e24f	48		pha				pha
.e250	da		phx				phx
.e251	e8		inx				inx 								; work out right hand side.
.e252	e8		inx				inx
.e253	e8		inx				inx
.e254	e8		inx				inx
.e255	ad 98 20	lda $2098			lda 	Temp1 						; get current operator precedence level.
.e258	1a		inc a				inc 	a 							; so work it out at the next level.
.e259	20 c5 e1	jsr $e1c5			jsr 	EvaluateAtPrecedenceLevel 	; work out the RHS.
.e25c	fa		plx				plx 								; fix X back.
.e25d	68		pla				pla 								; get keyword
.e25e					_EVALExecuteA:
.e25e	0a		asl a				asl 	a 							; shift left, drop bit 7
.e25f	8d 99 20	sta $2099			sta 	Temp1+1						; save in Temp1.1
.e262	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e264	8d 9a 20	sta $209a			sta 	Temp1+2 					; set at Temp1.2
.e267	a9 6c		lda #$6c			lda 	#$6C 						; make JMP (xxxx)
.e269	8d 98 20	sta $2098			sta 	Temp1+0
.e26c	20 98 20	jsr $2098			jsr 	Temp1 						; call that routine.
.e26f	80 b9		bra $e22a			bra 	_EVALGotAtom 				; and loop back again.
.e271					_EVALExitPullA:
.e271	68		pla				pla 								; restore precedence.
.e272	60		rts				rts
.e273					_EVALKeywordVariable:
.e273	09 00		ora #$00			ora 	#0 							; check bit 7
.e275	10 0f		bpl $e286			bpl 	_EVALNotUnaryFunction 		; must be set for unary function
.e277	da		phx				phx
.e278	aa		tax				tax
.e279	bd 65 e0	lda $e065,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e27c	fa		plx				plx
.e27d	c9 09		cmp #$09			cmp 	#KTYPE_UNARYFN 				; is it a unary function
.e27f	d0 05		bne $e286			bne 	_EVALNotUnaryFunction
.e281	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token back
.e283	c8		iny				iny 								; consume it
.e284	80 d8		bra $e25e			bra 	_EVALExecuteA 				; execute TOS.
.e286					_EVALNotUnaryFunction:
.e286	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e288	10 3d		bpl $e2c7			bpl 	_EVALCheckVariable 			; if ASCII check variable
.e28a	c9 8b		cmp #$8b			cmp 	#KW_MINUS 					; check negation
.e28c	f0 0f		beq $e29d			beq 	_EVALUnaryNegation
.e28e	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; check left bracket.
.e290	d0 14		bne $e2a6			bne		_EVALCheckUnaryOperator
.e292	c8		iny				iny 								; skip left bracket.
.e293	20 c3 e1	jsr $e1c3			jsr 	EvaluateBaseCurrentLevel 	; calculate what's in the bracket.
.e296	a9 88		lda #$88			lda 	#KW_RPAREN 					; check right bracket.
.e298	20 65 e1	jsr $e165			jsr 	CheckNextCharacter 			; check next character, after spaces.
.e29b	80 8d		bra $e22a			bra 	_EVALGotAtom
.e29d					_EVALUnaryNegation:
.e29d	c8		iny				iny 								; skip over the - sign.
.e29e	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel 	; calculate what's being negatived (...)
.e2a1	20 d5 e8	jsr $e8d5			jsr 	BFUNC_NegateAlways 			; negate it.
.e2a4	80 84		bra $e22a			bra 	_EVALGotAtom
.e2a6					_EVALCheckUnaryOperator:
.e2a6	48		pha				pha 								; save indirection operator.
.e2a7	c8		iny				iny 								; skip over the operator
.e2a8	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel 	; calculate the address.
.e2ab	68		pla				pla 								; restore the operator
.e2ac	c9 83		cmp #$83			cmp 	#KW_DOLLAR					; $ is for visual typing, it does nothing
.e2ae	f0 0e		beq $e2be			beq 	_EVALGoGotAtom
.e2b0	c9 95		cmp #$95			cmp 	#KW_QUESTION				; byte indirection
.e2b2	f0 07		beq $e2bb			beq 	_EVALByteRead
.e2b4	c9 80		cmp #$80			cmp 	#KW_PLING					; word indirection
.e2b6	f0 09		beq $e2c1			beq 	_EVALWordRead
.e2b8	4c 19 e1	jmp $e119			jmp 	SyntaxError 				; give up.
.e2bb					_EVALByteRead:
.e2bb	20 7b e3	jsr $e37b			jsr 	EVALReadByteIndirect
.e2be					_EVALGoGotAtom:
.e2be	4c 2a e2	jmp $e22a			jmp 	_EVALGotAtom
.e2c1					_EVALWordRead:
.e2c1	20 a4 e3	jsr $e3a4			jsr 	EVALReadWordIndirect
.e2c4	4c 2a e2	jmp $e22a			jmp 	_EVALGotAtom
.e2c7					_EVALCheckVariable:
.e2c7	20 d4 e3	jsr $e3d4			jsr 	VARReference 				; get variable reference to ZTemp1
.e2ca	20 b8 e3	jsr $e3b8			jsr 	EVALReadWordIndirectZTemp	; read that address into current stack level.
.e2cd	4c 2a e2	jmp $e22a			jmp 	_EVALGotAtom 				; and go round.
.e2d0					EVALGetDecConstant:
.e2d0	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e2d2	c9 30		cmp #$30			cmp 	#'0'						; check in range 0-9.
.e2d4	90 04		bcc $e2da			bcc 	_EVGDExit
.e2d6	c9 3a		cmp #$3a			cmp 	#'9'+1
.e2d8	90 01		bcc $e2db			bcc 	_EVGDValue 					; if so has legal value
.e2da					_EVGDExit:
.e2da	60		rts				rts
.e2db					_EVGDValue:
.e2db	48		pha				pha 								; save value, Y on stack
.e2dc	5a		phy				phy
.e2dd	a0 03		ldy #$03			ldy 	#3 							; 3 shifts.
.e2df	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; push x1 value on stack.
.e2e2	48		pha				pha
.e2e3	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e2e6	48		pha				pha
.e2e7	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e2ea	48		pha				pha
.e2eb	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e2ee	48		pha				pha
.e2ef					_EVGDLoop:
.e2ef	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; rotate left once.
.e2f2	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e2f5	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e2f8	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e2fb	c0 02		cpy #$02			cpy 	#2 							; if done it twice now
.e2fd	d0 1d		bne $e31c			bne 	_EVGDNoAdd
.e2ff	18		clc				clc 								; then it will be x 4, adding +1 => x 5
.e300	68		pla				pla
.e301	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e304	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e307	68		pla				pla
.e308	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e30b	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e30e	68		pla				pla
.e30f	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e312	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e315	68		pla				pla
.e316	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e319	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e31c					_EVGDNoAdd:
.e31c	88		dey				dey
.e31d	d0 d0		bne $e2ef			bne 	_EVGDLoop
.e31f	7a		ply				ply 								; restore YA
.e320	68		pla				pla
.e321	c8		iny				iny 								; next character
.e322	29 0f		and #$0f			and 	#15 						; force into range and put in.
.e324	18		clc				clc
.e325	7d 00 04	adc $0400,x			adc 	evalStack+0,x 				; add digit in
.e328	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e32b	90 a3		bcc $e2d0			bcc 	EVALGetDecConstant 			; propogate constant through
.e32d	fe 01 04	inc $0401,x			inc 	evalStack+1,x
.e330	d0 9e		bne $e2d0			bne 	EVALGetDecConstant
.e332	fe 02 04	inc $0402,x			inc 	evalStack+2,x
.e335	d0 99		bne $e2d0			bne 	EVALGetDecConstant
.e337	fe 03 04	inc $0403,x			inc 	evalStack+3,x
.e33a	80 94		bra $e2d0			bra 	EVALGetDecConstant 			; go back and try again.
.e33c					EVALGetHexConstant:
.e33c	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e33e	20 70 e3	jsr $e370			jsr 	EVALToUpper 				; make upper case
.e341	38		sec				sec
.e342	e9 30		sbc #$30			sbc 	#"0" 						; range 0-9
.e344	90 0a		bcc $e350			bcc 	_EVGHExit 					; exit if CC
.e346	c9 0a		cmp #$0a			cmp 	#9+1 						; if < 9 have a legal value.
.e348	90 07		bcc $e351			bcc 	_EVGHValue
.e34a	e9 07		sbc #$07			sbc 	#7 							; now in range 10-15 if okay.
.e34c	c9 10		cmp #$10			cmp 	#15+1
.e34e	90 01		bcc $e351			bcc 	_EVGHValue
.e350					_EVGHExit:
.e350	60		rts				rts
.e351					_EVGHValue:
.e351	5a		phy				phy 								; save Y and new digit.
.e352	48		pha				pha
.e353	a0 04		ldy #$04			ldy 	#4 							; rotate left 4
.e355					_EVGHRotate:
.e355	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e358	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e35b	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e35e	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e361	88		dey				dey
.e362	d0 f1		bne $e355			bne 	_EVGHRotate
.e364	68		pla				pla 								; restore digit and X
.e365	7a		ply				ply
.e366	c8		iny				iny 								; next character
.e367	18		clc				clc
.e368	1d 00 04	ora $0400,x			ora 	evalStack+0,x 				; add digit in
.e36b	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e36e	80 cc		bra $e33c			bra 	EVALGetHexConstant 			; go back and try again.
.e370					EVALToUpper:
.e370	c9 61		cmp #$61			cmp 	#'a'
.e372	90 06		bcc $e37a			bcc 	_EVTUExit
.e374	c9 7b		cmp #$7b			cmp 	#'z'+1
.e376	b0 02		bcs $e37a			bcs 	_EVTUExit
.e378	49 20		eor #$20			eor 	#32
.e37a					_EVTUExit:
.e37a	60		rts				rts
.e37b					EVALReadByteIndirect:
.e37b	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e37e	85 26		sta $26				sta 	zTemp1
.e380	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e383	85 27		sta $27				sta 	zTemp1+1
.e385	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e388	85 28		sta $28				sta 	zTemp1+2
.e38a	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e38d	85 29		sta $29				sta 	zTemp1+3
.e38f	5a		phy				phy
.e390	a0 00		ldy #$00			ldy 	#0 							; read byte
.e392	b1 26		lda ($26),y			lda 	(zTemp1),y
.e394	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e397	7a		ply				ply
.e398	a9 00		lda #$00			lda 	#0 							; zero upper three bytes
.e39a	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e39d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e3a0	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e3a3	60		rts				rts
.e3a4					EVALReadWordIndirect:
.e3a4	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e3a7	85 26		sta $26				sta 	zTemp1
.e3a9	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e3ac	85 27		sta $27				sta 	zTemp1+1
.e3ae	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e3b1	85 28		sta $28				sta 	zTemp1+2
.e3b3	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e3b6	85 29		sta $29				sta 	zTemp1+3
.e3b8					EVALReadWordIndirectZTemp:
.e3b8	5a		phy				phy
.e3b9	a0 00		ldy #$00			ldy 	#0 							; read word
.e3bb	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3bd	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3c0	c8		iny				iny
.e3c1	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3c3	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e3c6	c8		iny				iny
.e3c7	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3c9	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e3cc	c8		iny				iny
.e3cd	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3cf	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e3d2	7a		ply				ply
.e3d3	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/variable.asm

.e3d4					VARReference:
.e3d4	38		sec				sec 								; check range @-Z there
.e3d5	c9 40		cmp #$40			cmp 	#'@'
.e3d7	90 04		bcc $e3dd			bcc 	_VARRError
.e3d9	c9 5b		cmp #$5b			cmp 	#'Z'+1 						; there are 27 variables @ and A-Z
.e3db	90 03		bcc $e3e0			bcc 	_VARROkay
.e3dd					_VARRError:
.e3dd	4c 19 e1	jmp $e119			jmp		SyntaxError
.e3e0					_VARROkay:
.e3e0	c8		iny				iny 								; consume the variable.
.e3e1	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it @@ AA BB CC ?
.e3e3	f0 1b		beq $e400			beq 	_VARArrayAccess 			; array access AA0 AA1 etc.
.e3e5	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get that second character
.e3e7	88		dey				dey 								; point back to the first character
.e3e8	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; if ( then it is A(x) format.
.e3ea	f0 14		beq $e400			beq 	_VARArrayAccess
.e3ec	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; reget variable.
.e3ee	c8		iny				iny
.e3ef	29 1f		and #$1f			and		#31 						; mask out
.e3f1	0a		asl a				asl 	a 							; x 4
.e3f2	0a		asl a				asl 	a
.e3f3	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e3f5	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e3f7	85 27		sta $27				sta 	zTemp1+1
.e3f9	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.e3fb	85 28		sta $28				sta 	zTemp1+2
.e3fd	85 29		sta $29				sta 	zTemp1+3 					; return with address set.
.e3ff	60		rts				rts
.e400					_VARArrayAccess:
.e400	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get variable
.e402	c8		iny				iny
.e403	29 1f		and #$1f			and 	#31 						; mask it off
.e405	48		pha				pha 								; save on the stack.
.e406	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel 	; calculate the index.
.e409	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; multiply by four.
.e40c	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e40f	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e412	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e415	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e418	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e41b	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e41e	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e421	68		pla				pla 								; put address in zTemp1
.e422	0a		asl a				asl 	a 							; x 4
.e423	0a		asl a				asl 	a
.e424	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e426	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e428	85 27		sta $27				sta 	zTemp1+1
.e42a	5a		phy				phy
.e42b	a0 00		ldy #$00			ldy 	#0 							; calculate	evalStack+0,3 + (zTemp)
.e42d	b1 26		lda ($26),y			lda 	(zTemp1),y
.e42f	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e432	48		pha				pha 								; save first result as we need the indirection.
.e433	c8		iny				iny 								; 2nd byte
.e434	b1 26		lda ($26),y			lda 	(zTemp1),y
.e436	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e439	85 27		sta $27				sta 	zTemp1+1
.e43b	68		pla				pla 								; save the low byte.
.e43c	85 26		sta $26				sta 	zTemp1+0
.e43e	a9 00		lda #$00			lda 	#0
.e440	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e443	85 28		sta $28				sta 	zTemp1+2
.e445	a9 00		lda #$00			lda 	#0
.e447	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e44a	85 29		sta $29				sta 	zTemp1+3
.e44c	7a		ply				ply 								; restore Y, address setup
.e44d	60		rts				rts
.e44e	80 fe		bra $e44e	x1:		bra 	x1

;******  Return to file: basic.asm


;******  Processing file: general/screenio.asm

.e450					SIOInitialise:
.e450	20 82 a0	jsr $a082			jsr 	EXTReset 					; reset video
.e453					SIOClearScreen:
.e453	20 38 a0	jsr $a038			jsr 	EXTClearScreen 				; clear screen
.e456					SIOHomeCursor:
.e456	48		pha				pha 								; home cursor
.e457	a9 00		lda #$00			lda 	#0
.e459	8d a0 20	sta $20a0			sta 	xCursor
.e45c	8d a1 20	sta $20a1			sta 	yCursor
.e45f	68		pla				pla
.e460	60		rts				rts
.e461					SIOPrintString:
.e461	48		pha				pha 								; save registers
.e462	da		phx				phx
.e463	5a		phy				phy
.e464	86 28		stx $28				stx 	zTemp2 						; set up indirect pointer
.e466	84 29		sty $29				sty 	zTemp2+1
.e468	a0 00		ldy #$00			ldy 	#0
.e46a					_SIOPSLoop:
.e46a	b1 28		lda ($28),y			lda 	(zTemp2),y 					; read next, exit if 0
.e46c	f0 1c		beq $e48a			beq 	_SIOPSExit
.e46e	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter 			; print and bump
.e471	c8		iny				iny
.e472	d0 f6		bne $e46a			bne 	_SIOPSLoop
.e474	20 29 e1	jsr $e129			jsr 	ReportError
>e477	42 41 44 20 53 54 52 49				.text 	"BAD STRING PRINTED",$00
>e47f	4e 47 20 50 52 49 4e 54 45 44 00
.e48a					_SIOPSExit:
.e48a	7a		ply				ply 								; restore and exit.
.e48b	fa		plx				plx
.e48c	68		pla				pla
.e48d	60		rts				rts
.e48e					SIOPrintCharacter:
.e48e	48		pha				pha 								; save AXY
.e48f	da		phx				phx
.e490	5a		phy				phy
.e491	c9 0d		cmp #$0d			cmp 	#13 						; CR ?
.e493	f0 12		beq $e4a7			beq 	_SIOPReturn
.e495	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor 				; load cursor position in.
.e498	29 3f		and #$3f			and 	#$3F 						; PETSCII conversion
.e49a	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen 				; write character out.
.e49d	ee a0 20	inc $20a0			inc 	xCursor 					; move right
.e4a0	ad a0 20	lda $20a0			lda 	xCursor 					; reached the RHS
.e4a3	c9 28		cmp #$28			cmp 	#EXTWidth
.e4a5	90 15		bcc $e4bc			bcc 	_SIOPExit
.e4a7					_SIOPReturn:
.e4a7	a9 00		lda #$00			lda 	#0 							; zero x
.e4a9	8d a0 20	sta $20a0			sta 	xCursor
.e4ac	ee a1 20	inc $20a1			inc 	yCursor 					; go down
.e4af	ad a1 20	lda $20a1			lda 	yCursor
.e4b2	c9 19		cmp #$19			cmp 	#EXTHeight 					; off the bottom ?
.e4b4	90 06		bcc $e4bc			bcc 	_SIOPExit
.e4b6	20 50 a0	jsr $a050			jsr 	EXTScrollDisplay 			; scroll display up
.e4b9	ce a1 20	dec $20a1			dec 	yCursor 					; cursor on bottom line.
.e4bc					_SIOPExit:
.e4bc	7a		ply				ply 								; restore and exit.
.e4bd	fa		plx				plx
.e4be	68		pla				pla
.e4bf	60		rts				rts
.e4c0					SIOGetKey:
.e4c0	20 0c a0	jsr $a00c			jsr 	EXTReadKeyPort 				; wait for a key
.e4c3	f0 fb		beq $e4c0			beq 	SIOGetKey
.e4c5	20 70 e3	jsr $e370			jsr 	EVALToUpper 				; capitalise it.
.e4c8	4c 12 a0	jmp $a012			jmp 	EXTRemoveKeyPressed 		; remove from the queue.
.e4cb					SIOReadLine:
.e4cb	48		pha				pha 								; save registers
.e4cc	da		phx				phx
.e4cd	5a		phy				phy
.e4ce					_SIORLoop:
.e4ce	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor 				; cursor in XY
.e4d1	20 1e a0	jsr $a01e			jsr 	EXTReadScreen 				; read the display.
.e4d4	48		pha				pha 								; save on stack.
.e4d5	a9 66		lda #$66			lda 	#102 						; write cursor out
.e4d7	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e4da	20 c0 e4	jsr $e4c0			jsr 	SIOGetKey
.e4dd	aa		tax				tax 								; save in X
.e4de	68		pla				pla 								; old character
.e4df	da		phx				phx 								; save key pressed
.e4e0	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor 				; cursor in XY
.e4e3	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e4e6	68		pla				pla
.e4e7	c9 01		cmp #$01			cmp 	#"A"-64 					; control characters
.e4e9	f0 29		beq $e514			beq 	_SIOCursorLeft
.e4eb	c9 13		cmp #$13			cmp 	#"S"-64
.e4ed	f0 49		beq $e538			beq 	_SIOCursorDown
.e4ef	c9 04		cmp #$04			cmp 	#"D"-64
.e4f1	f0 2d		beq $e520			beq 	_SIOCursorRight
.e4f3	c9 17		cmp #$17			cmp 	#"W"-64
.e4f5	f0 35		beq $e52c			beq 	_SIOCursorUp
.e4f7	c9 1a		cmp #$1a			cmp 	#"Z"-64
.e4f9	f0 49		beq $e544			beq 	_SIOClearScreen
.e4fb	c9 08		cmp #$08			cmp 	#"H"-64
.e4fd	f0 4a		beq $e549			beq 	_SIOBackspace
.e4ff	c9 0d		cmp #$0d			cmp 	#13 						; CR
.e501	f0 0e		beq $e511			beq 	_SIOGoReturn
.e503	c9 20		cmp #$20			cmp 	#32 						; any control
.e505	90 c7		bcc $e4ce			bcc 	_SIORLoop
.e507	48		pha				pha
.e508	20 89 e5	jsr $e589			jsr 	_SIOInsert 					; insert a space for new character
.e50b	68		pla				pla
.e50c	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter 			; print character in A
.e50f	80 bd		bra $e4ce			bra 	_SIORLoop
.e511					_SIOGoReturn:
.e511	4c b4 e5	jmp $e5b4			jmp 	_SIOReturn
.e514					_SIOCursorLeft:
.e514	ce a0 20	dec $20a0			dec 	xCursor
.e517	10 b5		bpl $e4ce			bpl 	_SIORLoop
.e519	a9 27		lda #$27			lda 	#EXTWidth-1
.e51b					_SIOWXLoop:
.e51b	8d a0 20	sta $20a0			sta 	xCursor
.e51e	80 ae		bra $e4ce			bra 	_SIORLoop
.e520					_SIOCursorRight:
.e520	ee a0 20	inc $20a0			inc 	xCursor
.e523	ad a0 20	lda $20a0			lda 	xCursor
.e526	49 28		eor #$28			eor 	#EXTWidth
.e528	d0 a4		bne $e4ce			bne 	_SIORLoop
.e52a	80 ef		bra $e51b			bra 	_SIOWXLoop
.e52c					_SIOCursorUp:
.e52c	ce a1 20	dec $20a1			dec 	yCursor
.e52f	10 9d		bpl $e4ce			bpl 	_SIORLoop
.e531	a9 18		lda #$18			lda 	#EXTHeight-1
.e533					_SIOWYLoop:
.e533	8d a1 20	sta $20a1			sta 	yCursor
.e536	80 96		bra $e4ce			bra 	_SIORLoop
.e538					_SIOCursorDown:
.e538	ee a1 20	inc $20a1			inc 	yCursor
.e53b	ad a1 20	lda $20a1			lda 	yCursor
.e53e	49 19		eor #$19			eor 	#EXTHeight
.e540	d0 8c		bne $e4ce			bne 	_SIORLoop
.e542	80 ef		bra $e533			bra 	_SIOWYLoop
.e544					_SIOClearScreen:
.e544	20 53 e4	jsr $e453			jsr 	SIOClearScreen
.e547	80 85		bra $e4ce			bra 	_SIORLoop
.e549					_SIOBackspace:
.e549	ad a0 20	lda $20a0			lda 	xCursor 					; backspace possible ?
.e54c	f0 80		beq $e4ce			beq 	_SIORLoop 					; start of line, no.
.e54e	48		pha				pha 								; save position.
.e54f	c9 27		cmp #$27			cmp 	#EXTWidth-1 				; not required
.e551	f0 1c		beq $e56f			beq 	_SIONoShift
.e553					_SIOShift2:
.e553	ee a0 20	inc $20a0			inc 	xCursor 					; copy character backward
.e556	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor
.e559	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e55c	ce a0 20	dec $20a0			dec 	xCursor
.e55f	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor
.e562	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e565	ee a0 20	inc $20a0			inc 	xCursor
.e568	ad a0 20	lda $20a0			lda 	xCursor
.e56b	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e56d	d0 e4		bne $e553			bne 	_SIOShift2
.e56f					_SIONoShift:
.e56f	a9 27		lda #$27			lda 	#EXTWidth-1 				; space on far end.
.e571	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor
.e574	a9 20		lda #$20			lda 	#32
.e576	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e579	68		pla				pla 								; restore cursor, back one.
.e57a	3a		dec a				dec 	a
.e57b	8d a0 20	sta $20a0			sta 	xCursor
.e57e	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor 				; overwrite
.e581	a9 20		lda #$20			lda 	#32
.e583	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e586	4c ce e4	jmp $e4ce			jmp	 	_SIORLoop
.e589					_SIOInsert:
.e589	ad a0 20	lda $20a0			lda 	xCursor 					; at far right, nothing to do.
.e58c	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e58e	f0 23		beq $e5b3			beq 	_SIOIExit
.e590	85 28		sta $28				sta 	zTemp2 						; save in temporary workspace.
.e592	a9 27		lda #$27			lda 	#EXTWidth-1 				; cursor at far right.
.e594	8d a0 20	sta $20a0			sta 	xCursor
.e597					_SIOShift:
.e597	ce a0 20	dec $20a0			dec 	xCursor 					; copy character forward
.e59a	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor
.e59d	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e5a0	ee a0 20	inc $20a0			inc 	xCursor
.e5a3	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor
.e5a6	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e5a9	ce a0 20	dec $20a0			dec 	xCursor
.e5ac	ad a0 20	lda $20a0			lda 	xCursor						; until shifted line to this point.
.e5af	c5 28		cmp $28				cmp 	zTemp2
.e5b1	d0 e4		bne $e597			bne 	_SIOShift
.e5b3					_SIOIExit:
.e5b3	60		rts				rts
.e5b4					_SIOReturn:
.e5b4	a9 00		lda #$00			lda 	#0 							; copy line in from screen.
.e5b6	8d a0 20	sta $20a0			sta 	xCursor
.e5b9					_SIOCopy:
.e5b9	20 ee e5	jsr $e5ee			jsr 	SIOLoadCursor
.e5bc	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e5bf	49 20		eor #$20			eor 	#$20
.e5c1	18		clc				clc
.e5c2	69 20		adc #$20			adc 	#$20
.e5c4	ae a0 20	ldx $20a0			ldx 	xCursor
.e5c7	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e5ca	ee a0 20	inc $20a0			inc 	xCursor
.e5cd	ad a0 20	lda $20a0			lda 	xCursor
.e5d0	c9 28		cmp #$28			cmp 	#EXTWidth
.e5d2	d0 e5		bne $e5b9			bne 	_SIOCopy
.e5d4	aa		tax				tax 								; X contains width
.e5d5					_SIOStrip:
.e5d5	ca		dex				dex									; back one
.e5d6	30 07		bmi $e5df			bmi		_SIOFound 					; if -ve gone too far
.e5d8	bd 6d 20	lda $206d,x			lda 	InputLine,x 				; is there a space here
.e5db	c9 20		cmp #$20			cmp 	#' '
.e5dd	f0 f6		beq $e5d5			beq 	_SIOStrip
.e5df					_SIOFound:
.e5df	e8		inx				inx
.e5e0	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.e5e2	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e5e5	a9 0d		lda #$0d			lda 	#13 						; print a CR and exit
.e5e7	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.e5ea	7a		ply				ply
.e5eb	fa		plx				plx
.e5ec	68		pla				pla
.e5ed	60		rts				rts
.e5ee					SIOLoadCursor:
.e5ee	48		pha				pha
.e5ef	ad a1 20	lda $20a1			lda 	yCursor  					; Y Position
.e5f2	0a		asl a				asl 	a 							; x 2 	(80)
.e5f3	0a		asl a				asl 	a 							; x 2 	(160)
.e5f4	6d a1 20	adc $20a1			adc 	yCursor 					; x 5 	(200) (CC)
.e5f7	85 26		sta $26				sta 	zTemp1
.e5f9	a9 00		lda #$00			lda 	#0
.e5fb	85 27		sta $27				sta 	zTemp1+1
.e5fd	06 26		asl $26				asl 	zTemp1						; x 10
.e5ff	26 27		rol $27				rol 	zTemp1+1
.e601	06 26		asl $26				asl 	zTemp1						; x 20
.e603	26 27		rol $27				rol 	zTemp1+1
.e605	06 26		asl $26				asl 	zTemp1						; x 40
.e607	26 27		rol $27				rol 	zTemp1+1 					; (CC)
.e609	a5 26		lda $26				lda 	zTemp1 						; add X
.e60b	6d a0 20	adc $20a0			adc 	xCursor
.e60e	aa		tax				tax
.e60f	a5 27		lda $27				lda 	zTemp1+1
.e611	69 00		adc #$00			adc 	#0
.e613	a8		tay				tay
.e614	68		pla				pla 								; restore and exit
.e615	60		rts				rts
.e616					SIOPrintHex:
.e616	48		pha				pha
.e617	48		pha				pha
.e618	a9 20		lda #$20			lda 	#32
.e61a	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.e61d	68		pla				pla
.e61e	48		pha				pha
.e61f	4a		lsr a				lsr 	a
.e620	4a		lsr a				lsr 	a
.e621	4a		lsr a				lsr 	a
.e622	4a		lsr a				lsr 	a
.e623	20 2c e6	jsr $e62c			jsr 	_SIOPHex
.e626	68		pla				pla
.e627	20 2c e6	jsr $e62c			jsr 	_SIOPHex
.e62a	68		pla				pla
.e62b	60		rts				rts
.e62c					_SIOPHex:
.e62c	29 0f		and #$0f			and 	#15
.e62e	c9 0a		cmp #$0a			cmp 	#10
.e630	90 02		bcc $e634			bcc 	_SIOPHex2
.e632	69 06		adc #$06			adc 	#6
.e634					_SIOPHex2:
.e634	69 30		adc #$30			adc 	#48
.e636	4c 8e e4	jmp $e48e			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: general/tokeniser.asm

.e639					TokeniseString:
.e639	a0 00		ldy #$00			ldy 	#0							; source
.e63b	a2 00		ldx #$00			ldx 	#0 							; target
.e63d					_TokLoop:
.e63d	b1 26		lda ($26),y			lda 	(zTemp1),y 					; get first
.e63f	f0 5d		beq $e69e			beq 	_TokExit 					; End, exit.
.e641	c9 20		cmp #$20			cmp 	#32 						; if space, copy it
.e643	f0 35		beq $e67a			beq 	_TokCopy1
.e645	c9 22		cmp #$22			cmp 	#'"' 						; if string, copy that in.
.e647	f0 3a		beq $e683			beq 	_TokCopyString
.e649	c9 30		cmp #$30			cmp 	#"0" 						; punctuation, search for it.
.e64b	90 22		bcc $e66f			bcc 	_TokPunctuation
.e64d	c9 3a		cmp #$3a			cmp 	#"9"+1 						; digits are just copied over.
.e64f	90 29		bcc $e67a			bcc 	_TokCopy1
.e651	c9 41		cmp #$41			cmp 	#"A"						; more punctuation
.e653	90 1a		bcc $e66f			bcc 	_TokPunctuation
.e655	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; and more punctuation
.e657	b0 16		bcs $e66f			bcs 	_TokPunctuation
.e659					_TokWord:
.e659	20 a4 e6	jsr $e6a4			jsr 	TokeniseSearch 				; search for tokenised word.
.e65c	b0 16		bcs $e674			bcs 	_TokFound 					; if successful, copy it out.
.e65e					_TokSkip:
.e65e	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy all A-Z as can't start token in mid word.
.e660	c9 41		cmp #$41			cmp 	#"A"
.e662	90 d9		bcc $e63d			bcc 	_TokLoop
.e664	c9 5b		cmp #$5b			cmp 	#"Z"+1
.e666	b0 d5		bcs $e63d			bcs 	_TokLoop
.e668	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e66b	e8		inx				inx
.e66c	c8		iny				iny
.e66d	80 ef		bra $e65e			bra 	_TokSkip
.e66f					_TokPunctuation:
.e66f	20 a4 e6	jsr $e6a4			jsr 	TokeniseSearch 				; find it.
.e672	90 06		bcc $e67a			bcc 	_TokCopy1 					; if found, just copy 1 character
.e674					_TokFound:
.e674	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; save in tokenise buffer.
.e677	e8		inx				inx 								; advance target ; source is already advanced.
.e678	80 c3		bra $e63d			bra 	_TokLoop 					; do the next character.
.e67a					_TokCopy1:
.e67a	b1 26		lda ($26),y			lda 	(zTemp1),y
.e67c	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e67f	e8		inx				inx
.e680	c8		iny				iny
.e681	80 ba		bra $e63d			bra 	_TokLoop
.e683					_TokCopyString:
.e683	a9 81		lda #$81			lda 	#KW_DQUOTE 					; output double quote token
.e685	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e688	e8		inx				inx 								; skip buffer and first quote.
.e689	c8		iny				iny
.e68a					_TokCSLoop:
.e68a	b1 26		lda ($26),y			lda 	(zTemp1),y 					; get next character
.e68c	f0 10		beq $e69e			beq 	_TokExit 					; if EOL, then you have a mismatch, but we exit.
.e68e	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; write to buffer
.e691	e8		inx				inx 								; advance both.
.e692	c8		iny				iny
.e693	c9 22		cmp #$22			cmp 	#'"'						; keep going till other quote found.
.e695	d0 f3		bne $e68a			bne 	_TokCSLoop
.e697	a9 81		lda #$81			lda 	#KW_DQUOTE 					; add the trailing quote token, overwriting the
.e699	9d ff 20	sta $20ff,x			sta 	TokeniseBuffer-1,x 			; " character that's just been copied
.e69c	80 9f		bra $e63d			bra 	_TokLoop
.e69e					_TokExit:
.e69e	a9 00		lda #$00			lda 	#0 							; mark the end of the tokenise buffer.
.e6a0	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6a3	60		rts				rts
.e6a4					TokeniseSearch:
.e6a4	48		pha				pha 								; save AXY
.e6a5	da		phx				phx
.e6a6	5a		phy				phy
.e6a7	a9 80		lda #$80			lda 	#128 						; zTemp2 keeps track of the token #
.e6a9	85 28		sta $28				sta 	zTemp2
.e6ab	a2 00		ldx #$00			ldx 	#0 							; index into TokenText table.
.e6ad	bd 68 e0	lda $e068,x	_TSNext:lda 	TokenText,x 				; get the first token character
.e6b0	29 7f		and #$7f			and 	#$7F 						; bit 7 marks the end.
.e6b2	d1 26		cmp ($26),y			cmp 	(zTemp1),y 					; do the characters match.
.e6b4	f0 13		beq $e6c9			beq 	_TSTryFullMatch 			; if so, try the full match.
.e6b6					_TSGotoNext:
.e6b6	bd 68 e0	lda $e068,x			lda 	TokenText,x 				; read it
.e6b9	e8		inx				inx 								; bump index
.e6ba	0a		asl a				asl 	a 							; shift into C
.e6bb	90 f9		bcc $e6b6			bcc 	_TSGotoNext 				; keep going until read the end character
.e6bd	e6 28		inc $28				inc 	zTemp2 						; bump the current token pointer.
.e6bf	bd 68 e0	lda $e068,x			lda 	TokenText,x 				; look at the first character of the next token
.e6c2	d0 e9		bne $e6ad			bne 	_TSNext 					; if non-zero, go to the next.
.e6c4					_TSFail:
.e6c4	7a		ply				ply 								; fail.
.e6c5	fa		plx				plx
.e6c6	68		pla				pla
.e6c7	18		clc				clc 				 				; return with carry clear.
.e6c8	60		rts				rts
.e6c9					_TSTryFullMatch:
.e6c9	da		phx				phx									; save X and Y.
.e6ca	5a		phy				phy
.e6cb					_TSFullMatch:
.e6cb	bd 68 e0	lda $e068,x			lda 	TokenText,x 				; compare the 7 bits.
.e6ce	29 7f		and #$7f			and 	#$7F
.e6d0	d1 26		cmp ($26),y			cmp 	(zTemp1),y
.e6d2	d0 15		bne $e6e9			bne 	_TSFullFail 				; different, this one doesn't match.
.e6d4	bd 68 e0	lda $e068,x			lda 	TokenText,x
.e6d7	e8		inx				inx 								; advance to next character
.e6d8	c8		iny				iny
.e6d9	0a		asl a				asl 	a 							; bit 7 of token text in C
.e6da	90 ef		bcc $e6cb			bcc 	_TSFullMatch
.e6dc	84 29		sty $29				sty 	zTemp2+1 					; save the Y after last
.e6de	68		pla				pla 								; so we don't restore Y
.e6df	68		pla				pla 								; or X from the full test.
.e6e0	7a		ply				ply 								; restore original Y and X and A
.e6e1	fa		plx				plx
.e6e2	68		pla				pla
.e6e3	a5 28		lda $28				lda 	zTemp2 						; and return token ID in A
.e6e5	a4 29		ldy $29				ldy 	zTemp2+1 					; Y after the tokenised text.
.e6e7	38		sec				sec 								; with carry set.
.e6e8	60		rts				rts
.e6e9					_TSFullFail:
.e6e9	7a		ply				ply 								; restore Y and X
.e6ea	fa		plx				plx
.e6eb	80 c9		bra $e6b6			bra 	_TSGotoNext 				; and go to the next token to test.
.e6ed					TokeniseTest:
.e6ed	a9 f9		lda #$f9			lda 	#TTString & $FF
.e6ef	85 26		sta $26				sta 	zTemp1
.e6f1	a9 e6		lda #$e6			lda 	#TTString >> 8
.e6f3	85 27		sta $27				sta 	zTemp1+1
.e6f5	20 39 e6	jsr $e639			jsr 	TokeniseString
.e6f8	ea		nop				nop
.e6f9					TTString:
>e6f9	20 41 42 43 44 20 34 31				.text 	' ABCD 41$"LENA"5LENA',0 			; 4 1 $[T] "LENA" 5 LEN[T] A
>e701	24 22 4c 45 4e 41 22 35 4c 45 4e 41 00

;******  Return to file: basic.asm


;******  Processing file: binary/arithmetic.asm

.e70e					BFUNC_Add:
.e70e	18		clc				clc
.e70f	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e712	7d 04 04	adc $0404,x			adc 	evalStack+4,x
.e715	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e718	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e71b	7d 05 04	adc $0405,x			adc 	evalStack+5,x
.e71e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e721	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e724	7d 06 04	adc $0406,x			adc 	evalStack+6,x
.e727	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e72a	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e72d	7d 07 04	adc $0407,x			adc 	evalStack+7,x
.e730	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e733	60		rts				rts
.e734					BFUNC_Subtract:
.e734	38		sec				sec
.e735	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e738	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e73b	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e73e	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e741	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e744	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e747	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e74a	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e74d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e750	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e753	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e756	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e759	60		rts				rts
.e75a					BFUNC_String:
.e75a	20 0e e7	jsr $e70e			jsr 	BFUNC_Add
.e75d	60		rts				rts
.e75e					BFUNC_ByteInd:
.e75e	20 0e e7	jsr $e70e			jsr 	BFUNC_Add
.e761	20 7b e3	jsr $e37b			jsr 	EVALReadByteIndirect
.e764	60		rts				rts
.e765					BFUNC_WordInd:
.e765	20 0e e7	jsr $e70e			jsr 	BFUNC_Add
.e768	20 a4 e3	jsr $e3a4			jsr 	EVALReadWordIndirect
.e76b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/binary.asm

.e76c					BFUNC_And:
.e76c	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e76f	3d 04 04	and $0404,x			and 	evalStack+4,x
.e772	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e775	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e778	3d 05 04	and $0405,x			and 	evalStack+5,x
.e77b	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e77e	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e781	3d 06 04	and $0406,x			and 	evalStack+6,x
.e784	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e787	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e78a	3d 07 04	and $0407,x			and 	evalStack+7,x
.e78d	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e790	60		rts				rts
.e791					BFUNC_Or:
.e791	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e794	1d 04 04	ora $0404,x			ora 	evalStack+4,x
.e797	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e79a	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e79d	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e7a0	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7a3	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7a6	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e7a9	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7ac	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7af	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e7b2	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7b5	60		rts				rts
.e7b6					BFUNC_Xor:
.e7b6	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e7b9	5d 04 04	eor $0404,x			eor 	evalStack+4,x
.e7bc	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e7bf	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7c2	5d 05 04	eor $0405,x			eor 	evalStack+5,x
.e7c5	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7c8	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7cb	5d 06 04	eor $0406,x			eor 	evalStack+6,x
.e7ce	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7d1	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7d4	5d 07 04	eor $0407,x			eor 	evalStack+7,x
.e7d7	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7da	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/multiply.asm

.e7db					BFUNC_Multiply:
.e7db	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy +0 to +8
.e7de	9d 08 04	sta $0408,x			sta 	evalStack+8,x
.e7e1	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7e4	9d 09 04	sta $0409,x			sta 	evalStack+9,x
.e7e7	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7ea	9d 0a 04	sta $040a,x			sta 	evalStack+10,x
.e7ed	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7f0	9d 0b 04	sta $040b,x			sta 	evalStack+11,x
.e7f3	a9 00		lda #$00			lda 	#0
.e7f5	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; zero +0
.e7f8	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7fb	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7fe	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e801					_BFMMultiply:
.e801	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; get LSBit of 8-11
.e804	29 01		and #$01			and 	#1
.e806	f0 03		beq $e80b			beq 	_BFMNoAdd
.e808	20 0e e7	jsr $e70e			jsr 	BFunc_Add 					; if bit set, add 4 to 0.
.e80b					_BFMNoAdd:
.e80b	1e 04 04	asl $0404,x			asl 	evalStack+4,x 				; shift +4 left
.e80e	3e 05 04	rol $0405,x			rol 	evalStack+5,x
.e811	3e 06 04	rol $0406,x			rol 	evalStack+6,x
.e814	3e 07 04	rol $0407,x			rol 	evalStack+7,x
.e817	5e 0b 04	lsr $040b,x			lsr 	evalStack+11,x 				; shift +8 right
.e81a	7e 0a 04	ror $040a,x			ror 	evalStack+10,x
.e81d	7e 09 04	ror $0409,x			ror 	evalStack+9,x
.e820	7e 08 04	ror $0408,x			ror 	evalStack+8,x
.e823	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; continue if +8 is nonzero
.e826	1d 09 04	ora $0409,x			ora 	evalStack+9,x
.e829	1d 0a 04	ora $040a,x			ora 	evalStack+10,x
.e82c	1d 0b 04	ora $040b,x			ora 	evalStack+11,x
.e82f	d0 d0		bne $e801			bne 	_BFMMultiply
.e831	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/divide.asm

.e832					BFUNC_Divide:
.e832	bd 04 04	lda $0404,x			lda 	evalStack+4,x 				; check for /0
.e835	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e838	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e83b	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e83e	d0 14		bne $e854			bne 	_BFDOkay
.e840	20 29 e1	jsr $e129			jsr 	ReportError
>e843	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",$00
>e84b	20 42 59 20 5a 45 52 4f 00
.e854					_BFDOkay:
.e854	a9 00		lda #$00			lda 	#0 							; Temp1 is 'A' (and holds the remainder)
.e856	8d 98 20	sta $2098			sta 	Temp1 						; Q/Dividend/Left in +0
.e859	8d 99 20	sta $2099			sta 	Temp1+1 					; M/Divisor/Right in +4
.e85c	8d 9a 20	sta $209a			sta 	Temp1+2
.e85f	8d 9b 20	sta $209b			sta 	Temp1+3
.e862	8d 9c 20	sta $209c			sta 	SignCount 					; Count of signs.
.e865	20 d0 e8	jsr $e8d0			jsr 	BFUNC_Negate 				; negate (and bump sign count)
.e868	da		phx				phx
.e869	e8		inx				inx
.e86a	e8		inx				inx
.e86b	e8		inx				inx
.e86c	e8		inx				inx
.e86d	20 d0 e8	jsr $e8d0			jsr 	BFUNC_Negate
.e870	fa		plx				plx
.e871	5a		phy				phy 								; Y is the counter
.e872	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.e874					_BFDLoop:
.e874	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; shift AQ left.
.e877	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e87a	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e87d	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e880	2e 98 20	rol $2098			rol 	Temp1
.e883	2e 99 20	rol $2099			rol 	Temp1+1
.e886	2e 9a 20	rol $209a			rol 	Temp1+2
.e889	2e 9b 20	rol $209b			rol 	Temp1+3
.e88c	38		sec				sec
.e88d	ad 98 20	lda $2098			lda 	Temp1+0 					; Calculate A-M on stack.
.e890	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e893	48		pha				pha
.e894	ad 99 20	lda $2099			lda 	Temp1+1
.e897	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e89a	48		pha				pha
.e89b	ad 9a 20	lda $209a			lda 	Temp1+2
.e89e	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e8a1	48		pha				pha
.e8a2	ad 9b 20	lda $209b			lda 	Temp1+3
.e8a5	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e8a8	90 19		bcc $e8c3			bcc 	_BFDNoAdd
.e8aa	8d 9b 20	sta $209b			sta 	Temp1+3 					; update A
.e8ad	68		pla				pla
.e8ae	8d 9a 20	sta $209a			sta 	Temp1+2
.e8b1	68		pla				pla
.e8b2	8d 99 20	sta $2099			sta 	Temp1+1
.e8b5	68		pla				pla
.e8b6	8d 98 20	sta $2098			sta 	Temp1+0
.e8b9	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; set Q bit 1.
.e8bc	09 01		ora #$01			ora 	#1
.e8be	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8c1	80 03		bra $e8c6			bra 	_BFDNext
.e8c3					_BFDNoAdd:
.e8c3	68		pla				pla 								; Throw away the intermediate calculations
.e8c4	68		pla				pla
.e8c5	68		pla				pla
.e8c6					_BFDNext:
.e8c6	88		dey				dey
.e8c7	d0 ab		bne $e874			bne 	_BFDLoop
.e8c9	7a		ply				ply 								; restore Y and exit
.e8ca	4e 9c 20	lsr $209c			lsr 	SignCount 					; if sign count odd,
.e8cd	b0 06		bcs $e8d5			bcs		BFUNC_NegateAlways 			; negate the result
.e8cf	60		rts				rts
.e8d0					BFUNC_Negate:
.e8d0	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e8d3	10 24		bpl $e8f9			bpl 	BFNExit
.e8d5					BFUNC_NegateAlways:
.e8d5	38		sec				sec
.e8d6	a9 00		lda #$00			lda 	#0
.e8d8	fd 00 04	sbc $0400,x			sbc 	evalStack+0,x
.e8db	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8de	a9 00		lda #$00			lda 	#0
.e8e0	fd 01 04	sbc $0401,x			sbc 	evalStack+1,x
.e8e3	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e8e6	a9 00		lda #$00			lda 	#0
.e8e8	fd 02 04	sbc $0402,x			sbc 	evalStack+2,x
.e8eb	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e8ee	a9 00		lda #$00			lda 	#0
.e8f0	fd 03 04	sbc $0403,x			sbc 	evalStack+3,x
.e8f3	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e8f6	ee 9c 20	inc $209c			inc 	SignCount
.e8f9					BFNExit:
.e8f9	60		rts				rts
.e8fa					BFUNC_Modulus:
.e8fa	20 32 e8	jsr $e832			jsr 	BFUNC_Divide 				; start with division.
.e8fd	ad 98 20	lda $2098			lda 	Temp1+0 					; copy remainder
.e900	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e903	ad 99 20	lda $2099			lda 	Temp1+1
.e906	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e909	ad 9a 20	lda $209a			lda 	Temp1+2
.e90c	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e90f	ad 9b 20	lda $209b			lda 	Temp1+3
.e912	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e915	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/compare.asm

.e916					BFUNC_Equals:
.e916	18		clc				clc
.e917	80 01		bra $e91a			bra 	BFUNC_EqualCheck
.e919					BFUNC_NotEquals:
.e919	38		sec				sec
.e91a					BFUNC_EqualCheck:
.e91a	08		php				php									; save invert flag
.e91b	ad 00 04	lda $0400			lda 	evalStack+0 				; check equality
.e91e	cd 04 04	cmp $0404			cmp 	evalStack+4
.e921	d0 1c		bne $e93f			bne 	COMP_Fail
.e923	ad 01 04	lda $0401			lda 	evalStack+1
.e926	cd 05 04	cmp $0405			cmp 	evalStack+5
.e929	d0 14		bne $e93f			bne 	COMP_Fail
.e92b	ad 02 04	lda $0402			lda 	evalStack+2
.e92e	cd 06 04	cmp $0406			cmp 	evalStack+6
.e931	d0 0c		bne $e93f			bne 	COMP_Fail
.e933	ad 03 04	lda $0403			lda 	evalStack+3
.e936	cd 07 04	cmp $0407			cmp 	evalStack+7
.e939	d0 04		bne $e93f			bne 	COMP_Fail
.e93b					COMP_Succeed:
.e93b	a9 ff		lda #$ff			lda 	#$FF
.e93d	80 02		bra $e941			bra 	COMP_SetResult
.e93f					COMP_Fail:
.e93f	a9 00		lda #$00			lda 	#0 							; here return 0
.e941					COMP_SetResult:
.e941	28		plp				plp 								; but if CS
.e942	90 02		bcc $e946			bcc 	COMP_Accept
.e944	49 ff		eor #$ff			eor 	#$FF 						; invert that
.e946					COMP_Accept:
.e946	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; write to result.
.e949	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e94c	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e94f	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e952	60		rts				rts
.e953					BFUNC_Less:
.e953	18		clc				clc
.e954	80 01		bra $e957			bra 	BFUNC_LessCheck
.e956					BFUNC_GreaterEqual:
.e956	38		sec				sec
.e957					BFUNC_LessCheck:
.e957	08		php				php
.e958	38		sec				sec
.e959	ad 00 04	lda $0400			lda 	evalStack+0 				; compare using direct subtraction
.e95c	ed 04 04	sbc $0404			sbc 	evalStack+4
.e95f	ad 01 04	lda $0401			lda 	evalStack+1
.e962	ed 05 04	sbc $0405			sbc 	evalStack+5
.e965	ad 02 04	lda $0402			lda 	evalStack+2
.e968	ed 06 04	sbc $0406			sbc 	evalStack+6
.e96b	ad 03 04	lda $0403			lda 	evalStack+3
.e96e	ed 07 04	sbc $0407			sbc 	evalStack+7
.e971	30 c8		bmi $e93b			bmi 	COMP_Succeed
.e973	80 ca		bra $e93f			bra 	COMP_Fail
.e975					BFUNC_Greater:
.e975	18		clc				clc
.e976	80 01		bra $e979			bra 	BFUNC_GreaterCheck
.e978					BFUNC_LessEqual:
.e978	38		sec				sec
.e979					BFUNC_GreaterCheck:
.e979	08		php				php
.e97a	38		sec				sec
.e97b	ad 04 04	lda $0404			lda 	evalStack+4 				; compare using direct subtraction
.e97e	ed 00 04	sbc $0400			sbc 	evalStack+0
.e981	ad 05 04	lda $0405			lda 	evalStack+5
.e984	ed 01 04	sbc $0401			sbc 	evalStack+1
.e987	ad 06 04	lda $0406			lda 	evalStack+6
.e98a	ed 02 04	sbc $0402			sbc 	evalStack+2
.e98d	ad 07 04	lda $0407			lda 	evalStack+7
.e990	ed 03 04	sbc $0403			sbc 	evalStack+3
.e993	30 a6		bmi $e93b			bmi 	COMP_Succeed
.e995	80 a8		bra $e93f			bra 	COMP_Fail

;******  Return to file: basic.asm


;******  Processing file: binary/scompare.asm

.e997					BFUNC_StringCompare:
.e997	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get address into temporaries.
.e99a	85 26		sta $26				sta 	zTemp1
.e99c	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e99f	85 27		sta $27				sta 	zTemp1+1
.e9a1	bd 04 04	lda $0404,x			lda 	evalStack+4,x
.e9a4	85 28		sta $28				sta 	zTemp2
.e9a6	bd 05 04	lda $0405,x			lda 	evalStack+5,x
.e9a9	85 29		sta $29				sta 	zTemp2+1
.e9ab	5a		phy				phy
.e9ac	a0 00		ldy #$00			ldy 	#0
.e9ae					_BFSCLoop:
.e9ae	b1 26		lda ($26),y			lda 	(zTemp1),y 					; comparison
.e9b0	38		sec				sec
.e9b1	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.e9b3	d0 15		bne $e9ca			bne		_BFSCDifferent 				; return different result.
.e9b5	c8		iny				iny
.e9b6	c9 00		cmp #$00			cmp 	#0							; until both EOS.
.e9b8	d0 f4		bne $e9ae			bne 	_BFSCLoop
.e9ba	7a		ply				ply
.e9bb	a9 00		lda #$00			lda 	#0
.e9bd					_BFSCSetAll:
.e9bd	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e9c0	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e9c3	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e9c6	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e9c9	60		rts				rts
.e9ca					_BFSCDifferent:
.e9ca	7a		ply				ply
.e9cb	a9 ff		lda #$ff			lda 	#255 						; if CC set all as <
.e9cd	90 ee		bcc $e9bd			bcc 	_BFSCSetAll
.e9cf	a9 00		lda #$00			lda 	#0 							; set all zero
.e9d1	20 bd e9	jsr $e9bd			jsr 	_BFSCSetAll
.e9d4	fe 00 04	inc $0400,x			inc 	evalStack+0,x 				; and make it one.
.e9d7	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: unary/unary.asm

.e9d8					UNARY_Len:
.e9d8	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e9db	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.e9de	85 26		sta $26				sta 	zTemp1
.e9e0	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e9e3	85 27		sta $27				sta 	zTemp1+1
.e9e5	5a		phy				phy
.e9e6	a0 00		ldy #$00			ldy 	#0 							; now figure out its length.
.e9e8					_ULGetLength:
.e9e8	b1 26		lda ($26),y			lda 	(zTemp1),y 					; read character
.e9ea	f0 1d		beq $ea09			beq 	_ULFoundEOL 				; found end of line.
.e9ec	c8		iny				iny
.e9ed	d0 f9		bne $e9e8			bne 	_ULGetLength 				; scan 256 only.
.e9ef	20 29 e1	jsr $e129			jsr 	ReportError
>e9f2	43 41 4e 4e 4f 54 20 46				.text 	"CANNOT FIND STRING END",$00
>e9fa	49 4e 44 20 53 54 52 49 4e 47 20 45 4e 44 00
.ea09					_ULFoundEOL:
.ea09	98		tya				tya 								; length in A, restore Y
.ea0a	7a		ply				ply
.ea0b					UNARY_ReturnByte:
.ea0b	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea0e	a9 00		lda #$00			lda 	#0 							; clear the rests
.ea10	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea13	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea16	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea19	60		rts				rts
.ea1a					UNARY_Ch:
.ea1a	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ea1d	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.ea20	85 26		sta $26				sta 	zTemp1
.ea22	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ea25	85 27		sta $27				sta 	zTemp1+1
.ea27	5a		phy				phy
.ea28	a0 00		ldy #$00			ldy 	#0 							; now get first character
.ea2a	b1 26		lda ($26),y			lda 	(zTemp1),y
.ea2c	7a		ply				ply
.ea2d	80 dc		bra $ea0b			bra 	UNARY_ReturnByte 			; return that byte.
.ea2f					UNARY_Abs:
.ea2f	ea		nop				nop
.ea30	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.ea33	20 d0 e8	jsr $e8d0			jsr 	BFUNC_Negate 				; there's an ABS routine in divide
.ea36	60		rts				rts
.ea37					UNARY_Top:
.ea37	ad 96 20	lda $2096			lda 	highMemory
.ea3a	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea3d	ad 97 20	lda $2097			lda 	highMemory+1
.ea40	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea43	a9 00		lda #$00			lda 	#0
.ea45	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea48	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea4b	60		rts				rts
.ea4c					UNARY_Rnd:
.ea4c	20 57 ea	jsr $ea57			jsr 	Random16 					; call 16 bit RNG twice
.ea4f	e8		inx				inx
.ea50	e8		inx				inx
.ea51	20 57 ea	jsr $ea57			jsr 	Random16
.ea54	ca		dex				dex
.ea55	ca		dex				dex
.ea56	60		rts				rts
.ea57					Random16:
.ea57	ad 9e 20	lda $209e			lda 	RandomSeed 					; initialise if nonzero
.ea5a	0d 9f 20	ora $209f			ora 	RandomSeed+1
.ea5d	d0 0d		bne $ea6c			bne 	_R16_NoInit
.ea5f	ee 9e 20	inc $209e			inc 	RandomSeed 					; by setting low to 1
.ea62	5a		phy				phy
.ea63	a0 14		ldy #$14			ldy 	#20 						; call it 20 times to get it started
.ea65					_R16_Setup:
.ea65	20 57 ea	jsr $ea57			jsr 	Random16
.ea68	88		dey				dey
.ea69	d0 fa		bne $ea65			bne 	_R16_Setup
.ea6b	7a		ply				ply
.ea6c					_R16_NoInit:
.ea6c	4e 9f 20	lsr $209f			lsr 	RandomSeed+1				; shift seed right
.ea6f	6e 9e 20	ror $209e			ror 	RandomSeed
.ea72	90 08		bcc $ea7c			bcc 	_R16_NoXor
.ea74	ad 9f 20	lda $209f			lda 	RandomSeed+1				; xor MSB with $B4 if bit set.
.ea77	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.ea79	8d 9f 20	sta $209f			sta 	RandomSeed+1
.ea7c					_R16_NoXor:
.ea7c	ad 9e 20	lda $209e			lda 	RandomSeed					; copy result to evaluate stack.
.ea7f	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea82	ad 9f 20	lda $209f			lda 	RandomSeed+1
.ea85	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea88	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/execute.asm

.ea89					COMMAND_Run:
.ea89	20 46 eb	jsr $eb46			jsr 	COMMAND_Clear 				; clear everything for a new run.
.ea8c	a2 00		ldx #$00			ldx 	#BasicProgram & 255 		; start from here
.ea8e	a0 23		ldy #$23			ldy 	#BasicProgram >> 8
.ea90	86 20		stx $20				stx 	zCurrentLine 				; set current line.
.ea92	84 21		sty $21				sty 	zCurrentLine+1
.ea94					CRUNNewLine:
.ea94	a0 00		ldy #$00			ldy 	#0 							; look at the offset, end of program
.ea96	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ea98	f0 60		beq $eafa			beq 	COMMAND_End 				; if zero, off end of program so stop.
.ea9a	a0 03		ldy #$03			ldy 	#3 							; offset to first token.
.ea9c					CRUNNextInstruction:
.ea9c	a9 00		lda #$00			lda 	#0 							; reset the string buffer position
.ea9e	8d 9d 20	sta $209d			sta 	StringBufferPos
.eaa1	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token
.eaa3	f0 0b		beq $eab0			beq 	CRUNNextLine 				; if zero, then end of line.
.eaa5					CRUNNotEndOfLine:
.eaa5	c9 20		cmp #$20			cmp 	#' '
.eaa7	f0 04		beq $eaad			beq 	CRUNSkipLoop
.eaa9	c9 8d		cmp #$8d			cmp 	#KW_Colon 					; check for a colon first.
.eaab	d0 1b		bne $eac8			bne 	CRUNExecuteOne 				; if not that, execute the token.
.eaad					CRUNSkipLoop:
.eaad	c8		iny				iny		 							; if colon, skip it and loop round.
.eaae	80 ec		bra $ea9c			bra 	CRUNNextInstruction
.eab0					CRUNNextLine:
.eab0	a5 21		lda $21				lda 	zCurrentLine+1 				; running from input
.eab2	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.eab4	f0 0f		beq $eac5			beq		CRUNWarmStart
.eab6	a0 00		ldy #$00			ldy 	#0 							; add offset from line to line pointer
.eab8	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.eaba	18		clc				clc
.eabb	65 20		adc $20				adc 	zCurrentLine
.eabd	85 20		sta $20				sta 	zCurrentLine
.eabf	90 d3		bcc $ea94			bcc 	CRUNNewLine
.eac1	e6 21		inc $21				inc 	zCurrentLine+1
.eac3	80 cf		bra $ea94			bra 	CRUNNewLine
.eac5					CRUNWarmStart:
.eac5	4c 58 ee	jmp $ee58			jmp 	WarmStart
.eac8					CRUNExecuteOne:
.eac8	09 00		ora #$00			ora 	#0 							; if it is a character might be a variable.
.eaca	10 21		bpl $eaed			bpl		_CRUNX1TryLet
.eacc	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; likewise if ! something ? something $ something
.eace	f0 1d		beq $eaed			beq 	_CRUNX1TryLet
.ead0	c9 80		cmp #$80			cmp 	#KW_PLING
.ead2	f0 19		beq $eaed			beq 	_CRUNX1TryLet
.ead4	c9 95		cmp #$95			cmp 	#KW_QUESTION
.ead6	f0 15		beq $eaed			beq 	_CRUNX1TryLet
.ead8	c8		iny				iny 								; skip over loaded token
.ead9	0a		asl a				asl 	a 							; double lower keyword byte, clears bit 7.
.eada	8d 99 20	sta $2099			sta 	Temp1+1 					; this is the low byte into the KVT
.eadd	8a		txa				txa
.eade	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.eae0	8d 9a 20	sta $209a			sta 	Temp1+2
.eae3	a9 6c		lda #$6c			lda 	#$6C 						; make it jump indirect
.eae5	8d 98 20	sta $2098			sta 	Temp1+0
.eae8	20 98 20	jsr $2098			jsr 	Temp1 						; call instruction
.eaeb	80 af		bra $ea9c			bra 	CRUNNextInstruction 		; do next instruction.
.eaed					_CRUNX1TryLet:
.eaed	20 b0 eb	jsr $ebb0			jsr 	COMMAND_Let 				; try doing a LET if not a keyword.
.eaf0	80 aa		bra $ea9c			bra 	CRUNNextInstruction
.eaf2					COMMAND_Stop:
.eaf2	20 29 e1	jsr $e129			jsr 	ReportError
>eaf5	53 54 4f 50 00					.text 	"STOP",$00
.eafa					COMMAND_End:
.eafa	ad 4d 23	lda $234d			lda 	StartBehaviour 				; running program
.eafd	c9 52		cmp #$52			cmp 	#"R"
.eaff	d0 01		bne $eb02			bne 	_CEWarmStart
>eb01	02						.byte 	2
.eb02					_CEWarmStart:
.eb02	4c 58 ee	jmp $ee58			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: commands/miscellany.asm

.eb05					COMMAND_Assert:
.eb05	20 c1 e1	jsr $e1c1			jsr 	EvaluateBase 				; evaluate the expression
.eb08	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check non zero
.eb0b	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.eb0e	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eb11	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eb14	d0 12		bne $eb28			bne 	_CMDAExit
.eb16	ea		nop				nop
.eb17	20 29 e1	jsr $e129			jsr 	ReportError
>eb1a	41 53 53 45 52 54 20 46				.text 	"ASSERT FAILED",$00
>eb22	41 49 4c 45 44 00
.eb28					_CMDAExit:
.eb28	60		rts				rts
.eb29					COMMAND_Rem:
.eb29	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character token.
.eb2b	f0 05		beq $eb32			beq 	_CREMExit 					; End of line, then exit.
.eb2d	c8		iny				iny 								; something to skip
.eb2e	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; if not a colon
.eb30	d0 f7		bne $eb29			bne 	COMMAND_Rem 				; keep searching
.eb32					_CREMExit:
.eb32	60		rts				rts
.eb33					COMMAND_New:
.eb33	a9 00		lda #$00			lda 	#0 							; erase the actual program.
.eb35	8d 00 23	sta $2300			sta 	BasicProgram 				; by zeroing the initial offset.
.eb38	20 46 eb	jsr $eb46			jsr 	COMMAND_Clear 				; clear non fixed variable, reset stack and low mem pointer
.eb3b	a9 00		lda #$00			lda 	#endMemory & $FF 			; reset high memory pointer.
.eb3d	8d 96 20	sta $2096			sta 	HighMemory
.eb40	a9 80		lda #$80			lda 	#endMemory >> 8
.eb42	8d 97 20	sta $2097			sta 	HighMemory+1
.eb45	60		rts				rts
.eb46					COMMAND_Clear:
.eb46	a2 00		ldx #$00			ldx 	#0	 						; clear variables @A-Z
.eb48					_CCClearVar:
.eb48	a9 00		lda #$00			lda 	#$00
.eb4a	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.eb4d	e8		inx				inx
.eb4e	e0 6c		cpx #$6c			cpx 	#27*4
.eb50	10 f6		bpl $eb48			bpl 	_CCClearVar
.eb52	a9 00		lda #$00			lda 	#basicStack & $FF 			; reset BASIC stack
.eb54	85 22		sta $22				sta 	zBasicStack
.eb56	a9 02		lda #$02			lda 	#basicStack >> 8
.eb58	85 23		sta $23				sta 	zBasicStack+1
.eb5a	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; now find where the program ends.
.eb5c	85 24		sta $24				sta 	zLowMemory
.eb5e	a9 23		lda #$23			lda 	#BasicProgram >> 8
.eb60	85 25		sta $25				sta 	zLowMemory+1
.eb62					_CCFindEnd:
.eb62	a0 00		ldy #$00			ldy 	#0 							; look at next offset
.eb64	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; if zero, reached the end.
.eb66	f0 0b		beq $eb73			beq 	_CCFoundEnd
.eb68	18		clc				clc 								; go to next line.
.eb69	65 24		adc $24				adc 	zLowMemory
.eb6b	85 24		sta $24				sta 	zLowMemory
.eb6d	90 f3		bcc $eb62			bcc 	_CCFindEnd
.eb6f	e6 25		inc $25				inc 	zLowMemory+1
.eb71	80 ef		bra $eb62			bra 	_CCFindEnd
.eb73					_CCFoundEnd:
.eb73	e6 24		inc $24				inc 	zLowMemory 					; variables etc. start after end of program.
.eb75	d0 02		bne $eb79			bne 	_CCNoCarry 					; skip over zero end offset.
.eb77	e6 25		inc $25				inc 	zLowMemory+1
.eb79					_CCNoCarry:
.eb79	60		rts				rts
.eb7a					COMMAND_Old:
.eb7a	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; point zLowMemory to the first line.
.eb7c	85 24		sta $24				sta 	zLowMemory
.eb7e	a9 23		lda #$23			lda 	#BasicProgram >> 8
.eb80	85 25		sta $25				sta 	zLowMemory+1
.eb82	a0 03		ldy #$03			ldy 	#3 							; look for the $00 end of line marker.
.eb84					_COScan:
.eb84	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; look at next byte pair
.eb86	c8		iny				iny
.eb87	f0 0d		beq $eb96			beq 	_COFail 					; can't find marker, corrupted maybe ?
.eb89	c9 00		cmp #$00			cmp 	#0 							; until $00 found.
.eb8b	d0 f7		bne $eb84			bne 	_COScan
.eb8d	98		tya				tya 								; Y is the new offset to the next instruction
.eb8e	a0 00		ldy #$00			ldy 	#0 							; overwrite the old one
.eb90	91 24		sta ($24),y			sta 	(zLowMemory),y
.eb92	20 46 eb	jsr $eb46			jsr 	COMMAND_Clear 				; reset variables, stacks and pointers.
.eb95	60		rts				rts
.eb96					_COFail:
.eb96	20 29 e1	jsr $e129			jsr 	ReportError
>eb99	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER PROGRAM",$00
>eba1	45 43 4f 56 45 52 20 50 52 4f 47 52 41 4d 00

;******  Return to file: basic.asm


;******  Processing file: commands/let.asm

.ebb0					COMMAND_Let:
.ebb0	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get first token not space
.ebb2	f0 58		beq $ec0c			beq 	_CLESyntax
.ebb4	c8		iny				iny
.ebb5	c9 20		cmp #$20			cmp 	#32
.ebb7	f0 f7		beq $ebb0			beq 	COMMAND_Let
.ebb9	88		dey				dey
.ebba	c9 95		cmp #$95			cmp 	#KW_QUESTION				; check for first being indirect.
.ebbc	f0 51		beq $ec0f			beq 	_CLEIndirect 				; e.g. !x = 42
.ebbe	c9 80		cmp #$80			cmp 	#KW_PLING
.ebc0	f0 4d		beq $ec0f			beq 	_CLEIndirect
.ebc2	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ebc4	f0 49		beq $ec0f			beq 	_CLEIndirect
.ebc6	a2 00		ldx #$00			ldx 	#0 							; clear evaluation stack.
.ebc8	20 d4 e3	jsr $e3d4			jsr 	VARReference 				; get a variable reference.
.ebcb	a5 26		lda $26				lda 	zTemp1 						; copy into target addr
.ebcd	85 2a		sta $2a				sta 	zTargetAddr
.ebcf	a5 27		lda $27				lda 	zTemp1+1
.ebd1	85 2b		sta $2b				sta 	zTargetAddr+1
.ebd3	a5 28		lda $28				lda 	zTemp1+2
.ebd5	85 2c		sta $2c				sta 	zTargetAddr+2
.ebd7	a5 29		lda $29				lda 	zTemp1+3
.ebd9	85 2d		sta $2d				sta 	zTargetAddr+3
.ebdb					_CLEGetBinLHSOp:
.ebdb	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ebdd	f0 2d		beq $ec0c			beq 	_CLESyntax
.ebdf	c8		iny				iny
.ebe0	c9 20		cmp #$20			cmp 	#' '
.ebe2	f0 f7		beq $ebdb			beq 	_CLEGetBinLHSOp
.ebe4	88		dey				dey
.ebe5	c9 95		cmp #$95			cmp 	#KW_QUESTION 				; got some sort of reference, check
.ebe7	f0 45		beq $ec2e			beq 	_CLEBinaryLHTerm  			; if that's a basis for indirection ?
.ebe9	c9 80		cmp #$80			cmp 	#KW_PLING
.ebeb	f0 41		beq $ec2e			beq 	_CLEBinaryLHTerm
.ebed	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ebef	f0 3d		beq $ec2e			beq 	_CLEBinaryLHTerm
.ebf1	a9 80		lda #$80			lda 	#KW_PLING 					; we want to do a 32 bit write.
.ebf3					_CLEWriteToAddress:
.ebf3	48		pha				pha 								; save write-type.
.ebf4	a9 92		lda #$92			lda 	#KW_EQUAL 					; check for '=' sign.
.ebf6	20 65 e1	jsr $e165			jsr 	CheckNextCharacter
.ebf9	20 c1 e1	jsr $e1c1			jsr 	EvaluateBase 				; evaluate the RHS.
.ebfc	68		pla				pla
.ebfd	c9 80		cmp #$80			cmp 	#KW_PLING
.ebff	f0 6e		beq $ec6f			beq 	_CLEWordWrite
.ec01	c9 95		cmp #$95			cmp 	#KW_QUESTION
.ec03	f0 60		beq $ec65			beq 	_CLEByteWrite
.ec05	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ec07					_ErrorInternal:
.ec07	d0 fe		bne $ec07			bne 	_ErrorInternal
.ec09	4c 8b ec	jmp $ec8b			jmp 	_CLEStringWrite
.ec0c					_CLESyntax:
.ec0c	4c 19 e1	jmp $e119			jmp 	SyntaxError
.ec0f					_CLEIndirect:
.ec0f	48		pha				pha 								; save operator on stack
.ec10	c8		iny				iny									; advance over cursor
.ec11	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ec13	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel
.ec16	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy that as the address.
.ec19	85 2a		sta $2a				sta 	zTargetAddr+0
.ec1b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ec1e	85 2b		sta $2b				sta 	zTargetAddr+1
.ec20	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ec23	85 2c		sta $2c				sta 	zTargetAddr+2
.ec25	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ec28	85 2d		sta $2d				sta 	zTargetAddr+3
.ec2a	68		pla				pla 								; restore operator.
.ec2b	4c f3 eb	jmp $ebf3			jmp 	_CLEWriteToAddress
.ec2e					_CLEBinaryLHTerm:
.ec2e	48		pha				pha 								; save operator on stack
.ec2f	c8		iny				iny 								; skip over it.
.ec30	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ec32	20 bd e1	jsr $e1bd			jsr 	EvaluateAtomCurrentLevel
.ec35	a5 2a		lda $2a				lda 	zTargetAddr 				; copy zTargetAddr to zTemp1. Technically
.ec37	85 26		sta $26				sta 	zTemp1 						; a four byte address.....
.ec39	a5 2b		lda $2b				lda 	zTargetAddr+1
.ec3b	85 27		sta $27				sta 	zTemp1+1 					; we only worry about 4 byte value
.ec3d	5a		phy				phy 								; save Y
.ec3e	18		clc				clc 								; add variable evaluated to (zTargetAddr)
.ec3f	a0 00		ldy #$00			ldy 	#0
.ec41	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec43	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.ec46	85 2a		sta $2a				sta 	zTargetAddr+0
.ec48	c8		iny				iny
.ec49	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec4b	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.ec4e	85 2b		sta $2b				sta 	zTargetAddr+1
.ec50	c8		iny				iny
.ec51	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec53	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.ec56	85 2c		sta $2c				sta 	zTargetAddr+2
.ec58	c8		iny				iny
.ec59	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec5b	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.ec5e	85 2d		sta $2d				sta 	zTargetAddr+3
.ec60	7a		ply				ply 								; restore Y
.ec61	68		pla				pla 								; restore the operator.
.ec62	4c f3 eb	jmp $ebf3			jmp 	_CLEWriteToAddress
.ec65					_CLEByteWrite:
.ec65	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get the byte to write.
.ec68	5a		phy				phy 								; write the byte preserving Y
.ec69	a0 00		ldy #$00			ldy 	#0
.ec6b	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec6d	7a		ply				ply
.ec6e	60		rts				rts
.ec6f					_CLEWordWrite:
.ec6f	5a		phy				phy
.ec70	a0 00		ldy #$00			ldy 	#0
.ec72	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ec75	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec77	c8		iny				iny
.ec78	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ec7b	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec7d	c8		iny				iny
.ec7e	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ec81	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec83	c8		iny				iny
.ec84	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ec87	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec89	7a		ply				ply 								; restore Y
.ec8a	60		rts				rts
.ec8b					_CLEStringWrite:
.ec8b	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; source string -> zTemp1
.ec8e	85 26		sta $26				sta 	zTemp1
.ec90	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ec93	85 27		sta $27				sta 	zTemp1+1
.ec95	5a		phy				phy
.ec96	a0 00		ldy #$00			ldy 	#0
.ec98					_CLEStringCopy:
.ec98	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec9a	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec9c	c9 00		cmp #$00			cmp 	#0
.ec9e	f0 16		beq $ecb6			beq	 	_CLEStringWritten
.eca0	c8		iny				iny
.eca1	d0 f5		bne $ec98			bne 	_CLEStringCopy
.eca3	20 29 e1	jsr $e129			jsr 	ReportError
>eca6	42 41 44 20 53 54 52 49				.text 	"BAD STRING COPY",$00
>ecae	4e 47 20 43 4f 50 59 00
.ecb6					_CLEStringWritten:
.ecb6	7a		ply				ply
.ecb7	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/print.asm

.ecb8					COMMAND_Print:
.ecb8	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; look at next character
.ecba	f0 15		beq $ecd1			beq 	_CPRExitNL 					; zero end of line.
.ecbc	c8		iny				iny
.ecbd	c9 20		cmp #$20			cmp 	#' '
.ecbf	f0 f7		beq $ecb8			beq 	COMMAND_Print
.ecc1	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; colon, end of line
.ecc3	f0 0c		beq $ecd1			beq 	_CPRExitNL
.ecc5	c9 8e		cmp #$8e			cmp 	#KW_SEMICOLON 				; semicolon ?
.ecc7	d0 0e		bne $ecd7			bne 	_CPRNotSemicolon
.ecc9	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look at next character, is ; last thing
.eccb	f0 09		beq $ecd6			beq 	_CPRExit
.eccd	c9 8d		cmp #$8d			cmp 	#KW_COLON
.eccf	d0 e7		bne $ecb8			bne 	COMMAND_Print 				; if not, just go back round again
.ecd1					_CPRExitNL:
.ecd1	a9 0d		lda #$0d			lda 	#13
.ecd3	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.ecd6					_CPRExit:
.ecd6	60		rts				rts
.ecd7					_CPRNotSemicolon:
.ecd7	c9 86		cmp #$86			cmp 	#KW_SQUOTE 					; single quote
.ecd9	f0 2b		beq $ed06			beq 	_CPRNewLine 				; new line
.ecdb	c9 81		cmp #$81			cmp 	#KW_DQUOTE 					; double quote
.ecdd	d0 2e		bne $ed0d			bne 	_CPRNotQuote
.ecdf					_CPRPrintText:
.ecdf	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next character
.ece1	f0 0a		beq $eced			beq 	_CPRError 					; if zero no closing quote
.ece3	c8		iny				iny
.ece4	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; double quote
.ece6	f0 d0		beq $ecb8			beq 	COMMAND_Print 				; go round again.
.ece8	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter 			; print and do next character
.eceb	80 f2		bra $ecdf			bra 	_CPRPrintText
.eced					_CPRError:
.eced	20 29 e1	jsr $e129			jsr 	ReportError
>ecf0	4d 49 53 53 49 4e 47 20				.text 	"MISSING CLOSING QUOTE",$00
>ecf8	43 4c 4f 53 49 4e 47 20 51 55 4f 54 45 00
.ed06					_CPRNewLine:
.ed06	a9 0d		lda #$0d			lda 	#13
.ed08	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.ed0b	80 ab		bra $ecb8			bra 	COMMAND_Print
.ed0d					_CPRNotQuote:
.ed0d	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; not a string ?
.ed0f	d0 11		bne $ed22			bne 	_CPRNumber 					; print a number.
.ed11	20 c1 e1	jsr $e1c1			jsr 	EvaluateBase 				; this is the address to print.
.ed14	5a		phy				phy
.ed15	bc 01 04	ldy $0401,x			ldy 	evalStack+1,x 				; get the address
.ed18	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ed1b	aa		tax				tax
.ed1c	20 61 e4	jsr $e461			jsr 	SIOPrintString
.ed1f	7a		ply				ply
.ed20	80 96		bra $ecb8			bra 	COMMAND_Print
.ed22					_CPRNumber:
.ed22	c9 85		cmp #$85			cmp 	#KW_AMPERSAND
.ed24	f0 17		beq $ed3d			beq 	_CPRHexadecimal
.ed26	88		dey				dey 								; must be 1st char of expr
.ed27	20 c1 e1	jsr $e1c1			jsr 	EvaluateBase 				; this is the value to print.
.ed2a	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; is it -ve
.ed2d	10 08		bpl $ed37			bpl 	_CPRIsPositive
.ed2f	20 d5 e8	jsr $e8d5			jsr 	BFUNC_NegateAlways 			; negate it
.ed32	a9 2d		lda #$2d			lda 	#"-" 						; print - it.
.ed34	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.ed37					_CPRIsPositive:
.ed37	20 7a ed	jsr $ed7a			jsr 	CPRPrintInteger 			; Print string at current eval stack, base 10.
.ed3a	4c b8 ec	jmp $ecb8			jmp 	COMMAND_Print
.ed3d					_CPRHexadecimal:
.ed3d	20 c1 e1	jsr $e1c1			jsr 	EvaluateBase 				; this is the value to print.
.ed40	20 46 ed	jsr $ed46			jsr 	_CPRPrintRecHex 			; hex version of it.
.ed43	4c b8 ec	jmp $ecb8			jmp 	COMMAND_Print
.ed46					_CPRPrintRecHex:
.ed46	ad 00 04	lda $0400			lda 	evalStack+0 				; get the remainder
.ed49	29 0f		and #$0f			and 	#15 						; and put on stack
.ed4b	48		pha				pha
.ed4c	a2 04		ldx #$04			ldx 	#4 							; divide by 16
.ed4e					_CPRShiftDiv:
.ed4e	4e 03 04	lsr $0403			lsr 	evalStack+3
.ed51	6e 02 04	ror $0402			ror 	evalStack+2
.ed54	6e 01 04	ror $0401			ror		evalStack+1
.ed57	6e 00 04	ror $0400			ror		evalStack+0
.ed5a	ca		dex				dex
.ed5b	d0 f1		bne $ed4e			bne 	_CPRShiftDiv
.ed5d	ad 00 04	lda $0400			lda 	evalStack+0 				; any more to print
.ed60	0d 01 04	ora $0401			ora 	evalStack+1
.ed63	0d 02 04	ora $0402			ora 	evalStack+2
.ed66	0d 03 04	ora $0403			ora 	evalStack+3
.ed69	f0 03		beq $ed6e			beq 	_CPRNoHexRec
.ed6b	20 46 ed	jsr $ed46			jsr 	_CPRPrintRecHex
.ed6e					_CPRNoHexRec:
.ed6e	68		pla				pla 								; original remainder.
.ed6f	c9 0a		cmp #$0a			cmp 	#10
.ed71	90 02		bcc $ed75			bcc		_CPRNH2
.ed73	69 06		adc #$06			adc 	#6
.ed75	69 30		adc #$30	_CPRNH2:adc 	#48
.ed77	4c 8e e4	jmp $e48e			jmp 	SIOPrintCharacter
.ed7a					CPRPrintInteger:
.ed7a	48		pha				pha 								; save on stack.
.ed7b	da		phx				phx
.ed7c	5a		phy				phy
.ed7d	20 84 ed	jsr $ed84			jsr 	_CPRPrintRec 				; recursive print call
.ed80	7a		ply				ply
.ed81	fa		plx				plx
.ed82	68		pla				pla
.ed83	60		rts				rts
.ed84					_CPRPrintRec:
.ed84	a9 0a		lda #$0a			lda 	#10 						; save base
.ed86	9d 04 04	sta $0404,x			sta 	evalStack+4,x 				; put in next slot.
.ed89	a9 00		lda #$00			lda 	#0 							; clear upper 3 bytes
.ed8b	9d 05 04	sta $0405,x			sta 	evalStack+5,x
.ed8e	9d 06 04	sta $0406,x			sta 	evalStack+6,x
.ed91	9d 07 04	sta $0407,x			sta 	evalStack+7,x
.ed94	20 32 e8	jsr $e832			jsr 	BFUNC_Divide 				; divide by 10.
.ed97	ad 98 20	lda $2098			lda 	Temp1+0		 				; push remainder on stack
.ed9a	48		pha				pha
.ed9b	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; is the result #0
.ed9e	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.eda1	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eda4	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eda7	f0 03		beq $edac			beq 	_CPRNoRecurse
.eda9	20 84 ed	jsr $ed84			jsr 	_CPRPrintRec 				; recursive print.
.edac					_CPRNoRecurse:
.edac	68		pla				pla
.edad	09 30		ora #$30			ora 	#"0"
.edaf	4c 8e e4	jmp $e48e			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: commands/list.asm

.edb2					COMMAND_List:
.edb2	5a		phy				phy
.edb3	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set target address
.edb5	85 2a		sta $2a				sta 	zTargetAddr
.edb7	a9 23		lda #$23			lda 	#BasicProgram >> 8
.edb9	85 2b		sta $2b				sta 	zTargetAddr+1
.edbb	a9 10		lda #$10			lda 	#16 						; print 16 lines
.edbd	85 2c		sta $2c				sta 	zTargetAddr+2
.edbf					_CLLILoop:
.edbf	20 d9 ed	jsr $edd9			jsr 	CLIOneLine 					; list one line.
.edc2	a0 00		ldy #$00			ldy 	#0 							; advance pointer to next.
.edc4	18		clc				clc
.edc5	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.edc7	65 2a		adc $2a				adc 	zTargetAddr
.edc9	85 2a		sta $2a				sta 	zTargetAddr
.edcb	90 02		bcc $edcf			bcc 	_CLLINoCarry
.edcd	e6 2b		inc $2b				inc 	zTargetAddr+1
.edcf					_CLLINoCarry:
.edcf	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y 			; if that offset is zero exit
.edd1	f0 04		beq $edd7			beq 	_CLLIExit
.edd3	c6 2c		dec $2c				dec 	zTargetAddr+2 				; done all of them ?
.edd5	d0 e8		bne $edbf			bne 	_CLLILoop
.edd7					_CLLIExit:
.edd7	7a		ply				ply
.edd8	60		rts				rts
.edd9					CLIOneLine:
.edd9	a0 01		ldy #$01			ldy 	#1 							; get line#
.eddb	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.eddd	8d 00 04	sta $0400			sta 	evalStack+0
.ede0	c8		iny				iny
.ede1	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ede3	8d 01 04	sta $0401			sta 	evalStack+1
.ede6	a9 00		lda #$00			lda 	#0
.ede8	aa		tax				tax
.ede9	8d 02 04	sta $0402			sta 	evalStack+2
.edec	8d 03 04	sta $0403			sta 	evalStack+3
.edef	20 7a ed	jsr $ed7a			jsr 	CPRPrintInteger 			; print line#
.edf2	a9 20		lda #$20			lda 	#32
.edf4	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.edf7	a0 03		ldy #$03			ldy 	#3 							; where to start
.edf9					_CLIOutput:
.edf9	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.edfb	c8		iny				iny
.edfc	09 00		ora #$00			ora 	#0
.edfe	f0 0c		beq $ee0c			beq 	_CLIExit
.ee00	10 05		bpl $ee07			bpl		_CLISingle
.ee02	20 12 ee	jsr $ee12			jsr 	CLIPrintToken
.ee05	80 f2		bra $edf9			bra 	_CLIOutput
.ee07					_CLISingle:
.ee07	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.ee0a	80 ed		bra $edf9			bra 	_CLIOutput
.ee0c					_CLIExit:
.ee0c	a9 0d		lda #$0d			lda 	#13 						; new line.
.ee0e	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.ee11	60		rts				rts
.ee12					CLIPrintToken:
.ee12	5a		phy				phy 								; save Y
.ee13	29 7f		and #$7f			and 	#$7F 						; 7 bit token -> Y
.ee15	a8		tay				tay
.ee16	a2 00		ldx #$00			ldx 	#0 							; offset into token text table.
.ee18					_CLIFind:
.ee18	88		dey				dey 								; decrement counter
.ee19	30 09		bmi $ee24			bmi 	_CLIFoundToken 				; if -ve found the token.
.ee1b					_CLISkip:
.ee1b	bd 68 e0	lda $e068,x			lda 	TokenText,x
.ee1e	e8		inx				inx
.ee1f	0a		asl a				asl		a
.ee20	90 f9		bcc $ee1b			bcc 	_CLISkip
.ee22	80 f4		bra $ee18			bra 	_CLIFind
.ee24					_CLIFoundToken:
.ee24	7a		ply				ply
.ee25					_CLIPrintIt:
.ee25	bd 68 e0	lda $e068,x			lda 	TokenText,x
.ee28	e8		inx				inx
.ee29	48		pha				pha
.ee2a	29 7f		and #$7f			and 	#$7F
.ee2c	20 8e e4	jsr $e48e			jsr 	SIOPrintCharacter
.ee2f	68		pla				pla
.ee30	0a		asl a				asl 	a
.ee31	90 f2		bcc $ee25			bcc 	_CLIPrintIt
.ee33	60		rts				rts

;******  Return to file: basic.asm

.ee34					Start:
.ee34	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.ee36	9a		txs			txs
.ee37	20 50 e4	jsr $e450			jsr 	SIOInitialise 				; initialise the I/O system.
.ee3a	ad 4d 23	lda $234d			lda 	StartBehaviour 				; what to do ?
.ee3d	c9 43		cmp #$43			cmp 	#'C'						; execute from command line
.ee3f	f0 14		beq $ee55			beq		CommandLine
.ee41	c9 52		cmp #$52			cmp 	#'R' 						; run program in memory.
.ee43	f0 07		beq $ee4c			beq	 	RunProgram
.ee45	c9 54		cmp #$54			cmp 	#'T'						; tokenise test
.ee47	f0 49		beq $ee92			beq 	TokeniseExec
.ee49	4c 19 e1	jmp $e119			jmp		SyntaxError
.ee4c					RunProgram:
.ee4c	20 33 eb	jsr $eb33			jsr 	COMMAND_New 				; do a new
.ee4f	20 7a eb	jsr $eb7a			jsr 	COMMAND_Old 				; get back the old program as we're deving.
.ee52	4c 89 ea	jmp $ea89			jmp 	COMMAND_Run
.ee55					CommandLine:
.ee55	20 33 eb	jsr $eb33			jsr 	Command_New
.ee58					WarmStart:
.ee58	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.ee5a	9a		txs			txs
.ee5b	20 cb e4	jsr $e4cb			jsr 	SIOReadLine 				; read input line.
.ee5e	a9 6d		lda #$6d			lda 	#InputLine & $FF 			; tokenise the line
.ee60	85 26		sta $26				sta 	zTemp1
.ee62	a9 20		lda #$20			lda 	#InputLine >> 8
.ee64	85 27		sta $27				sta 	zTemp1+1
.ee66	20 39 e6	jsr $e639			jsr 	TokeniseString
.ee69	a9 00		lda #$00			lda 	#TokeniseBuffer & $FF 		; point current line to tokenised input buffer.
.ee6b	85 20		sta $20				sta 	zCurrentLine
.ee6d	a9 21		lda #$21			lda 	#TokeniseBuffer >> 8
.ee6f	85 21		sta $21				sta 	zCurrentLine+1
.ee71	a0 00		ldy #$00			ldy 	#0
.ee73					_WSSkipSpace:
.ee73	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ee75	c8		iny				iny
.ee76	c9 20		cmp #$20			cmp 	#' '
.ee78	f0 f9		beq $ee73			beq 	_WSSkipSpace
.ee7a	88		dey				dey
.ee7b	c9 30		cmp #$30			cmp 	#"0" 						; if not a digit
.ee7d	90 0f		bcc $ee8e			bcc 	_WSExecute
.ee7f	c9 3a		cmp #$3a			cmp 	#"9"+1
.ee81	b0 0b		bcs $ee8e			bcs 	_WSExecute
.ee83	20 29 e1	jsr $e129			jsr 	ReportError
>ee86	4e 4f 20 45 44 49 54 00				.text 	"NO EDIT",$00
.ee8e					_WSExecute:
.ee8e	ea		nop				nop
.ee8f	4c 9c ea	jmp $ea9c			jmp 	CRUNNextInstruction
.ee92					TokeniseExec:
.ee92	a9 00		lda #$00			lda 	#BasicCode & $FF 			; if so tokenise whatever I've put in the basic code
.ee94	85 26		sta $26				sta 	zTemp1 						; area
.ee96	a9 23		lda #$23			lda 	#BasicCode >> 8
.ee98	85 27		sta $27				sta 	zTemp1+1
.ee9a	20 39 e6	jsr $e639			jsr 	TokeniseString
>ee9d	02						.byte 	2
.2300					BasicCode:

;******  Processing file: include/basic_generated.inc

>2300	1c 0a 00 83 82 31 43 30			.byte $1c,$0a,$00,$83,$82,$31,$43,$30,$30,$92,$81,$54,$45,$53,$54,$49,$4e,$47,$21,$81,$8d,$58,$20,$92,$20,$8b,$34,$00,$29,$d2,$00,$aa,$20,$81,$48,$45,$4c,$4c,$4f,$20,$57,$4f,$52,$4c,$44,$21,$81,$86,$86,$81,$42,$59,$45,$2e,$81,$8e,$86,$83,$82,$31,$43,$30,$30,$86,$58,$86,$85,$58,$00,$07,$2c,$01,$a2,$8d,$ad,$00,$00
>2308	30 92 81 54 45 53 54 49 4e 47 21 81 8d 58 20 92
>2318	20 8b 34 00 29 d2 00 aa 20 81 48 45 4c 4c 4f 20
>2328	57 4f 52 4c 44 21 81 86 86 81 42 59 45 2e 81 8e
>2338	86 83 82 31 43 30 30 86 58 86 85 58 00 07 2c 01
>2348	a2 8d ad 00 00
.234d					StartBehaviour:
>234d	52					.text "R"

;******  Return to file: basic.asm


;******  End of listing
