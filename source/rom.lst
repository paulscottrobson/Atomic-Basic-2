
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -D TARGET=2 -b -L rom.lst -o rom.bin basic.asm
; Sun Jul 28 08:53:57 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: basic.asm


;******  Processing file: porting.asm

.fff8					EXTDummyInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word 	EXTDummyInterrupt
>fffc	9e e9						.word 	Start
>fffe	f8 ff						.word 	EXTDummyInterrupt
=4					EXTZPWork = 4								; Zero Page work for Personality (4 bytes)
=8					IOCursorX = 8 								; Cursor position
=9					IOCursorY = 9
=$20							zeroPage 	= $20 					; first ZP byte to use
=$2000							startMemory = $2000 				; first non ZP byte to use
=$8000							endMemory   = $8000 				; last non ZP byte to use
=$200							basicStack  = $200 					; stack for BASIC
=$400							evalStack   = $400 					; stack for evaluation of expressions

;******  Processing file: personalities/personality_6502.asm

>0000	00					.byte 	0
=40					EXTWidth = 40 								; screen width
=25					EXTHeight = 25 								; screen height
=$0800					EXTLowMemory = $0800 						; Workspace RAM starts here
=$6000					EXTHighMemory = $6000 						; Workspace RAM ends here
=$b000					PScreen = $B000								; 1k screen RAM here
=$b800					PKeyboard = $B800							; Keyboard port.
=$b801					PBreak = $B801 								; Break key.
.a000					EXTStartPersonalise:
.a000	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.a002	9a		txs			txs
.a003	20 82 a0	jsr $a082		jsr 	EXTReset 						; reset video
.a006	20 38 a0	jsr $a038		jsr 	EXTClearScreen 					; clear screen
.a009	4c 9e e9	jmp $e99e		jmp 	Start 							; start main application
.a00c					EXTReadKeyPort:
.a00c	ad 00 b8	lda $b800		lda 	PKeyboard							; read key
.a00f	09 00		ora #$00		ora 	#0
.a011	60		rts			rts
.a012					EXTRemoveKeyPressed:
.a012	48		pha			pha 										; key pressed clear queue byte.
.a013	a9 00		lda #$00		lda 	#0
.a015	8d 00 b8	sta $b800		sta 	PKeyboard
.a018	68		pla			pla
.a019	60		rts			rts
.a01a					EXTCheckBreak:
.a01a	ad 01 b8	lda $b801		lda 	PBreak
.a01d	60		rts			rts
.a01e					EXTReadScreen:
.a01e	5a		phy			phy 										; save Y
.a01f	86 04		stx $04			stx 	EXTZPWork							; into EXTZPWork
.a021	98		tya			tya
.a022	09 b0		ora #$b0		ora 	#PScreen>>8 						; move into screen area
.a024	85 05		sta $05			sta 	EXTZPWork+1 						; read character there
.a026	a0 00		ldy #$00		ldy 	#0
.a028	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a02a	7a		ply			ply 										; restore Y and exit.
.a02b	60		rts			rts
.a02c					EXTWriteScreen:
.a02c	5a		phy			phy
.a02d	48		pha			pha
.a02e	20 1e a0	jsr $a01e		jsr		EXTReadScreen 						; set up the address into EXTZPWork
.a031	a0 00		ldy #$00		ldy 	#0
.a033	68		pla			pla 										; restore and write.
.a034	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a036	7a		ply			ply
.a037	60		rts			rts
.a038					EXTClearScreen:
.a038	48		pha			pha 										; save registers
.a039	da		phx			phx
.a03a	a2 00		ldx #$00		ldx 	#0
.a03c					_EXTCSLoop:
.a03c	a9 20		lda #$20		lda 	#32
.a03e	9d 00 b0	sta $b000,x		sta 	PScreen+0,x
.a041	9d 00 b1	sta $b100,x		sta 	PScreen+$100,x
.a044	9d 00 b2	sta $b200,x		sta 	PScreen+$200,x
.a047	9d 00 b3	sta $b300,x		sta 	PScreen+$300,x
.a04a	e8		inx			inx
.a04b	d0 ef		bne $a03c		bne 	_EXTCSLoop
.a04d	fa		plx			plx 										; restore
.a04e	68		pla			pla
.a04f	60		rts			rts
.a050					EXTScrollDisplay:
.a050	48		pha			pha 										; save registers
.a051	5a		phy			phy
.a052	a9 00		lda #$00		lda 	#PScreen & $FF 					; set pointer to screen
.a054	85 04		sta $04			sta 	EXTZPWork+0
.a056	a9 b0		lda #$b0		lda 	#PScreen >> 8
.a058	85 05		sta $05			sta 	EXTZPWork+1
.a05a					_EXTScroll:
.a05a	a0 28		ldy #$28		ldy 	#EXTWidth
.a05c	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a05e	a0 00		ldy #$00		ldy 	#0
.a060	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a062	e6 04		inc $04			inc 	EXTZPWork 							; bump address
.a064	d0 02		bne $a068		bne 	_EXTNoCarry
.a066	e6 05		inc $05			inc 	EXTZPWork+1
.a068					_EXTNoCarry:
.a068	a5 04		lda $04			lda 	EXTZPWork 							; done ?
.a06a	c9 c0		cmp #$c0		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) & $FF
.a06c	d0 ec		bne $a05a		bne 	_EXTScroll
.a06e	a5 05		lda $05			lda 	EXTZPWork+1
.a070	c9 b3		cmp #$b3		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) >> 8
.a072	d0 e6		bne $a05a		bne 	_EXTScroll
.a074	a0 00		ldy #$00		ldy 	#0									; clear bottom line.
.a076					_EXTLastLine:
.a076	a9 20		lda #$20		lda 	#32
.a078	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a07a	c8		iny			iny
.a07b	c0 28		cpy #$28		cpy 	#EXTWidth
.a07d	d0 f7		bne $a076		bne 	_EXTLastLine
.a07f	7a		ply			ply 										; restore and exit.
.a080	68		pla			pla
.a081	60		rts			rts
.a082					EXTReset:
.a082	60		rts			rts

;******  Return to file: porting.asm


;******  Return to file: basic.asm


;******  Processing file: include/tokens.inc

.e000					KeywordVectorTable:
>e000	5b e4					.word	BFUNC_WordInd                 ; "!"        ($0080)
>e002	ad e9					.word	SyntaxError                   ; """        ($0081)
>e004	ad e9					.word	SyntaxError                   ; "#"        ($0082)
>e006	50 e4					.word	BFUNC_String                  ; "$"        ($0083)
>e008	ef e5					.word	BFUNC_Modulus                 ; "%"        ($0084)
>e00a	62 e4					.word	BFUNC_And                     ; "&"        ($0085)
>e00c	ad e9					.word	SyntaxError                   ; "'"        ($0086)
>e00e	ad e9					.word	SyntaxError                   ; "("        ($0087)
>e010	ad e9					.word	SyntaxError                   ; ")"        ($0088)
>e012	d1 e4					.word	BFUNC_Multiply                ; "*"        ($0089)
>e014	04 e4					.word	BFUNC_Add                     ; "+"        ($008a)
>e016	2a e4					.word	BFUNC_Subtract                ; "-"        ($008b)
>e018	28 e5					.word	BFUNC_Divide                  ; "/"        ($008c)
>e01a	ad e9					.word	SyntaxError                   ; ":"        ($008d)
>e01c	ad e9					.word	SyntaxError                   ; ";"        ($008e)
>e01e	6d e6					.word	BFUNC_LessEqual               ; "<="       ($008f)
>e020	0e e6					.word	BFUNC_NotEquals               ; "<>"       ($0090)
>e022	48 e6					.word	BFUNC_Less                    ; "<"        ($0091)
>e024	0b e6					.word	BFUNC_Equals                  ; "="        ($0092)
>e026	4b e6					.word	BFUNC_GreaterEqual            ; ">="       ($0093)
>e028	6a e6					.word	BFUNC_Greater                 ; ">"        ($0094)
>e02a	54 e4					.word	BFUNC_ByteInd                 ; "?"        ($0095)
>e02c	ac e4					.word	BFUNC_Xor                     ; "^"        ($0096)
>e02e	ea e7					.word	COMMAND_Assert                ; "assert"   ($0097)
>e030	24 e7					.word	UNARY_Abs                     ; "abs"      ($0098)
>e032	2b e8					.word	COMMAND_Clear                 ; "clear"    ($0099)
>e034	0f e7					.word	UNARY_Ch                      ; "ch"       ($009a)
>e036	ad e9					.word	SyntaxError                   ; "do"       ($009b)
>e038	e6 e7					.word	COMMAND_End                   ; "end"      ($009c)
>e03a	ad e9					.word	SyntaxError                   ; "for"      ($009d)
>e03c	ad e9					.word	SyntaxError                   ; "gosub"    ($009e)
>e03e	ad e9					.word	SyntaxError                   ; "goto"     ($009f)
>e040	ad e9					.word	SyntaxError                   ; "input"    ($00a0)
>e042	ad e9					.word	SyntaxError                   ; "if"       ($00a1)
>e044	ad e9					.word	SyntaxError                   ; "list"     ($00a2)
>e046	ad e9					.word	SyntaxError                   ; "loop"     ($00a3)
>e048	ad e9					.word	SyntaxError                   ; "link"     ($00a4)
>e04a	95 e8					.word	COMMAND_Let                   ; "let"      ($00a5)
>e04c	cd e6					.word	UNARY_Len                     ; "len"      ($00a6)
>e04e	ad e9					.word	SyntaxError                   ; "next"     ($00a7)
>e050	18 e8					.word	COMMAND_New                   ; "new"      ($00a8)
>e052	5f e8					.word	COMMAND_Old                   ; "old"      ($00a9)
>e054	ad e9					.word	SyntaxError                   ; "print"    ($00aa)
>e056	0e e8					.word	COMMAND_Rem                   ; "rem"      ($00ab)
>e058	41 e7					.word	UNARY_Rnd                     ; "rnd"      ($00ac)
>e05a	de e7					.word	COMMAND_Stop                  ; "stop"     ($00ad)
>e05c	ad e9					.word	SyntaxError                   ; "step"     ($00ae)
>e05e	ad e9					.word	SyntaxError                   ; "then"     ($00af)
>e060	2c e7					.word	UNARY_Top                     ; "top"      ($00b0)
>e062	ad e9					.word	SyntaxError                   ; "to"       ($00b1)
>e064	87 e4					.word	BFUNC_Or                      ; "|"        ($00b2)
>e066	8c e6					.word	BFUNC_StringCompare           ; "~"        ($00b3)
.e068					TokenText:
>e068	a1					.byte $a1                             ; $0080 !
>e069	a2					.byte $a2                             ; $0081 "
>e06a	a3					.byte $a3                             ; $0082 #
>e06b	a4					.byte $a4                             ; $0083 $
>e06c	a5					.byte $a5                             ; $0084 %
>e06d	a6					.byte $a6                             ; $0085 &
>e06e	a7					.byte $a7                             ; $0086 '
>e06f	a8					.byte $a8                             ; $0087 (
>e070	a9					.byte $a9                             ; $0088 )
>e071	aa					.byte $aa                             ; $0089 *
>e072	ab					.byte $ab                             ; $008a +
>e073	ad					.byte $ad                             ; $008b -
>e074	af					.byte $af                             ; $008c /
>e075	ba					.byte $ba                             ; $008d :
>e076	bb					.byte $bb                             ; $008e ;
>e077	3c bd					.byte $3c,$bd                         ; $008f <=
>e079	3c be					.byte $3c,$be                         ; $0090 <>
>e07b	bc					.byte $bc                             ; $0091 <
>e07c	bd					.byte $bd                             ; $0092 =
>e07d	3e bd					.byte $3e,$bd                         ; $0093 >=
>e07f	be					.byte $be                             ; $0094 >
>e080	bf					.byte $bf                             ; $0095 ?
>e081	de					.byte $de                             ; $0096 ^
>e082	61 73 73 65 72 f4			.byte $61,$73,$73,$65,$72,$f4         ; $0097 assert
>e088	61 62 f3				.byte $61,$62,$f3                     ; $0098 abs
>e08b	63 6c 65 61 f2				.byte $63,$6c,$65,$61,$f2             ; $0099 clear
>e090	63 e8					.byte $63,$e8                         ; $009a ch
>e092	64 ef					.byte $64,$ef                         ; $009b do
>e094	65 6e e4				.byte $65,$6e,$e4                     ; $009c end
>e097	66 6f f2				.byte $66,$6f,$f2                     ; $009d for
>e09a	67 6f 73 75 e2				.byte $67,$6f,$73,$75,$e2             ; $009e gosub
>e09f	67 6f 74 ef				.byte $67,$6f,$74,$ef                 ; $009f goto
>e0a3	69 6e 70 75 f4				.byte $69,$6e,$70,$75,$f4             ; $00a0 input
>e0a8	69 e6					.byte $69,$e6                         ; $00a1 if
>e0aa	6c 69 73 f4				.byte $6c,$69,$73,$f4                 ; $00a2 list
>e0ae	6c 6f 6f f0				.byte $6c,$6f,$6f,$f0                 ; $00a3 loop
>e0b2	6c 69 6e eb				.byte $6c,$69,$6e,$eb                 ; $00a4 link
>e0b6	6c 65 f4				.byte $6c,$65,$f4                     ; $00a5 let
>e0b9	6c 65 ee				.byte $6c,$65,$ee                     ; $00a6 len
>e0bc	6e 65 78 f4				.byte $6e,$65,$78,$f4                 ; $00a7 next
>e0c0	6e 65 f7				.byte $6e,$65,$f7                     ; $00a8 new
>e0c3	6f 6c e4				.byte $6f,$6c,$e4                     ; $00a9 old
>e0c6	70 72 69 6e f4				.byte $70,$72,$69,$6e,$f4             ; $00aa print
>e0cb	72 65 ed				.byte $72,$65,$ed                     ; $00ab rem
>e0ce	72 6e e4				.byte $72,$6e,$e4                     ; $00ac rnd
>e0d1	73 74 6f f0				.byte $73,$74,$6f,$f0                 ; $00ad stop
>e0d5	73 74 65 f0				.byte $73,$74,$65,$f0                 ; $00ae step
>e0d9	74 68 65 ee				.byte $74,$68,$65,$ee                 ; $00af then
>e0dd	74 6f f0				.byte $74,$6f,$f0                     ; $00b0 top
>e0e0	74 ef					.byte $74,$ef                         ; $00b1 to
>e0e2	fc					.byte $fc                             ; $00b2 |
>e0e3	fe					.byte $fe                             ; $00b3 ~
>e0e4	00					.byte $00
.e0e5					TokenTypeInformation:
>e0e5	04					.byte $04                             ; $0080 !
>e0e6	0a					.byte $0a                             ; $0081 "
>e0e7	0a					.byte $0a                             ; $0082 #
>e0e8	04					.byte $04                             ; $0083 $
>e0e9	03					.byte $03                             ; $0084 %
>e0ea	00					.byte $00                             ; $0085 &
>e0eb	0a					.byte $0a                             ; $0086 '
>e0ec	0a					.byte $0a                             ; $0087 (
>e0ed	0a					.byte $0a                             ; $0088 )
>e0ee	03					.byte $03                             ; $0089 *
>e0ef	02					.byte $02                             ; $008a +
>e0f0	02					.byte $02                             ; $008b -
>e0f1	03					.byte $03                             ; $008c /
>e0f2	0a					.byte $0a                             ; $008d :
>e0f3	0a					.byte $0a                             ; $008e ;
>e0f4	01					.byte $01                             ; $008f <=
>e0f5	01					.byte $01                             ; $0090 <>
>e0f6	01					.byte $01                             ; $0091 <
>e0f7	01					.byte $01                             ; $0092 =
>e0f8	01					.byte $01                             ; $0093 >=
>e0f9	01					.byte $01                             ; $0094 >
>e0fa	04					.byte $04                             ; $0095 ?
>e0fb	00					.byte $00                             ; $0096 ^
>e0fc	04					.byte $04                             ; $0097 assert
>e0fd	09					.byte $09                             ; $0098 abs
>e0fe	04					.byte $04                             ; $0099 clear
>e0ff	09					.byte $09                             ; $009a ch
>e100	04					.byte $04                             ; $009b do
>e101	04					.byte $04                             ; $009c end
>e102	04					.byte $04                             ; $009d for
>e103	04					.byte $04                             ; $009e gosub
>e104	04					.byte $04                             ; $009f goto
>e105	04					.byte $04                             ; $00a0 input
>e106	04					.byte $04                             ; $00a1 if
>e107	04					.byte $04                             ; $00a2 list
>e108	04					.byte $04                             ; $00a3 loop
>e109	04					.byte $04                             ; $00a4 link
>e10a	04					.byte $04                             ; $00a5 let
>e10b	09					.byte $09                             ; $00a6 len
>e10c	04					.byte $04                             ; $00a7 next
>e10d	04					.byte $04                             ; $00a8 new
>e10e	04					.byte $04                             ; $00a9 old
>e10f	04					.byte $04                             ; $00aa print
>e110	04					.byte $04                             ; $00ab rem
>e111	09					.byte $09                             ; $00ac rnd
>e112	04					.byte $04                             ; $00ad stop
>e113	04					.byte $04                             ; $00ae step
>e114	04					.byte $04                             ; $00af then
>e115	09					.byte $09                             ; $00b0 top
>e116	04					.byte $04                             ; $00b1 to
>e117	00					.byte $00                             ; $00b2 |
>e118	01					.byte $01                             ; $00b3 ~
=$00					KTYPE_PRECBASE = $00
=$08					KTYPE_COMMAND = $08
=$09					KTYPE_UNARYFN = $09
=$0a					KTYPE_SYNTAX = $0a
=$0080					KW_PLING = $0080
=$0081					KW_DQUOTE = $0081
=$0082					KW_HASH = $0082
=$0083					KW_DOLLAR = $0083
=$0084					KW_PERCENT = $0084
=$0085					KW_AMPERSAND = $0085
=$0086					KW_SQUOTE = $0086
=$0087					KW_LPAREN = $0087
=$0088					KW_RPAREN = $0088
=$0089					KW_STAR = $0089
=$008a					KW_PLUS = $008a
=$008b					KW_MINUS = $008b
=$008c					KW_FSLASH = $008c
=$008d					KW_COLON = $008d
=$008e					KW_SEMICOLON = $008e
=$008f					KW_LESSEQUAL = $008f
=$0090					KW_LESSGREATER = $0090
=$0091					KW_LESS = $0091
=$0092					KW_EQUAL = $0092
=$0093					KW_GREATEREQUAL = $0093
=$0094					KW_GREATER = $0094
=$0095					KW_QUESTION = $0095
=$0096					KW_HAT = $0096
=$0097					KW_ASSERT = $0097
=$0098					KW_ABS = $0098
=$0099					KW_CLEAR = $0099
=$009a					KW_CH = $009a
=$009b					KW_DO = $009b
=$009c					KW_END = $009c
=$009d					KW_FOR = $009d
=$009e					KW_GOSUB = $009e
=$009f					KW_GOTO = $009f
=$00a0					KW_INPUT = $00a0
=$00a1					KW_IF = $00a1
=$00a2					KW_LIST = $00a2
=$00a3					KW_LOOP = $00a3
=$00a4					KW_LINK = $00a4
=$00a5					KW_LET = $00a5
=$00a6					KW_LEN = $00a6
=$00a7					KW_NEXT = $00a7
=$00a8					KW_NEW = $00a8
=$00a9					KW_OLD = $00a9
=$00aa					KW_PRINT = $00aa
=$00ab					KW_REM = $00ab
=$00ac					KW_RND = $00ac
=$00ad					KW_STOP = $00ad
=$00ae					KW_STEP = $00ae
=$00af					KW_THEN = $00af
=$00b0					KW_TOP = $00b0
=$00b1					KW_TO = $00b1
=$00b2					KW_BAR = $00b2
=$00b3					KW_TILDE = $00b3

;******  Return to file: basic.asm


;******  Processing file: general/support.asm

.e119					CheckNextCharacter:
.e119	8d 6e 20	sta $206e			sta 	Temp1 						; save character to check
.e11c					_CNCLoop:
.e11c	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next
.e11e	f0 0b		beq $e12b			beq 	_CNCFail 					; end of line, so no character
.e120	c8		iny				iny
.e121	c9 20		cmp #$20			cmp 	#' ' 						; skip spaces
.e123	f0 f7		beq $e11c			beq 	_CNCLoop
.e125	cd 6e 20	cmp $206e			cmp 	Temp1 						; fail if not what was wanted
.e128	d0 01		bne $e12b			bne 	_CNCFail
.e12a	60		rts				rts
.e12b					_CNCFail:
.e12b	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e12e	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00
>e136	74 6f 6b 65 6e 00

;******  Return to file: basic.asm


;******  Processing file: general/data.asm

=$e13c							currentPosData = *
>0020					zCurrentLine: 	.word 	?					; address of current line (offset word)
>0022					zBasicStack:	.word 	? 					; stack for BASIC.
>0024					zLowMemory:		.word	?					; next free space after program (arrays,vars etc.)
>0026					zTemp1:			.word 	?					; temporary vars
>0028					zTemp2:			.word 	?
>002a					zTargetAddr: 	.dword 	? 					; address of LHS of assignment
>2000					FixedVariables:	.fill 	27*4 				; address of 26 x 4 byte fixed variables @A-Z
>206c					HighMemory:		.word 	?					; highest memory location available (2 bytes)
>206e					Temp1:			.dword	?					; 4 byte temporary stores.
>2072					SignCount:		.byte 	? 					; count of signs in divide.
>2073					StringBufferPos:.byte 	? 					; next free slot in string buffer
>2074					RandomSeed 		.word 	? 					; Random Number
>2076									.align	256
.2100					StringBuffer:
>2100									.byte ?
>2101									.align	256
.2200					BasicProgram:

;******  Return to file: basic.asm


;******  Processing file: general/evaluate.asm

.e13c					EvaluateSNError:
.e13c	4c ad e9	jmp $e9ad			jmp 	SyntaxError
.e13f					EvaluateMissingQuote:
.e13f	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e142	4d 69 73 73 69 6e 67 20				.text 	"Missing quote",$00
>e14a	71 75 6f 74 65 00
.e150					EvaluateStringFull:
.e150	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e153	53 74 72 69 6e 67 20 42				.text 	"String Buffer full",$00
>e15b	75 66 66 65 72 20 66 75 6c 6c 00
.e166					EvaluateBadHex:
.e166	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e169	42 61 64 20 48 65 78 00				.text 	"Bad Hex",$00
.e171					EvaluateAtomCurrentLevel:
.e171	a9 07		lda #$07			lda 	#7
.e173	80 04		bra $e179			bra 	EvaluateAtPrecedenceLevel
.e175					EvaluateBase:
.e175	a2 00		ldx #$00			ldx 	#0 							; reset the stack
.e177					EvaluateBaseCurrentLevel:
.e177	a9 00		lda #$00			lda 	#0 							; current precedence is zero
.e179					EvaluateAtPrecedenceLevel:
.e179	48		pha				pha 								; save precedence level
.e17a	a9 00		lda #$00			lda 	#0 							; zero the result.
.e17c	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e17f	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e182	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e185	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e188					_EVALSkipSpace1:
.e188	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token, skipping over spaces.
.e18a	f0 b0		beq $e13c			beq 	EvaluateSNError 			; end of line, without token.
.e18c	c8		iny				iny
.e18d	c9 20		cmp #$20			cmp 	#32
.e18f	f0 f7		beq $e188			beq 	_EVALSkipSpace1
.e191	88		dey				dey 								; points at the token.
.e192	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; is it opening quote ?
.e194	f0 14		beq $e1aa			beq 	_EVALString  				; if so load in a constant string
.e196	c9 82		cmp #$82			cmp 	#KW_HASH 					; is it a hash, e.g. hexadecimal.
.e198	f0 36		beq $e1d0			beq 	_EVALHexadecimal
.e19a	c9 30		cmp #$30			cmp 	#'0'						; is it in range 0-9
.e19c	90 04		bcc $e1a2			bcc		_EVALGoKeywordVariable 		; yes, it's a keyword or variable.
.e19e	c9 3a		cmp #$3a			cmp 	#'9'+1
.e1a0	90 03		bcc $e1a5			bcc 	_EVALDecimal
.e1a2					_EVALGoKeywordVariable:
.e1a2	4c 27 e2	jmp $e227			jmp 	_EVALKeywordVariable
.e1a5					_EVALDecimal:
.e1a5	20 84 e2	jsr $e284			jsr 	EVALGetDecConstant 			; get decimal constant
.e1a8	80 34		bra $e1de			bra 	_EVALGotAtom 				; got atom.
.e1aa					_EVALString:
.e1aa	da		phx				phx 								; save X on stack
.e1ab	a9 21		lda #$21			lda 	#StringBuffer >> 8 			; set the address in the eval stack
.e1ad	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e1b0	ad 73 20	lda $2073			lda 	StringBufferPos 			; X = Buffer Position.
.e1b3	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; that's the address of the new string
.e1b6	aa		tax				tax 								; put in X to build the string.
.e1b7	c8		iny				iny 								; skip over opening quote character
.e1b8					_EVALStringCopy:
.e1b8	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character.
.e1ba	c8		iny				iny
.e1bb	f0 82		beq $e13f			beq		EvaluateMissingQuote 		; if zero, then there was no closing quote.
.e1bd	9d 00 21	sta $2100,x			sta 	StringBuffer,x 				; copy into the buffer
.e1c0	e8		inx				inx 								; and bump that pointer.
.e1c1	f0 8d		beq $e150			beq 	EvaluateStringFull 			; buffer is full.
.e1c3	49 81		eor #$81			eor 	#KW_DQUOTE					; keep going if not closing quote.
.e1c5	d0 f1		bne $e1b8			bne 	_EVALStringCopy
.e1c7	8e 73 20	stx $2073			stx 	StringBufferPos 			; this is the new next free slot.
.e1ca	9d ff 20	sta $20ff,x			sta 	StringBuffer-1,x 			; write the zero (EOS) hence EOR to end string.
.e1cd	fa		plx				plx 								; restore X
.e1ce	80 0e		bra $e1de			bra 	_EVALGotAtom 				; got the atom.
.e1d0					_EVALHexaDecimal
.e1d0	c8		iny				iny 								; skip over the '#'
.e1d1	5a		phy				phy 								; save Y
.e1d2	20 f0 e2	jsr $e2f0			jsr 	EVALGetHexConstant 			; load in hexadecimal constant
.e1d5	8c 6e 20	sty $206e			sty 	Temp1 						; has Y changed ?
.e1d8	68		pla				pla
.e1d9	cd 6e 20	cmp $206e			cmp 	Temp1
.e1dc	f0 88		beq $e166			beq 	EvaluateBadHex 				; if not, error.
.e1de					_EVALGotAtom:
.e1de					_EVALGetOperator:
.e1de	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token skip spaces.
.e1e0	c8		iny				iny 								; this should be binary operator
.e1e1	c9 20		cmp #$20			cmp 	#$20
.e1e3	f0 f9		beq $e1de			beq 	_EVALGetOperator
.e1e5	88		dey				dey
.e1e6	09 00		ora #$00			ora 	#0 							; to be a binary token must be -ve
.e1e8	10 3b		bpl $e225			bpl 	_EVALExitPullA 				; if +ve then exit now.
.e1ea	da		phx				phx 								; save X
.e1eb	aa		tax				tax 								; token in X
.e1ec	bd 65 e0	lda $e065,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e1ef	8d 6e 20	sta $206e			sta 	Temp1 						; save precedence in Temp1
.e1f2	fa		plx				plx 								; restore X
.e1f3	c9 08		cmp #$08			cmp 	#8 							; if type >= 8, e.g. not binary, then exit.
.e1f5	b0 2e		bcs $e225			bcs 	_EVALExitPullA
.e1f7	68		pla				pla 								; get and save precedence level.
.e1f8	48		pha				pha
.e1f9	cd 6e 20	cmp $206e			cmp 	Temp1 						; compare operator precedence - keyword precedence level.
.e1fc	f0 02		beq $e200			beq 	_EVALDoCalc					; equal, do it.
.e1fe	b0 25		bcs $e225			bcs 	_EVALExitPullA				; too high, then exit.
.e200					_EVALDoCalc:
.e200	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token, save on stack and skip it.
.e202	c8		iny				iny
.e203	48		pha				pha
.e204	da		phx				phx
.e205	e8		inx				inx 								; work out right hand side.
.e206	e8		inx				inx
.e207	e8		inx				inx
.e208	e8		inx				inx
.e209	ad 6e 20	lda $206e			lda 	Temp1 						; get current operator precedence level.
.e20c	1a		inc a				inc 	a 							; so work it out at the next level.
.e20d	20 79 e1	jsr $e179			jsr 	EvaluateAtPrecedenceLevel 	; work out the RHS.
.e210	fa		plx				plx 								; fix X back.
.e211	68		pla				pla 								; get keyword
.e212					_EVALExecuteA:
.e212	0a		asl a				asl 	a 							; shift left, drop bit 7
.e213	8d 6f 20	sta $206f			sta 	Temp1+1						; save in Temp1.1
.e216	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e218	8d 70 20	sta $2070			sta 	Temp1+2 					; set at Temp1.2
.e21b	a9 6c		lda #$6c			lda 	#$6C 						; make JMP (xxxx)
.e21d	8d 6e 20	sta $206e			sta 	Temp1+0
.e220	20 6e 20	jsr $206e			jsr 	Temp1 						; call that routine.
.e223	80 b9		bra $e1de			bra 	_EVALGotAtom 				; and loop back again.
.e225					_EVALExitPullA:
.e225	68		pla				pla 								; restore precedence.
.e226	60		rts				rts
.e227					_EVALKeywordVariable:
.e227	09 00		ora #$00			ora 	#0 							; check bit 7
.e229	10 0f		bpl $e23a			bpl 	_EVALNotUnaryFunction 		; must be set for unary function
.e22b	da		phx				phx
.e22c	aa		tax				tax
.e22d	bd 65 e0	lda $e065,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e230	fa		plx				plx
.e231	c9 09		cmp #$09			cmp 	#KTYPE_UNARYFN 				; is it a unary function
.e233	d0 05		bne $e23a			bne 	_EVALNotUnaryFunction
.e235	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token back
.e237	c8		iny				iny 								; consume it
.e238	80 d8		bra $e212			bra 	_EVALExecuteA 				; execute TOS.
.e23a					_EVALNotUnaryFunction:
.e23a	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e23c	10 3d		bpl $e27b			bpl 	_EVALCheckVariable 			; if ASCII check variable
.e23e	c9 8b		cmp #$8b			cmp 	#KW_MINUS 					; check negation
.e240	f0 0f		beq $e251			beq 	_EVALUnaryNegation
.e242	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; check left bracket.
.e244	d0 14		bne $e25a			bne		_EVALCheckUnaryOperator
.e246	c8		iny				iny 								; skip left bracket.
.e247	20 77 e1	jsr $e177			jsr 	EvaluateBaseCurrentLevel 	; calculate what's in the bracket.
.e24a	a9 88		lda #$88			lda 	#KW_RPAREN 					; check right bracket.
.e24c	20 19 e1	jsr $e119			jsr 	CheckNextCharacter 			; check next character, after spaces.
.e24f	80 8d		bra $e1de			bra 	_EVALGotAtom
.e251					_EVALUnaryNegation:
.e251	c8		iny				iny 								; skip over the - sign.
.e252	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel 	; calculate what's being negatived (...)
.e255	20 ca e5	jsr $e5ca			jsr 	BFUNC_NegateAlways 			; negate it.
.e258	80 84		bra $e1de			bra 	_EVALGotAtom
.e25a					_EVALCheckUnaryOperator:
.e25a	48		pha				pha 								; save indirection operator.
.e25b	c8		iny				iny 								; skip over the operator
.e25c	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel 	; calculate the address.
.e25f	68		pla				pla 								; restore the operator
.e260	c9 83		cmp #$83			cmp 	#KW_DOLLAR					; $ is for visual typing, it does nothing
.e262	f0 0e		beq $e272			beq 	_EVALGoGotAtom
.e264	c9 95		cmp #$95			cmp 	#KW_QUESTION				; byte indirection
.e266	f0 07		beq $e26f			beq 	_EVALByteRead
.e268	c9 80		cmp #$80			cmp 	#KW_PLING					; word indirection
.e26a	f0 09		beq $e275			beq 	_EVALWordRead
.e26c	4c ad e9	jmp $e9ad			jmp 	SyntaxError 				; give up.
.e26f					_EVALByteRead:
.e26f	20 2f e3	jsr $e32f			jsr 	EVALReadByteIndirect
.e272					_EVALGoGotAtom:
.e272	4c de e1	jmp $e1de			jmp 	_EVALGotAtom
.e275					_EVALWordRead:
.e275	20 58 e3	jsr $e358			jsr 	EVALReadWordIndirect
.e278	4c de e1	jmp $e1de			jmp 	_EVALGotAtom
.e27b					_EVALCheckVariable:
.e27b	20 88 e3	jsr $e388			jsr 	VARReference 				; get variable reference to ZTemp1
.e27e	20 6c e3	jsr $e36c			jsr 	EVALReadWordIndirectZTemp	; read that address into current stack level.
.e281	4c de e1	jmp $e1de			jmp 	_EVALGotAtom 				; and go round.
.e284					EVALGetDecConstant:
.e284	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e286	c9 30		cmp #$30			cmp 	#'0'						; check in range 0-9.
.e288	90 04		bcc $e28e			bcc 	_EVGDExit
.e28a	c9 3a		cmp #$3a			cmp 	#'9'+1
.e28c	90 01		bcc $e28f			bcc 	_EVGDValue 					; if so has legal value
.e28e					_EVGDExit:
.e28e	60		rts				rts
.e28f					_EVGDValue:
.e28f	48		pha				pha 								; save value, Y on stack
.e290	5a		phy				phy
.e291	a0 03		ldy #$03			ldy 	#3 							; 3 shifts.
.e293	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; push x1 value on stack.
.e296	48		pha				pha
.e297	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e29a	48		pha				pha
.e29b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e29e	48		pha				pha
.e29f	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e2a2	48		pha				pha
.e2a3					_EVGDLoop:
.e2a3	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; rotate left once.
.e2a6	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e2a9	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e2ac	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e2af	c0 02		cpy #$02			cpy 	#2 							; if done it twice now
.e2b1	d0 1d		bne $e2d0			bne 	_EVGDNoAdd
.e2b3	18		clc				clc 								; then it will be x 4, adding +1 => x 5
.e2b4	68		pla				pla
.e2b5	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e2b8	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e2bb	68		pla				pla
.e2bc	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e2bf	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e2c2	68		pla				pla
.e2c3	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e2c6	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e2c9	68		pla				pla
.e2ca	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e2cd	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e2d0					_EVGDNoAdd:
.e2d0	88		dey				dey
.e2d1	d0 d0		bne $e2a3			bne 	_EVGDLoop
.e2d3	7a		ply				ply 								; restore YA
.e2d4	68		pla				pla
.e2d5	c8		iny				iny 								; next character
.e2d6	29 0f		and #$0f			and 	#15 						; force into range and put in.
.e2d8	18		clc				clc
.e2d9	7d 00 04	adc $0400,x			adc 	evalStack+0,x 				; add digit in
.e2dc	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e2df	90 a3		bcc $e284			bcc 	EVALGetDecConstant 			; propogate constant through
.e2e1	fe 01 04	inc $0401,x			inc 	evalStack+1,x
.e2e4	d0 9e		bne $e284			bne 	EVALGetDecConstant
.e2e6	fe 02 04	inc $0402,x			inc 	evalStack+2,x
.e2e9	d0 99		bne $e284			bne 	EVALGetDecConstant
.e2eb	fe 03 04	inc $0403,x			inc 	evalStack+3,x
.e2ee	80 94		bra $e284			bra 	EVALGetDecConstant 			; go back and try again.
.e2f0					EVALGetHexConstant:
.e2f0	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e2f2	20 24 e3	jsr $e324			jsr 	EVALToUpper 				; make upper case
.e2f5	38		sec				sec
.e2f6	e9 30		sbc #$30			sbc 	#"0" 						; range 0-9
.e2f8	90 0a		bcc $e304			bcc 	_EVGHExit 					; exit if CC
.e2fa	c9 0a		cmp #$0a			cmp 	#9+1 						; if < 9 have a legal value.
.e2fc	90 07		bcc $e305			bcc 	_EVGHValue
.e2fe	e9 07		sbc #$07			sbc 	#7 							; now in range 10-15 if okay.
.e300	c9 10		cmp #$10			cmp 	#15+1
.e302	90 01		bcc $e305			bcc 	_EVGHValue
.e304					_EVGHExit:
.e304	60		rts				rts
.e305					_EVGHValue:
.e305	5a		phy				phy 								; save Y and new digit.
.e306	48		pha				pha
.e307	a0 04		ldy #$04			ldy 	#4 							; rotate left 4
.e309					_EVGHRotate:
.e309	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e30c	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e30f	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e312	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e315	88		dey				dey
.e316	d0 f1		bne $e309			bne 	_EVGHRotate
.e318	68		pla				pla 								; restore digit and X
.e319	7a		ply				ply
.e31a	c8		iny				iny 								; next character
.e31b	18		clc				clc
.e31c	1d 00 04	ora $0400,x			ora 	evalStack+0,x 				; add digit in
.e31f	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e322	80 cc		bra $e2f0			bra 	EVALGetHexConstant 			; go back and try again.
.e324					EVALToUpper:
.e324	c9 61		cmp #$61			cmp 	#'a'
.e326	90 06		bcc $e32e			bcc 	_EVTUExit
.e328	c9 7b		cmp #$7b			cmp 	#'z'+1
.e32a	b0 02		bcs $e32e			bcs 	_EVTUExit
.e32c	49 20		eor #$20			eor 	#32
.e32e					_EVTUExit:
.e32e	60		rts				rts
.e32f					EVALReadByteIndirect:
.e32f	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e332	85 26		sta $26				sta 	zTemp1
.e334	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e337	85 27		sta $27				sta 	zTemp1+1
.e339	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e33c	85 28		sta $28				sta 	zTemp1+2
.e33e	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e341	85 29		sta $29				sta 	zTemp1+3
.e343	5a		phy				phy
.e344	a0 00		ldy #$00			ldy 	#0 							; read byte
.e346	b1 26		lda ($26),y			lda 	(zTemp1),y
.e348	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e34b	7a		ply				ply
.e34c	a9 00		lda #$00			lda 	#0 							; zero upper three bytes
.e34e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e351	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e354	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e357	60		rts				rts
.e358					EVALReadWordIndirect:
.e358	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e35b	85 26		sta $26				sta 	zTemp1
.e35d	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e360	85 27		sta $27				sta 	zTemp1+1
.e362	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e365	85 28		sta $28				sta 	zTemp1+2
.e367	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e36a	85 29		sta $29				sta 	zTemp1+3
.e36c					EVALReadWordIndirectZTemp:
.e36c	5a		phy				phy
.e36d	a0 00		ldy #$00			ldy 	#0 							; read word
.e36f	b1 26		lda ($26),y			lda 	(zTemp1),y
.e371	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e374	c8		iny				iny
.e375	b1 26		lda ($26),y			lda 	(zTemp1),y
.e377	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e37a	c8		iny				iny
.e37b	b1 26		lda ($26),y			lda 	(zTemp1),y
.e37d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e380	c8		iny				iny
.e381	b1 26		lda ($26),y			lda 	(zTemp1),y
.e383	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e386	7a		ply				ply
.e387	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/variable.asm

.e388					VARReference:
.e388	38		sec				sec 								; check range @-Z there
.e389	c9 40		cmp #$40			cmp 	#'@'
.e38b	90 04		bcc $e391			bcc 	_VARRError
.e38d	c9 5b		cmp #$5b			cmp 	#'Z'+1 						; there are 27 variables @ and A-Z
.e38f	90 03		bcc $e394			bcc 	_VARROkay
.e391					_VARRError:
.e391	4c ad e9	jmp $e9ad			jmp		SyntaxError
.e394					_VARROkay:
.e394	c8		iny				iny 								; consume the variable.
.e395	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it @@ AA BB CC ?
.e397	f0 1b		beq $e3b4			beq 	_VARArrayAccess 			; array access AA0 AA1 etc.
.e399	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get that second character
.e39b	88		dey				dey 								; point back to the first character
.e39c	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; if ( then it is A(x) format.
.e39e	f0 14		beq $e3b4			beq 	_VARArrayAccess
.e3a0	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; reget variable.
.e3a2	c8		iny				iny
.e3a3	29 1f		and #$1f			and		#31 						; mask out
.e3a5	0a		asl a				asl 	a 							; x 4
.e3a6	0a		asl a				asl 	a
.e3a7	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e3a9	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e3ab	85 27		sta $27				sta 	zTemp1+1
.e3ad	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.e3af	85 28		sta $28				sta 	zTemp1+2
.e3b1	85 29		sta $29				sta 	zTemp1+3 					; return with address set.
.e3b3	60		rts				rts
.e3b4					_VARArrayAccess:
.e3b4	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get variable
.e3b6	c8		iny				iny
.e3b7	29 1f		and #$1f			and 	#31 						; mask it off
.e3b9	48		pha				pha 								; save on the stack.
.e3ba	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel 	; calculate the index.
.e3bd	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; multiply by four.
.e3c0	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e3c3	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e3c6	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e3c9	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e3cc	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e3cf	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e3d2	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e3d5	68		pla				pla 								; put address in zTemp1
.e3d6	0a		asl a				asl 	a 							; x 4
.e3d7	0a		asl a				asl 	a
.e3d8	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e3da	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e3dc	85 27		sta $27				sta 	zTemp1+1
.e3de	5a		phy				phy
.e3df	a0 00		ldy #$00			ldy 	#0 							; calculate	evalStack+0,3 + (zTemp)
.e3e1	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3e3	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e3e6	48		pha				pha 								; save first result as we need the indirection.
.e3e7	c8		iny				iny 								; 2nd byte
.e3e8	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3ea	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e3ed	85 27		sta $27				sta 	zTemp1+1
.e3ef	68		pla				pla 								; save the low byte.
.e3f0	85 26		sta $26				sta 	zTemp1+0
.e3f2	a9 00		lda #$00			lda 	#0
.e3f4	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e3f7	85 28		sta $28				sta 	zTemp1+2
.e3f9	a9 00		lda #$00			lda 	#0
.e3fb	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e3fe	85 29		sta $29				sta 	zTemp1+3
.e400	7a		ply				ply 								; restore Y, address setup
.e401	60		rts				rts
.e402	80 fe		bra $e402	x1:		bra 	x1

;******  Return to file: basic.asm


;******  Processing file: binary/arithmetic.asm

.e404					BFUNC_Add:
.e404	18		clc				clc
.e405	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e408	7d 04 04	adc $0404,x			adc 	evalStack+4,x
.e40b	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e40e	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e411	7d 05 04	adc $0405,x			adc 	evalStack+5,x
.e414	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e417	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e41a	7d 06 04	adc $0406,x			adc 	evalStack+6,x
.e41d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e420	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e423	7d 07 04	adc $0407,x			adc 	evalStack+7,x
.e426	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e429	60		rts				rts
.e42a					BFUNC_Subtract:
.e42a	38		sec				sec
.e42b	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e42e	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e431	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e434	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e437	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e43a	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e43d	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e440	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e443	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e446	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e449	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e44c	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e44f	60		rts				rts
.e450					BFUNC_String:
.e450	20 04 e4	jsr $e404			jsr 	BFUNC_Add
.e453	60		rts				rts
.e454					BFUNC_ByteInd:
.e454	20 04 e4	jsr $e404			jsr 	BFUNC_Add
.e457	20 2f e3	jsr $e32f			jsr 	EVALReadByteIndirect
.e45a	60		rts				rts
.e45b					BFUNC_WordInd:
.e45b	20 04 e4	jsr $e404			jsr 	BFUNC_Add
.e45e	20 58 e3	jsr $e358			jsr 	EVALReadWordIndirect
.e461	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/binary.asm

.e462					BFUNC_And:
.e462	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e465	3d 04 04	and $0404,x			and 	evalStack+4,x
.e468	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e46b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e46e	3d 05 04	and $0405,x			and 	evalStack+5,x
.e471	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e474	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e477	3d 06 04	and $0406,x			and 	evalStack+6,x
.e47a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e47d	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e480	3d 07 04	and $0407,x			and 	evalStack+7,x
.e483	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e486	60		rts				rts
.e487					BFUNC_Or:
.e487	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e48a	1d 04 04	ora $0404,x			ora 	evalStack+4,x
.e48d	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e490	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e493	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e496	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e499	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e49c	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e49f	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e4a2	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e4a5	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e4a8	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e4ab	60		rts				rts
.e4ac					BFUNC_Xor:
.e4ac	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e4af	5d 04 04	eor $0404,x			eor 	evalStack+4,x
.e4b2	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e4b5	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e4b8	5d 05 04	eor $0405,x			eor 	evalStack+5,x
.e4bb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e4be	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e4c1	5d 06 04	eor $0406,x			eor 	evalStack+6,x
.e4c4	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e4c7	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e4ca	5d 07 04	eor $0407,x			eor 	evalStack+7,x
.e4cd	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e4d0	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/multiply.asm

.e4d1					BFUNC_Multiply:
.e4d1	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy +0 to +8
.e4d4	9d 08 04	sta $0408,x			sta 	evalStack+8,x
.e4d7	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e4da	9d 09 04	sta $0409,x			sta 	evalStack+9,x
.e4dd	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e4e0	9d 0a 04	sta $040a,x			sta 	evalStack+10,x
.e4e3	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e4e6	9d 0b 04	sta $040b,x			sta 	evalStack+11,x
.e4e9	a9 00		lda #$00			lda 	#0
.e4eb	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; zero +0
.e4ee	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e4f1	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e4f4	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e4f7					_BFMMultiply:
.e4f7	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; get LSBit of 8-11
.e4fa	29 01		and #$01			and 	#1
.e4fc	f0 03		beq $e501			beq 	_BFMNoAdd
.e4fe	20 04 e4	jsr $e404			jsr 	BFunc_Add 					; if bit set, add 4 to 0.
.e501					_BFMNoAdd:
.e501	1e 04 04	asl $0404,x			asl 	evalStack+4,x 				; shift +4 left
.e504	3e 05 04	rol $0405,x			rol 	evalStack+5,x
.e507	3e 06 04	rol $0406,x			rol 	evalStack+6,x
.e50a	3e 07 04	rol $0407,x			rol 	evalStack+7,x
.e50d	5e 0b 04	lsr $040b,x			lsr 	evalStack+11,x 				; shift +8 right
.e510	7e 0a 04	ror $040a,x			ror 	evalStack+10,x
.e513	7e 09 04	ror $0409,x			ror 	evalStack+9,x
.e516	7e 08 04	ror $0408,x			ror 	evalStack+8,x
.e519	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; continue if +8 is nonzero
.e51c	1d 09 04	ora $0409,x			ora 	evalStack+9,x
.e51f	1d 0a 04	ora $040a,x			ora 	evalStack+10,x
.e522	1d 0b 04	ora $040b,x			ora 	evalStack+11,x
.e525	d0 d0		bne $e4f7			bne 	_BFMMultiply
.e527	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/divide.asm

.e528					BFUNC_Divide:
.e528	bd 04 04	lda $0404,x			lda 	evalStack+4,x 				; check for /0
.e52b	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e52e	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e531	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e534	d0 13		bne $e549			bne 	_BFDOkay
.e536	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e539	44 69 76 69 73 6f 6e 20				.text 	"Divison by Zero",$00
>e541	62 79 20 5a 65 72 6f 00
.e549					_BFDOkay:
.e549	a9 00		lda #$00			lda 	#0 							; Temp1 is 'A' (and holds the remainder)
.e54b	8d 6e 20	sta $206e			sta 	Temp1 						; Q/Dividend/Left in +0
.e54e	8d 6f 20	sta $206f			sta 	Temp1+1 					; M/Divisor/Right in +4
.e551	8d 70 20	sta $2070			sta 	Temp1+2
.e554	8d 71 20	sta $2071			sta 	Temp1+3
.e557	8d 72 20	sta $2072			sta 	SignCount 					; Count of signs.
.e55a	20 c5 e5	jsr $e5c5			jsr 	BFUNC_Negate 				; negate (and bump sign count)
.e55d	da		phx				phx
.e55e	e8		inx				inx
.e55f	e8		inx				inx
.e560	e8		inx				inx
.e561	e8		inx				inx
.e562	20 c5 e5	jsr $e5c5			jsr 	BFUNC_Negate
.e565	fa		plx				plx
.e566	5a		phy				phy 								; Y is the counter
.e567	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.e569					_BFDLoop:
.e569	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; shift AQ left.
.e56c	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e56f	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e572	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e575	2e 6e 20	rol $206e			rol 	Temp1
.e578	2e 6f 20	rol $206f			rol 	Temp1+1
.e57b	2e 70 20	rol $2070			rol 	Temp1+2
.e57e	2e 71 20	rol $2071			rol 	Temp1+3
.e581	38		sec				sec
.e582	ad 6e 20	lda $206e			lda 	Temp1+0 					; Calculate A-M on stack.
.e585	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e588	48		pha				pha
.e589	ad 6f 20	lda $206f			lda 	Temp1+1
.e58c	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e58f	48		pha				pha
.e590	ad 70 20	lda $2070			lda 	Temp1+2
.e593	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e596	48		pha				pha
.e597	ad 71 20	lda $2071			lda 	Temp1+3
.e59a	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e59d	90 19		bcc $e5b8			bcc 	_BFDNoAdd
.e59f	8d 71 20	sta $2071			sta 	Temp1+3 					; update A
.e5a2	68		pla				pla
.e5a3	8d 70 20	sta $2070			sta 	Temp1+2
.e5a6	68		pla				pla
.e5a7	8d 6f 20	sta $206f			sta 	Temp1+1
.e5aa	68		pla				pla
.e5ab	8d 6e 20	sta $206e			sta 	Temp1+0
.e5ae	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; set Q bit 1.
.e5b1	09 01		ora #$01			ora 	#1
.e5b3	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e5b6	80 03		bra $e5bb			bra 	_BFDNext
.e5b8					_BFDNoAdd:
.e5b8	68		pla				pla 								; Throw away the intermediate calculations
.e5b9	68		pla				pla
.e5ba	68		pla				pla
.e5bb					_BFDNext:
.e5bb	88		dey				dey
.e5bc	d0 ab		bne $e569			bne 	_BFDLoop
.e5be	7a		ply				ply 								; restore Y and exit
.e5bf	4e 72 20	lsr $2072			lsr 	SignCount 					; if sign count odd,
.e5c2	b0 06		bcs $e5ca			bcs		BFUNC_NegateAlways 			; negate the result
.e5c4	60		rts				rts
.e5c5					BFUNC_Negate:
.e5c5	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e5c8	10 24		bpl $e5ee			bpl 	BFNExit
.e5ca					BFUNC_NegateAlways:
.e5ca	38		sec				sec
.e5cb	a9 00		lda #$00			lda 	#0
.e5cd	fd 00 04	sbc $0400,x			sbc 	evalStack+0,x
.e5d0	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e5d3	a9 00		lda #$00			lda 	#0
.e5d5	fd 01 04	sbc $0401,x			sbc 	evalStack+1,x
.e5d8	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e5db	a9 00		lda #$00			lda 	#0
.e5dd	fd 02 04	sbc $0402,x			sbc 	evalStack+2,x
.e5e0	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e5e3	a9 00		lda #$00			lda 	#0
.e5e5	fd 03 04	sbc $0403,x			sbc 	evalStack+3,x
.e5e8	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e5eb	ee 72 20	inc $2072			inc 	SignCount
.e5ee					BFNExit:
.e5ee	60		rts				rts
.e5ef					BFUNC_Modulus:
.e5ef	20 28 e5	jsr $e528			jsr 	BFUNC_Divide 				; start with division.
.e5f2	ad 6e 20	lda $206e			lda 	Temp1+0 					; copy remainder
.e5f5	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e5f8	ad 6f 20	lda $206f			lda 	Temp1+1
.e5fb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e5fe	ad 70 20	lda $2070			lda 	Temp1+2
.e601	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e604	ad 71 20	lda $2071			lda 	Temp1+3
.e607	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e60a	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/compare.asm

.e60b					BFUNC_Equals:
.e60b	18		clc				clc
.e60c	80 01		bra $e60f			bra 	BFUNC_EqualCheck
.e60e					BFUNC_NotEquals:
.e60e	38		sec				sec
.e60f					BFUNC_EqualCheck:
.e60f	08		php				php									; save invert flag
.e610	ad 00 04	lda $0400			lda 	evalStack+0 				; check equality
.e613	cd 04 04	cmp $0404			cmp 	evalStack+4
.e616	d0 1c		bne $e634			bne 	COMP_Fail
.e618	ad 01 04	lda $0401			lda 	evalStack+1
.e61b	cd 05 04	cmp $0405			cmp 	evalStack+5
.e61e	d0 14		bne $e634			bne 	COMP_Fail
.e620	ad 02 04	lda $0402			lda 	evalStack+2
.e623	cd 06 04	cmp $0406			cmp 	evalStack+6
.e626	d0 0c		bne $e634			bne 	COMP_Fail
.e628	ad 03 04	lda $0403			lda 	evalStack+3
.e62b	cd 07 04	cmp $0407			cmp 	evalStack+7
.e62e	d0 04		bne $e634			bne 	COMP_Fail
.e630					COMP_Succeed:
.e630	a9 ff		lda #$ff			lda 	#$FF
.e632	80 02		bra $e636			bra 	COMP_SetResult
.e634					COMP_Fail:
.e634	a9 00		lda #$00			lda 	#0 							; here return 0
.e636					COMP_SetResult:
.e636	28		plp				plp 								; but if CS
.e637	90 02		bcc $e63b			bcc 	COMP_Accept
.e639	49 ff		eor #$ff			eor 	#$FF 						; invert that
.e63b					COMP_Accept:
.e63b	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; write to result.
.e63e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e641	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e644	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e647	60		rts				rts
.e648					BFUNC_Less:
.e648	18		clc				clc
.e649	80 01		bra $e64c			bra 	BFUNC_LessCheck
.e64b					BFUNC_GreaterEqual:
.e64b	38		sec				sec
.e64c					BFUNC_LessCheck:
.e64c	08		php				php
.e64d	38		sec				sec
.e64e	ad 00 04	lda $0400			lda 	evalStack+0 				; compare using direct subtraction
.e651	ed 04 04	sbc $0404			sbc 	evalStack+4
.e654	ad 01 04	lda $0401			lda 	evalStack+1
.e657	ed 05 04	sbc $0405			sbc 	evalStack+5
.e65a	ad 02 04	lda $0402			lda 	evalStack+2
.e65d	ed 06 04	sbc $0406			sbc 	evalStack+6
.e660	ad 03 04	lda $0403			lda 	evalStack+3
.e663	ed 07 04	sbc $0407			sbc 	evalStack+7
.e666	30 c8		bmi $e630			bmi 	COMP_Succeed
.e668	80 ca		bra $e634			bra 	COMP_Fail
.e66a					BFUNC_Greater:
.e66a	18		clc				clc
.e66b	80 01		bra $e66e			bra 	BFUNC_GreaterCheck
.e66d					BFUNC_LessEqual:
.e66d	38		sec				sec
.e66e					BFUNC_GreaterCheck:
.e66e	08		php				php
.e66f	38		sec				sec
.e670	ad 04 04	lda $0404			lda 	evalStack+4 				; compare using direct subtraction
.e673	ed 00 04	sbc $0400			sbc 	evalStack+0
.e676	ad 05 04	lda $0405			lda 	evalStack+5
.e679	ed 01 04	sbc $0401			sbc 	evalStack+1
.e67c	ad 06 04	lda $0406			lda 	evalStack+6
.e67f	ed 02 04	sbc $0402			sbc 	evalStack+2
.e682	ad 07 04	lda $0407			lda 	evalStack+7
.e685	ed 03 04	sbc $0403			sbc 	evalStack+3
.e688	30 a6		bmi $e630			bmi 	COMP_Succeed
.e68a	80 a8		bra $e634			bra 	COMP_Fail

;******  Return to file: basic.asm


;******  Processing file: binary/scompare.asm

.e68c					BFUNC_StringCompare:
.e68c	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get address into temporaries.
.e68f	85 26		sta $26				sta 	zTemp1
.e691	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e694	85 27		sta $27				sta 	zTemp1+1
.e696	bd 04 04	lda $0404,x			lda 	evalStack+4,x
.e699	85 28		sta $28				sta 	zTemp2
.e69b	bd 05 04	lda $0405,x			lda 	evalStack+5,x
.e69e	85 29		sta $29				sta 	zTemp2+1
.e6a0	5a		phy				phy
.e6a1	a0 00		ldy #$00			ldy 	#0
.e6a3					_BFSCLoop:
.e6a3	b1 26		lda ($26),y			lda 	(zTemp1),y 					; comparison
.e6a5	38		sec				sec
.e6a6	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.e6a8	d0 15		bne $e6bf			bne		_BFSCDifferent 				; return different result.
.e6aa	c8		iny				iny
.e6ab	c9 00		cmp #$00			cmp 	#0							; until both EOS.
.e6ad	d0 f4		bne $e6a3			bne 	_BFSCLoop
.e6af	7a		ply				ply
.e6b0	a9 00		lda #$00			lda 	#0
.e6b2					_BFSCSetAll:
.e6b2	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e6b5	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e6b8	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e6bb	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e6be	60		rts				rts
.e6bf					_BFSCDifferent:
.e6bf	7a		ply				ply
.e6c0	a9 ff		lda #$ff			lda 	#255 						; if CC set all as <
.e6c2	90 ee		bcc $e6b2			bcc 	_BFSCSetAll
.e6c4	a9 00		lda #$00			lda 	#0 							; set all zero
.e6c6	20 b2 e6	jsr $e6b2			jsr 	_BFSCSetAll
.e6c9	fe 00 04	inc $0400,x			inc 	evalStack+0,x 				; and make it one.
.e6cc	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: unary/unary.asm

.e6cd					UNARY_Len:
.e6cd	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e6d0	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.e6d3	85 26		sta $26				sta 	zTemp1
.e6d5	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e6d8	85 27		sta $27				sta 	zTemp1+1
.e6da	5a		phy				phy
.e6db	a0 00		ldy #$00			ldy 	#0 							; now figure out its length.
.e6dd					_ULGetLength:
.e6dd	b1 26		lda ($26),y			lda 	(zTemp1),y 					; read character
.e6df	f0 1d		beq $e6fe			beq 	_ULFoundEOL 				; found end of line.
.e6e1	c8		iny				iny
.e6e2	d0 f9		bne $e6dd			bne 	_ULGetLength 				; scan 256 only.
.e6e4	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e6e7	43 61 6e 6e 6f 74 20 66				.text 	"Cannot find string end",$00
>e6ef	69 6e 64 20 73 74 72 69 6e 67 20 65 6e 64 00
.e6fe					_ULFoundEOL:
.e6fe	98		tya				tya 								; length in A, restore Y
.e6ff	7a		ply				ply
.e700					UNARY_ReturnByte:
.e700	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e703	a9 00		lda #$00			lda 	#0 							; clear the rests
.e705	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e708	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e70b	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e70e	60		rts				rts
.e70f					UNARY_Ch:
.e70f	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e712	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.e715	85 26		sta $26				sta 	zTemp1
.e717	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e71a	85 27		sta $27				sta 	zTemp1+1
.e71c	5a		phy				phy
.e71d	a0 00		ldy #$00			ldy 	#0 							; now get first character
.e71f	b1 26		lda ($26),y			lda 	(zTemp1),y
.e721	7a		ply				ply
.e722	80 dc		bra $e700			bra 	UNARY_ReturnByte 			; return that byte.
.e724					UNARY_Abs:
.e724	ea		nop				nop
.e725	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e728	20 c5 e5	jsr $e5c5			jsr 	BFUNC_Negate 				; there's an ABS routine in divide
.e72b	60		rts				rts
.e72c					UNARY_Top:
.e72c	ad 6c 20	lda $206c			lda 	highMemory
.e72f	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e732	ad 6d 20	lda $206d			lda 	highMemory+1
.e735	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e738	a9 00		lda #$00			lda 	#0
.e73a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e73d	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e740	60		rts				rts
.e741					UNARY_Rnd:
.e741	20 4c e7	jsr $e74c			jsr 	Random16 					; call 16 bit RNG twice
.e744	e8		inx				inx
.e745	e8		inx				inx
.e746	20 4c e7	jsr $e74c			jsr 	Random16
.e749	ca		dex				dex
.e74a	ca		dex				dex
.e74b	60		rts				rts
.e74c					Random16:
.e74c	ad 74 20	lda $2074			lda 	RandomSeed 					; initialise if nonzero
.e74f	0d 75 20	ora $2075			ora 	RandomSeed+1
.e752	d0 0d		bne $e761			bne 	_R16_NoInit
.e754	ee 74 20	inc $2074			inc 	RandomSeed 					; by setting low to 1
.e757	5a		phy				phy
.e758	a0 14		ldy #$14			ldy 	#20 						; call it 20 times to get it started
.e75a					_R16_Setup:
.e75a	20 4c e7	jsr $e74c			jsr 	Random16
.e75d	88		dey				dey
.e75e	d0 fa		bne $e75a			bne 	_R16_Setup
.e760	7a		ply				ply
.e761					_R16_NoInit:
.e761	4e 75 20	lsr $2075			lsr 	RandomSeed+1				; shift seed right
.e764	6e 74 20	ror $2074			ror 	RandomSeed
.e767	90 08		bcc $e771			bcc 	_R16_NoXor
.e769	ad 75 20	lda $2075			lda 	RandomSeed+1				; xor MSB with $B4 if bit set.
.e76c	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.e76e	8d 75 20	sta $2075			sta 	RandomSeed+1
.e771					_R16_NoXor:
.e771	ad 74 20	lda $2074			lda 	RandomSeed					; copy result to evaluate stack.
.e774	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e777	ad 75 20	lda $2075			lda 	RandomSeed+1
.e77a	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e77d	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/execute.asm

.e77e					COMMAND_Run:
.e77e	20 2b e8	jsr $e82b			jsr 	COMMAND_Clear 				; clear everything for a new run.
.e781	a2 00		ldx #$00			ldx 	#BasicProgram & 255 		; start from here
.e783	a0 22		ldy #$22			ldy 	#BasicProgram >> 8
.e785	86 20		stx $20				stx 	zCurrentLine 				; set current line.
.e787	84 21		sty $21				sty 	zCurrentLine+1
.e789					CRUNNewLine:
.e789	a0 00		ldy #$00			ldy 	#0 							; look at the offset, end of program
.e78b	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e78d	f0 57		beq $e7e6			beq 	COMMAND_End 				; if zero, off end of program so stop.
.e78f	a0 03		ldy #$03			ldy 	#3 							; offset to first token.
.e791					CRUNNextInstruction:
.e791	a9 00		lda #$00			lda 	#0 							; reset the string buffer position
.e793	8d 73 20	sta $2073			sta 	StringBufferPos
.e796	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token
.e798	f0 0b		beq $e7a5			beq 	CRUNNextLine 				; if zero, then end of line.
.e79a					CRUNNotEndOfLine:
.e79a	c9 20		cmp #$20			cmp 	#' '
.e79c	f0 04		beq $e7a2			beq 	CRUNSkipLoop
.e79e	c9 8d		cmp #$8d			cmp 	#KW_Colon 					; check for a colon first.
.e7a0	d0 12		bne $e7b4			bne 	CRUNExecuteOne 				; if not that, execute the token.
.e7a2					CRUNSkipLoop:
.e7a2	c8		iny				iny		 							; if colon, skip it and loop round.
.e7a3	80 ec		bra $e791			bra 	CRUNNextInstruction
.e7a5					CRUNNextLine:
.e7a5	a0 00		ldy #$00			ldy 	#0 							; add offset from line to line pointer
.e7a7	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e7a9	18		clc				clc
.e7aa	65 20		adc $20				adc 	zCurrentLine
.e7ac	85 20		sta $20				sta 	zCurrentLine
.e7ae	90 d9		bcc $e789			bcc 	CRUNNewLine
.e7b0	e6 21		inc $21				inc 	zCurrentLine+1
.e7b2	80 d5		bra $e789			bra 	CRUNNewLine
.e7b4					CRUNExecuteOne:
.e7b4	09 00		ora #$00			ora 	#0 							; if it is a character might be a variable.
.e7b6	10 21		bpl $e7d9			bpl		_CRUNX1TryLet
.e7b8	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; likewise if ! something ? something $ something
.e7ba	f0 1d		beq $e7d9			beq 	_CRUNX1TryLet
.e7bc	c9 80		cmp #$80			cmp 	#KW_PLING
.e7be	f0 19		beq $e7d9			beq 	_CRUNX1TryLet
.e7c0	c9 95		cmp #$95			cmp 	#KW_QUESTION
.e7c2	f0 15		beq $e7d9			beq 	_CRUNX1TryLet
.e7c4	c8		iny				iny 								; skip over loaded token
.e7c5	0a		asl a				asl 	a 							; double lower keyword byte, clears bit 7.
.e7c6	8d 6f 20	sta $206f			sta 	Temp1+1 					; this is the low byte into the KVT
.e7c9	8a		txa				txa
.e7ca	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e7cc	8d 70 20	sta $2070			sta 	Temp1+2
.e7cf	a9 6c		lda #$6c			lda 	#$6C 						; make it jump indirect
.e7d1	8d 6e 20	sta $206e			sta 	Temp1+0
.e7d4	20 6e 20	jsr $206e			jsr 	Temp1 						; call instruction
.e7d7	80 b8		bra $e791			bra 	CRUNNextInstruction 		; do next instruction.
.e7d9					_CRUNX1TryLet:
.e7d9	20 95 e8	jsr $e895			jsr 	COMMAND_Let 				; try doing a LET if not a keyword.
.e7dc	80 b3		bra $e791			bra 	CRUNNextInstruction
.e7de					COMMAND_Stop:
.e7de	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e7e1	53 74 6f 70 00					.text 	"Stop",$00
.e7e6					COMMAND_End:
>e7e6	02						.byte 	2
.e7e7	4c a7 e9	jmp $e9a7			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: commands/miscellany.asm

.e7ea					COMMAND_Assert:
.e7ea	20 75 e1	jsr $e175			jsr 	EvaluateBase 				; evaluate the expression
.e7ed	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check non zero
.e7f0	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.e7f3	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.e7f6	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.e7f9	d0 12		bne $e80d			bne 	_CMDAExit
.e7fb	ea		nop				nop
.e7fc	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e7ff	41 73 73 65 72 74 20 66				.text 	"Assert failed",$00
>e807	61 69 6c 65 64 00
.e80d					_CMDAExit:
.e80d	60		rts				rts
.e80e					COMMAND_Rem:
.e80e	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character token.
.e810	f0 05		beq $e817			beq 	_CREMExit 					; End of line, then exit.
.e812	c8		iny				iny 								; something to skip
.e813	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; if not a colon
.e815	d0 f7		bne $e80e			bne 	COMMAND_Rem 				; keep searching
.e817					_CREMExit:
.e817	60		rts				rts
.e818					COMMAND_New:
.e818	a9 00		lda #$00			lda 	#0 							; erase the actual program.
.e81a	8d 00 22	sta $2200			sta 	BasicProgram 				; by zeroing the initial offset.
.e81d	20 2b e8	jsr $e82b			jsr 	COMMAND_Clear 				; clear non fixed variable, reset stack and low mem pointer
.e820	a9 00		lda #$00			lda 	#endMemory & $FF 			; reset high memory pointer.
.e822	8d 6c 20	sta $206c			sta 	HighMemory
.e825	a9 80		lda #$80			lda 	#endMemory >> 8
.e827	8d 6d 20	sta $206d			sta 	HighMemory+1
.e82a	60		rts				rts
.e82b					COMMAND_Clear:
.e82b	a2 00		ldx #$00			ldx 	#0	 						; clear variables @A-Z
.e82d					_CCClearVar:
.e82d	a9 00		lda #$00			lda 	#$00
.e82f	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.e832	e8		inx				inx
.e833	e0 6c		cpx #$6c			cpx 	#27*4
.e835	10 f6		bpl $e82d			bpl 	_CCClearVar
.e837	a9 00		lda #$00			lda 	#basicStack & $FF 			; reset BASIC stack
.e839	85 22		sta $22				sta 	zBasicStack
.e83b	a9 02		lda #$02			lda 	#basicStack >> 8
.e83d	85 23		sta $23				sta 	zBasicStack+1
.e83f	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; now find where the program ends.
.e841	85 24		sta $24				sta 	zLowMemory
.e843	a9 22		lda #$22			lda 	#BasicProgram >> 8
.e845	85 25		sta $25				sta 	zLowMemory+1
.e847					_CCFindEnd:
.e847	a0 00		ldy #$00			ldy 	#0 							; look at next offset
.e849	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; if zero, reached the end.
.e84b	f0 0b		beq $e858			beq 	_CCFoundEnd
.e84d	18		clc				clc 								; go to next line.
.e84e	65 24		adc $24				adc 	zLowMemory
.e850	85 24		sta $24				sta 	zLowMemory
.e852	90 f3		bcc $e847			bcc 	_CCFindEnd
.e854	e6 25		inc $25				inc 	zLowMemory+1
.e856	80 ef		bra $e847			bra 	_CCFindEnd
.e858					_CCFoundEnd:
.e858	e6 24		inc $24				inc 	zLowMemory 					; variables etc. start after end of program.
.e85a	d0 02		bne $e85e			bne 	_CCNoCarry 					; skip over zero end offset.
.e85c	e6 25		inc $25				inc 	zLowMemory+1
.e85e					_CCNoCarry:
.e85e	60		rts				rts
.e85f					COMMAND_Old:
.e85f	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; point zLowMemory to the first line.
.e861	85 24		sta $24				sta 	zLowMemory
.e863	a9 22		lda #$22			lda 	#BasicProgram >> 8
.e865	85 25		sta $25				sta 	zLowMemory+1
.e867	a0 03		ldy #$03			ldy 	#3 							; look for the $00 end of line marker.
.e869					_COScan:
.e869	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; look at next byte pair
.e86b	c8		iny				iny
.e86c	f0 0d		beq $e87b			beq 	_COFail 					; can't find marker, corrupted maybe ?
.e86e	c9 00		cmp #$00			cmp 	#0 							; until $00 found.
.e870	d0 f7		bne $e869			bne 	_COScan
.e872	98		tya				tya 								; Y is the new offset to the next instruction
.e873	a0 00		ldy #$00			ldy 	#0 							; overwrite the old one
.e875	91 24		sta ($24),y			sta 	(zLowMemory),y
.e877	20 2b e8	jsr $e82b			jsr 	COMMAND_Clear 				; reset variables, stacks and pointers.
.e87a	60		rts				rts
.e87b					_COFail:
.e87b	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e87e	43 61 6e 6e 6f 74 20 72				.text 	"Cannot recover program",$00
>e886	65 63 6f 76 65 72 20 70 72 6f 67 72 61 6d 00

;******  Return to file: basic.asm


;******  Processing file: commands/let.asm

.e895					COMMAND_Let:
.e895	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get first token not space
.e897	f0 58		beq $e8f1			beq 	_CLESyntax
.e899	c8		iny				iny
.e89a	c9 20		cmp #$20			cmp 	#32
.e89c	f0 f7		beq $e895			beq 	COMMAND_Let
.e89e	88		dey				dey
.e89f	c9 95		cmp #$95			cmp 	#KW_QUESTION				; check for first being indirect.
.e8a1	f0 51		beq $e8f4			beq 	_CLEIndirect 				; e.g. !x = 42
.e8a3	c9 80		cmp #$80			cmp 	#KW_PLING
.e8a5	f0 4d		beq $e8f4			beq 	_CLEIndirect
.e8a7	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.e8a9	f0 49		beq $e8f4			beq 	_CLEIndirect
.e8ab	a2 00		ldx #$00			ldx 	#0 							; clear evaluation stack.
.e8ad	20 88 e3	jsr $e388			jsr 	VARReference 				; get a variable reference.
.e8b0	a5 26		lda $26				lda 	zTemp1 						; copy into target addr
.e8b2	85 2a		sta $2a				sta 	zTargetAddr
.e8b4	a5 27		lda $27				lda 	zTemp1+1
.e8b6	85 2b		sta $2b				sta 	zTargetAddr+1
.e8b8	a5 28		lda $28				lda 	zTemp1+2
.e8ba	85 2c		sta $2c				sta 	zTargetAddr+2
.e8bc	a5 29		lda $29				lda 	zTemp1+3
.e8be	85 2d		sta $2d				sta 	zTargetAddr+3
.e8c0					_CLEGetBinLHSOp:
.e8c0	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e8c2	f0 2d		beq $e8f1			beq 	_CLESyntax
.e8c4	c8		iny				iny
.e8c5	c9 20		cmp #$20			cmp 	#' '
.e8c7	f0 f7		beq $e8c0			beq 	_CLEGetBinLHSOp
.e8c9	88		dey				dey
.e8ca	c9 95		cmp #$95			cmp 	#KW_QUESTION 				; got some sort of reference, check
.e8cc	f0 45		beq $e913			beq 	_CLEBinaryLHTerm  			; if that's a basis for indirection ?
.e8ce	c9 80		cmp #$80			cmp 	#KW_PLING
.e8d0	f0 41		beq $e913			beq 	_CLEBinaryLHTerm
.e8d2	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.e8d4	f0 3d		beq $e913			beq 	_CLEBinaryLHTerm
.e8d6	a9 80		lda #$80			lda 	#KW_PLING 					; we want to do a 32 bit write.
.e8d8					_CLEWriteToAddress:
.e8d8	48		pha				pha 								; save write-type.
.e8d9	a9 92		lda #$92			lda 	#KW_EQUAL 					; check for '=' sign.
.e8db	20 19 e1	jsr $e119			jsr 	CheckNextCharacter
.e8de	20 75 e1	jsr $e175			jsr 	EvaluateBase 				; evaluate the RHS.
.e8e1	68		pla				pla
.e8e2	c9 80		cmp #$80			cmp 	#KW_PLING
.e8e4	f0 6e		beq $e954			beq 	_CLEWordWrite
.e8e6	c9 95		cmp #$95			cmp 	#KW_QUESTION
.e8e8	f0 60		beq $e94a			beq 	_CLEByteWrite
.e8ea	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.e8ec					_ErrorInternal:
.e8ec	d0 fe		bne $e8ec			bne 	_ErrorInternal
.e8ee	4c 70 e9	jmp $e970			jmp 	_CLEStringWrite
.e8f1					_CLESyntax:
.e8f1	4c ad e9	jmp $e9ad			jmp 	SyntaxError
.e8f4					_CLEIndirect:
.e8f4	48		pha				pha 								; save operator on stack
.e8f5	c8		iny				iny									; advance over cursor
.e8f6	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.e8f8	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel
.e8fb	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy that as the address.
.e8fe	85 2a		sta $2a				sta 	zTargetAddr+0
.e900	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e903	85 2b		sta $2b				sta 	zTargetAddr+1
.e905	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e908	85 2c		sta $2c				sta 	zTargetAddr+2
.e90a	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e90d	85 2d		sta $2d				sta 	zTargetAddr+3
.e90f	68		pla				pla 								; restore operator.
.e910	4c d8 e8	jmp $e8d8			jmp 	_CLEWriteToAddress
.e913					_CLEBinaryLHTerm:
.e913	48		pha				pha 								; save operator on stack
.e914	c8		iny				iny 								; skip over it.
.e915	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.e917	20 71 e1	jsr $e171			jsr 	EvaluateAtomCurrentLevel
.e91a	a5 2a		lda $2a				lda 	zTargetAddr 				; copy zTargetAddr to zTemp1. Technically
.e91c	85 26		sta $26				sta 	zTemp1 						; a four byte address.....
.e91e	a5 2b		lda $2b				lda 	zTargetAddr+1
.e920	85 27		sta $27				sta 	zTemp1+1 					; we only worry about 4 byte value
.e922	5a		phy				phy 								; save Y
.e923	18		clc				clc 								; add variable evaluated to (zTargetAddr)
.e924	a0 00		ldy #$00			ldy 	#0
.e926	b1 26		lda ($26),y			lda 	(zTemp1),y
.e928	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e92b	85 2a		sta $2a				sta 	zTargetAddr+0
.e92d	c8		iny				iny
.e92e	b1 26		lda ($26),y			lda 	(zTemp1),y
.e930	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e933	85 2b		sta $2b				sta 	zTargetAddr+1
.e935	c8		iny				iny
.e936	b1 26		lda ($26),y			lda 	(zTemp1),y
.e938	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e93b	85 2c		sta $2c				sta 	zTargetAddr+2
.e93d	c8		iny				iny
.e93e	b1 26		lda ($26),y			lda 	(zTemp1),y
.e940	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e943	85 2d		sta $2d				sta 	zTargetAddr+3
.e945	7a		ply				ply 								; restore Y
.e946	68		pla				pla 								; restore the operator.
.e947	4c d8 e8	jmp $e8d8			jmp 	_CLEWriteToAddress
.e94a					_CLEByteWrite:
.e94a	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get the byte to write.
.e94d	5a		phy				phy 								; write the byte preserving Y
.e94e	a0 00		ldy #$00			ldy 	#0
.e950	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.e952	7a		ply				ply
.e953	60		rts				rts
.e954					_CLEWordWrite:
.e954	5a		phy				phy
.e955	a0 00		ldy #$00			ldy 	#0
.e957	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e95a	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.e95c	c8		iny				iny
.e95d	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e960	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.e962	c8		iny				iny
.e963	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e966	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.e968	c8		iny				iny
.e969	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e96c	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.e96e	7a		ply				ply 								; restore Y
.e96f	60		rts				rts
.e970					_CLEStringWrite:
.e970	ea		nop				nop
.e971	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; source string -> zTemp1
.e974	85 26		sta $26				sta 	zTemp1
.e976	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e979	85 27		sta $27				sta 	zTemp1+1
.e97b	5a		phy				phy
.e97c	a0 00		ldy #$00			ldy 	#0
.e97e					_CLEStringCopy:
.e97e	b1 26		lda ($26),y			lda 	(zTemp1),y
.e980	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.e982	c9 00		cmp #$00			cmp 	#0
.e984	f0 16		beq $e99c			beq	 	_CLEStringWritten
.e986	c8		iny				iny
.e987	d0 f5		bne $e97e			bne 	_CLEStringCopy
.e989	20 b2 e9	jsr $e9b2			jsr 	ReportError
>e98c	42 61 64 20 73 74 72 69				.text 	"Bad string copy",$00
>e994	6e 67 20 63 6f 70 79 00
.e99c					_CLEStringWritten:
.e99c	7a		ply				ply
.e99d	60		rts				rts

;******  Return to file: basic.asm

.e99e					Start:
.e99e	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.e9a0	9a		txs			txs
.e9a1	20 18 e8	jsr $e818			jsr 	COMMAND_New 				; do a new
.e9a4	20 5f e8	jsr $e85f			jsr 	COMMAND_Old 				; get back the old program as we're deving.
.e9a7					WarmStart:
.e9a7	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.e9a9	9a		txs			txs
.e9aa	4c 7e e7	jmp $e77e			jmp 	COMMAND_Run 				; RUN current program.
.e9ad					SyntaxError:
.e9ad	a9 01		lda #$01			lda 	#1
.e9af	ea		nop				nop
.e9b0	80 fb		bra $e9ad			bra 	SyntaxError
.e9b2					ReportError:
.e9b2	a9 02		lda #$02			lda 	#2
.e9b4	ea		nop				nop
.e9b5	80 fb		bra $e9b2			bra 	ReportError

;******  Processing file: include/basic_generated.inc

>2200	27 01 00 97 20 8b 37 34			.byte $27,$01,$00,$97,$20,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$8a,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$92,$8b,$31,$36,$31,$33,$35,$31,$34,$38,$32,$35,$00,$25,$02,$00,$97,$20,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$8b,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$92,$31,$32,$34,$30,$37,$36,$39,$31,$37,$00,$1d,$03,$00,$97,$20,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$8c,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$92,$30,$00,$23,$04,$00,$97,$20,$37,$34,$34,$37,$31,$38,$39,$35,$34,$84,$38,$36,$38,$37,$39,$35,$38,$37,$31,$92,$37,$34,$34,$37,$31,$38,$39,$35,$34,$00,$29,$05,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$85,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$8b,$31,$30,$37,$32,$34,$31,$36,$37,$36,$38,$00,$27,$06,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$96,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$35,$33,$31,$33,$31,$38,$37,$31,$31,$00,$28,$07,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$b2,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$8b,$35,$34,$31,$30,$39,$38,$30,$35,$37,$00,$1f,$08,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$92,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$30,$00,$20,$09,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$90,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$8b,$31,$00,$1f,$0a,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$91,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$30,$00,$1f,$0b,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$8f,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$30,$00,$20,$0c,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$94,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$8b,$31,$00,$20,$0d,$00,$97,$20,$87,$8b,$37,$34,$34,$37,$31,$38,$39,$35,$34,$93,$8b,$38,$36,$38,$37,$39,$35,$38,$37,$31,$88,$92,$8b,$31,$00,$17,$0e,$00,$97,$20,$87,$81,$77,$72,$4c,$81,$b3,$81,$67,$2e,$52,$81,$88,$20,$92,$20,$31,$00,$0f,$0f,$00,$97,$20,$34,$39,$35,$8a,$31,$92,$34,$39,$36,$00,$0f,$10,$00,$97,$20,$34,$39,$35,$8b,$31,$92,$34,$39,$34,$00,$0f,$11,$00,$97,$20,$34,$39,$35,$89,$31,$92,$34,$39,$35,$00,$0f,$12,$00,$97,$20,$34,$39,$35,$8c,$31,$92,$34,$39,$35,$00,$0d,$13,$00,$97,$20,$34,$39,$35,$84,$31,$92,$30,$00,$0f,$14,$00,$97,$20,$87,$34,$39,$35,$85,$31,$88,$92,$31,$00,$11,$15,$00,$97,$20,$87,$34,$39,$35,$96,$31,$88,$92,$34,$39,$34,$00,$11,$16,$00,$97,$20,$87,$34,$39,$35,$b2,$31,$88,$92,$34,$39,$35,$00,$0f,$17,$00,$97,$20,$87,$34,$39,$35,$92,$31,$88,$92,$30,$00,$10,$18,$00,$97,$20,$87,$34,$39,$35,$90,$31,$88,$92,$8b,$31,$00,$0f,$19,$00,$97,$20,$87,$34,$39,$35,$91,$31,$88,$92,$30,$00,$0f,$1a,$00,$97,$20,$87,$34,$39,$35,$8f,$31,$88,$92,$30,$00,$10,$1b,$00,$97,$20,$87,$34,$39,$35,$94,$31,$88,$92,$8b,$31,$00,$10,$1c,$00,$97,$20,$87,$34,$39,$35,$93,$31,$88,$92,$8b,$31,$00,$18,$1d,$00,$97,$20,$87,$81,$26,$53,$66,$81,$b3,$81,$7d,$74,$28,$81,$88,$20,$92,$20,$8b,$31,$00,$0f,$1e,$00,$97,$20,$39,$35,$37,$8a,$31,$92,$39,$35,$38,$00,$0f,$1f,$00,$97,$20,$39,$35,$37,$8b,$31,$92,$39,$35,$36,$00,$0f,$20,$00,$97,$20,$39,$35,$37,$89,$31,$92,$39,$35,$37,$00,$0f,$21,$00,$97,$20,$39,$35,$37,$8c,$31,$92,$39,$35,$37,$00,$0d,$22,$00,$97,$20,$39,$35,$37,$84,$31,$92,$30,$00,$0f,$23,$00,$97,$20,$87,$39,$35,$37,$85,$31,$88,$92,$31,$00,$11,$24,$00,$97,$20,$87,$39,$35,$37,$96,$31,$88,$92,$39,$35,$36,$00,$11,$25,$00,$97,$20,$87,$39,$35,$37,$b2,$31,$88,$92,$39,$35,$37,$00,$0f,$26,$00,$97,$20,$87,$39,$35,$37,$92,$31,$88,$92,$30,$00,$10,$27,$00,$97,$20,$87,$39,$35,$37,$90,$31,$88,$92,$8b,$31,$00,$0f,$28,$00,$97,$20,$87,$39,$35,$37,$91,$31,$88,$92,$30,$00,$0f,$29,$00,$97,$20,$87,$39,$35,$37,$8f,$31,$88,$92,$30,$00,$10,$2a,$00,$97,$20,$87,$39,$35,$37,$94,$31,$88,$92,$8b,$31,$00,$10,$2b,$00,$97,$20,$87,$39,$35,$37,$93,$31,$88,$92,$8b,$31,$00,$17,$2c,$00,$97,$20,$87,$81,$58,$5f,$2b,$81,$b3,$81,$4e,$40,$63,$81,$88,$20,$92,$20,$31,$00,$0f,$2d,$00,$97,$20,$8b,$38,$8a,$8b,$36,$92,$8b,$31,$34,$00,$0e,$2e,$00,$97,$20,$8b,$38,$89,$8b,$36,$92,$34,$38,$00,$0d,$2f,$00,$97,$20,$8b,$38,$8c,$8b,$36,$92,$31,$00,$0b,$30,$00,$97,$20,$38,$84,$36,$92,$32,$00,$10,$31,$00,$97,$20,$87,$8b,$38,$85,$8b,$36,$88,$92,$8b,$38,$00,$0f,$32,$00,$97,$20,$87,$8b,$38,$96,$8b,$36,$88,$92,$32,$00,$10,$33,$00,$97,$20,$87,$8b,$38,$b2,$8b,$36,$88,$92,$8b,$36,$00,$0f,$34,$00,$97,$20,$87,$8b,$38,$92,$8b,$36,$88,$92,$30,$00,$10,$35,$00,$97,$20,$87,$8b,$38,$90,$8b,$36,$88,$92,$8b,$31,$00,$10,$36,$00,$97,$20,$87,$8b,$38,$91,$8b,$36,$88,$92,$8b,$31,$00,$10,$37,$00,$97,$20,$87,$8b,$38,$8f,$8b,$36,$88,$92,$8b,$31,$00,$0f,$38,$00,$97,$20,$87,$8b,$38,$94,$8b,$36,$88,$92,$30,$00,$0f,$39,$00,$97,$20,$87,$8b,$38,$93,$8b,$36,$88,$92,$30,$00,$18,$3a,$00,$97,$20,$87,$81,$4e,$52,$63,$81,$b3,$81,$6f,$57,$64,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$3b,$00,$97,$20,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$8a,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$92,$8b,$37,$30,$36,$33,$33,$36,$30,$36,$35,$00,$1d,$3c,$00,$97,$20,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$8c,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$92,$32,$00,$22,$3d,$00,$97,$20,$34,$38,$37,$37,$33,$33,$37,$35,$33,$84,$32,$31,$38,$36,$30,$32,$33,$31,$32,$92,$35,$30,$35,$32,$39,$31,$32,$39,$00,$28,$3e,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$85,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$8b,$34,$38,$38,$30,$39,$34,$37,$32,$30,$00,$27,$3f,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$96,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$32,$36,$39,$38,$35,$33,$33,$37,$35,$00,$28,$40,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$b2,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$8b,$32,$31,$38,$32,$34,$31,$33,$34,$35,$00,$1f,$41,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$92,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$30,$00,$20,$42,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$90,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$8b,$31,$00,$20,$43,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$91,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$8b,$31,$00,$20,$44,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$8f,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$8b,$31,$00,$1f,$45,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$94,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$30,$00,$1f,$46,$00,$97,$20,$87,$8b,$34,$38,$37,$37,$33,$33,$37,$35,$33,$93,$8b,$32,$31,$38,$36,$30,$32,$33,$31,$32,$88,$92,$30,$00,$17,$47,$00,$97,$20,$87,$81,$51,$49,$50,$81,$b3,$81,$31,$54,$70,$81,$88,$20,$92,$20,$31,$00,$23,$48,$00,$97,$20,$36,$34,$38,$31,$39,$36,$36,$33,$33,$8a,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$92,$36,$31,$35,$34,$32,$36,$35,$33,$35,$00,$23,$49,$00,$97,$20,$36,$34,$38,$31,$39,$36,$36,$33,$33,$8b,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$92,$36,$38,$30,$39,$36,$36,$37,$33,$31,$00,$2c,$4a,$00,$97,$20,$36,$34,$38,$31,$39,$36,$36,$33,$33,$89,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$92,$8b,$32,$31,$32,$34,$31,$34,$36,$37,$31,$38,$36,$36,$38,$30,$30,$33,$34,$00,$1d,$4b,$00,$97,$20,$36,$34,$38,$31,$39,$36,$36,$33,$33,$8c,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$92,$8b,$31,$39,$00,$21,$4c,$00,$97,$20,$36,$34,$38,$31,$39,$36,$36,$33,$33,$84,$33,$32,$37,$37,$30,$30,$39,$38,$92,$32,$35,$35,$36,$34,$37,$37,$31,$00,$25,$4d,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$85,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$36,$33,$37,$37,$31,$30,$38,$35,$36,$00,$26,$4e,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$96,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$8b,$36,$35,$39,$39,$39,$35,$31,$37,$37,$00,$25,$4f,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$b2,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$8b,$32,$32,$32,$38,$34,$33,$32,$31,$00,$1d,$50,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$92,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$30,$00,$1e,$51,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$90,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$8b,$31,$00,$1d,$52,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$91,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$30,$00,$1d,$53,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$8f,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$30,$00,$1e,$54,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$94,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$8b,$31,$00,$1e,$55,$00,$97,$20,$87,$36,$34,$38,$31,$39,$36,$36,$33,$33,$93,$8b,$33,$32,$37,$37,$30,$30,$39,$38,$88,$92,$8b,$31,$00,$17,$56,$00,$97,$20,$87,$81,$5b,$2c,$7c,$81,$b3,$81,$3a,$44,$55,$81,$88,$20,$92,$20,$31,$00,$0d,$57,$00,$97,$20,$30,$8a,$8b,$37,$92,$8b,$37,$00,$0c,$58,$00,$97,$20,$30,$8b,$8b,$37,$92,$37,$00,$0c,$59,$00,$97,$20,$30,$89,$8b,$37,$92,$30,$00,$0c,$5a,$00,$97,$20,$30,$8c,$8b,$37,$92,$30,$00,$0b,$5b,$00,$97,$20,$30,$84,$37,$92,$30,$00,$0e,$5c,$00,$97,$20,$87,$30,$85,$8b,$37,$88,$92,$30,$00,$0f,$5d,$00,$97,$20,$87,$30,$96,$8b,$37,$88,$92,$8b,$37,$00,$0f,$5e,$00,$97,$20,$87,$30,$b2,$8b,$37,$88,$92,$8b,$37,$00,$0e,$5f,$00,$97,$20,$87,$30,$92,$8b,$37,$88,$92,$30,$00,$0f,$60,$00,$97,$20,$87,$30,$90,$8b,$37,$88,$92,$8b,$31,$00,$0e,$61,$00,$97,$20,$87,$30,$91,$8b,$37,$88,$92,$30,$00,$0e,$62,$00,$97,$20,$87,$30,$8f,$8b,$37,$88,$92,$30,$00,$0f,$63,$00,$97,$20,$87,$30,$94,$8b,$37,$88,$92,$8b,$31,$00,$0f,$64,$00,$97,$20,$87,$30,$93,$8b,$37,$88,$92,$8b,$31,$00,$18,$65,$00,$97,$20,$87,$81,$29,$40,$68,$81,$b3,$81,$2a,$58,$60,$81,$88,$20,$92,$20,$8b,$31,$00,$1c,$66,$00,$97,$20,$8b,$31,$33,$36,$8a,$31,$37,$34,$38,$37,$36,$33,$35,$92,$31,$37,$34,$38,$37,$34,$39,$39,$00,$1f,$67,$00,$97,$20,$8b,$31,$33,$36,$89,$31,$37,$34,$38,$37,$36,$33,$35,$92,$8b,$32,$33,$37,$38,$33,$31,$38,$33,$36,$30,$00,$15,$68,$00,$97,$20,$8b,$31,$33,$36,$8c,$31,$37,$34,$38,$37,$36,$33,$35,$92,$30,$00,$16,$69,$00,$97,$20,$31,$33,$36,$84,$31,$37,$34,$38,$37,$36,$33,$35,$92,$31,$33,$36,$00,$1e,$6a,$00,$97,$20,$87,$8b,$31,$33,$36,$85,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$31,$37,$34,$38,$37,$36,$33,$32,$00,$1f,$6b,$00,$97,$20,$87,$8b,$31,$33,$36,$96,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$8b,$31,$37,$34,$38,$37,$37,$36,$35,$00,$1a,$6c,$00,$97,$20,$87,$8b,$31,$33,$36,$b2,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$8b,$31,$33,$33,$00,$17,$6d,$00,$97,$20,$87,$8b,$31,$33,$36,$92,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$30,$00,$18,$6e,$00,$97,$20,$87,$8b,$31,$33,$36,$90,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$8b,$31,$00,$18,$6f,$00,$97,$20,$87,$8b,$31,$33,$36,$91,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$8b,$31,$00,$18,$70,$00,$97,$20,$87,$8b,$31,$33,$36,$8f,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$8b,$31,$00,$17,$71,$00,$97,$20,$87,$8b,$31,$33,$36,$94,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$30,$00,$17,$72,$00,$97,$20,$87,$8b,$31,$33,$36,$93,$31,$37,$34,$38,$37,$36,$33,$35,$88,$92,$30,$00,$18,$73,$00,$97,$20,$87,$81,$30,$5c,$26,$81,$b3,$81,$36,$43,$5c,$81,$88,$20,$92,$20,$8b,$31,$00,$27,$74,$00,$97,$20,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$8a,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$92,$8b,$31,$30,$30,$34,$35,$30,$38,$33,$36,$39,$00,$25,$75,$00,$97,$20,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$8b,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$92,$36,$38,$36,$31,$31,$33,$35,$38,$31,$00,$1d,$76,$00,$97,$20,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$8c,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$92,$30,$00,$23,$77,$00,$97,$20,$31,$35,$39,$31,$39,$37,$33,$39,$34,$84,$38,$34,$35,$33,$31,$30,$39,$37,$35,$92,$31,$35,$39,$31,$39,$37,$33,$39,$34,$00,$28,$78,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$85,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$8b,$39,$39,$38,$32,$30,$36,$34,$36,$34,$00,$27,$79,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$96,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$39,$39,$31,$39,$30,$34,$35,$35,$39,$00,$26,$7a,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$b2,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$8b,$36,$33,$30,$31,$39,$30,$35,$00,$1f,$7b,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$92,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$30,$00,$20,$7c,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$90,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$8b,$31,$00,$1f,$7d,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$91,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$30,$00,$1f,$7e,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$8f,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$30,$00,$20,$7f,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$94,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$8b,$31,$00,$20,$80,$00,$97,$20,$87,$8b,$31,$35,$39,$31,$39,$37,$33,$39,$34,$93,$8b,$38,$34,$35,$33,$31,$30,$39,$37,$35,$88,$92,$8b,$31,$00,$18,$81,$00,$97,$20,$87,$81,$2a,$4a,$67,$81,$b3,$81,$51,$3f,$28,$81,$88,$20,$92,$20,$8b,$31,$00,$1f,$82,$00,$97,$20,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$8a,$31,$35,$36,$92,$8b,$32,$35,$32,$33,$30,$31,$31,$39,$30,$00,$21,$83,$00,$97,$20,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$89,$31,$35,$36,$92,$8b,$33,$39,$33,$35,$39,$30,$30,$39,$39,$37,$36,$00,$1d,$84,$00,$97,$20,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$8c,$31,$35,$36,$92,$8b,$31,$36,$31,$37,$33,$31,$36,$00,$16,$85,$00,$97,$20,$32,$35,$32,$33,$30,$31,$33,$34,$36,$84,$31,$35,$36,$92,$35,$30,$00,$1a,$86,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$85,$31,$35,$36,$88,$92,$31,$35,$36,$00,$21,$87,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$96,$31,$35,$36,$88,$92,$8b,$32,$35,$32,$33,$30,$31,$35,$30,$32,$00,$21,$88,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$b2,$31,$35,$36,$88,$92,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$00,$18,$89,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$92,$31,$35,$36,$88,$92,$30,$00,$19,$8a,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$90,$31,$35,$36,$88,$92,$8b,$31,$00,$19,$8b,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$91,$31,$35,$36,$88,$92,$8b,$31,$00,$19,$8c,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$8f,$31,$35,$36,$88,$92,$8b,$31,$00,$18,$8d,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$94,$31,$35,$36,$88,$92,$30,$00,$18,$8e,$00,$97,$20,$87,$8b,$32,$35,$32,$33,$30,$31,$33,$34,$36,$93,$31,$35,$36,$88,$92,$30,$00,$18,$8f,$00,$97,$20,$87,$81,$3f,$47,$5d,$81,$b3,$81,$6a,$3f,$2b,$81,$88,$20,$92,$20,$8b,$31,$00,$1d,$90,$00,$97,$20,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$8a,$30,$92,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$00,$14,$91,$00,$97,$20,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$89,$30,$92,$30,$00,$16,$92,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$85,$30,$88,$92,$30,$00,$1f,$93,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$96,$30,$88,$92,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$00,$1f,$94,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$b2,$30,$88,$92,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$00,$16,$95,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$92,$30,$88,$92,$30,$00,$17,$96,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$90,$30,$88,$92,$8b,$31,$00,$17,$97,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$91,$30,$88,$92,$8b,$31,$00,$17,$98,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$8f,$30,$88,$92,$8b,$31,$00,$16,$99,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$94,$30,$88,$92,$30,$00,$16,$9a,$00,$97,$20,$87,$8b,$35,$38,$34,$32,$38,$30,$38,$32,$34,$93,$30,$88,$92,$30,$00,$17,$9b,$00,$97,$20,$87,$81,$6c,$3f,$43,$81,$b3,$81,$4f,$4b,$68,$81,$88,$20,$92,$20,$31,$00,$1b,$9c,$00,$97,$20,$36,$39,$31,$34,$32,$37,$33,$35,$32,$8a,$34,$92,$36,$39,$31,$34,$32,$37,$33,$35,$36,$00,$1b,$9d,$00,$97,$20,$36,$39,$31,$34,$32,$37,$33,$35,$32,$8b,$34,$92,$36,$39,$31,$34,$32,$37,$33,$34,$38,$00,$1b,$9e,$00,$97,$20,$36,$39,$31,$34,$32,$37,$33,$35,$32,$8c,$34,$92,$31,$37,$32,$38,$35,$36,$38,$33,$38,$00,$13,$9f,$00,$97,$20,$36,$39,$31,$34,$32,$37,$33,$35,$32,$84,$34,$92,$30,$00,$15,$a0,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$85,$34,$88,$92,$30,$00,$1d,$a1,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$96,$34,$88,$92,$36,$39,$31,$34,$32,$37,$33,$35,$36,$00,$1d,$a2,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$b2,$34,$88,$92,$36,$39,$31,$34,$32,$37,$33,$35,$36,$00,$15,$a3,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$92,$34,$88,$92,$30,$00,$16,$a4,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$90,$34,$88,$92,$8b,$31,$00,$15,$a5,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$91,$34,$88,$92,$30,$00,$15,$a6,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$8f,$34,$88,$92,$30,$00,$16,$a7,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$94,$34,$88,$92,$8b,$31,$00,$16,$a8,$00,$97,$20,$87,$36,$39,$31,$34,$32,$37,$33,$35,$32,$93,$34,$88,$92,$8b,$31,$00,$18,$a9,$00,$97,$20,$87,$81,$27,$73,$3f,$81,$b3,$81,$30,$31,$4e,$81,$88,$20,$92,$20,$8b,$31,$00,$1c,$aa,$00,$97,$20,$8b,$33,$39,$35,$8a,$34,$37,$36,$39,$36,$31,$31,$31,$92,$34,$37,$36,$39,$35,$37,$31,$36,$00,$20,$ab,$00,$97,$20,$8b,$33,$39,$35,$89,$34,$37,$36,$39,$36,$31,$31,$31,$92,$8b,$31,$38,$38,$33,$39,$39,$36,$33,$38,$34,$35,$00,$15,$ac,$00,$97,$20,$8b,$33,$39,$35,$8c,$34,$37,$36,$39,$36,$31,$31,$31,$92,$30,$00,$16,$ad,$00,$97,$20,$33,$39,$35,$84,$34,$37,$36,$39,$36,$31,$31,$31,$92,$33,$39,$35,$00,$1e,$ae,$00,$97,$20,$87,$8b,$33,$39,$35,$85,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$34,$37,$36,$39,$35,$39,$37,$33,$00,$1f,$af,$00,$97,$20,$87,$8b,$33,$39,$35,$96,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$8b,$34,$37,$36,$39,$36,$32,$33,$30,$00,$1a,$b0,$00,$97,$20,$87,$8b,$33,$39,$35,$b2,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$8b,$32,$35,$37,$00,$17,$b1,$00,$97,$20,$87,$8b,$33,$39,$35,$92,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$30,$00,$18,$b2,$00,$97,$20,$87,$8b,$33,$39,$35,$90,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$8b,$31,$00,$18,$b3,$00,$97,$20,$87,$8b,$33,$39,$35,$91,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$8b,$31,$00,$18,$b4,$00,$97,$20,$87,$8b,$33,$39,$35,$8f,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$8b,$31,$00,$17,$b5,$00,$97,$20,$87,$8b,$33,$39,$35,$94,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$30,$00,$17,$b6,$00,$97,$20,$87,$8b,$33,$39,$35,$93,$34,$37,$36,$39,$36,$31,$31,$31,$88,$92,$30,$00,$18,$b7,$00,$97,$20,$87,$81,$54,$3c,$5d,$81,$b3,$81,$62,$5e,$5b,$81,$88,$20,$92,$20,$8b,$31,$00,$28,$b8,$00,$97,$20,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$8a,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$92,$8b,$31,$33,$32,$32,$32,$31,$30,$32,$30,$33,$00,$26,$b9,$00,$97,$20,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$8b,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$92,$36,$38,$34,$33,$39,$34,$38,$35,$33,$00,$1e,$ba,$00,$97,$20,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$8c,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$92,$30,$00,$24,$bb,$00,$97,$20,$33,$31,$38,$39,$30,$37,$36,$37,$35,$84,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$92,$33,$31,$38,$39,$30,$37,$36,$37,$35,$00,$2a,$bc,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$85,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$8b,$31,$30,$30,$33,$34,$33,$33,$38,$35,$36,$00,$28,$bd,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$96,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$36,$38,$34,$36,$35,$37,$35,$30,$39,$00,$29,$be,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$b2,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$8b,$33,$31,$38,$37,$37,$36,$33,$34,$37,$00,$20,$bf,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$92,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$30,$00,$21,$c0,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$90,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$8b,$31,$00,$20,$c1,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$91,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$30,$00,$20,$c2,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$8f,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$30,$00,$21,$c3,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$94,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$8b,$31,$00,$21,$c4,$00,$97,$20,$87,$8b,$33,$31,$38,$39,$30,$37,$36,$37,$35,$93,$8b,$31,$30,$30,$33,$33,$30,$32,$35,$32,$38,$88,$92,$8b,$31,$00,$18,$c5,$00,$97,$20,$87,$81,$34,$6a,$2a,$81,$b3,$81,$4b,$6e,$61,$81,$88,$20,$92,$20,$8b,$31,$00,$1c,$c6,$00,$97,$20,$34,$36,$35,$38,$37,$39,$31,$31,$32,$8a,$8b,$34,$92,$34,$36,$35,$38,$37,$39,$31,$30,$38,$00,$1c,$c7,$00,$97,$20,$34,$36,$35,$38,$37,$39,$31,$31,$32,$8b,$8b,$34,$92,$34,$36,$35,$38,$37,$39,$31,$31,$36,$00,$1e,$c8,$00,$97,$20,$34,$36,$35,$38,$37,$39,$31,$31,$32,$89,$8b,$34,$92,$8b,$31,$38,$36,$33,$35,$31,$36,$34,$34,$38,$00,$1d,$c9,$00,$97,$20,$34,$36,$35,$38,$37,$39,$31,$31,$32,$8c,$8b,$34,$92,$8b,$31,$31,$36,$34,$36,$39,$37,$37,$38,$00,$13,$ca,$00,$97,$20,$34,$36,$35,$38,$37,$39,$31,$31,$32,$84,$34,$92,$30,$00,$1e,$cb,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$85,$8b,$34,$88,$92,$34,$36,$35,$38,$37,$39,$31,$31,$32,$00,$1f,$cc,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$96,$8b,$34,$88,$92,$8b,$34,$36,$35,$38,$37,$39,$31,$31,$36,$00,$17,$cd,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$b2,$8b,$34,$88,$92,$8b,$34,$00,$16,$ce,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$92,$8b,$34,$88,$92,$30,$00,$17,$cf,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$90,$8b,$34,$88,$92,$8b,$31,$00,$16,$d0,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$91,$8b,$34,$88,$92,$30,$00,$16,$d1,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$8f,$8b,$34,$88,$92,$30,$00,$17,$d2,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$94,$8b,$34,$88,$92,$8b,$31,$00,$17,$d3,$00,$97,$20,$87,$34,$36,$35,$38,$37,$39,$31,$31,$32,$93,$8b,$34,$88,$92,$8b,$31,$00,$18,$d4,$00,$97,$20,$87,$81,$36,$5d,$64,$81,$b3,$81,$4c,$37,$3a,$81,$88,$20,$92,$20,$8b,$31,$00,$23,$d5,$00,$97,$20,$34,$38,$34,$33,$39,$31,$32,$36,$32,$8a,$34,$38,$34,$33,$39,$31,$32,$36,$32,$92,$39,$36,$38,$37,$38,$32,$35,$32,$34,$00,$1b,$d6,$00,$97,$20,$34,$38,$34,$33,$39,$31,$32,$36,$32,$8c,$34,$38,$34,$33,$39,$31,$32,$36,$32,$92,$31,$00,$1b,$d7,$00,$97,$20,$34,$38,$34,$33,$39,$31,$32,$36,$32,$84,$34,$38,$34,$33,$39,$31,$32,$36,$32,$92,$30,$00,$25,$d8,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$85,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$34,$38,$34,$33,$39,$31,$32,$36,$32,$00,$1d,$d9,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$96,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$30,$00,$25,$da,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$b2,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$34,$38,$34,$33,$39,$31,$32,$36,$32,$00,$1e,$db,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$92,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$8b,$31,$00,$1d,$dc,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$90,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$30,$00,$1d,$dd,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$91,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$30,$00,$1e,$de,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$8f,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$8b,$31,$00,$1d,$df,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$94,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$30,$00,$1e,$e0,$00,$97,$20,$87,$34,$38,$34,$33,$39,$31,$32,$36,$32,$93,$34,$38,$34,$33,$39,$31,$32,$36,$32,$88,$92,$8b,$31,$00,$18,$e1,$00,$97,$20,$87,$81,$58,$55,$26,$81,$b3,$81,$76,$50,$3f,$81,$88,$20,$92,$20,$8b,$31,$00,$0c,$e2,$00,$97,$20,$8b,$36,$8a,$36,$92,$30,$00,$0e,$e3,$00,$97,$20,$8b,$36,$89,$36,$92,$8b,$33,$36,$00,$0d,$e4,$00,$97,$20,$8b,$36,$8c,$36,$92,$8b,$31,$00,$0b,$e5,$00,$97,$20,$36,$84,$36,$92,$30,$00,$0e,$e6,$00,$97,$20,$87,$8b,$36,$85,$36,$88,$92,$32,$00,$0f,$e7,$00,$97,$20,$87,$8b,$36,$96,$36,$88,$92,$8b,$34,$00,$0f,$e8,$00,$97,$20,$87,$8b,$36,$b2,$36,$88,$92,$8b,$32,$00,$0e,$e9,$00,$97,$20,$87,$8b,$36,$92,$36,$88,$92,$30,$00,$0f,$ea,$00,$97,$20,$87,$8b,$36,$90,$36,$88,$92,$8b,$31,$00,$0f,$eb,$00,$97,$20,$87,$8b,$36,$91,$36,$88,$92,$8b,$31,$00,$0f,$ec,$00,$97,$20,$87,$8b,$36,$8f,$36,$88,$92,$8b,$31,$00,$0e,$ed,$00,$97,$20,$87,$8b,$36,$94,$36,$88,$92,$30,$00,$0e,$ee,$00,$97,$20,$87,$8b,$36,$93,$36,$88,$92,$30,$00,$17,$ef,$00,$97,$20,$87,$81,$69,$61,$5a,$81,$b3,$81,$30,$70,$6d,$81,$88,$20,$92,$20,$31,$00,$13,$f0,$00,$97,$20,$8b,$36,$37,$35,$8a,$33,$39,$37,$92,$8b,$32,$37,$38,$00,$16,$f1,$00,$97,$20,$8b,$36,$37,$35,$89,$33,$39,$37,$92,$8b,$32,$36,$37,$39,$37,$35,$00,$11,$f2,$00,$97,$20,$8b,$36,$37,$35,$8c,$33,$39,$37,$92,$8b,$31,$00,$11,$f3,$00,$97,$20,$36,$37,$35,$84,$33,$39,$37,$92,$32,$37,$38,$00,$14,$f4,$00,$97,$20,$87,$8b,$36,$37,$35,$85,$33,$39,$37,$88,$92,$32,$36,$39,$00,$15,$f5,$00,$97,$20,$87,$8b,$36,$37,$35,$96,$33,$39,$37,$88,$92,$8b,$38,$31,$36,$00,$15,$f6,$00,$97,$20,$87,$8b,$36,$37,$35,$b2,$33,$39,$37,$88,$92,$8b,$35,$34,$37,$00,$12,$f7,$00,$97,$20,$87,$8b,$36,$37,$35,$92,$33,$39,$37,$88,$92,$30,$00,$13,$f8,$00,$97,$20,$87,$8b,$36,$37,$35,$90,$33,$39,$37,$88,$92,$8b,$31,$00,$13,$f9,$00,$97,$20,$87,$8b,$36,$37,$35,$91,$33,$39,$37,$88,$92,$8b,$31,$00,$13,$fa,$00,$97,$20,$87,$8b,$36,$37,$35,$8f,$33,$39,$37,$88,$92,$8b,$31,$00,$12,$fb,$00,$97,$20,$87,$8b,$36,$37,$35,$94,$33,$39,$37,$88,$92,$30,$00,$12,$fc,$00,$97,$20,$87,$8b,$36,$37,$35,$93,$33,$39,$37,$88,$92,$30,$00,$18,$fd,$00,$97,$20,$87,$81,$53,$46,$72,$81,$b3,$81,$74,$78,$3c,$81,$88,$20,$92,$20,$8b,$31,$00,$1f,$fe,$00,$97,$20,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$8a,$30,$92,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$00,$15,$ff,$00,$97,$20,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$89,$30,$92,$30,$00,$17,$00,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$85,$30,$88,$92,$30,$00,$21,$01,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$96,$30,$88,$92,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$00,$21,$02,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$b2,$30,$88,$92,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$00,$17,$03,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$92,$30,$88,$92,$30,$00,$18,$04,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$90,$30,$88,$92,$8b,$31,$00,$18,$05,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$91,$30,$88,$92,$8b,$31,$00,$18,$06,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$8f,$30,$88,$92,$8b,$31,$00,$17,$07,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$94,$30,$88,$92,$30,$00,$17,$08,$01,$97,$20,$87,$8b,$31,$30,$30,$30,$35,$33,$31,$37,$36,$33,$93,$30,$88,$92,$30,$00,$18,$09,$01,$97,$20,$87,$81,$45,$55,$3b,$81,$b3,$81,$69,$71,$5d,$81,$88,$20,$92,$20,$8b,$31,$00,$12,$0a,$01,$97,$20,$37,$39,$37,$8a,$8b,$38,$35,$32,$92,$8b,$35,$35,$00,$13,$0b,$01,$97,$20,$37,$39,$37,$8b,$8b,$38,$35,$32,$92,$31,$36,$34,$39,$00,$16,$0c,$01,$97,$20,$37,$39,$37,$89,$8b,$38,$35,$32,$92,$8b,$36,$37,$39,$30,$34,$34,$00,$10,$0d,$01,$97,$20,$37,$39,$37,$8c,$8b,$38,$35,$32,$92,$30,$00,$11,$0e,$01,$97,$20,$37,$39,$37,$84,$38,$35,$32,$92,$37,$39,$37,$00,$13,$0f,$01,$97,$20,$87,$37,$39,$37,$85,$8b,$38,$35,$32,$88,$92,$31,$32,$00,$14,$10,$01,$97,$20,$87,$37,$39,$37,$96,$8b,$38,$35,$32,$88,$92,$8b,$37,$39,$00,$14,$11,$01,$97,$20,$87,$37,$39,$37,$b2,$8b,$38,$35,$32,$88,$92,$8b,$36,$37,$00,$12,$12,$01,$97,$20,$87,$37,$39,$37,$92,$8b,$38,$35,$32,$88,$92,$30,$00,$13,$13,$01,$97,$20,$87,$37,$39,$37,$90,$8b,$38,$35,$32,$88,$92,$8b,$31,$00,$12,$14,$01,$97,$20,$87,$37,$39,$37,$91,$8b,$38,$35,$32,$88,$92,$30,$00,$12,$15,$01,$97,$20,$87,$37,$39,$37,$8f,$8b,$38,$35,$32,$88,$92,$30,$00,$13,$16,$01,$97,$20,$87,$37,$39,$37,$94,$8b,$38,$35,$32,$88,$92,$8b,$31,$00,$13,$17,$01,$97,$20,$87,$37,$39,$37,$93,$8b,$38,$35,$32,$88,$92,$8b,$31,$00,$17,$18,$01,$97,$20,$87,$81,$7c,$78,$5e,$81,$b3,$81,$59,$2c,$5b,$81,$88,$20,$92,$20,$31,$00,$26,$19,$01,$97,$20,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$8a,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$92,$8b,$39,$31,$38,$37,$32,$30,$30,$39,$35,$00,$24,$1a,$01,$97,$20,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$8b,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$92,$39,$34,$33,$30,$36,$30,$30,$31,$00,$1d,$1b,$01,$97,$20,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$8c,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$92,$30,$00,$23,$1c,$01,$97,$20,$34,$31,$32,$32,$30,$37,$30,$34,$37,$84,$35,$30,$36,$35,$31,$33,$30,$34,$38,$92,$34,$31,$32,$32,$30,$37,$30,$34,$37,$00,$28,$1d,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$85,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$8b,$35,$31,$34,$39,$36,$37,$35,$31,$32,$00,$27,$1e,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$96,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$31,$31,$31,$32,$31,$34,$39,$32,$39,$00,$28,$1f,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$b2,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$8b,$34,$30,$33,$37,$35,$32,$35,$38,$33,$00,$1f,$20,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$92,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$30,$00,$20,$21,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$90,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$8b,$31,$00,$1f,$22,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$91,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$30,$00,$1f,$23,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$8f,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$30,$00,$20,$24,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$94,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$8b,$31,$00,$20,$25,$01,$97,$20,$87,$8b,$34,$31,$32,$32,$30,$37,$30,$34,$37,$93,$8b,$35,$30,$36,$35,$31,$33,$30,$34,$38,$88,$92,$8b,$31,$00,$17,$26,$01,$97,$20,$87,$81,$75,$5b,$5a,$81,$b3,$81,$42,$54,$2d,$81,$88,$20,$92,$20,$31,$00,$0f,$27,$01,$97,$20,$30,$8a,$37,$33,$38,$92,$37,$33,$38,$00,$0d,$28,$01,$97,$20,$30,$89,$37,$33,$38,$92,$30,$00,$0d,$29,$01,$97,$20,$30,$8c,$37,$33,$38,$92,$30,$00,$0d,$2a,$01,$97,$20,$30,$84,$37,$33,$38,$92,$30,$00,$0f,$2b,$01,$97,$20,$87,$30,$85,$37,$33,$38,$88,$92,$30,$00,$11,$2c,$01,$97,$20,$87,$30,$96,$37,$33,$38,$88,$92,$37,$33,$38,$00,$11,$2d,$01,$97,$20,$87,$30,$b2,$37,$33,$38,$88,$92,$37,$33,$38,$00,$0f,$2e,$01,$97,$20,$87,$30,$92,$37,$33,$38,$88,$92,$30,$00,$10,$2f,$01,$97,$20,$87,$30,$90,$37,$33,$38,$88,$92,$8b,$31,$00,$10,$30,$01,$97,$20,$87,$30,$91,$37,$33,$38,$88,$92,$8b,$31,$00,$10,$31,$01,$97,$20,$87,$30,$8f,$37,$33,$38,$88,$92,$8b,$31,$00,$0f,$32,$01,$97,$20,$87,$30,$94,$37,$33,$38,$88,$92,$30,$00,$0f,$33,$01,$97,$20,$87,$30,$93,$37,$33,$38,$88,$92,$30,$00,$18,$34,$01,$97,$20,$87,$81,$4a,$47,$5a,$81,$b3,$81,$71,$50,$3a,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$35,$01,$97,$20,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$8a,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$92,$8b,$31,$30,$32,$36,$38,$34,$36,$37,$36,$31,$00,$24,$36,$01,$97,$20,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$8b,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$92,$38,$37,$31,$33,$31,$36,$38,$37,$33,$00,$1c,$37,$01,$97,$20,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$8c,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$92,$30,$00,$21,$38,$01,$97,$20,$37,$37,$37,$36,$34,$39,$34,$34,$84,$39,$34,$39,$30,$38,$31,$38,$31,$37,$92,$37,$37,$37,$36,$34,$39,$34,$34,$00,$28,$39,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$85,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$8b,$31,$30,$31,$38,$34,$32,$31,$32,$31,$36,$00,$27,$3a,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$96,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$31,$30,$30,$39,$39,$39,$35,$36,$37,$31,$00,$25,$3b,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$b2,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$8b,$38,$34,$32,$35,$35,$34,$35,$00,$1e,$3c,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$92,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$30,$00,$1f,$3d,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$90,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$8b,$31,$00,$1e,$3e,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$91,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$30,$00,$1e,$3f,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$8f,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$30,$00,$1f,$40,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$94,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$8b,$31,$00,$1f,$41,$01,$97,$20,$87,$8b,$37,$37,$37,$36,$34,$39,$34,$34,$93,$8b,$39,$34,$39,$30,$38,$31,$38,$31,$37,$88,$92,$8b,$31,$00,$18,$42,$01,$97,$20,$87,$81,$32,$4c,$47,$81,$b3,$81,$48,$77,$7d,$81,$88,$20,$92,$20,$8b,$31,$00,$27,$43,$01,$97,$20,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$8a,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$92,$8b,$31,$34,$35,$39,$36,$32,$33,$37,$39,$38,$00,$1d,$44,$01,$97,$20,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$8c,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$92,$31,$00,$23,$45,$01,$97,$20,$38,$32,$32,$31,$30,$39,$35,$37,$38,$84,$36,$33,$37,$35,$31,$34,$32,$32,$30,$92,$31,$38,$34,$35,$39,$35,$33,$35,$38,$00,$28,$46,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$85,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$8b,$39,$30,$35,$39,$36,$37,$30,$38,$34,$00,$27,$47,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$96,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$33,$35,$32,$33,$31,$30,$33,$37,$30,$00,$28,$48,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$b2,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$8b,$35,$35,$33,$36,$35,$36,$37,$31,$34,$00,$1f,$49,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$92,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$30,$00,$20,$4a,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$90,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$8b,$31,$00,$20,$4b,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$91,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$8b,$31,$00,$20,$4c,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$8f,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$8b,$31,$00,$1f,$4d,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$94,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$30,$00,$1f,$4e,$01,$97,$20,$87,$8b,$38,$32,$32,$31,$30,$39,$35,$37,$38,$93,$8b,$36,$33,$37,$35,$31,$34,$32,$32,$30,$88,$92,$30,$00,$18,$4f,$01,$97,$20,$87,$81,$3f,$48,$42,$81,$b3,$81,$73,$58,$5e,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$50,$01,$97,$20,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$8a,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$92,$8b,$35,$35,$33,$33,$35,$35,$30,$35,$32,$00,$25,$51,$01,$97,$20,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$8b,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$92,$31,$39,$30,$32,$34,$32,$38,$30,$36,$00,$1d,$52,$01,$97,$20,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$8c,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$92,$30,$00,$23,$53,$01,$97,$20,$31,$38,$31,$35,$35,$36,$31,$32,$33,$84,$33,$37,$31,$37,$39,$38,$39,$32,$39,$92,$31,$38,$31,$35,$35,$36,$31,$32,$33,$00,$28,$54,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$85,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$8b,$35,$31,$39,$37,$39,$35,$36,$31,$31,$00,$27,$55,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$96,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$34,$38,$36,$32,$33,$36,$31,$37,$30,$00,$27,$56,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$b2,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$8b,$33,$33,$35,$35,$39,$34,$34,$31,$00,$1f,$57,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$92,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$30,$00,$20,$58,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$90,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$8b,$31,$00,$1f,$59,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$91,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$30,$00,$1f,$5a,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$8f,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$30,$00,$20,$5b,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$94,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$8b,$31,$00,$20,$5c,$01,$97,$20,$87,$8b,$31,$38,$31,$35,$35,$36,$31,$32,$33,$93,$8b,$33,$37,$31,$37,$39,$38,$39,$32,$39,$88,$92,$8b,$31,$00,$18,$5d,$01,$97,$20,$87,$81,$39,$55,$39,$81,$b3,$81,$65,$7c,$79,$81,$88,$20,$92,$20,$8b,$31,$00,$12,$5e,$01,$97,$20,$8b,$37,$30,$35,$8a,$8b,$37,$92,$8b,$37,$31,$32,$00,$12,$5f,$01,$97,$20,$8b,$37,$30,$35,$89,$8b,$37,$92,$34,$39,$33,$35,$00,$11,$60,$01,$97,$20,$8b,$37,$30,$35,$8c,$8b,$37,$92,$31,$30,$30,$00,$0d,$61,$01,$97,$20,$37,$30,$35,$84,$37,$92,$35,$00,$14,$62,$01,$97,$20,$87,$8b,$37,$30,$35,$85,$8b,$37,$88,$92,$8b,$37,$31,$31,$00,$13,$63,$01,$97,$20,$87,$8b,$37,$30,$35,$96,$8b,$37,$88,$92,$37,$31,$30,$00,$12,$64,$01,$97,$20,$87,$8b,$37,$30,$35,$b2,$8b,$37,$88,$92,$8b,$31,$00,$11,$65,$01,$97,$20,$87,$8b,$37,$30,$35,$92,$8b,$37,$88,$92,$30,$00,$12,$66,$01,$97,$20,$87,$8b,$37,$30,$35,$90,$8b,$37,$88,$92,$8b,$31,$00,$12,$67,$01,$97,$20,$87,$8b,$37,$30,$35,$91,$8b,$37,$88,$92,$8b,$31,$00,$12,$68,$01,$97,$20,$87,$8b,$37,$30,$35,$8f,$8b,$37,$88,$92,$8b,$31,$00,$11,$69,$01,$97,$20,$87,$8b,$37,$30,$35,$94,$8b,$37,$88,$92,$30,$00,$11,$6a,$01,$97,$20,$87,$8b,$37,$30,$35,$93,$8b,$37,$88,$92,$30,$00,$18,$6b,$01,$97,$20,$87,$81,$27,$63,$5f,$81,$b3,$81,$5e,$5e,$55,$81,$88,$20,$92,$20,$8b,$31,$00,$1b,$6c,$01,$97,$20,$30,$8a,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$92,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$00,$1a,$6d,$01,$97,$20,$30,$8b,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$92,$34,$34,$37,$36,$33,$39,$39,$37,$00,$13,$6e,$01,$97,$20,$30,$89,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$92,$30,$00,$13,$6f,$01,$97,$20,$30,$8c,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$92,$30,$00,$12,$70,$01,$97,$20,$30,$84,$34,$34,$37,$36,$33,$39,$39,$37,$92,$30,$00,$15,$71,$01,$97,$20,$87,$30,$85,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$30,$00,$1d,$72,$01,$97,$20,$87,$30,$96,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$00,$1d,$73,$01,$97,$20,$87,$30,$b2,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$00,$15,$74,$01,$97,$20,$87,$30,$92,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$30,$00,$16,$75,$01,$97,$20,$87,$30,$90,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$8b,$31,$00,$15,$76,$01,$97,$20,$87,$30,$91,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$30,$00,$15,$77,$01,$97,$20,$87,$30,$8f,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$30,$00,$16,$78,$01,$97,$20,$87,$30,$94,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$8b,$31,$00,$16,$79,$01,$97,$20,$87,$30,$93,$8b,$34,$34,$37,$36,$33,$39,$39,$37,$88,$92,$8b,$31,$00,$18,$7a,$01,$97,$20,$87,$81,$4e,$30,$44,$81,$b3,$81,$5d,$3f,$39,$81,$88,$20,$92,$20,$8b,$31,$00,$25,$7b,$01,$97,$20,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$8a,$31,$33,$36,$31,$38,$35,$35,$37,$33,$92,$8b,$31,$39,$37,$38,$34,$39,$39,$37,$32,$00,$2d,$7c,$01,$97,$20,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$89,$31,$33,$36,$31,$38,$35,$35,$37,$33,$92,$8b,$34,$35,$34,$39,$30,$38,$32,$32,$30,$39,$38,$31,$39,$32,$32,$38,$35,$00,$1d,$7d,$01,$97,$20,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$8c,$31,$33,$36,$31,$38,$35,$35,$37,$33,$92,$8b,$32,$00,$22,$7e,$01,$97,$20,$33,$33,$34,$30,$33,$35,$35,$34,$35,$84,$31,$33,$36,$31,$38,$35,$35,$37,$33,$92,$36,$31,$36,$36,$34,$33,$39,$39,$00,$26,$7f,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$85,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$31,$33,$35,$36,$36,$30,$37,$30,$39,$00,$27,$80,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$96,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$8b,$34,$36,$39,$31,$37,$31,$33,$39,$30,$00,$27,$81,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$b2,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$8b,$33,$33,$33,$35,$31,$30,$36,$38,$31,$00,$1e,$82,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$92,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$30,$00,$1f,$83,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$90,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$8b,$31,$00,$1f,$84,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$91,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$8b,$31,$00,$1f,$85,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$8f,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$8b,$31,$00,$1e,$86,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$94,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$30,$00,$1e,$87,$01,$97,$20,$87,$8b,$33,$33,$34,$30,$33,$35,$35,$34,$35,$93,$31,$33,$36,$31,$38,$35,$35,$37,$33,$88,$92,$30,$00,$18,$88,$01,$97,$20,$87,$81,$56,$37,$50,$81,$b3,$81,$74,$57,$64,$81,$88,$20,$92,$20,$8b,$31,$00,$1e,$89,$01,$97,$20,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$8a,$8b,$33,$92,$8b,$36,$38,$34,$39,$33,$31,$38,$36,$32,$00,$1d,$8a,$01,$97,$20,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$8c,$8b,$33,$92,$32,$32,$38,$33,$31,$30,$36,$31,$39,$00,$13,$8b,$01,$97,$20,$36,$38,$34,$39,$33,$31,$38,$35,$39,$84,$33,$92,$32,$00,$20,$8c,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$85,$8b,$33,$88,$92,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$00,$1f,$8d,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$96,$8b,$33,$88,$92,$36,$38,$34,$39,$33,$31,$38,$35,$36,$00,$18,$8e,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$b2,$8b,$33,$88,$92,$8b,$33,$00,$17,$8f,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$92,$8b,$33,$88,$92,$30,$00,$18,$90,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$90,$8b,$33,$88,$92,$8b,$31,$00,$18,$91,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$91,$8b,$33,$88,$92,$8b,$31,$00,$18,$92,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$8f,$8b,$33,$88,$92,$8b,$31,$00,$17,$93,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$94,$8b,$33,$88,$92,$30,$00,$17,$94,$01,$97,$20,$87,$8b,$36,$38,$34,$39,$33,$31,$38,$35,$39,$93,$8b,$33,$88,$92,$30,$00,$18,$95,$01,$97,$20,$87,$81,$4a,$7a,$37,$81,$b3,$81,$5a,$78,$55,$81,$88,$20,$92,$20,$8b,$31,$00,$1b,$96,$01,$97,$20,$30,$8a,$33,$34,$35,$37,$36,$31,$35,$35,$30,$92,$33,$34,$35,$37,$36,$31,$35,$35,$30,$00,$13,$97,$01,$97,$20,$30,$89,$33,$34,$35,$37,$36,$31,$35,$35,$30,$92,$30,$00,$13,$98,$01,$97,$20,$30,$8c,$33,$34,$35,$37,$36,$31,$35,$35,$30,$92,$30,$00,$13,$99,$01,$97,$20,$30,$84,$33,$34,$35,$37,$36,$31,$35,$35,$30,$92,$30,$00,$15,$9a,$01,$97,$20,$87,$30,$85,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$30,$00,$1d,$9b,$01,$97,$20,$87,$30,$96,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$33,$34,$35,$37,$36,$31,$35,$35,$30,$00,$1d,$9c,$01,$97,$20,$87,$30,$b2,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$33,$34,$35,$37,$36,$31,$35,$35,$30,$00,$15,$9d,$01,$97,$20,$87,$30,$92,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$30,$00,$16,$9e,$01,$97,$20,$87,$30,$90,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$8b,$31,$00,$16,$9f,$01,$97,$20,$87,$30,$91,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$8b,$31,$00,$16,$a0,$01,$97,$20,$87,$30,$8f,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$8b,$31,$00,$15,$a1,$01,$97,$20,$87,$30,$94,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$30,$00,$15,$a2,$01,$97,$20,$87,$30,$93,$33,$34,$35,$37,$36,$31,$35,$35,$30,$88,$92,$30,$00,$17,$a3,$01,$97,$20,$87,$81,$49,$4b,$64,$81,$b3,$81,$47,$58,$6e,$81,$88,$20,$92,$20,$31,$00,$0b,$a4,$01,$97,$20,$39,$8a,$30,$92,$39,$00,$0b,$a5,$01,$97,$20,$39,$8b,$30,$92,$39,$00,$0b,$a6,$01,$97,$20,$39,$89,$30,$92,$30,$00,$0d,$a7,$01,$97,$20,$87,$39,$85,$30,$88,$92,$30,$00,$0d,$a8,$01,$97,$20,$87,$39,$96,$30,$88,$92,$39,$00,$0d,$a9,$01,$97,$20,$87,$39,$b2,$30,$88,$92,$39,$00,$0d,$aa,$01,$97,$20,$87,$39,$92,$30,$88,$92,$30,$00,$0e,$ab,$01,$97,$20,$87,$39,$90,$30,$88,$92,$8b,$31,$00,$0d,$ac,$01,$97,$20,$87,$39,$91,$30,$88,$92,$30,$00,$0d,$ad,$01,$97,$20,$87,$39,$8f,$30,$88,$92,$30,$00,$0e,$ae,$01,$97,$20,$87,$39,$94,$30,$88,$92,$8b,$31,$00,$0e,$af,$01,$97,$20,$87,$39,$93,$30,$88,$92,$8b,$31,$00,$17,$b0,$01,$97,$20,$87,$81,$70,$64,$49,$81,$b3,$81,$40,$2e,$7b,$81,$88,$20,$92,$20,$31,$00,$1b,$b1,$01,$97,$20,$30,$8a,$34,$38,$37,$35,$36,$33,$31,$34,$39,$92,$34,$38,$37,$35,$36,$33,$31,$34,$39,$00,$13,$b2,$01,$97,$20,$30,$89,$34,$38,$37,$35,$36,$33,$31,$34,$39,$92,$30,$00,$13,$b3,$01,$97,$20,$30,$8c,$34,$38,$37,$35,$36,$33,$31,$34,$39,$92,$30,$00,$13,$b4,$01,$97,$20,$30,$84,$34,$38,$37,$35,$36,$33,$31,$34,$39,$92,$30,$00,$15,$b5,$01,$97,$20,$87,$30,$85,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$30,$00,$1d,$b6,$01,$97,$20,$87,$30,$96,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$34,$38,$37,$35,$36,$33,$31,$34,$39,$00,$1d,$b7,$01,$97,$20,$87,$30,$b2,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$34,$38,$37,$35,$36,$33,$31,$34,$39,$00,$15,$b8,$01,$97,$20,$87,$30,$92,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$30,$00,$16,$b9,$01,$97,$20,$87,$30,$90,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$8b,$31,$00,$16,$ba,$01,$97,$20,$87,$30,$91,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$8b,$31,$00,$16,$bb,$01,$97,$20,$87,$30,$8f,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$8b,$31,$00,$15,$bc,$01,$97,$20,$87,$30,$94,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$30,$00,$15,$bd,$01,$97,$20,$87,$30,$93,$34,$38,$37,$35,$36,$33,$31,$34,$39,$88,$92,$30,$00,$17,$be,$01,$97,$20,$87,$81,$55,$3b,$26,$81,$b3,$81,$51,$4b,$55,$81,$88,$20,$92,$20,$31,$00,$1e,$bf,$01,$97,$20,$32,$34,$35,$34,$34,$36,$30,$31,$35,$8a,$8b,$31,$30,$37,$92,$32,$34,$35,$34,$34,$35,$39,$30,$38,$00,$1e,$c0,$01,$97,$20,$32,$34,$35,$34,$34,$36,$30,$31,$35,$8b,$8b,$31,$30,$37,$92,$32,$34,$35,$34,$34,$36,$31,$32,$32,$00,$21,$c1,$01,$97,$20,$32,$34,$35,$34,$34,$36,$30,$31,$35,$89,$8b,$31,$30,$37,$92,$8b,$32,$36,$32,$36,$32,$37,$32,$33,$36,$30,$35,$00,$1d,$c2,$01,$97,$20,$32,$34,$35,$34,$34,$36,$30,$31,$35,$8c,$8b,$31,$30,$37,$92,$8b,$32,$32,$39,$33,$38,$38,$37,$00,$17,$c3,$01,$97,$20,$32,$34,$35,$34,$34,$36,$30,$31,$35,$84,$31,$30,$37,$92,$31,$30,$36,$00,$20,$c4,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$85,$8b,$31,$30,$37,$88,$92,$32,$34,$35,$34,$34,$35,$39,$30,$39,$00,$21,$c5,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$96,$8b,$31,$30,$37,$88,$92,$8b,$32,$34,$35,$34,$34,$35,$39,$31,$30,$00,$19,$c6,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$b2,$8b,$31,$30,$37,$88,$92,$8b,$31,$00,$18,$c7,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$92,$8b,$31,$30,$37,$88,$92,$30,$00,$19,$c8,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$90,$8b,$31,$30,$37,$88,$92,$8b,$31,$00,$18,$c9,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$91,$8b,$31,$30,$37,$88,$92,$30,$00,$18,$ca,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$8f,$8b,$31,$30,$37,$88,$92,$30,$00,$19,$cb,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$94,$8b,$31,$30,$37,$88,$92,$8b,$31,$00,$19,$cc,$01,$97,$20,$87,$32,$34,$35,$34,$34,$36,$30,$31,$35,$93,$8b,$31,$30,$37,$88,$92,$8b,$31,$00,$17,$cd,$01,$97,$20,$87,$81,$55,$2f,$4d,$81,$b3,$81,$45,$77,$62,$81,$88,$20,$92,$20,$31,$00,$0f,$ce,$01,$97,$20,$35,$38,$33,$8a,$30,$92,$35,$38,$33,$00,$0f,$cf,$01,$97,$20,$35,$38,$33,$8b,$30,$92,$35,$38,$33,$00,$0d,$d0,$01,$97,$20,$35,$38,$33,$89,$30,$92,$30,$00,$0f,$d1,$01,$97,$20,$87,$35,$38,$33,$85,$30,$88,$92,$30,$00,$11,$d2,$01,$97,$20,$87,$35,$38,$33,$96,$30,$88,$92,$35,$38,$33,$00,$11,$d3,$01,$97,$20,$87,$35,$38,$33,$b2,$30,$88,$92,$35,$38,$33,$00,$0f,$d4,$01,$97,$20,$87,$35,$38,$33,$92,$30,$88,$92,$30,$00,$10,$d5,$01,$97,$20,$87,$35,$38,$33,$90,$30,$88,$92,$8b,$31,$00,$0f,$d6,$01,$97,$20,$87,$35,$38,$33,$91,$30,$88,$92,$30,$00,$0f,$d7,$01,$97,$20,$87,$35,$38,$33,$8f,$30,$88,$92,$30,$00,$10,$d8,$01,$97,$20,$87,$35,$38,$33,$94,$30,$88,$92,$8b,$31,$00,$10,$d9,$01,$97,$20,$87,$35,$38,$33,$93,$30,$88,$92,$8b,$31,$00,$17,$da,$01,$97,$20,$87,$81,$4a,$2b,$67,$81,$b3,$81,$2e,$68,$3e,$81,$88,$20,$92,$20,$31,$00,$1e,$db,$01,$97,$20,$8b,$35,$8a,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$92,$31,$30,$33,$31,$35,$31,$35,$31,$36,$35,$00,$1f,$dc,$01,$97,$20,$8b,$35,$89,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$92,$8b,$35,$31,$35,$37,$35,$37,$35,$38,$35,$30,$00,$15,$dd,$01,$97,$20,$8b,$35,$8c,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$92,$30,$00,$14,$de,$01,$97,$20,$35,$84,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$92,$35,$00,$20,$df,$01,$97,$20,$87,$8b,$35,$85,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$00,$21,$e0,$01,$97,$20,$87,$8b,$35,$96,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$8b,$31,$30,$33,$31,$35,$31,$35,$31,$37,$35,$00,$18,$e1,$01,$97,$20,$87,$8b,$35,$b2,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$8b,$35,$00,$17,$e2,$01,$97,$20,$87,$8b,$35,$92,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$30,$00,$18,$e3,$01,$97,$20,$87,$8b,$35,$90,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$8b,$31,$00,$18,$e4,$01,$97,$20,$87,$8b,$35,$91,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$8b,$31,$00,$18,$e5,$01,$97,$20,$87,$8b,$35,$8f,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$8b,$31,$00,$17,$e6,$01,$97,$20,$87,$8b,$35,$94,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$30,$00,$17,$e7,$01,$97,$20,$87,$8b,$35,$93,$31,$30,$33,$31,$35,$31,$35,$31,$37,$30,$88,$92,$30,$00,$18,$e8,$01,$97,$20,$87,$81,$56,$4c,$6b,$81,$b3,$81,$76,$53,$58,$81,$88,$20,$92,$20,$8b,$31,$00,$1b,$e9,$01,$97,$20,$37,$34,$34,$35,$39,$31,$39,$38,$39,$8a,$34,$92,$37,$34,$34,$35,$39,$31,$39,$39,$33,$00,$1b,$ea,$01,$97,$20,$37,$34,$34,$35,$39,$31,$39,$38,$39,$8b,$34,$92,$37,$34,$34,$35,$39,$31,$39,$38,$35,$00,$1b,$eb,$01,$97,$20,$37,$34,$34,$35,$39,$31,$39,$38,$39,$8c,$34,$92,$31,$38,$36,$31,$34,$37,$39,$39,$37,$00,$13,$ec,$01,$97,$20,$37,$34,$34,$35,$39,$31,$39,$38,$39,$84,$34,$92,$31,$00,$15,$ed,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$85,$34,$88,$92,$34,$00,$1d,$ee,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$96,$34,$88,$92,$37,$34,$34,$35,$39,$31,$39,$38,$35,$00,$1d,$ef,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$b2,$34,$88,$92,$37,$34,$34,$35,$39,$31,$39,$38,$39,$00,$15,$f0,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$92,$34,$88,$92,$30,$00,$16,$f1,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$90,$34,$88,$92,$8b,$31,$00,$15,$f2,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$91,$34,$88,$92,$30,$00,$15,$f3,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$8f,$34,$88,$92,$30,$00,$16,$f4,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$94,$34,$88,$92,$8b,$31,$00,$16,$f5,$01,$97,$20,$87,$37,$34,$34,$35,$39,$31,$39,$38,$39,$93,$34,$88,$92,$8b,$31,$00,$17,$f6,$01,$97,$20,$87,$81,$4f,$7c,$57,$81,$b3,$81,$35,$70,$45,$81,$88,$20,$92,$20,$31,$00,$0f,$f7,$01,$97,$20,$30,$8a,$39,$33,$37,$92,$39,$33,$37,$00,$0d,$f8,$01,$97,$20,$30,$89,$39,$33,$37,$92,$30,$00,$0d,$f9,$01,$97,$20,$30,$8c,$39,$33,$37,$92,$30,$00,$0d,$fa,$01,$97,$20,$30,$84,$39,$33,$37,$92,$30,$00,$0f,$fb,$01,$97,$20,$87,$30,$85,$39,$33,$37,$88,$92,$30,$00,$11,$fc,$01,$97,$20,$87,$30,$96,$39,$33,$37,$88,$92,$39,$33,$37,$00,$11,$fd,$01,$97,$20,$87,$30,$b2,$39,$33,$37,$88,$92,$39,$33,$37,$00,$0f,$fe,$01,$97,$20,$87,$30,$92,$39,$33,$37,$88,$92,$30,$00,$10,$ff,$01,$97,$20,$87,$30,$90,$39,$33,$37,$88,$92,$8b,$31,$00,$10,$00,$02,$97,$20,$87,$30,$91,$39,$33,$37,$88,$92,$8b,$31,$00,$10,$01,$02,$97,$20,$87,$30,$8f,$39,$33,$37,$88,$92,$8b,$31,$00,$0f,$02,$02,$97,$20,$87,$30,$94,$39,$33,$37,$88,$92,$30,$00,$0f,$03,$02,$97,$20,$87,$30,$93,$39,$33,$37,$88,$92,$30,$00,$18,$04,$02,$97,$20,$87,$81,$45,$39,$6d,$81,$b3,$81,$78,$46,$6b,$81,$88,$20,$92,$20,$8b,$31,$00,$1f,$05,$02,$97,$20,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$8a,$35,$33,$33,$92,$8b,$33,$36,$33,$30,$30,$33,$36,$31,$37,$00,$22,$06,$02,$97,$20,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$89,$35,$33,$33,$92,$8b,$31,$39,$33,$34,$38,$31,$32,$31,$31,$39,$35,$30,$00,$1c,$07,$02,$97,$20,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$8c,$35,$33,$33,$92,$8b,$36,$38,$31,$30,$35,$38,$00,$17,$08,$02,$97,$20,$33,$36,$33,$30,$30,$34,$31,$35,$30,$84,$35,$33,$33,$92,$32,$33,$36,$00,$1a,$09,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$85,$35,$33,$33,$88,$92,$35,$31,$32,$00,$21,$0a,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$96,$35,$33,$33,$88,$92,$8b,$33,$36,$33,$30,$30,$34,$36,$34,$31,$00,$21,$0b,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$b2,$35,$33,$33,$88,$92,$8b,$33,$36,$33,$30,$30,$34,$31,$32,$39,$00,$18,$0c,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$92,$35,$33,$33,$88,$92,$30,$00,$19,$0d,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$90,$35,$33,$33,$88,$92,$8b,$31,$00,$19,$0e,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$91,$35,$33,$33,$88,$92,$8b,$31,$00,$19,$0f,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$8f,$35,$33,$33,$88,$92,$8b,$31,$00,$18,$10,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$94,$35,$33,$33,$88,$92,$30,$00,$18,$11,$02,$97,$20,$87,$8b,$33,$36,$33,$30,$30,$34,$31,$35,$30,$93,$35,$33,$33,$88,$92,$30,$00,$17,$12,$02,$97,$20,$87,$81,$67,$73,$27,$81,$b3,$81,$46,$4a,$67,$81,$88,$20,$92,$20,$31,$00,$0f,$13,$02,$97,$20,$37,$8a,$32,$30,$37,$92,$32,$31,$34,$00,$10,$14,$02,$97,$20,$37,$89,$32,$30,$37,$92,$31,$34,$34,$39,$00,$0d,$15,$02,$97,$20,$37,$8c,$32,$30,$37,$92,$30,$00,$0d,$16,$02,$97,$20,$37,$84,$32,$30,$37,$92,$37,$00,$0f,$17,$02,$97,$20,$87,$37,$85,$32,$30,$37,$88,$92,$37,$00,$11,$18,$02,$97,$20,$87,$37,$96,$32,$30,$37,$88,$92,$32,$30,$30,$00,$11,$19,$02,$97,$20,$87,$37,$b2,$32,$30,$37,$88,$92,$32,$30,$37,$00,$0f,$1a,$02,$97,$20,$87,$37,$92,$32,$30,$37,$88,$92,$30,$00,$10,$1b,$02,$97,$20,$87,$37,$90,$32,$30,$37,$88,$92,$8b,$31,$00,$10,$1c,$02,$97,$20,$87,$37,$91,$32,$30,$37,$88,$92,$8b,$31,$00,$10,$1d,$02,$97,$20,$87,$37,$8f,$32,$30,$37,$88,$92,$8b,$31,$00,$0f,$1e,$02,$97,$20,$87,$37,$94,$32,$30,$37,$88,$92,$30,$00,$0f,$1f,$02,$97,$20,$87,$37,$93,$32,$30,$37,$88,$92,$30,$00,$17,$20,$02,$97,$20,$87,$81,$62,$34,$60,$81,$b3,$81,$5f,$31,$38,$81,$88,$20,$92,$20,$31,$00,$1d,$21,$02,$97,$20,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$8a,$30,$92,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$00,$14,$22,$02,$97,$20,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$89,$30,$92,$30,$00,$16,$23,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$85,$30,$88,$92,$30,$00,$1f,$24,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$96,$30,$88,$92,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$00,$1f,$25,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$b2,$30,$88,$92,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$00,$16,$26,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$92,$30,$88,$92,$30,$00,$17,$27,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$90,$30,$88,$92,$8b,$31,$00,$17,$28,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$91,$30,$88,$92,$8b,$31,$00,$17,$29,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$8f,$30,$88,$92,$8b,$31,$00,$16,$2a,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$94,$30,$88,$92,$30,$00,$16,$2b,$02,$97,$20,$87,$8b,$37,$37,$37,$30,$39,$34,$33,$32,$35,$93,$30,$88,$92,$30,$00,$18,$2c,$02,$97,$20,$87,$81,$51,$6a,$35,$81,$b3,$81,$56,$55,$70,$81,$88,$20,$92,$20,$8b,$31,$00,$00
>2208	34 37 31 38 39 35 34 8a 8b 38 36 38 37 39 35 38
>2218	37 31 92 8b 31 36 31 33 35 31 34 38 32 35 00 25
>2228	02 00 97 20 8b 37 34 34 37 31 38 39 35 34 8b 8b
>2238	38 36 38 37 39 35 38 37 31 92 31 32 34 30 37 36
>2248	39 31 37 00 1d 03 00 97 20 8b 37 34 34 37 31 38
>2258	39 35 34 8c 8b 38 36 38 37 39 35 38 37 31 92 30
>2268	00 23 04 00 97 20 37 34 34 37 31 38 39 35 34 84
>2278	38 36 38 37 39 35 38 37 31 92 37 34 34 37 31 38
>2288	39 35 34 00 29 05 00 97 20 87 8b 37 34 34 37 31
>2298	38 39 35 34 85 8b 38 36 38 37 39 35 38 37 31 88
>22a8	92 8b 31 30 37 32 34 31 36 37 36 38 00 27 06 00
>22b8	97 20 87 8b 37 34 34 37 31 38 39 35 34 96 8b 38
>22c8	36 38 37 39 35 38 37 31 88 92 35 33 31 33 31 38
>22d8	37 31 31 00 28 07 00 97 20 87 8b 37 34 34 37 31
>22e8	38 39 35 34 b2 8b 38 36 38 37 39 35 38 37 31 88
>22f8	92 8b 35 34 31 30 39 38 30 35 37 00 1f 08 00 97
>2308	20 87 8b 37 34 34 37 31 38 39 35 34 92 8b 38 36
>2318	38 37 39 35 38 37 31 88 92 30 00 20 09 00 97 20
>2328	87 8b 37 34 34 37 31 38 39 35 34 90 8b 38 36 38
>2338	37 39 35 38 37 31 88 92 8b 31 00 1f 0a 00 97 20
>2348	87 8b 37 34 34 37 31 38 39 35 34 91 8b 38 36 38
>2358	37 39 35 38 37 31 88 92 30 00 1f 0b 00 97 20 87
>2368	8b 37 34 34 37 31 38 39 35 34 8f 8b 38 36 38 37
>2378	39 35 38 37 31 88 92 30 00 20 0c 00 97 20 87 8b
>2388	37 34 34 37 31 38 39 35 34 94 8b 38 36 38 37 39
>2398	35 38 37 31 88 92 8b 31 00 20 0d 00 97 20 87 8b
>23a8	37 34 34 37 31 38 39 35 34 93 8b 38 36 38 37 39
>23b8	35 38 37 31 88 92 8b 31 00 17 0e 00 97 20 87 81
>23c8	77 72 4c 81 b3 81 67 2e 52 81 88 20 92 20 31 00
>23d8	0f 0f 00 97 20 34 39 35 8a 31 92 34 39 36 00 0f
>23e8	10 00 97 20 34 39 35 8b 31 92 34 39 34 00 0f 11
>23f8	00 97 20 34 39 35 89 31 92 34 39 35 00 0f 12 00
>2408	97 20 34 39 35 8c 31 92 34 39 35 00 0d 13 00 97
>2418	20 34 39 35 84 31 92 30 00 0f 14 00 97 20 87 34
>2428	39 35 85 31 88 92 31 00 11 15 00 97 20 87 34 39
>2438	35 96 31 88 92 34 39 34 00 11 16 00 97 20 87 34
>2448	39 35 b2 31 88 92 34 39 35 00 0f 17 00 97 20 87
>2458	34 39 35 92 31 88 92 30 00 10 18 00 97 20 87 34
>2468	39 35 90 31 88 92 8b 31 00 0f 19 00 97 20 87 34
>2478	39 35 91 31 88 92 30 00 0f 1a 00 97 20 87 34 39
>2488	35 8f 31 88 92 30 00 10 1b 00 97 20 87 34 39 35
>2498	94 31 88 92 8b 31 00 10 1c 00 97 20 87 34 39 35
>24a8	93 31 88 92 8b 31 00 18 1d 00 97 20 87 81 26 53
>24b8	66 81 b3 81 7d 74 28 81 88 20 92 20 8b 31 00 0f
>24c8	1e 00 97 20 39 35 37 8a 31 92 39 35 38 00 0f 1f
>24d8	00 97 20 39 35 37 8b 31 92 39 35 36 00 0f 20 00
>24e8	97 20 39 35 37 89 31 92 39 35 37 00 0f 21 00 97
>24f8	20 39 35 37 8c 31 92 39 35 37 00 0d 22 00 97 20
>2508	39 35 37 84 31 92 30 00 0f 23 00 97 20 87 39 35
>2518	37 85 31 88 92 31 00 11 24 00 97 20 87 39 35 37
>2528	96 31 88 92 39 35 36 00 11 25 00 97 20 87 39 35
>2538	37 b2 31 88 92 39 35 37 00 0f 26 00 97 20 87 39
>2548	35 37 92 31 88 92 30 00 10 27 00 97 20 87 39 35
>2558	37 90 31 88 92 8b 31 00 0f 28 00 97 20 87 39 35
>2568	37 91 31 88 92 30 00 0f 29 00 97 20 87 39 35 37
>2578	8f 31 88 92 30 00 10 2a 00 97 20 87 39 35 37 94
>2588	31 88 92 8b 31 00 10 2b 00 97 20 87 39 35 37 93
>2598	31 88 92 8b 31 00 17 2c 00 97 20 87 81 58 5f 2b
>25a8	81 b3 81 4e 40 63 81 88 20 92 20 31 00 0f 2d 00
>25b8	97 20 8b 38 8a 8b 36 92 8b 31 34 00 0e 2e 00 97
>25c8	20 8b 38 89 8b 36 92 34 38 00 0d 2f 00 97 20 8b
>25d8	38 8c 8b 36 92 31 00 0b 30 00 97 20 38 84 36 92
>25e8	32 00 10 31 00 97 20 87 8b 38 85 8b 36 88 92 8b
>25f8	38 00 0f 32 00 97 20 87 8b 38 96 8b 36 88 92 32
>2608	00 10 33 00 97 20 87 8b 38 b2 8b 36 88 92 8b 36
>2618	00 0f 34 00 97 20 87 8b 38 92 8b 36 88 92 30 00
>2628	10 35 00 97 20 87 8b 38 90 8b 36 88 92 8b 31 00
>2638	10 36 00 97 20 87 8b 38 91 8b 36 88 92 8b 31 00
>2648	10 37 00 97 20 87 8b 38 8f 8b 36 88 92 8b 31 00
>2658	0f 38 00 97 20 87 8b 38 94 8b 36 88 92 30 00 0f
>2668	39 00 97 20 87 8b 38 93 8b 36 88 92 30 00 18 3a
>2678	00 97 20 87 81 4e 52 63 81 b3 81 6f 57 64 81 88
>2688	20 92 20 8b 31 00 26 3b 00 97 20 8b 34 38 37 37
>2698	33 33 37 35 33 8a 8b 32 31 38 36 30 32 33 31 32
>26a8	92 8b 37 30 36 33 33 36 30 36 35 00 1d 3c 00 97
>26b8	20 8b 34 38 37 37 33 33 37 35 33 8c 8b 32 31 38
>26c8	36 30 32 33 31 32 92 32 00 22 3d 00 97 20 34 38
>26d8	37 37 33 33 37 35 33 84 32 31 38 36 30 32 33 31
>26e8	32 92 35 30 35 32 39 31 32 39 00 28 3e 00 97 20
>26f8	87 8b 34 38 37 37 33 33 37 35 33 85 8b 32 31 38
>2708	36 30 32 33 31 32 88 92 8b 34 38 38 30 39 34 37
>2718	32 30 00 27 3f 00 97 20 87 8b 34 38 37 37 33 33
>2728	37 35 33 96 8b 32 31 38 36 30 32 33 31 32 88 92
>2738	32 36 39 38 35 33 33 37 35 00 28 40 00 97 20 87
>2748	8b 34 38 37 37 33 33 37 35 33 b2 8b 32 31 38 36
>2758	30 32 33 31 32 88 92 8b 32 31 38 32 34 31 33 34
>2768	35 00 1f 41 00 97 20 87 8b 34 38 37 37 33 33 37
>2778	35 33 92 8b 32 31 38 36 30 32 33 31 32 88 92 30
>2788	00 20 42 00 97 20 87 8b 34 38 37 37 33 33 37 35
>2798	33 90 8b 32 31 38 36 30 32 33 31 32 88 92 8b 31
>27a8	00 20 43 00 97 20 87 8b 34 38 37 37 33 33 37 35
>27b8	33 91 8b 32 31 38 36 30 32 33 31 32 88 92 8b 31
>27c8	00 20 44 00 97 20 87 8b 34 38 37 37 33 33 37 35
>27d8	33 8f 8b 32 31 38 36 30 32 33 31 32 88 92 8b 31
>27e8	00 1f 45 00 97 20 87 8b 34 38 37 37 33 33 37 35
>27f8	33 94 8b 32 31 38 36 30 32 33 31 32 88 92 30 00
>2808	1f 46 00 97 20 87 8b 34 38 37 37 33 33 37 35 33
>2818	93 8b 32 31 38 36 30 32 33 31 32 88 92 30 00 17
>2828	47 00 97 20 87 81 51 49 50 81 b3 81 31 54 70 81
>2838	88 20 92 20 31 00 23 48 00 97 20 36 34 38 31 39
>2848	36 36 33 33 8a 8b 33 32 37 37 30 30 39 38 92 36
>2858	31 35 34 32 36 35 33 35 00 23 49 00 97 20 36 34
>2868	38 31 39 36 36 33 33 8b 8b 33 32 37 37 30 30 39
>2878	38 92 36 38 30 39 36 36 37 33 31 00 2c 4a 00 97
>2888	20 36 34 38 31 39 36 36 33 33 89 8b 33 32 37 37
>2898	30 30 39 38 92 8b 32 31 32 34 31 34 36 37 31 38
>28a8	36 36 38 30 30 33 34 00 1d 4b 00 97 20 36 34 38
>28b8	31 39 36 36 33 33 8c 8b 33 32 37 37 30 30 39 38
>28c8	92 8b 31 39 00 21 4c 00 97 20 36 34 38 31 39 36
>28d8	36 33 33 84 33 32 37 37 30 30 39 38 92 32 35 35
>28e8	36 34 37 37 31 00 25 4d 00 97 20 87 36 34 38 31
>28f8	39 36 36 33 33 85 8b 33 32 37 37 30 30 39 38 88
>2908	92 36 33 37 37 31 30 38 35 36 00 26 4e 00 97 20
>2918	87 36 34 38 31 39 36 36 33 33 96 8b 33 32 37 37
>2928	30 30 39 38 88 92 8b 36 35 39 39 39 35 31 37 37
>2938	00 25 4f 00 97 20 87 36 34 38 31 39 36 36 33 33
>2948	b2 8b 33 32 37 37 30 30 39 38 88 92 8b 32 32 32
>2958	38 34 33 32 31 00 1d 50 00 97 20 87 36 34 38 31
>2968	39 36 36 33 33 92 8b 33 32 37 37 30 30 39 38 88
>2978	92 30 00 1e 51 00 97 20 87 36 34 38 31 39 36 36
>2988	33 33 90 8b 33 32 37 37 30 30 39 38 88 92 8b 31
>2998	00 1d 52 00 97 20 87 36 34 38 31 39 36 36 33 33
>29a8	91 8b 33 32 37 37 30 30 39 38 88 92 30 00 1d 53
>29b8	00 97 20 87 36 34 38 31 39 36 36 33 33 8f 8b 33
>29c8	32 37 37 30 30 39 38 88 92 30 00 1e 54 00 97 20
>29d8	87 36 34 38 31 39 36 36 33 33 94 8b 33 32 37 37
>29e8	30 30 39 38 88 92 8b 31 00 1e 55 00 97 20 87 36
>29f8	34 38 31 39 36 36 33 33 93 8b 33 32 37 37 30 30
>2a08	39 38 88 92 8b 31 00 17 56 00 97 20 87 81 5b 2c
>2a18	7c 81 b3 81 3a 44 55 81 88 20 92 20 31 00 0d 57
>2a28	00 97 20 30 8a 8b 37 92 8b 37 00 0c 58 00 97 20
>2a38	30 8b 8b 37 92 37 00 0c 59 00 97 20 30 89 8b 37
>2a48	92 30 00 0c 5a 00 97 20 30 8c 8b 37 92 30 00 0b
>2a58	5b 00 97 20 30 84 37 92 30 00 0e 5c 00 97 20 87
>2a68	30 85 8b 37 88 92 30 00 0f 5d 00 97 20 87 30 96
>2a78	8b 37 88 92 8b 37 00 0f 5e 00 97 20 87 30 b2 8b
>2a88	37 88 92 8b 37 00 0e 5f 00 97 20 87 30 92 8b 37
>2a98	88 92 30 00 0f 60 00 97 20 87 30 90 8b 37 88 92
>2aa8	8b 31 00 0e 61 00 97 20 87 30 91 8b 37 88 92 30
>2ab8	00 0e 62 00 97 20 87 30 8f 8b 37 88 92 30 00 0f
>2ac8	63 00 97 20 87 30 94 8b 37 88 92 8b 31 00 0f 64
>2ad8	00 97 20 87 30 93 8b 37 88 92 8b 31 00 18 65 00
>2ae8	97 20 87 81 29 40 68 81 b3 81 2a 58 60 81 88 20
>2af8	92 20 8b 31 00 1c 66 00 97 20 8b 31 33 36 8a 31
>2b08	37 34 38 37 36 33 35 92 31 37 34 38 37 34 39 39
>2b18	00 1f 67 00 97 20 8b 31 33 36 89 31 37 34 38 37
>2b28	36 33 35 92 8b 32 33 37 38 33 31 38 33 36 30 00
>2b38	15 68 00 97 20 8b 31 33 36 8c 31 37 34 38 37 36
>2b48	33 35 92 30 00 16 69 00 97 20 31 33 36 84 31 37
>2b58	34 38 37 36 33 35 92 31 33 36 00 1e 6a 00 97 20
>2b68	87 8b 31 33 36 85 31 37 34 38 37 36 33 35 88 92
>2b78	31 37 34 38 37 36 33 32 00 1f 6b 00 97 20 87 8b
>2b88	31 33 36 96 31 37 34 38 37 36 33 35 88 92 8b 31
>2b98	37 34 38 37 37 36 35 00 1a 6c 00 97 20 87 8b 31
>2ba8	33 36 b2 31 37 34 38 37 36 33 35 88 92 8b 31 33
>2bb8	33 00 17 6d 00 97 20 87 8b 31 33 36 92 31 37 34
>2bc8	38 37 36 33 35 88 92 30 00 18 6e 00 97 20 87 8b
>2bd8	31 33 36 90 31 37 34 38 37 36 33 35 88 92 8b 31
>2be8	00 18 6f 00 97 20 87 8b 31 33 36 91 31 37 34 38
>2bf8	37 36 33 35 88 92 8b 31 00 18 70 00 97 20 87 8b
>2c08	31 33 36 8f 31 37 34 38 37 36 33 35 88 92 8b 31
>2c18	00 17 71 00 97 20 87 8b 31 33 36 94 31 37 34 38
>2c28	37 36 33 35 88 92 30 00 17 72 00 97 20 87 8b 31
>2c38	33 36 93 31 37 34 38 37 36 33 35 88 92 30 00 18
>2c48	73 00 97 20 87 81 30 5c 26 81 b3 81 36 43 5c 81
>2c58	88 20 92 20 8b 31 00 27 74 00 97 20 8b 31 35 39
>2c68	31 39 37 33 39 34 8a 8b 38 34 35 33 31 30 39 37
>2c78	35 92 8b 31 30 30 34 35 30 38 33 36 39 00 25 75
>2c88	00 97 20 8b 31 35 39 31 39 37 33 39 34 8b 8b 38
>2c98	34 35 33 31 30 39 37 35 92 36 38 36 31 31 33 35
>2ca8	38 31 00 1d 76 00 97 20 8b 31 35 39 31 39 37 33
>2cb8	39 34 8c 8b 38 34 35 33 31 30 39 37 35 92 30 00
>2cc8	23 77 00 97 20 31 35 39 31 39 37 33 39 34 84 38
>2cd8	34 35 33 31 30 39 37 35 92 31 35 39 31 39 37 33
>2ce8	39 34 00 28 78 00 97 20 87 8b 31 35 39 31 39 37
>2cf8	33 39 34 85 8b 38 34 35 33 31 30 39 37 35 88 92
>2d08	8b 39 39 38 32 30 36 34 36 34 00 27 79 00 97 20
>2d18	87 8b 31 35 39 31 39 37 33 39 34 96 8b 38 34 35
>2d28	33 31 30 39 37 35 88 92 39 39 31 39 30 34 35 35
>2d38	39 00 26 7a 00 97 20 87 8b 31 35 39 31 39 37 33
>2d48	39 34 b2 8b 38 34 35 33 31 30 39 37 35 88 92 8b
>2d58	36 33 30 31 39 30 35 00 1f 7b 00 97 20 87 8b 31
>2d68	35 39 31 39 37 33 39 34 92 8b 38 34 35 33 31 30
>2d78	39 37 35 88 92 30 00 20 7c 00 97 20 87 8b 31 35
>2d88	39 31 39 37 33 39 34 90 8b 38 34 35 33 31 30 39
>2d98	37 35 88 92 8b 31 00 1f 7d 00 97 20 87 8b 31 35
>2da8	39 31 39 37 33 39 34 91 8b 38 34 35 33 31 30 39
>2db8	37 35 88 92 30 00 1f 7e 00 97 20 87 8b 31 35 39
>2dc8	31 39 37 33 39 34 8f 8b 38 34 35 33 31 30 39 37
>2dd8	35 88 92 30 00 20 7f 00 97 20 87 8b 31 35 39 31
>2de8	39 37 33 39 34 94 8b 38 34 35 33 31 30 39 37 35
>2df8	88 92 8b 31 00 20 80 00 97 20 87 8b 31 35 39 31
>2e08	39 37 33 39 34 93 8b 38 34 35 33 31 30 39 37 35
>2e18	88 92 8b 31 00 18 81 00 97 20 87 81 2a 4a 67 81
>2e28	b3 81 51 3f 28 81 88 20 92 20 8b 31 00 1f 82 00
>2e38	97 20 8b 32 35 32 33 30 31 33 34 36 8a 31 35 36
>2e48	92 8b 32 35 32 33 30 31 31 39 30 00 21 83 00 97
>2e58	20 8b 32 35 32 33 30 31 33 34 36 89 31 35 36 92
>2e68	8b 33 39 33 35 39 30 30 39 39 37 36 00 1d 84 00
>2e78	97 20 8b 32 35 32 33 30 31 33 34 36 8c 31 35 36
>2e88	92 8b 31 36 31 37 33 31 36 00 16 85 00 97 20 32
>2e98	35 32 33 30 31 33 34 36 84 31 35 36 92 35 30 00
>2ea8	1a 86 00 97 20 87 8b 32 35 32 33 30 31 33 34 36
>2eb8	85 31 35 36 88 92 31 35 36 00 21 87 00 97 20 87
>2ec8	8b 32 35 32 33 30 31 33 34 36 96 31 35 36 88 92
>2ed8	8b 32 35 32 33 30 31 35 30 32 00 21 88 00 97 20
>2ee8	87 8b 32 35 32 33 30 31 33 34 36 b2 31 35 36 88
>2ef8	92 8b 32 35 32 33 30 31 33 34 36 00 18 89 00 97
>2f08	20 87 8b 32 35 32 33 30 31 33 34 36 92 31 35 36
>2f18	88 92 30 00 19 8a 00 97 20 87 8b 32 35 32 33 30
>2f28	31 33 34 36 90 31 35 36 88 92 8b 31 00 19 8b 00
>2f38	97 20 87 8b 32 35 32 33 30 31 33 34 36 91 31 35
>2f48	36 88 92 8b 31 00 19 8c 00 97 20 87 8b 32 35 32
>2f58	33 30 31 33 34 36 8f 31 35 36 88 92 8b 31 00 18
>2f68	8d 00 97 20 87 8b 32 35 32 33 30 31 33 34 36 94
>2f78	31 35 36 88 92 30 00 18 8e 00 97 20 87 8b 32 35
>2f88	32 33 30 31 33 34 36 93 31 35 36 88 92 30 00 18
>2f98	8f 00 97 20 87 81 3f 47 5d 81 b3 81 6a 3f 2b 81
>2fa8	88 20 92 20 8b 31 00 1d 90 00 97 20 8b 35 38 34
>2fb8	32 38 30 38 32 34 8a 30 92 8b 35 38 34 32 38 30
>2fc8	38 32 34 00 14 91 00 97 20 8b 35 38 34 32 38 30
>2fd8	38 32 34 89 30 92 30 00 16 92 00 97 20 87 8b 35
>2fe8	38 34 32 38 30 38 32 34 85 30 88 92 30 00 1f 93
>2ff8	00 97 20 87 8b 35 38 34 32 38 30 38 32 34 96 30
>3008	88 92 8b 35 38 34 32 38 30 38 32 34 00 1f 94 00
>3018	97 20 87 8b 35 38 34 32 38 30 38 32 34 b2 30 88
>3028	92 8b 35 38 34 32 38 30 38 32 34 00 16 95 00 97
>3038	20 87 8b 35 38 34 32 38 30 38 32 34 92 30 88 92
>3048	30 00 17 96 00 97 20 87 8b 35 38 34 32 38 30 38
>3058	32 34 90 30 88 92 8b 31 00 17 97 00 97 20 87 8b
>3068	35 38 34 32 38 30 38 32 34 91 30 88 92 8b 31 00
>3078	17 98 00 97 20 87 8b 35 38 34 32 38 30 38 32 34
>3088	8f 30 88 92 8b 31 00 16 99 00 97 20 87 8b 35 38
>3098	34 32 38 30 38 32 34 94 30 88 92 30 00 16 9a 00
>30a8	97 20 87 8b 35 38 34 32 38 30 38 32 34 93 30 88
>30b8	92 30 00 17 9b 00 97 20 87 81 6c 3f 43 81 b3 81
>30c8	4f 4b 68 81 88 20 92 20 31 00 1b 9c 00 97 20 36
>30d8	39 31 34 32 37 33 35 32 8a 34 92 36 39 31 34 32
>30e8	37 33 35 36 00 1b 9d 00 97 20 36 39 31 34 32 37
>30f8	33 35 32 8b 34 92 36 39 31 34 32 37 33 34 38 00
>3108	1b 9e 00 97 20 36 39 31 34 32 37 33 35 32 8c 34
>3118	92 31 37 32 38 35 36 38 33 38 00 13 9f 00 97 20
>3128	36 39 31 34 32 37 33 35 32 84 34 92 30 00 15 a0
>3138	00 97 20 87 36 39 31 34 32 37 33 35 32 85 34 88
>3148	92 30 00 1d a1 00 97 20 87 36 39 31 34 32 37 33
>3158	35 32 96 34 88 92 36 39 31 34 32 37 33 35 36 00
>3168	1d a2 00 97 20 87 36 39 31 34 32 37 33 35 32 b2
>3178	34 88 92 36 39 31 34 32 37 33 35 36 00 15 a3 00
>3188	97 20 87 36 39 31 34 32 37 33 35 32 92 34 88 92
>3198	30 00 16 a4 00 97 20 87 36 39 31 34 32 37 33 35
>31a8	32 90 34 88 92 8b 31 00 15 a5 00 97 20 87 36 39
>31b8	31 34 32 37 33 35 32 91 34 88 92 30 00 15 a6 00
>31c8	97 20 87 36 39 31 34 32 37 33 35 32 8f 34 88 92
>31d8	30 00 16 a7 00 97 20 87 36 39 31 34 32 37 33 35
>31e8	32 94 34 88 92 8b 31 00 16 a8 00 97 20 87 36 39
>31f8	31 34 32 37 33 35 32 93 34 88 92 8b 31 00 18 a9
>3208	00 97 20 87 81 27 73 3f 81 b3 81 30 31 4e 81 88
>3218	20 92 20 8b 31 00 1c aa 00 97 20 8b 33 39 35 8a
>3228	34 37 36 39 36 31 31 31 92 34 37 36 39 35 37 31
>3238	36 00 20 ab 00 97 20 8b 33 39 35 89 34 37 36 39
>3248	36 31 31 31 92 8b 31 38 38 33 39 39 36 33 38 34
>3258	35 00 15 ac 00 97 20 8b 33 39 35 8c 34 37 36 39
>3268	36 31 31 31 92 30 00 16 ad 00 97 20 33 39 35 84
>3278	34 37 36 39 36 31 31 31 92 33 39 35 00 1e ae 00
>3288	97 20 87 8b 33 39 35 85 34 37 36 39 36 31 31 31
>3298	88 92 34 37 36 39 35 39 37 33 00 1f af 00 97 20
>32a8	87 8b 33 39 35 96 34 37 36 39 36 31 31 31 88 92
>32b8	8b 34 37 36 39 36 32 33 30 00 1a b0 00 97 20 87
>32c8	8b 33 39 35 b2 34 37 36 39 36 31 31 31 88 92 8b
>32d8	32 35 37 00 17 b1 00 97 20 87 8b 33 39 35 92 34
>32e8	37 36 39 36 31 31 31 88 92 30 00 18 b2 00 97 20
>32f8	87 8b 33 39 35 90 34 37 36 39 36 31 31 31 88 92
>3308	8b 31 00 18 b3 00 97 20 87 8b 33 39 35 91 34 37
>3318	36 39 36 31 31 31 88 92 8b 31 00 18 b4 00 97 20
>3328	87 8b 33 39 35 8f 34 37 36 39 36 31 31 31 88 92
>3338	8b 31 00 17 b5 00 97 20 87 8b 33 39 35 94 34 37
>3348	36 39 36 31 31 31 88 92 30 00 17 b6 00 97 20 87
>3358	8b 33 39 35 93 34 37 36 39 36 31 31 31 88 92 30
>3368	00 18 b7 00 97 20 87 81 54 3c 5d 81 b3 81 62 5e
>3378	5b 81 88 20 92 20 8b 31 00 28 b8 00 97 20 8b 33
>3388	31 38 39 30 37 36 37 35 8a 8b 31 30 30 33 33 30
>3398	32 35 32 38 92 8b 31 33 32 32 32 31 30 32 30 33
>33a8	00 26 b9 00 97 20 8b 33 31 38 39 30 37 36 37 35
>33b8	8b 8b 31 30 30 33 33 30 32 35 32 38 92 36 38 34
>33c8	33 39 34 38 35 33 00 1e ba 00 97 20 8b 33 31 38
>33d8	39 30 37 36 37 35 8c 8b 31 30 30 33 33 30 32 35
>33e8	32 38 92 30 00 24 bb 00 97 20 33 31 38 39 30 37
>33f8	36 37 35 84 31 30 30 33 33 30 32 35 32 38 92 33
>3408	31 38 39 30 37 36 37 35 00 2a bc 00 97 20 87 8b
>3418	33 31 38 39 30 37 36 37 35 85 8b 31 30 30 33 33
>3428	30 32 35 32 38 88 92 8b 31 30 30 33 34 33 33 38
>3438	35 36 00 28 bd 00 97 20 87 8b 33 31 38 39 30 37
>3448	36 37 35 96 8b 31 30 30 33 33 30 32 35 32 38 88
>3458	92 36 38 34 36 35 37 35 30 39 00 29 be 00 97 20
>3468	87 8b 33 31 38 39 30 37 36 37 35 b2 8b 31 30 30
>3478	33 33 30 32 35 32 38 88 92 8b 33 31 38 37 37 36
>3488	33 34 37 00 20 bf 00 97 20 87 8b 33 31 38 39 30
>3498	37 36 37 35 92 8b 31 30 30 33 33 30 32 35 32 38
>34a8	88 92 30 00 21 c0 00 97 20 87 8b 33 31 38 39 30
>34b8	37 36 37 35 90 8b 31 30 30 33 33 30 32 35 32 38
>34c8	88 92 8b 31 00 20 c1 00 97 20 87 8b 33 31 38 39
>34d8	30 37 36 37 35 91 8b 31 30 30 33 33 30 32 35 32
>34e8	38 88 92 30 00 20 c2 00 97 20 87 8b 33 31 38 39
>34f8	30 37 36 37 35 8f 8b 31 30 30 33 33 30 32 35 32
>3508	38 88 92 30 00 21 c3 00 97 20 87 8b 33 31 38 39
>3518	30 37 36 37 35 94 8b 31 30 30 33 33 30 32 35 32
>3528	38 88 92 8b 31 00 21 c4 00 97 20 87 8b 33 31 38
>3538	39 30 37 36 37 35 93 8b 31 30 30 33 33 30 32 35
>3548	32 38 88 92 8b 31 00 18 c5 00 97 20 87 81 34 6a
>3558	2a 81 b3 81 4b 6e 61 81 88 20 92 20 8b 31 00 1c
>3568	c6 00 97 20 34 36 35 38 37 39 31 31 32 8a 8b 34
>3578	92 34 36 35 38 37 39 31 30 38 00 1c c7 00 97 20
>3588	34 36 35 38 37 39 31 31 32 8b 8b 34 92 34 36 35
>3598	38 37 39 31 31 36 00 1e c8 00 97 20 34 36 35 38
>35a8	37 39 31 31 32 89 8b 34 92 8b 31 38 36 33 35 31
>35b8	36 34 34 38 00 1d c9 00 97 20 34 36 35 38 37 39
>35c8	31 31 32 8c 8b 34 92 8b 31 31 36 34 36 39 37 37
>35d8	38 00 13 ca 00 97 20 34 36 35 38 37 39 31 31 32
>35e8	84 34 92 30 00 1e cb 00 97 20 87 34 36 35 38 37
>35f8	39 31 31 32 85 8b 34 88 92 34 36 35 38 37 39 31
>3608	31 32 00 1f cc 00 97 20 87 34 36 35 38 37 39 31
>3618	31 32 96 8b 34 88 92 8b 34 36 35 38 37 39 31 31
>3628	36 00 17 cd 00 97 20 87 34 36 35 38 37 39 31 31
>3638	32 b2 8b 34 88 92 8b 34 00 16 ce 00 97 20 87 34
>3648	36 35 38 37 39 31 31 32 92 8b 34 88 92 30 00 17
>3658	cf 00 97 20 87 34 36 35 38 37 39 31 31 32 90 8b
>3668	34 88 92 8b 31 00 16 d0 00 97 20 87 34 36 35 38
>3678	37 39 31 31 32 91 8b 34 88 92 30 00 16 d1 00 97
>3688	20 87 34 36 35 38 37 39 31 31 32 8f 8b 34 88 92
>3698	30 00 17 d2 00 97 20 87 34 36 35 38 37 39 31 31
>36a8	32 94 8b 34 88 92 8b 31 00 17 d3 00 97 20 87 34
>36b8	36 35 38 37 39 31 31 32 93 8b 34 88 92 8b 31 00
>36c8	18 d4 00 97 20 87 81 36 5d 64 81 b3 81 4c 37 3a
>36d8	81 88 20 92 20 8b 31 00 23 d5 00 97 20 34 38 34
>36e8	33 39 31 32 36 32 8a 34 38 34 33 39 31 32 36 32
>36f8	92 39 36 38 37 38 32 35 32 34 00 1b d6 00 97 20
>3708	34 38 34 33 39 31 32 36 32 8c 34 38 34 33 39 31
>3718	32 36 32 92 31 00 1b d7 00 97 20 34 38 34 33 39
>3728	31 32 36 32 84 34 38 34 33 39 31 32 36 32 92 30
>3738	00 25 d8 00 97 20 87 34 38 34 33 39 31 32 36 32
>3748	85 34 38 34 33 39 31 32 36 32 88 92 34 38 34 33
>3758	39 31 32 36 32 00 1d d9 00 97 20 87 34 38 34 33
>3768	39 31 32 36 32 96 34 38 34 33 39 31 32 36 32 88
>3778	92 30 00 25 da 00 97 20 87 34 38 34 33 39 31 32
>3788	36 32 b2 34 38 34 33 39 31 32 36 32 88 92 34 38
>3798	34 33 39 31 32 36 32 00 1e db 00 97 20 87 34 38
>37a8	34 33 39 31 32 36 32 92 34 38 34 33 39 31 32 36
>37b8	32 88 92 8b 31 00 1d dc 00 97 20 87 34 38 34 33
>37c8	39 31 32 36 32 90 34 38 34 33 39 31 32 36 32 88
>37d8	92 30 00 1d dd 00 97 20 87 34 38 34 33 39 31 32
>37e8	36 32 91 34 38 34 33 39 31 32 36 32 88 92 30 00
>37f8	1e de 00 97 20 87 34 38 34 33 39 31 32 36 32 8f
>3808	34 38 34 33 39 31 32 36 32 88 92 8b 31 00 1d df
>3818	00 97 20 87 34 38 34 33 39 31 32 36 32 94 34 38
>3828	34 33 39 31 32 36 32 88 92 30 00 1e e0 00 97 20
>3838	87 34 38 34 33 39 31 32 36 32 93 34 38 34 33 39
>3848	31 32 36 32 88 92 8b 31 00 18 e1 00 97 20 87 81
>3858	58 55 26 81 b3 81 76 50 3f 81 88 20 92 20 8b 31
>3868	00 0c e2 00 97 20 8b 36 8a 36 92 30 00 0e e3 00
>3878	97 20 8b 36 89 36 92 8b 33 36 00 0d e4 00 97 20
>3888	8b 36 8c 36 92 8b 31 00 0b e5 00 97 20 36 84 36
>3898	92 30 00 0e e6 00 97 20 87 8b 36 85 36 88 92 32
>38a8	00 0f e7 00 97 20 87 8b 36 96 36 88 92 8b 34 00
>38b8	0f e8 00 97 20 87 8b 36 b2 36 88 92 8b 32 00 0e
>38c8	e9 00 97 20 87 8b 36 92 36 88 92 30 00 0f ea 00
>38d8	97 20 87 8b 36 90 36 88 92 8b 31 00 0f eb 00 97
>38e8	20 87 8b 36 91 36 88 92 8b 31 00 0f ec 00 97 20
>38f8	87 8b 36 8f 36 88 92 8b 31 00 0e ed 00 97 20 87
>3908	8b 36 94 36 88 92 30 00 0e ee 00 97 20 87 8b 36
>3918	93 36 88 92 30 00 17 ef 00 97 20 87 81 69 61 5a
>3928	81 b3 81 30 70 6d 81 88 20 92 20 31 00 13 f0 00
>3938	97 20 8b 36 37 35 8a 33 39 37 92 8b 32 37 38 00
>3948	16 f1 00 97 20 8b 36 37 35 89 33 39 37 92 8b 32
>3958	36 37 39 37 35 00 11 f2 00 97 20 8b 36 37 35 8c
>3968	33 39 37 92 8b 31 00 11 f3 00 97 20 36 37 35 84
>3978	33 39 37 92 32 37 38 00 14 f4 00 97 20 87 8b 36
>3988	37 35 85 33 39 37 88 92 32 36 39 00 15 f5 00 97
>3998	20 87 8b 36 37 35 96 33 39 37 88 92 8b 38 31 36
>39a8	00 15 f6 00 97 20 87 8b 36 37 35 b2 33 39 37 88
>39b8	92 8b 35 34 37 00 12 f7 00 97 20 87 8b 36 37 35
>39c8	92 33 39 37 88 92 30 00 13 f8 00 97 20 87 8b 36
>39d8	37 35 90 33 39 37 88 92 8b 31 00 13 f9 00 97 20
>39e8	87 8b 36 37 35 91 33 39 37 88 92 8b 31 00 13 fa
>39f8	00 97 20 87 8b 36 37 35 8f 33 39 37 88 92 8b 31
>3a08	00 12 fb 00 97 20 87 8b 36 37 35 94 33 39 37 88
>3a18	92 30 00 12 fc 00 97 20 87 8b 36 37 35 93 33 39
>3a28	37 88 92 30 00 18 fd 00 97 20 87 81 53 46 72 81
>3a38	b3 81 74 78 3c 81 88 20 92 20 8b 31 00 1f fe 00
>3a48	97 20 8b 31 30 30 30 35 33 31 37 36 33 8a 30 92
>3a58	8b 31 30 30 30 35 33 31 37 36 33 00 15 ff 00 97
>3a68	20 8b 31 30 30 30 35 33 31 37 36 33 89 30 92 30
>3a78	00 17 00 01 97 20 87 8b 31 30 30 30 35 33 31 37
>3a88	36 33 85 30 88 92 30 00 21 01 01 97 20 87 8b 31
>3a98	30 30 30 35 33 31 37 36 33 96 30 88 92 8b 31 30
>3aa8	30 30 35 33 31 37 36 33 00 21 02 01 97 20 87 8b
>3ab8	31 30 30 30 35 33 31 37 36 33 b2 30 88 92 8b 31
>3ac8	30 30 30 35 33 31 37 36 33 00 17 03 01 97 20 87
>3ad8	8b 31 30 30 30 35 33 31 37 36 33 92 30 88 92 30
>3ae8	00 18 04 01 97 20 87 8b 31 30 30 30 35 33 31 37
>3af8	36 33 90 30 88 92 8b 31 00 18 05 01 97 20 87 8b
>3b08	31 30 30 30 35 33 31 37 36 33 91 30 88 92 8b 31
>3b18	00 18 06 01 97 20 87 8b 31 30 30 30 35 33 31 37
>3b28	36 33 8f 30 88 92 8b 31 00 17 07 01 97 20 87 8b
>3b38	31 30 30 30 35 33 31 37 36 33 94 30 88 92 30 00
>3b48	17 08 01 97 20 87 8b 31 30 30 30 35 33 31 37 36
>3b58	33 93 30 88 92 30 00 18 09 01 97 20 87 81 45 55
>3b68	3b 81 b3 81 69 71 5d 81 88 20 92 20 8b 31 00 12
>3b78	0a 01 97 20 37 39 37 8a 8b 38 35 32 92 8b 35 35
>3b88	00 13 0b 01 97 20 37 39 37 8b 8b 38 35 32 92 31
>3b98	36 34 39 00 16 0c 01 97 20 37 39 37 89 8b 38 35
>3ba8	32 92 8b 36 37 39 30 34 34 00 10 0d 01 97 20 37
>3bb8	39 37 8c 8b 38 35 32 92 30 00 11 0e 01 97 20 37
>3bc8	39 37 84 38 35 32 92 37 39 37 00 13 0f 01 97 20
>3bd8	87 37 39 37 85 8b 38 35 32 88 92 31 32 00 14 10
>3be8	01 97 20 87 37 39 37 96 8b 38 35 32 88 92 8b 37
>3bf8	39 00 14 11 01 97 20 87 37 39 37 b2 8b 38 35 32
>3c08	88 92 8b 36 37 00 12 12 01 97 20 87 37 39 37 92
>3c18	8b 38 35 32 88 92 30 00 13 13 01 97 20 87 37 39
>3c28	37 90 8b 38 35 32 88 92 8b 31 00 12 14 01 97 20
>3c38	87 37 39 37 91 8b 38 35 32 88 92 30 00 12 15 01
>3c48	97 20 87 37 39 37 8f 8b 38 35 32 88 92 30 00 13
>3c58	16 01 97 20 87 37 39 37 94 8b 38 35 32 88 92 8b
>3c68	31 00 13 17 01 97 20 87 37 39 37 93 8b 38 35 32
>3c78	88 92 8b 31 00 17 18 01 97 20 87 81 7c 78 5e 81
>3c88	b3 81 59 2c 5b 81 88 20 92 20 31 00 26 19 01 97
>3c98	20 8b 34 31 32 32 30 37 30 34 37 8a 8b 35 30 36
>3ca8	35 31 33 30 34 38 92 8b 39 31 38 37 32 30 30 39
>3cb8	35 00 24 1a 01 97 20 8b 34 31 32 32 30 37 30 34
>3cc8	37 8b 8b 35 30 36 35 31 33 30 34 38 92 39 34 33
>3cd8	30 36 30 30 31 00 1d 1b 01 97 20 8b 34 31 32 32
>3ce8	30 37 30 34 37 8c 8b 35 30 36 35 31 33 30 34 38
>3cf8	92 30 00 23 1c 01 97 20 34 31 32 32 30 37 30 34
>3d08	37 84 35 30 36 35 31 33 30 34 38 92 34 31 32 32
>3d18	30 37 30 34 37 00 28 1d 01 97 20 87 8b 34 31 32
>3d28	32 30 37 30 34 37 85 8b 35 30 36 35 31 33 30 34
>3d38	38 88 92 8b 35 31 34 39 36 37 35 31 32 00 27 1e
>3d48	01 97 20 87 8b 34 31 32 32 30 37 30 34 37 96 8b
>3d58	35 30 36 35 31 33 30 34 38 88 92 31 31 31 32 31
>3d68	34 39 32 39 00 28 1f 01 97 20 87 8b 34 31 32 32
>3d78	30 37 30 34 37 b2 8b 35 30 36 35 31 33 30 34 38
>3d88	88 92 8b 34 30 33 37 35 32 35 38 33 00 1f 20 01
>3d98	97 20 87 8b 34 31 32 32 30 37 30 34 37 92 8b 35
>3da8	30 36 35 31 33 30 34 38 88 92 30 00 20 21 01 97
>3db8	20 87 8b 34 31 32 32 30 37 30 34 37 90 8b 35 30
>3dc8	36 35 31 33 30 34 38 88 92 8b 31 00 1f 22 01 97
>3dd8	20 87 8b 34 31 32 32 30 37 30 34 37 91 8b 35 30
>3de8	36 35 31 33 30 34 38 88 92 30 00 1f 23 01 97 20
>3df8	87 8b 34 31 32 32 30 37 30 34 37 8f 8b 35 30 36
>3e08	35 31 33 30 34 38 88 92 30 00 20 24 01 97 20 87
>3e18	8b 34 31 32 32 30 37 30 34 37 94 8b 35 30 36 35
>3e28	31 33 30 34 38 88 92 8b 31 00 20 25 01 97 20 87
>3e38	8b 34 31 32 32 30 37 30 34 37 93 8b 35 30 36 35
>3e48	31 33 30 34 38 88 92 8b 31 00 17 26 01 97 20 87
>3e58	81 75 5b 5a 81 b3 81 42 54 2d 81 88 20 92 20 31
>3e68	00 0f 27 01 97 20 30 8a 37 33 38 92 37 33 38 00
>3e78	0d 28 01 97 20 30 89 37 33 38 92 30 00 0d 29 01
>3e88	97 20 30 8c 37 33 38 92 30 00 0d 2a 01 97 20 30
>3e98	84 37 33 38 92 30 00 0f 2b 01 97 20 87 30 85 37
>3ea8	33 38 88 92 30 00 11 2c 01 97 20 87 30 96 37 33
>3eb8	38 88 92 37 33 38 00 11 2d 01 97 20 87 30 b2 37
>3ec8	33 38 88 92 37 33 38 00 0f 2e 01 97 20 87 30 92
>3ed8	37 33 38 88 92 30 00 10 2f 01 97 20 87 30 90 37
>3ee8	33 38 88 92 8b 31 00 10 30 01 97 20 87 30 91 37
>3ef8	33 38 88 92 8b 31 00 10 31 01 97 20 87 30 8f 37
>3f08	33 38 88 92 8b 31 00 0f 32 01 97 20 87 30 94 37
>3f18	33 38 88 92 30 00 0f 33 01 97 20 87 30 93 37 33
>3f28	38 88 92 30 00 18 34 01 97 20 87 81 4a 47 5a 81
>3f38	b3 81 71 50 3a 81 88 20 92 20 8b 31 00 26 35 01
>3f48	97 20 8b 37 37 37 36 34 39 34 34 8a 8b 39 34 39
>3f58	30 38 31 38 31 37 92 8b 31 30 32 36 38 34 36 37
>3f68	36 31 00 24 36 01 97 20 8b 37 37 37 36 34 39 34
>3f78	34 8b 8b 39 34 39 30 38 31 38 31 37 92 38 37 31
>3f88	33 31 36 38 37 33 00 1c 37 01 97 20 8b 37 37 37
>3f98	36 34 39 34 34 8c 8b 39 34 39 30 38 31 38 31 37
>3fa8	92 30 00 21 38 01 97 20 37 37 37 36 34 39 34 34
>3fb8	84 39 34 39 30 38 31 38 31 37 92 37 37 37 36 34
>3fc8	39 34 34 00 28 39 01 97 20 87 8b 37 37 37 36 34
>3fd8	39 34 34 85 8b 39 34 39 30 38 31 38 31 37 88 92
>3fe8	8b 31 30 31 38 34 32 31 32 31 36 00 27 3a 01 97
>3ff8	20 87 8b 37 37 37 36 34 39 34 34 96 8b 39 34 39
>4008	30 38 31 38 31 37 88 92 31 30 30 39 39 39 35 36
>4018	37 31 00 25 3b 01 97 20 87 8b 37 37 37 36 34 39
>4028	34 34 b2 8b 39 34 39 30 38 31 38 31 37 88 92 8b
>4038	38 34 32 35 35 34 35 00 1e 3c 01 97 20 87 8b 37
>4048	37 37 36 34 39 34 34 92 8b 39 34 39 30 38 31 38
>4058	31 37 88 92 30 00 1f 3d 01 97 20 87 8b 37 37 37
>4068	36 34 39 34 34 90 8b 39 34 39 30 38 31 38 31 37
>4078	88 92 8b 31 00 1e 3e 01 97 20 87 8b 37 37 37 36
>4088	34 39 34 34 91 8b 39 34 39 30 38 31 38 31 37 88
>4098	92 30 00 1e 3f 01 97 20 87 8b 37 37 37 36 34 39
>40a8	34 34 8f 8b 39 34 39 30 38 31 38 31 37 88 92 30
>40b8	00 1f 40 01 97 20 87 8b 37 37 37 36 34 39 34 34
>40c8	94 8b 39 34 39 30 38 31 38 31 37 88 92 8b 31 00
>40d8	1f 41 01 97 20 87 8b 37 37 37 36 34 39 34 34 93
>40e8	8b 39 34 39 30 38 31 38 31 37 88 92 8b 31 00 18
>40f8	42 01 97 20 87 81 32 4c 47 81 b3 81 48 77 7d 81
>4108	88 20 92 20 8b 31 00 27 43 01 97 20 8b 38 32 32
>4118	31 30 39 35 37 38 8a 8b 36 33 37 35 31 34 32 32
>4128	30 92 8b 31 34 35 39 36 32 33 37 39 38 00 1d 44
>4138	01 97 20 8b 38 32 32 31 30 39 35 37 38 8c 8b 36
>4148	33 37 35 31 34 32 32 30 92 31 00 23 45 01 97 20
>4158	38 32 32 31 30 39 35 37 38 84 36 33 37 35 31 34
>4168	32 32 30 92 31 38 34 35 39 35 33 35 38 00 28 46
>4178	01 97 20 87 8b 38 32 32 31 30 39 35 37 38 85 8b
>4188	36 33 37 35 31 34 32 32 30 88 92 8b 39 30 35 39
>4198	36 37 30 38 34 00 27 47 01 97 20 87 8b 38 32 32
>41a8	31 30 39 35 37 38 96 8b 36 33 37 35 31 34 32 32
>41b8	30 88 92 33 35 32 33 31 30 33 37 30 00 28 48 01
>41c8	97 20 87 8b 38 32 32 31 30 39 35 37 38 b2 8b 36
>41d8	33 37 35 31 34 32 32 30 88 92 8b 35 35 33 36 35
>41e8	36 37 31 34 00 1f 49 01 97 20 87 8b 38 32 32 31
>41f8	30 39 35 37 38 92 8b 36 33 37 35 31 34 32 32 30
>4208	88 92 30 00 20 4a 01 97 20 87 8b 38 32 32 31 30
>4218	39 35 37 38 90 8b 36 33 37 35 31 34 32 32 30 88
>4228	92 8b 31 00 20 4b 01 97 20 87 8b 38 32 32 31 30
>4238	39 35 37 38 91 8b 36 33 37 35 31 34 32 32 30 88
>4248	92 8b 31 00 20 4c 01 97 20 87 8b 38 32 32 31 30
>4258	39 35 37 38 8f 8b 36 33 37 35 31 34 32 32 30 88
>4268	92 8b 31 00 1f 4d 01 97 20 87 8b 38 32 32 31 30
>4278	39 35 37 38 94 8b 36 33 37 35 31 34 32 32 30 88
>4288	92 30 00 1f 4e 01 97 20 87 8b 38 32 32 31 30 39
>4298	35 37 38 93 8b 36 33 37 35 31 34 32 32 30 88 92
>42a8	30 00 18 4f 01 97 20 87 81 3f 48 42 81 b3 81 73
>42b8	58 5e 81 88 20 92 20 8b 31 00 26 50 01 97 20 8b
>42c8	31 38 31 35 35 36 31 32 33 8a 8b 33 37 31 37 39
>42d8	38 39 32 39 92 8b 35 35 33 33 35 35 30 35 32 00
>42e8	25 51 01 97 20 8b 31 38 31 35 35 36 31 32 33 8b
>42f8	8b 33 37 31 37 39 38 39 32 39 92 31 39 30 32 34
>4308	32 38 30 36 00 1d 52 01 97 20 8b 31 38 31 35 35
>4318	36 31 32 33 8c 8b 33 37 31 37 39 38 39 32 39 92
>4328	30 00 23 53 01 97 20 31 38 31 35 35 36 31 32 33
>4338	84 33 37 31 37 39 38 39 32 39 92 31 38 31 35 35
>4348	36 31 32 33 00 28 54 01 97 20 87 8b 31 38 31 35
>4358	35 36 31 32 33 85 8b 33 37 31 37 39 38 39 32 39
>4368	88 92 8b 35 31 39 37 39 35 36 31 31 00 27 55 01
>4378	97 20 87 8b 31 38 31 35 35 36 31 32 33 96 8b 33
>4388	37 31 37 39 38 39 32 39 88 92 34 38 36 32 33 36
>4398	31 37 30 00 27 56 01 97 20 87 8b 31 38 31 35 35
>43a8	36 31 32 33 b2 8b 33 37 31 37 39 38 39 32 39 88
>43b8	92 8b 33 33 35 35 39 34 34 31 00 1f 57 01 97 20
>43c8	87 8b 31 38 31 35 35 36 31 32 33 92 8b 33 37 31
>43d8	37 39 38 39 32 39 88 92 30 00 20 58 01 97 20 87
>43e8	8b 31 38 31 35 35 36 31 32 33 90 8b 33 37 31 37
>43f8	39 38 39 32 39 88 92 8b 31 00 1f 59 01 97 20 87
>4408	8b 31 38 31 35 35 36 31 32 33 91 8b 33 37 31 37
>4418	39 38 39 32 39 88 92 30 00 1f 5a 01 97 20 87 8b
>4428	31 38 31 35 35 36 31 32 33 8f 8b 33 37 31 37 39
>4438	38 39 32 39 88 92 30 00 20 5b 01 97 20 87 8b 31
>4448	38 31 35 35 36 31 32 33 94 8b 33 37 31 37 39 38
>4458	39 32 39 88 92 8b 31 00 20 5c 01 97 20 87 8b 31
>4468	38 31 35 35 36 31 32 33 93 8b 33 37 31 37 39 38
>4478	39 32 39 88 92 8b 31 00 18 5d 01 97 20 87 81 39
>4488	55 39 81 b3 81 65 7c 79 81 88 20 92 20 8b 31 00
>4498	12 5e 01 97 20 8b 37 30 35 8a 8b 37 92 8b 37 31
>44a8	32 00 12 5f 01 97 20 8b 37 30 35 89 8b 37 92 34
>44b8	39 33 35 00 11 60 01 97 20 8b 37 30 35 8c 8b 37
>44c8	92 31 30 30 00 0d 61 01 97 20 37 30 35 84 37 92
>44d8	35 00 14 62 01 97 20 87 8b 37 30 35 85 8b 37 88
>44e8	92 8b 37 31 31 00 13 63 01 97 20 87 8b 37 30 35
>44f8	96 8b 37 88 92 37 31 30 00 12 64 01 97 20 87 8b
>4508	37 30 35 b2 8b 37 88 92 8b 31 00 11 65 01 97 20
>4518	87 8b 37 30 35 92 8b 37 88 92 30 00 12 66 01 97
>4528	20 87 8b 37 30 35 90 8b 37 88 92 8b 31 00 12 67
>4538	01 97 20 87 8b 37 30 35 91 8b 37 88 92 8b 31 00
>4548	12 68 01 97 20 87 8b 37 30 35 8f 8b 37 88 92 8b
>4558	31 00 11 69 01 97 20 87 8b 37 30 35 94 8b 37 88
>4568	92 30 00 11 6a 01 97 20 87 8b 37 30 35 93 8b 37
>4578	88 92 30 00 18 6b 01 97 20 87 81 27 63 5f 81 b3
>4588	81 5e 5e 55 81 88 20 92 20 8b 31 00 1b 6c 01 97
>4598	20 30 8a 8b 34 34 37 36 33 39 39 37 92 8b 34 34
>45a8	37 36 33 39 39 37 00 1a 6d 01 97 20 30 8b 8b 34
>45b8	34 37 36 33 39 39 37 92 34 34 37 36 33 39 39 37
>45c8	00 13 6e 01 97 20 30 89 8b 34 34 37 36 33 39 39
>45d8	37 92 30 00 13 6f 01 97 20 30 8c 8b 34 34 37 36
>45e8	33 39 39 37 92 30 00 12 70 01 97 20 30 84 34 34
>45f8	37 36 33 39 39 37 92 30 00 15 71 01 97 20 87 30
>4608	85 8b 34 34 37 36 33 39 39 37 88 92 30 00 1d 72
>4618	01 97 20 87 30 96 8b 34 34 37 36 33 39 39 37 88
>4628	92 8b 34 34 37 36 33 39 39 37 00 1d 73 01 97 20
>4638	87 30 b2 8b 34 34 37 36 33 39 39 37 88 92 8b 34
>4648	34 37 36 33 39 39 37 00 15 74 01 97 20 87 30 92
>4658	8b 34 34 37 36 33 39 39 37 88 92 30 00 16 75 01
>4668	97 20 87 30 90 8b 34 34 37 36 33 39 39 37 88 92
>4678	8b 31 00 15 76 01 97 20 87 30 91 8b 34 34 37 36
>4688	33 39 39 37 88 92 30 00 15 77 01 97 20 87 30 8f
>4698	8b 34 34 37 36 33 39 39 37 88 92 30 00 16 78 01
>46a8	97 20 87 30 94 8b 34 34 37 36 33 39 39 37 88 92
>46b8	8b 31 00 16 79 01 97 20 87 30 93 8b 34 34 37 36
>46c8	33 39 39 37 88 92 8b 31 00 18 7a 01 97 20 87 81
>46d8	4e 30 44 81 b3 81 5d 3f 39 81 88 20 92 20 8b 31
>46e8	00 25 7b 01 97 20 8b 33 33 34 30 33 35 35 34 35
>46f8	8a 31 33 36 31 38 35 35 37 33 92 8b 31 39 37 38
>4708	34 39 39 37 32 00 2d 7c 01 97 20 8b 33 33 34 30
>4718	33 35 35 34 35 89 31 33 36 31 38 35 35 37 33 92
>4728	8b 34 35 34 39 30 38 32 32 30 39 38 31 39 32 32
>4738	38 35 00 1d 7d 01 97 20 8b 33 33 34 30 33 35 35
>4748	34 35 8c 31 33 36 31 38 35 35 37 33 92 8b 32 00
>4758	22 7e 01 97 20 33 33 34 30 33 35 35 34 35 84 31
>4768	33 36 31 38 35 35 37 33 92 36 31 36 36 34 33 39
>4778	39 00 26 7f 01 97 20 87 8b 33 33 34 30 33 35 35
>4788	34 35 85 31 33 36 31 38 35 35 37 33 88 92 31 33
>4798	35 36 36 30 37 30 39 00 27 80 01 97 20 87 8b 33
>47a8	33 34 30 33 35 35 34 35 96 31 33 36 31 38 35 35
>47b8	37 33 88 92 8b 34 36 39 31 37 31 33 39 30 00 27
>47c8	81 01 97 20 87 8b 33 33 34 30 33 35 35 34 35 b2
>47d8	31 33 36 31 38 35 35 37 33 88 92 8b 33 33 33 35
>47e8	31 30 36 38 31 00 1e 82 01 97 20 87 8b 33 33 34
>47f8	30 33 35 35 34 35 92 31 33 36 31 38 35 35 37 33
>4808	88 92 30 00 1f 83 01 97 20 87 8b 33 33 34 30 33
>4818	35 35 34 35 90 31 33 36 31 38 35 35 37 33 88 92
>4828	8b 31 00 1f 84 01 97 20 87 8b 33 33 34 30 33 35
>4838	35 34 35 91 31 33 36 31 38 35 35 37 33 88 92 8b
>4848	31 00 1f 85 01 97 20 87 8b 33 33 34 30 33 35 35
>4858	34 35 8f 31 33 36 31 38 35 35 37 33 88 92 8b 31
>4868	00 1e 86 01 97 20 87 8b 33 33 34 30 33 35 35 34
>4878	35 94 31 33 36 31 38 35 35 37 33 88 92 30 00 1e
>4888	87 01 97 20 87 8b 33 33 34 30 33 35 35 34 35 93
>4898	31 33 36 31 38 35 35 37 33 88 92 30 00 18 88 01
>48a8	97 20 87 81 56 37 50 81 b3 81 74 57 64 81 88 20
>48b8	92 20 8b 31 00 1e 89 01 97 20 8b 36 38 34 39 33
>48c8	31 38 35 39 8a 8b 33 92 8b 36 38 34 39 33 31 38
>48d8	36 32 00 1d 8a 01 97 20 8b 36 38 34 39 33 31 38
>48e8	35 39 8c 8b 33 92 32 32 38 33 31 30 36 31 39 00
>48f8	13 8b 01 97 20 36 38 34 39 33 31 38 35 39 84 33
>4908	92 32 00 20 8c 01 97 20 87 8b 36 38 34 39 33 31
>4918	38 35 39 85 8b 33 88 92 8b 36 38 34 39 33 31 38
>4928	35 39 00 1f 8d 01 97 20 87 8b 36 38 34 39 33 31
>4938	38 35 39 96 8b 33 88 92 36 38 34 39 33 31 38 35
>4948	36 00 18 8e 01 97 20 87 8b 36 38 34 39 33 31 38
>4958	35 39 b2 8b 33 88 92 8b 33 00 17 8f 01 97 20 87
>4968	8b 36 38 34 39 33 31 38 35 39 92 8b 33 88 92 30
>4978	00 18 90 01 97 20 87 8b 36 38 34 39 33 31 38 35
>4988	39 90 8b 33 88 92 8b 31 00 18 91 01 97 20 87 8b
>4998	36 38 34 39 33 31 38 35 39 91 8b 33 88 92 8b 31
>49a8	00 18 92 01 97 20 87 8b 36 38 34 39 33 31 38 35
>49b8	39 8f 8b 33 88 92 8b 31 00 17 93 01 97 20 87 8b
>49c8	36 38 34 39 33 31 38 35 39 94 8b 33 88 92 30 00
>49d8	17 94 01 97 20 87 8b 36 38 34 39 33 31 38 35 39
>49e8	93 8b 33 88 92 30 00 18 95 01 97 20 87 81 4a 7a
>49f8	37 81 b3 81 5a 78 55 81 88 20 92 20 8b 31 00 1b
>4a08	96 01 97 20 30 8a 33 34 35 37 36 31 35 35 30 92
>4a18	33 34 35 37 36 31 35 35 30 00 13 97 01 97 20 30
>4a28	89 33 34 35 37 36 31 35 35 30 92 30 00 13 98 01
>4a38	97 20 30 8c 33 34 35 37 36 31 35 35 30 92 30 00
>4a48	13 99 01 97 20 30 84 33 34 35 37 36 31 35 35 30
>4a58	92 30 00 15 9a 01 97 20 87 30 85 33 34 35 37 36
>4a68	31 35 35 30 88 92 30 00 1d 9b 01 97 20 87 30 96
>4a78	33 34 35 37 36 31 35 35 30 88 92 33 34 35 37 36
>4a88	31 35 35 30 00 1d 9c 01 97 20 87 30 b2 33 34 35
>4a98	37 36 31 35 35 30 88 92 33 34 35 37 36 31 35 35
>4aa8	30 00 15 9d 01 97 20 87 30 92 33 34 35 37 36 31
>4ab8	35 35 30 88 92 30 00 16 9e 01 97 20 87 30 90 33
>4ac8	34 35 37 36 31 35 35 30 88 92 8b 31 00 16 9f 01
>4ad8	97 20 87 30 91 33 34 35 37 36 31 35 35 30 88 92
>4ae8	8b 31 00 16 a0 01 97 20 87 30 8f 33 34 35 37 36
>4af8	31 35 35 30 88 92 8b 31 00 15 a1 01 97 20 87 30
>4b08	94 33 34 35 37 36 31 35 35 30 88 92 30 00 15 a2
>4b18	01 97 20 87 30 93 33 34 35 37 36 31 35 35 30 88
>4b28	92 30 00 17 a3 01 97 20 87 81 49 4b 64 81 b3 81
>4b38	47 58 6e 81 88 20 92 20 31 00 0b a4 01 97 20 39
>4b48	8a 30 92 39 00 0b a5 01 97 20 39 8b 30 92 39 00
>4b58	0b a6 01 97 20 39 89 30 92 30 00 0d a7 01 97 20
>4b68	87 39 85 30 88 92 30 00 0d a8 01 97 20 87 39 96
>4b78	30 88 92 39 00 0d a9 01 97 20 87 39 b2 30 88 92
>4b88	39 00 0d aa 01 97 20 87 39 92 30 88 92 30 00 0e
>4b98	ab 01 97 20 87 39 90 30 88 92 8b 31 00 0d ac 01
>4ba8	97 20 87 39 91 30 88 92 30 00 0d ad 01 97 20 87
>4bb8	39 8f 30 88 92 30 00 0e ae 01 97 20 87 39 94 30
>4bc8	88 92 8b 31 00 0e af 01 97 20 87 39 93 30 88 92
>4bd8	8b 31 00 17 b0 01 97 20 87 81 70 64 49 81 b3 81
>4be8	40 2e 7b 81 88 20 92 20 31 00 1b b1 01 97 20 30
>4bf8	8a 34 38 37 35 36 33 31 34 39 92 34 38 37 35 36
>4c08	33 31 34 39 00 13 b2 01 97 20 30 89 34 38 37 35
>4c18	36 33 31 34 39 92 30 00 13 b3 01 97 20 30 8c 34
>4c28	38 37 35 36 33 31 34 39 92 30 00 13 b4 01 97 20
>4c38	30 84 34 38 37 35 36 33 31 34 39 92 30 00 15 b5
>4c48	01 97 20 87 30 85 34 38 37 35 36 33 31 34 39 88
>4c58	92 30 00 1d b6 01 97 20 87 30 96 34 38 37 35 36
>4c68	33 31 34 39 88 92 34 38 37 35 36 33 31 34 39 00
>4c78	1d b7 01 97 20 87 30 b2 34 38 37 35 36 33 31 34
>4c88	39 88 92 34 38 37 35 36 33 31 34 39 00 15 b8 01
>4c98	97 20 87 30 92 34 38 37 35 36 33 31 34 39 88 92
>4ca8	30 00 16 b9 01 97 20 87 30 90 34 38 37 35 36 33
>4cb8	31 34 39 88 92 8b 31 00 16 ba 01 97 20 87 30 91
>4cc8	34 38 37 35 36 33 31 34 39 88 92 8b 31 00 16 bb
>4cd8	01 97 20 87 30 8f 34 38 37 35 36 33 31 34 39 88
>4ce8	92 8b 31 00 15 bc 01 97 20 87 30 94 34 38 37 35
>4cf8	36 33 31 34 39 88 92 30 00 15 bd 01 97 20 87 30
>4d08	93 34 38 37 35 36 33 31 34 39 88 92 30 00 17 be
>4d18	01 97 20 87 81 55 3b 26 81 b3 81 51 4b 55 81 88
>4d28	20 92 20 31 00 1e bf 01 97 20 32 34 35 34 34 36
>4d38	30 31 35 8a 8b 31 30 37 92 32 34 35 34 34 35 39
>4d48	30 38 00 1e c0 01 97 20 32 34 35 34 34 36 30 31
>4d58	35 8b 8b 31 30 37 92 32 34 35 34 34 36 31 32 32
>4d68	00 21 c1 01 97 20 32 34 35 34 34 36 30 31 35 89
>4d78	8b 31 30 37 92 8b 32 36 32 36 32 37 32 33 36 30
>4d88	35 00 1d c2 01 97 20 32 34 35 34 34 36 30 31 35
>4d98	8c 8b 31 30 37 92 8b 32 32 39 33 38 38 37 00 17
>4da8	c3 01 97 20 32 34 35 34 34 36 30 31 35 84 31 30
>4db8	37 92 31 30 36 00 20 c4 01 97 20 87 32 34 35 34
>4dc8	34 36 30 31 35 85 8b 31 30 37 88 92 32 34 35 34
>4dd8	34 35 39 30 39 00 21 c5 01 97 20 87 32 34 35 34
>4de8	34 36 30 31 35 96 8b 31 30 37 88 92 8b 32 34 35
>4df8	34 34 35 39 31 30 00 19 c6 01 97 20 87 32 34 35
>4e08	34 34 36 30 31 35 b2 8b 31 30 37 88 92 8b 31 00
>4e18	18 c7 01 97 20 87 32 34 35 34 34 36 30 31 35 92
>4e28	8b 31 30 37 88 92 30 00 19 c8 01 97 20 87 32 34
>4e38	35 34 34 36 30 31 35 90 8b 31 30 37 88 92 8b 31
>4e48	00 18 c9 01 97 20 87 32 34 35 34 34 36 30 31 35
>4e58	91 8b 31 30 37 88 92 30 00 18 ca 01 97 20 87 32
>4e68	34 35 34 34 36 30 31 35 8f 8b 31 30 37 88 92 30
>4e78	00 19 cb 01 97 20 87 32 34 35 34 34 36 30 31 35
>4e88	94 8b 31 30 37 88 92 8b 31 00 19 cc 01 97 20 87
>4e98	32 34 35 34 34 36 30 31 35 93 8b 31 30 37 88 92
>4ea8	8b 31 00 17 cd 01 97 20 87 81 55 2f 4d 81 b3 81
>4eb8	45 77 62 81 88 20 92 20 31 00 0f ce 01 97 20 35
>4ec8	38 33 8a 30 92 35 38 33 00 0f cf 01 97 20 35 38
>4ed8	33 8b 30 92 35 38 33 00 0d d0 01 97 20 35 38 33
>4ee8	89 30 92 30 00 0f d1 01 97 20 87 35 38 33 85 30
>4ef8	88 92 30 00 11 d2 01 97 20 87 35 38 33 96 30 88
>4f08	92 35 38 33 00 11 d3 01 97 20 87 35 38 33 b2 30
>4f18	88 92 35 38 33 00 0f d4 01 97 20 87 35 38 33 92
>4f28	30 88 92 30 00 10 d5 01 97 20 87 35 38 33 90 30
>4f38	88 92 8b 31 00 0f d6 01 97 20 87 35 38 33 91 30
>4f48	88 92 30 00 0f d7 01 97 20 87 35 38 33 8f 30 88
>4f58	92 30 00 10 d8 01 97 20 87 35 38 33 94 30 88 92
>4f68	8b 31 00 10 d9 01 97 20 87 35 38 33 93 30 88 92
>4f78	8b 31 00 17 da 01 97 20 87 81 4a 2b 67 81 b3 81
>4f88	2e 68 3e 81 88 20 92 20 31 00 1e db 01 97 20 8b
>4f98	35 8a 31 30 33 31 35 31 35 31 37 30 92 31 30 33
>4fa8	31 35 31 35 31 36 35 00 1f dc 01 97 20 8b 35 89
>4fb8	31 30 33 31 35 31 35 31 37 30 92 8b 35 31 35 37
>4fc8	35 37 35 38 35 30 00 15 dd 01 97 20 8b 35 8c 31
>4fd8	30 33 31 35 31 35 31 37 30 92 30 00 14 de 01 97
>4fe8	20 35 84 31 30 33 31 35 31 35 31 37 30 92 35 00
>4ff8	20 df 01 97 20 87 8b 35 85 31 30 33 31 35 31 35
>5008	31 37 30 88 92 31 30 33 31 35 31 35 31 37 30 00
>5018	21 e0 01 97 20 87 8b 35 96 31 30 33 31 35 31 35
>5028	31 37 30 88 92 8b 31 30 33 31 35 31 35 31 37 35
>5038	00 18 e1 01 97 20 87 8b 35 b2 31 30 33 31 35 31
>5048	35 31 37 30 88 92 8b 35 00 17 e2 01 97 20 87 8b
>5058	35 92 31 30 33 31 35 31 35 31 37 30 88 92 30 00
>5068	18 e3 01 97 20 87 8b 35 90 31 30 33 31 35 31 35
>5078	31 37 30 88 92 8b 31 00 18 e4 01 97 20 87 8b 35
>5088	91 31 30 33 31 35 31 35 31 37 30 88 92 8b 31 00
>5098	18 e5 01 97 20 87 8b 35 8f 31 30 33 31 35 31 35
>50a8	31 37 30 88 92 8b 31 00 17 e6 01 97 20 87 8b 35
>50b8	94 31 30 33 31 35 31 35 31 37 30 88 92 30 00 17
>50c8	e7 01 97 20 87 8b 35 93 31 30 33 31 35 31 35 31
>50d8	37 30 88 92 30 00 18 e8 01 97 20 87 81 56 4c 6b
>50e8	81 b3 81 76 53 58 81 88 20 92 20 8b 31 00 1b e9
>50f8	01 97 20 37 34 34 35 39 31 39 38 39 8a 34 92 37
>5108	34 34 35 39 31 39 39 33 00 1b ea 01 97 20 37 34
>5118	34 35 39 31 39 38 39 8b 34 92 37 34 34 35 39 31
>5128	39 38 35 00 1b eb 01 97 20 37 34 34 35 39 31 39
>5138	38 39 8c 34 92 31 38 36 31 34 37 39 39 37 00 13
>5148	ec 01 97 20 37 34 34 35 39 31 39 38 39 84 34 92
>5158	31 00 15 ed 01 97 20 87 37 34 34 35 39 31 39 38
>5168	39 85 34 88 92 34 00 1d ee 01 97 20 87 37 34 34
>5178	35 39 31 39 38 39 96 34 88 92 37 34 34 35 39 31
>5188	39 38 35 00 1d ef 01 97 20 87 37 34 34 35 39 31
>5198	39 38 39 b2 34 88 92 37 34 34 35 39 31 39 38 39
>51a8	00 15 f0 01 97 20 87 37 34 34 35 39 31 39 38 39
>51b8	92 34 88 92 30 00 16 f1 01 97 20 87 37 34 34 35
>51c8	39 31 39 38 39 90 34 88 92 8b 31 00 15 f2 01 97
>51d8	20 87 37 34 34 35 39 31 39 38 39 91 34 88 92 30
>51e8	00 15 f3 01 97 20 87 37 34 34 35 39 31 39 38 39
>51f8	8f 34 88 92 30 00 16 f4 01 97 20 87 37 34 34 35
>5208	39 31 39 38 39 94 34 88 92 8b 31 00 16 f5 01 97
>5218	20 87 37 34 34 35 39 31 39 38 39 93 34 88 92 8b
>5228	31 00 17 f6 01 97 20 87 81 4f 7c 57 81 b3 81 35
>5238	70 45 81 88 20 92 20 31 00 0f f7 01 97 20 30 8a
>5248	39 33 37 92 39 33 37 00 0d f8 01 97 20 30 89 39
>5258	33 37 92 30 00 0d f9 01 97 20 30 8c 39 33 37 92
>5268	30 00 0d fa 01 97 20 30 84 39 33 37 92 30 00 0f
>5278	fb 01 97 20 87 30 85 39 33 37 88 92 30 00 11 fc
>5288	01 97 20 87 30 96 39 33 37 88 92 39 33 37 00 11
>5298	fd 01 97 20 87 30 b2 39 33 37 88 92 39 33 37 00
>52a8	0f fe 01 97 20 87 30 92 39 33 37 88 92 30 00 10
>52b8	ff 01 97 20 87 30 90 39 33 37 88 92 8b 31 00 10
>52c8	00 02 97 20 87 30 91 39 33 37 88 92 8b 31 00 10
>52d8	01 02 97 20 87 30 8f 39 33 37 88 92 8b 31 00 0f
>52e8	02 02 97 20 87 30 94 39 33 37 88 92 30 00 0f 03
>52f8	02 97 20 87 30 93 39 33 37 88 92 30 00 18 04 02
>5308	97 20 87 81 45 39 6d 81 b3 81 78 46 6b 81 88 20
>5318	92 20 8b 31 00 1f 05 02 97 20 8b 33 36 33 30 30
>5328	34 31 35 30 8a 35 33 33 92 8b 33 36 33 30 30 33
>5338	36 31 37 00 22 06 02 97 20 8b 33 36 33 30 30 34
>5348	31 35 30 89 35 33 33 92 8b 31 39 33 34 38 31 32
>5358	31 31 39 35 30 00 1c 07 02 97 20 8b 33 36 33 30
>5368	30 34 31 35 30 8c 35 33 33 92 8b 36 38 31 30 35
>5378	38 00 17 08 02 97 20 33 36 33 30 30 34 31 35 30
>5388	84 35 33 33 92 32 33 36 00 1a 09 02 97 20 87 8b
>5398	33 36 33 30 30 34 31 35 30 85 35 33 33 88 92 35
>53a8	31 32 00 21 0a 02 97 20 87 8b 33 36 33 30 30 34
>53b8	31 35 30 96 35 33 33 88 92 8b 33 36 33 30 30 34
>53c8	36 34 31 00 21 0b 02 97 20 87 8b 33 36 33 30 30
>53d8	34 31 35 30 b2 35 33 33 88 92 8b 33 36 33 30 30
>53e8	34 31 32 39 00 18 0c 02 97 20 87 8b 33 36 33 30
>53f8	30 34 31 35 30 92 35 33 33 88 92 30 00 19 0d 02
>5408	97 20 87 8b 33 36 33 30 30 34 31 35 30 90 35 33
>5418	33 88 92 8b 31 00 19 0e 02 97 20 87 8b 33 36 33
>5428	30 30 34 31 35 30 91 35 33 33 88 92 8b 31 00 19
>5438	0f 02 97 20 87 8b 33 36 33 30 30 34 31 35 30 8f
>5448	35 33 33 88 92 8b 31 00 18 10 02 97 20 87 8b 33
>5458	36 33 30 30 34 31 35 30 94 35 33 33 88 92 30 00
>5468	18 11 02 97 20 87 8b 33 36 33 30 30 34 31 35 30
>5478	93 35 33 33 88 92 30 00 17 12 02 97 20 87 81 67
>5488	73 27 81 b3 81 46 4a 67 81 88 20 92 20 31 00 0f
>5498	13 02 97 20 37 8a 32 30 37 92 32 31 34 00 10 14
>54a8	02 97 20 37 89 32 30 37 92 31 34 34 39 00 0d 15
>54b8	02 97 20 37 8c 32 30 37 92 30 00 0d 16 02 97 20
>54c8	37 84 32 30 37 92 37 00 0f 17 02 97 20 87 37 85
>54d8	32 30 37 88 92 37 00 11 18 02 97 20 87 37 96 32
>54e8	30 37 88 92 32 30 30 00 11 19 02 97 20 87 37 b2
>54f8	32 30 37 88 92 32 30 37 00 0f 1a 02 97 20 87 37
>5508	92 32 30 37 88 92 30 00 10 1b 02 97 20 87 37 90
>5518	32 30 37 88 92 8b 31 00 10 1c 02 97 20 87 37 91
>5528	32 30 37 88 92 8b 31 00 10 1d 02 97 20 87 37 8f
>5538	32 30 37 88 92 8b 31 00 0f 1e 02 97 20 87 37 94
>5548	32 30 37 88 92 30 00 0f 1f 02 97 20 87 37 93 32
>5558	30 37 88 92 30 00 17 20 02 97 20 87 81 62 34 60
>5568	81 b3 81 5f 31 38 81 88 20 92 20 31 00 1d 21 02
>5578	97 20 8b 37 37 37 30 39 34 33 32 35 8a 30 92 8b
>5588	37 37 37 30 39 34 33 32 35 00 14 22 02 97 20 8b
>5598	37 37 37 30 39 34 33 32 35 89 30 92 30 00 16 23
>55a8	02 97 20 87 8b 37 37 37 30 39 34 33 32 35 85 30
>55b8	88 92 30 00 1f 24 02 97 20 87 8b 37 37 37 30 39
>55c8	34 33 32 35 96 30 88 92 8b 37 37 37 30 39 34 33
>55d8	32 35 00 1f 25 02 97 20 87 8b 37 37 37 30 39 34
>55e8	33 32 35 b2 30 88 92 8b 37 37 37 30 39 34 33 32
>55f8	35 00 16 26 02 97 20 87 8b 37 37 37 30 39 34 33
>5608	32 35 92 30 88 92 30 00 17 27 02 97 20 87 8b 37
>5618	37 37 30 39 34 33 32 35 90 30 88 92 8b 31 00 17
>5628	28 02 97 20 87 8b 37 37 37 30 39 34 33 32 35 91
>5638	30 88 92 8b 31 00 17 29 02 97 20 87 8b 37 37 37
>5648	30 39 34 33 32 35 8f 30 88 92 8b 31 00 16 2a 02
>5658	97 20 87 8b 37 37 37 30 39 34 33 32 35 94 30 88
>5668	92 30 00 16 2b 02 97 20 87 8b 37 37 37 30 39 34
>5678	33 32 35 93 30 88 92 30 00 18 2c 02 97 20 87 81
>5688	51 6a 35 81 b3 81 56 55 70 81 88 20 92 20 8b 31
>5698	00 00

;******  Return to file: basic.asm


;******  End of listing
