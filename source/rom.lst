
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -D TARGET=2 -b -L rom.lst -o rom.bin basic.asm
; Mon Jul 29 14:52:56 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: basic.asm


;******  Processing file: porting.asm

.fff8					EXTDummyInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word 	EXTDummyInterrupt
>fffc	df ed						.word 	Start
>fffe	f8 ff						.word 	EXTDummyInterrupt
=4					EXTZPWork = 4								; Zero Page work for Personality (4 bytes)
=8					IOCursorX = 8 								; Cursor position
=9					IOCursorY = 9
=$20							zeroPage 	= $20 					; first ZP byte to use
=$2000							startMemory = $2000 				; first non ZP byte to use
=$8000							endMemory   = $8000 				; last non ZP byte to use
=$200							basicStack  = $200 					; stack for BASIC
=$400							evalStack   = $400 					; stack for evaluation of expressions

;******  Processing file: personalities/personality_6502.asm

>0000	00					.byte 	0
=40					EXTWidth = 40 								; screen width
=25					EXTHeight = 25 								; screen height
=$0800					EXTLowMemory = $0800 						; Workspace RAM starts here
=$6000					EXTHighMemory = $6000 						; Workspace RAM ends here
=$b000					PScreen = $B000								; 1k screen RAM here
=$b800					PKeyboard = $B800							; Keyboard port.
=$b801					PBreak = $B801 								; Break key.
.a000					EXTStartPersonalise:
.a000	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.a002	9a		txs			txs
.a003	20 82 a0	jsr $a082		jsr 	EXTReset 						; reset video
.a006	20 38 a0	jsr $a038		jsr 	EXTClearScreen 					; clear screen
.a009	4c df ed	jmp $eddf		jmp 	Start 							; start main application
.a00c					EXTReadKeyPort:
.a00c	ad 00 b8	lda $b800		lda 	PKeyboard							; read key
.a00f	09 00		ora #$00		ora 	#0
.a011	60		rts			rts
.a012					EXTRemoveKeyPressed:
.a012	48		pha			pha 										; key pressed clear queue byte.
.a013	a9 00		lda #$00		lda 	#0
.a015	8d 00 b8	sta $b800		sta 	PKeyboard
.a018	68		pla			pla
.a019	60		rts			rts
.a01a					EXTCheckBreak:
.a01a	ad 01 b8	lda $b801		lda 	PBreak
.a01d	60		rts			rts
.a01e					EXTReadScreen:
.a01e	5a		phy			phy 										; save Y
.a01f	86 04		stx $04			stx 	EXTZPWork							; into EXTZPWork
.a021	98		tya			tya
.a022	09 b0		ora #$b0		ora 	#PScreen>>8 						; move into screen area
.a024	85 05		sta $05			sta 	EXTZPWork+1 						; read character there
.a026	a0 00		ldy #$00		ldy 	#0
.a028	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a02a	7a		ply			ply 										; restore Y and exit.
.a02b	60		rts			rts
.a02c					EXTWriteScreen:
.a02c	5a		phy			phy
.a02d	48		pha			pha
.a02e	20 1e a0	jsr $a01e		jsr		EXTReadScreen 						; set up the address into EXTZPWork
.a031	a0 00		ldy #$00		ldy 	#0
.a033	68		pla			pla 										; restore and write.
.a034	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a036	7a		ply			ply
.a037	60		rts			rts
.a038					EXTClearScreen:
.a038	48		pha			pha 										; save registers
.a039	da		phx			phx
.a03a	a2 00		ldx #$00		ldx 	#0
.a03c					_EXTCSLoop:
.a03c	a9 20		lda #$20		lda 	#32
.a03e	9d 00 b0	sta $b000,x		sta 	PScreen+0,x
.a041	9d 00 b1	sta $b100,x		sta 	PScreen+$100,x
.a044	9d 00 b2	sta $b200,x		sta 	PScreen+$200,x
.a047	9d 00 b3	sta $b300,x		sta 	PScreen+$300,x
.a04a	e8		inx			inx
.a04b	d0 ef		bne $a03c		bne 	_EXTCSLoop
.a04d	fa		plx			plx 										; restore
.a04e	68		pla			pla
.a04f	60		rts			rts
.a050					EXTScrollDisplay:
.a050	48		pha			pha 										; save registers
.a051	5a		phy			phy
.a052	a9 00		lda #$00		lda 	#PScreen & $FF 					; set pointer to screen
.a054	85 04		sta $04			sta 	EXTZPWork+0
.a056	a9 b0		lda #$b0		lda 	#PScreen >> 8
.a058	85 05		sta $05			sta 	EXTZPWork+1
.a05a					_EXTScroll:
.a05a	a0 28		ldy #$28		ldy 	#EXTWidth
.a05c	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.a05e	a0 00		ldy #$00		ldy 	#0
.a060	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a062	e6 04		inc $04			inc 	EXTZPWork 							; bump address
.a064	d0 02		bne $a068		bne 	_EXTNoCarry
.a066	e6 05		inc $05			inc 	EXTZPWork+1
.a068					_EXTNoCarry:
.a068	a5 04		lda $04			lda 	EXTZPWork 							; done ?
.a06a	c9 c0		cmp #$c0		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) & $FF
.a06c	d0 ec		bne $a05a		bne 	_EXTScroll
.a06e	a5 05		lda $05			lda 	EXTZPWork+1
.a070	c9 b3		cmp #$b3		cmp	 	#(PScreen+EXTWidth*(EXTHeight-1)) >> 8
.a072	d0 e6		bne $a05a		bne 	_EXTScroll
.a074	a0 00		ldy #$00		ldy 	#0									; clear bottom line.
.a076					_EXTLastLine:
.a076	a9 20		lda #$20		lda 	#32
.a078	91 04		sta ($04),y		sta 	(EXTZPWork),y
.a07a	c8		iny			iny
.a07b	c0 28		cpy #$28		cpy 	#EXTWidth
.a07d	d0 f7		bne $a076		bne 	_EXTLastLine
.a07f	7a		ply			ply 										; restore and exit.
.a080	68		pla			pla
.a081	60		rts			rts
.a082					EXTReset:
.a082	60		rts			rts

;******  Return to file: porting.asm


;******  Return to file: basic.asm


;******  Processing file: include/tokens.inc

.e000					KeywordVectorTable:
>e000	21 e7					.word	BFUNC_WordInd                 ; "!"        ($0080)
>e002	19 e1					.word	SyntaxError                   ; """        ($0081)
>e004	19 e1					.word	SyntaxError                   ; "#"        ($0082)
>e006	16 e7					.word	BFUNC_String                  ; "$"        ($0083)
>e008	b5 e8					.word	BFUNC_Modulus                 ; "%"        ($0084)
>e00a	28 e7					.word	BFUNC_And                     ; "&"        ($0085)
>e00c	19 e1					.word	SyntaxError                   ; "'"        ($0086)
>e00e	19 e1					.word	SyntaxError                   ; "("        ($0087)
>e010	19 e1					.word	SyntaxError                   ; ")"        ($0088)
>e012	97 e7					.word	BFUNC_Multiply                ; "*"        ($0089)
>e014	ca e6					.word	BFUNC_Add                     ; "+"        ($008a)
>e016	f0 e6					.word	BFUNC_Subtract                ; "-"        ($008b)
>e018	ee e7					.word	BFUNC_Divide                  ; "/"        ($008c)
>e01a	19 e1					.word	SyntaxError                   ; ":"        ($008d)
>e01c	19 e1					.word	SyntaxError                   ; ";"        ($008e)
>e01e	33 e9					.word	BFUNC_LessEqual               ; "<="       ($008f)
>e020	d4 e8					.word	BFUNC_NotEquals               ; "<>"       ($0090)
>e022	0e e9					.word	BFUNC_Less                    ; "<"        ($0091)
>e024	d1 e8					.word	BFUNC_Equals                  ; "="        ($0092)
>e026	11 e9					.word	BFUNC_GreaterEqual            ; ">="       ($0093)
>e028	30 e9					.word	BFUNC_Greater                 ; ">"        ($0094)
>e02a	1a e7					.word	BFUNC_ByteInd                 ; "?"        ($0095)
>e02c	72 e7					.word	BFUNC_Xor                     ; "^"        ($0096)
>e02e	b0 ea					.word	COMMAND_Assert                ; "assert"   ($0097)
>e030	ea e9					.word	UNARY_Abs                     ; "abs"      ($0098)
>e032	f1 ea					.word	COMMAND_Clear                 ; "clear"    ($0099)
>e034	d5 e9					.word	UNARY_Ch                      ; "ch"       ($009a)
>e036	19 e1					.word	SyntaxError                   ; "do"       ($009b)
>e038	ac ea					.word	COMMAND_End                   ; "end"      ($009c)
>e03a	19 e1					.word	SyntaxError                   ; "for"      ($009d)
>e03c	19 e1					.word	SyntaxError                   ; "gosub"    ($009e)
>e03e	19 e1					.word	SyntaxError                   ; "goto"     ($009f)
>e040	19 e1					.word	SyntaxError                   ; "input"    ($00a0)
>e042	19 e1					.word	SyntaxError                   ; "if"       ($00a1)
>e044	5d ed					.word	COMMAND_List                  ; "list"     ($00a2)
>e046	19 e1					.word	SyntaxError                   ; "loop"     ($00a3)
>e048	19 e1					.word	SyntaxError                   ; "link"     ($00a4)
>e04a	5b eb					.word	COMMAND_Let                   ; "let"      ($00a5)
>e04c	93 e9					.word	UNARY_Len                     ; "len"      ($00a6)
>e04e	19 e1					.word	SyntaxError                   ; "next"     ($00a7)
>e050	de ea					.word	COMMAND_New                   ; "new"      ($00a8)
>e052	25 eb					.word	COMMAND_Old                   ; "old"      ($00a9)
>e054	63 ec					.word	COMMAND_Print                 ; "print"    ($00aa)
>e056	d4 ea					.word	COMMAND_Rem                   ; "rem"      ($00ab)
>e058	07 ea					.word	UNARY_Rnd                     ; "rnd"      ($00ac)
>e05a	a4 ea					.word	COMMAND_Stop                  ; "stop"     ($00ad)
>e05c	19 e1					.word	SyntaxError                   ; "step"     ($00ae)
>e05e	19 e1					.word	SyntaxError                   ; "then"     ($00af)
>e060	f2 e9					.word	UNARY_Top                     ; "top"      ($00b0)
>e062	19 e1					.word	SyntaxError                   ; "to"       ($00b1)
>e064	4d e7					.word	BFUNC_Or                      ; "|"        ($00b2)
>e066	52 e9					.word	BFUNC_StringCompare           ; "~"        ($00b3)
.e068					TokenText:
>e068	a1					.byte $a1                             ; $0080 !
>e069	a2					.byte $a2                             ; $0081 "
>e06a	a3					.byte $a3                             ; $0082 #
>e06b	a4					.byte $a4                             ; $0083 $
>e06c	a5					.byte $a5                             ; $0084 %
>e06d	a6					.byte $a6                             ; $0085 &
>e06e	a7					.byte $a7                             ; $0086 '
>e06f	a8					.byte $a8                             ; $0087 (
>e070	a9					.byte $a9                             ; $0088 )
>e071	aa					.byte $aa                             ; $0089 *
>e072	ab					.byte $ab                             ; $008a +
>e073	ad					.byte $ad                             ; $008b -
>e074	af					.byte $af                             ; $008c /
>e075	ba					.byte $ba                             ; $008d :
>e076	bb					.byte $bb                             ; $008e ;
>e077	3c bd					.byte $3c,$bd                         ; $008f <=
>e079	3c be					.byte $3c,$be                         ; $0090 <>
>e07b	bc					.byte $bc                             ; $0091 <
>e07c	bd					.byte $bd                             ; $0092 =
>e07d	3e bd					.byte $3e,$bd                         ; $0093 >=
>e07f	be					.byte $be                             ; $0094 >
>e080	bf					.byte $bf                             ; $0095 ?
>e081	de					.byte $de                             ; $0096 ^
>e082	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4         ; $0097 assert
>e088	41 42 d3				.byte $41,$42,$d3                     ; $0098 abs
>e08b	43 4c 45 41 d2				.byte $43,$4c,$45,$41,$d2             ; $0099 clear
>e090	43 c8					.byte $43,$c8                         ; $009a ch
>e092	44 cf					.byte $44,$cf                         ; $009b do
>e094	45 4e c4				.byte $45,$4e,$c4                     ; $009c end
>e097	46 4f d2				.byte $46,$4f,$d2                     ; $009d for
>e09a	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2             ; $009e gosub
>e09f	47 4f 54 cf				.byte $47,$4f,$54,$cf                 ; $009f goto
>e0a3	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4             ; $00a0 input
>e0a8	49 c6					.byte $49,$c6                         ; $00a1 if
>e0aa	4c 49 53 d4				.byte $4c,$49,$53,$d4                 ; $00a2 list
>e0ae	4c 4f 4f d0				.byte $4c,$4f,$4f,$d0                 ; $00a3 loop
>e0b2	4c 49 4e cb				.byte $4c,$49,$4e,$cb                 ; $00a4 link
>e0b6	4c 45 d4				.byte $4c,$45,$d4                     ; $00a5 let
>e0b9	4c 45 ce				.byte $4c,$45,$ce                     ; $00a6 len
>e0bc	4e 45 58 d4				.byte $4e,$45,$58,$d4                 ; $00a7 next
>e0c0	4e 45 d7				.byte $4e,$45,$d7                     ; $00a8 new
>e0c3	4f 4c c4				.byte $4f,$4c,$c4                     ; $00a9 old
>e0c6	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4             ; $00aa print
>e0cb	52 45 cd				.byte $52,$45,$cd                     ; $00ab rem
>e0ce	52 4e c4				.byte $52,$4e,$c4                     ; $00ac rnd
>e0d1	53 54 4f d0				.byte $53,$54,$4f,$d0                 ; $00ad stop
>e0d5	53 54 45 d0				.byte $53,$54,$45,$d0                 ; $00ae step
>e0d9	54 48 45 ce				.byte $54,$48,$45,$ce                 ; $00af then
>e0dd	54 4f d0				.byte $54,$4f,$d0                     ; $00b0 top
>e0e0	54 cf					.byte $54,$cf                         ; $00b1 to
>e0e2	fc					.byte $fc                             ; $00b2 |
>e0e3	fe					.byte $fe                             ; $00b3 ~
>e0e4	00					.byte $00
.e0e5					TokenTypeInformation:
>e0e5	04					.byte $04                             ; $0080 !
>e0e6	0a					.byte $0a                             ; $0081 "
>e0e7	0a					.byte $0a                             ; $0082 #
>e0e8	04					.byte $04                             ; $0083 $
>e0e9	03					.byte $03                             ; $0084 %
>e0ea	00					.byte $00                             ; $0085 &
>e0eb	0a					.byte $0a                             ; $0086 '
>e0ec	0a					.byte $0a                             ; $0087 (
>e0ed	0a					.byte $0a                             ; $0088 )
>e0ee	03					.byte $03                             ; $0089 *
>e0ef	02					.byte $02                             ; $008a +
>e0f0	02					.byte $02                             ; $008b -
>e0f1	03					.byte $03                             ; $008c /
>e0f2	0a					.byte $0a                             ; $008d :
>e0f3	0a					.byte $0a                             ; $008e ;
>e0f4	01					.byte $01                             ; $008f <=
>e0f5	01					.byte $01                             ; $0090 <>
>e0f6	01					.byte $01                             ; $0091 <
>e0f7	01					.byte $01                             ; $0092 =
>e0f8	01					.byte $01                             ; $0093 >=
>e0f9	01					.byte $01                             ; $0094 >
>e0fa	04					.byte $04                             ; $0095 ?
>e0fb	00					.byte $00                             ; $0096 ^
>e0fc	04					.byte $04                             ; $0097 assert
>e0fd	09					.byte $09                             ; $0098 abs
>e0fe	04					.byte $04                             ; $0099 clear
>e0ff	09					.byte $09                             ; $009a ch
>e100	04					.byte $04                             ; $009b do
>e101	04					.byte $04                             ; $009c end
>e102	04					.byte $04                             ; $009d for
>e103	04					.byte $04                             ; $009e gosub
>e104	04					.byte $04                             ; $009f goto
>e105	04					.byte $04                             ; $00a0 input
>e106	04					.byte $04                             ; $00a1 if
>e107	04					.byte $04                             ; $00a2 list
>e108	04					.byte $04                             ; $00a3 loop
>e109	04					.byte $04                             ; $00a4 link
>e10a	04					.byte $04                             ; $00a5 let
>e10b	09					.byte $09                             ; $00a6 len
>e10c	04					.byte $04                             ; $00a7 next
>e10d	04					.byte $04                             ; $00a8 new
>e10e	04					.byte $04                             ; $00a9 old
>e10f	04					.byte $04                             ; $00aa print
>e110	04					.byte $04                             ; $00ab rem
>e111	09					.byte $09                             ; $00ac rnd
>e112	04					.byte $04                             ; $00ad stop
>e113	04					.byte $04                             ; $00ae step
>e114	04					.byte $04                             ; $00af then
>e115	09					.byte $09                             ; $00b0 top
>e116	04					.byte $04                             ; $00b1 to
>e117	00					.byte $00                             ; $00b2 |
>e118	01					.byte $01                             ; $00b3 ~
=$00					KTYPE_PRECBASE = $00
=$08					KTYPE_COMMAND = $08
=$09					KTYPE_UNARYFN = $09
=$0a					KTYPE_SYNTAX = $0a
=$0080					KW_PLING = $0080
=$0081					KW_DQUOTE = $0081
=$0082					KW_HASH = $0082
=$0083					KW_DOLLAR = $0083
=$0084					KW_PERCENT = $0084
=$0085					KW_AMPERSAND = $0085
=$0086					KW_SQUOTE = $0086
=$0087					KW_LPAREN = $0087
=$0088					KW_RPAREN = $0088
=$0089					KW_STAR = $0089
=$008a					KW_PLUS = $008a
=$008b					KW_MINUS = $008b
=$008c					KW_FSLASH = $008c
=$008d					KW_COLON = $008d
=$008e					KW_SEMICOLON = $008e
=$008f					KW_LESSEQUAL = $008f
=$0090					KW_LESSGREATER = $0090
=$0091					KW_LESS = $0091
=$0092					KW_EQUAL = $0092
=$0093					KW_GREATEREQUAL = $0093
=$0094					KW_GREATER = $0094
=$0095					KW_QUESTION = $0095
=$0096					KW_HAT = $0096
=$0097					KW_ASSERT = $0097
=$0098					KW_ABS = $0098
=$0099					KW_CLEAR = $0099
=$009a					KW_CH = $009a
=$009b					KW_DO = $009b
=$009c					KW_END = $009c
=$009d					KW_FOR = $009d
=$009e					KW_GOSUB = $009e
=$009f					KW_GOTO = $009f
=$00a0					KW_INPUT = $00a0
=$00a1					KW_IF = $00a1
=$00a2					KW_LIST = $00a2
=$00a3					KW_LOOP = $00a3
=$00a4					KW_LINK = $00a4
=$00a5					KW_LET = $00a5
=$00a6					KW_LEN = $00a6
=$00a7					KW_NEXT = $00a7
=$00a8					KW_NEW = $00a8
=$00a9					KW_OLD = $00a9
=$00aa					KW_PRINT = $00aa
=$00ab					KW_REM = $00ab
=$00ac					KW_RND = $00ac
=$00ad					KW_STOP = $00ad
=$00ae					KW_STEP = $00ae
=$00af					KW_THEN = $00af
=$00b0					KW_TOP = $00b0
=$00b1					KW_TO = $00b1
=$00b2					KW_BAR = $00b2
=$00b3					KW_TILDE = $00b3

;******  Return to file: basic.asm


;******  Processing file: general/support.asm

.e119					SyntaxError:
.e119	a9 01		lda #$01			lda 	#1
.e11b	ea		nop				nop
.e11c	80 fb		bra $e119			bra 	SyntaxError
.e11e					ReportError:
.e11e	a9 02		lda #$02			lda 	#2
.e120	ea		nop				nop
.e121	80 fb		bra $e11e			bra 	ReportError
.e123					CheckNextCharacter:
.e123	8d 98 20	sta $2098			sta 	Temp1 						; save character to check
.e126					_CNCLoop:
.e126	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next
.e128	f0 0b		beq $e135			beq 	_CNCFail 					; end of line, so no character
.e12a	c8		iny				iny
.e12b	c9 20		cmp #$20			cmp 	#' ' 						; skip spaces
.e12d	f0 f7		beq $e126			beq 	_CNCLoop
.e12f	cd 98 20	cmp $2098			cmp 	Temp1 						; fail if not what was wanted
.e132	d0 01		bne $e135			bne 	_CNCFail
.e134	60		rts				rts
.e135					_CNCFail:
.e135	20 1e e1	jsr $e11e			jsr 	ReportError
>e138	4d 69 73 73 69 6e 67 20				.text 	"Missing token",$00
>e140	74 6f 6b 65 6e 00

;******  Return to file: basic.asm


;******  Processing file: general/data.asm

=$e146							currentPosData = *
>0020					zCurrentLine: 	.word 	?					; address of current line (offset word)
>0022					zBasicStack:	.word 	? 					; stack for BASIC.
>0024					zLowMemory:		.word	?					; next free space after program (arrays,vars etc.)
>0026					zTemp1:			.word 	?					; temporary vars
>0028					zTemp2:			.word 	?
>002a					zTargetAddr: 	.dword 	? 					; address of LHS of assignment, list pointer.
>2000					FixedVariables:	.fill 	27*4 				; address of 26 x 4 byte fixed variables @A-Z
>206c					Control 		.byte 	? 					; 0 = normal, 1 = tokenise, 2 = run program.
>206d					InputLine:		.fill 	EXTWidth+1 			; screen input buffer, cannot cross page.
>2096					HighMemory:		.word 	?					; highest memory location available (2 bytes)
>2098					Temp1:			.dword	?					; 4 byte temporary stores.
>209c					SignCount:		.byte 	? 					; count of signs in divide.
>209d					StringBufferPos:.byte 	? 					; next free slot in string buffer
>209e					RandomSeed 		.word 	? 					; Random Number
>20a0					xCursor 		.byte 	? 					; cursor position
>20a1					yCursor 		.byte 	?
>20a2									.align	256
.2100					TokeniseBuffer:
.2100					StringBuffer:
>2100									.byte ?
>2101									.align	256
.2200					BasicProgram:

;******  Return to file: basic.asm


;******  Processing file: general/evaluate.asm

.e146					EvaluateSNError:
.e146	4c 19 e1	jmp $e119			jmp 	SyntaxError
.e149					EvaluateMissingQuote:
.e149	20 1e e1	jsr $e11e			jsr 	ReportError
>e14c	4d 69 73 73 69 6e 67 20				.text 	"Missing quote",$00
>e154	71 75 6f 74 65 00
.e15a					EvaluateStringFull:
.e15a	20 1e e1	jsr $e11e			jsr 	ReportError
>e15d	53 74 72 69 6e 67 20 42				.text 	"String Buffer full",$00
>e165	75 66 66 65 72 20 66 75 6c 6c 00
.e170					EvaluateBadHex:
.e170	20 1e e1	jsr $e11e			jsr 	ReportError
>e173	42 61 64 20 48 65 78 00				.text 	"Bad Hex",$00
.e17b					EvaluateAtomCurrentLevel:
.e17b	a9 07		lda #$07			lda 	#7
.e17d	80 04		bra $e183			bra 	EvaluateAtPrecedenceLevel
.e17f					EvaluateBase:
.e17f	a2 00		ldx #$00			ldx 	#0 							; reset the stack
.e181					EvaluateBaseCurrentLevel:
.e181	a9 00		lda #$00			lda 	#0 							; current precedence is zero
.e183					EvaluateAtPrecedenceLevel:
.e183	48		pha				pha 								; save precedence level
.e184	a9 00		lda #$00			lda 	#0 							; zero the result.
.e186	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e189	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e18c	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e18f	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e192					_EVALSkipSpace1:
.e192	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token, skipping over spaces.
.e194	f0 b0		beq $e146			beq 	EvaluateSNError 			; end of line, without token.
.e196	c8		iny				iny
.e197	c9 20		cmp #$20			cmp 	#32
.e199	f0 f7		beq $e192			beq 	_EVALSkipSpace1
.e19b	88		dey				dey 								; points at the token.
.e19c	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; is it opening quote ?
.e19e	f0 14		beq $e1b4			beq 	_EVALString  				; if so load in a constant string
.e1a0	c9 82		cmp #$82			cmp 	#KW_HASH 					; is it a hash, e.g. hexadecimal.
.e1a2	f0 36		beq $e1da			beq 	_EVALHexadecimal
.e1a4	c9 30		cmp #$30			cmp 	#'0'						; is it in range 0-9
.e1a6	90 04		bcc $e1ac			bcc		_EVALGoKeywordVariable 		; yes, it's a keyword or variable.
.e1a8	c9 3a		cmp #$3a			cmp 	#'9'+1
.e1aa	90 03		bcc $e1af			bcc 	_EVALDecimal
.e1ac					_EVALGoKeywordVariable:
.e1ac	4c 31 e2	jmp $e231			jmp 	_EVALKeywordVariable
.e1af					_EVALDecimal:
.e1af	20 8e e2	jsr $e28e			jsr 	EVALGetDecConstant 			; get decimal constant
.e1b2	80 34		bra $e1e8			bra 	_EVALGotAtom 				; got atom.
.e1b4					_EVALString:
.e1b4	da		phx				phx 								; save X on stack
.e1b5	a9 21		lda #$21			lda 	#StringBuffer >> 8 			; set the address in the eval stack
.e1b7	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e1ba	ad 9d 20	lda $209d			lda 	StringBufferPos 			; X = Buffer Position.
.e1bd	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; that's the address of the new string
.e1c0	aa		tax				tax 								; put in X to build the string.
.e1c1	c8		iny				iny 								; skip over opening quote character
.e1c2					_EVALStringCopy:
.e1c2	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character.
.e1c4	c8		iny				iny
.e1c5	f0 82		beq $e149			beq		EvaluateMissingQuote 		; if zero, then there was no closing quote.
.e1c7	9d 00 21	sta $2100,x			sta 	StringBuffer,x 				; copy into the buffer
.e1ca	e8		inx				inx 								; and bump that pointer.
.e1cb	f0 8d		beq $e15a			beq 	EvaluateStringFull 			; buffer is full.
.e1cd	49 81		eor #$81			eor 	#KW_DQUOTE					; keep going if not closing quote.
.e1cf	d0 f1		bne $e1c2			bne 	_EVALStringCopy
.e1d1	8e 9d 20	stx $209d			stx 	StringBufferPos 			; this is the new next free slot.
.e1d4	9d ff 20	sta $20ff,x			sta 	StringBuffer-1,x 			; write the zero (EOS) hence EOR to end string.
.e1d7	fa		plx				plx 								; restore X
.e1d8	80 0e		bra $e1e8			bra 	_EVALGotAtom 				; got the atom.
.e1da					_EVALHexaDecimal
.e1da	c8		iny				iny 								; skip over the '#'
.e1db	5a		phy				phy 								; save Y
.e1dc	20 fa e2	jsr $e2fa			jsr 	EVALGetHexConstant 			; load in hexadecimal constant
.e1df	8c 98 20	sty $2098			sty 	Temp1 						; has Y changed ?
.e1e2	68		pla				pla
.e1e3	cd 98 20	cmp $2098			cmp 	Temp1
.e1e6	f0 88		beq $e170			beq 	EvaluateBadHex 				; if not, error.
.e1e8					_EVALGotAtom:
.e1e8					_EVALGetOperator:
.e1e8	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token skip spaces.
.e1ea	c8		iny				iny 								; this should be binary operator
.e1eb	c9 20		cmp #$20			cmp 	#$20
.e1ed	f0 f9		beq $e1e8			beq 	_EVALGetOperator
.e1ef	88		dey				dey
.e1f0	09 00		ora #$00			ora 	#0 							; to be a binary token must be -ve
.e1f2	10 3b		bpl $e22f			bpl 	_EVALExitPullA 				; if +ve then exit now.
.e1f4	da		phx				phx 								; save X
.e1f5	aa		tax				tax 								; token in X
.e1f6	bd 65 e0	lda $e065,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e1f9	8d 98 20	sta $2098			sta 	Temp1 						; save precedence in Temp1
.e1fc	fa		plx				plx 								; restore X
.e1fd	c9 08		cmp #$08			cmp 	#8 							; if type >= 8, e.g. not binary, then exit.
.e1ff	b0 2e		bcs $e22f			bcs 	_EVALExitPullA
.e201	68		pla				pla 								; get and save precedence level.
.e202	48		pha				pha
.e203	cd 98 20	cmp $2098			cmp 	Temp1 						; compare operator precedence - keyword precedence level.
.e206	f0 02		beq $e20a			beq 	_EVALDoCalc					; equal, do it.
.e208	b0 25		bcs $e22f			bcs 	_EVALExitPullA				; too high, then exit.
.e20a					_EVALDoCalc:
.e20a	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token, save on stack and skip it.
.e20c	c8		iny				iny
.e20d	48		pha				pha
.e20e	da		phx				phx
.e20f	e8		inx				inx 								; work out right hand side.
.e210	e8		inx				inx
.e211	e8		inx				inx
.e212	e8		inx				inx
.e213	ad 98 20	lda $2098			lda 	Temp1 						; get current operator precedence level.
.e216	1a		inc a				inc 	a 							; so work it out at the next level.
.e217	20 83 e1	jsr $e183			jsr 	EvaluateAtPrecedenceLevel 	; work out the RHS.
.e21a	fa		plx				plx 								; fix X back.
.e21b	68		pla				pla 								; get keyword
.e21c					_EVALExecuteA:
.e21c	0a		asl a				asl 	a 							; shift left, drop bit 7
.e21d	8d 99 20	sta $2099			sta 	Temp1+1						; save in Temp1.1
.e220	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e222	8d 9a 20	sta $209a			sta 	Temp1+2 					; set at Temp1.2
.e225	a9 6c		lda #$6c			lda 	#$6C 						; make JMP (xxxx)
.e227	8d 98 20	sta $2098			sta 	Temp1+0
.e22a	20 98 20	jsr $2098			jsr 	Temp1 						; call that routine.
.e22d	80 b9		bra $e1e8			bra 	_EVALGotAtom 				; and loop back again.
.e22f					_EVALExitPullA:
.e22f	68		pla				pla 								; restore precedence.
.e230	60		rts				rts
.e231					_EVALKeywordVariable:
.e231	09 00		ora #$00			ora 	#0 							; check bit 7
.e233	10 0f		bpl $e244			bpl 	_EVALNotUnaryFunction 		; must be set for unary function
.e235	da		phx				phx
.e236	aa		tax				tax
.e237	bd 65 e0	lda $e065,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e23a	fa		plx				plx
.e23b	c9 09		cmp #$09			cmp 	#KTYPE_UNARYFN 				; is it a unary function
.e23d	d0 05		bne $e244			bne 	_EVALNotUnaryFunction
.e23f	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token back
.e241	c8		iny				iny 								; consume it
.e242	80 d8		bra $e21c			bra 	_EVALExecuteA 				; execute TOS.
.e244					_EVALNotUnaryFunction:
.e244	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e246	10 3d		bpl $e285			bpl 	_EVALCheckVariable 			; if ASCII check variable
.e248	c9 8b		cmp #$8b			cmp 	#KW_MINUS 					; check negation
.e24a	f0 0f		beq $e25b			beq 	_EVALUnaryNegation
.e24c	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; check left bracket.
.e24e	d0 14		bne $e264			bne		_EVALCheckUnaryOperator
.e250	c8		iny				iny 								; skip left bracket.
.e251	20 81 e1	jsr $e181			jsr 	EvaluateBaseCurrentLevel 	; calculate what's in the bracket.
.e254	a9 88		lda #$88			lda 	#KW_RPAREN 					; check right bracket.
.e256	20 23 e1	jsr $e123			jsr 	CheckNextCharacter 			; check next character, after spaces.
.e259	80 8d		bra $e1e8			bra 	_EVALGotAtom
.e25b					_EVALUnaryNegation:
.e25b	c8		iny				iny 								; skip over the - sign.
.e25c	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel 	; calculate what's being negatived (...)
.e25f	20 90 e8	jsr $e890			jsr 	BFUNC_NegateAlways 			; negate it.
.e262	80 84		bra $e1e8			bra 	_EVALGotAtom
.e264					_EVALCheckUnaryOperator:
.e264	48		pha				pha 								; save indirection operator.
.e265	c8		iny				iny 								; skip over the operator
.e266	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel 	; calculate the address.
.e269	68		pla				pla 								; restore the operator
.e26a	c9 83		cmp #$83			cmp 	#KW_DOLLAR					; $ is for visual typing, it does nothing
.e26c	f0 0e		beq $e27c			beq 	_EVALGoGotAtom
.e26e	c9 95		cmp #$95			cmp 	#KW_QUESTION				; byte indirection
.e270	f0 07		beq $e279			beq 	_EVALByteRead
.e272	c9 80		cmp #$80			cmp 	#KW_PLING					; word indirection
.e274	f0 09		beq $e27f			beq 	_EVALWordRead
.e276	4c 19 e1	jmp $e119			jmp 	SyntaxError 				; give up.
.e279					_EVALByteRead:
.e279	20 39 e3	jsr $e339			jsr 	EVALReadByteIndirect
.e27c					_EVALGoGotAtom:
.e27c	4c e8 e1	jmp $e1e8			jmp 	_EVALGotAtom
.e27f					_EVALWordRead:
.e27f	20 62 e3	jsr $e362			jsr 	EVALReadWordIndirect
.e282	4c e8 e1	jmp $e1e8			jmp 	_EVALGotAtom
.e285					_EVALCheckVariable:
.e285	20 92 e3	jsr $e392			jsr 	VARReference 				; get variable reference to ZTemp1
.e288	20 76 e3	jsr $e376			jsr 	EVALReadWordIndirectZTemp	; read that address into current stack level.
.e28b	4c e8 e1	jmp $e1e8			jmp 	_EVALGotAtom 				; and go round.
.e28e					EVALGetDecConstant:
.e28e	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e290	c9 30		cmp #$30			cmp 	#'0'						; check in range 0-9.
.e292	90 04		bcc $e298			bcc 	_EVGDExit
.e294	c9 3a		cmp #$3a			cmp 	#'9'+1
.e296	90 01		bcc $e299			bcc 	_EVGDValue 					; if so has legal value
.e298					_EVGDExit:
.e298	60		rts				rts
.e299					_EVGDValue:
.e299	48		pha				pha 								; save value, Y on stack
.e29a	5a		phy				phy
.e29b	a0 03		ldy #$03			ldy 	#3 							; 3 shifts.
.e29d	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; push x1 value on stack.
.e2a0	48		pha				pha
.e2a1	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e2a4	48		pha				pha
.e2a5	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e2a8	48		pha				pha
.e2a9	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e2ac	48		pha				pha
.e2ad					_EVGDLoop:
.e2ad	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; rotate left once.
.e2b0	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e2b3	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e2b6	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e2b9	c0 02		cpy #$02			cpy 	#2 							; if done it twice now
.e2bb	d0 1d		bne $e2da			bne 	_EVGDNoAdd
.e2bd	18		clc				clc 								; then it will be x 4, adding +1 => x 5
.e2be	68		pla				pla
.e2bf	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e2c2	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e2c5	68		pla				pla
.e2c6	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e2c9	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e2cc	68		pla				pla
.e2cd	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e2d0	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e2d3	68		pla				pla
.e2d4	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e2d7	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e2da					_EVGDNoAdd:
.e2da	88		dey				dey
.e2db	d0 d0		bne $e2ad			bne 	_EVGDLoop
.e2dd	7a		ply				ply 								; restore YA
.e2de	68		pla				pla
.e2df	c8		iny				iny 								; next character
.e2e0	29 0f		and #$0f			and 	#15 						; force into range and put in.
.e2e2	18		clc				clc
.e2e3	7d 00 04	adc $0400,x			adc 	evalStack+0,x 				; add digit in
.e2e6	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e2e9	90 a3		bcc $e28e			bcc 	EVALGetDecConstant 			; propogate constant through
.e2eb	fe 01 04	inc $0401,x			inc 	evalStack+1,x
.e2ee	d0 9e		bne $e28e			bne 	EVALGetDecConstant
.e2f0	fe 02 04	inc $0402,x			inc 	evalStack+2,x
.e2f3	d0 99		bne $e28e			bne 	EVALGetDecConstant
.e2f5	fe 03 04	inc $0403,x			inc 	evalStack+3,x
.e2f8	80 94		bra $e28e			bra 	EVALGetDecConstant 			; go back and try again.
.e2fa					EVALGetHexConstant:
.e2fa	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e2fc	20 2e e3	jsr $e32e			jsr 	EVALToUpper 				; make upper case
.e2ff	38		sec				sec
.e300	e9 30		sbc #$30			sbc 	#"0" 						; range 0-9
.e302	90 0a		bcc $e30e			bcc 	_EVGHExit 					; exit if CC
.e304	c9 0a		cmp #$0a			cmp 	#9+1 						; if < 9 have a legal value.
.e306	90 07		bcc $e30f			bcc 	_EVGHValue
.e308	e9 07		sbc #$07			sbc 	#7 							; now in range 10-15 if okay.
.e30a	c9 10		cmp #$10			cmp 	#15+1
.e30c	90 01		bcc $e30f			bcc 	_EVGHValue
.e30e					_EVGHExit:
.e30e	60		rts				rts
.e30f					_EVGHValue:
.e30f	5a		phy				phy 								; save Y and new digit.
.e310	48		pha				pha
.e311	a0 04		ldy #$04			ldy 	#4 							; rotate left 4
.e313					_EVGHRotate:
.e313	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e316	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e319	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e31c	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e31f	88		dey				dey
.e320	d0 f1		bne $e313			bne 	_EVGHRotate
.e322	68		pla				pla 								; restore digit and X
.e323	7a		ply				ply
.e324	c8		iny				iny 								; next character
.e325	18		clc				clc
.e326	1d 00 04	ora $0400,x			ora 	evalStack+0,x 				; add digit in
.e329	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e32c	80 cc		bra $e2fa			bra 	EVALGetHexConstant 			; go back and try again.
.e32e					EVALToUpper:
.e32e	c9 61		cmp #$61			cmp 	#'a'
.e330	90 06		bcc $e338			bcc 	_EVTUExit
.e332	c9 7b		cmp #$7b			cmp 	#'z'+1
.e334	b0 02		bcs $e338			bcs 	_EVTUExit
.e336	49 20		eor #$20			eor 	#32
.e338					_EVTUExit:
.e338	60		rts				rts
.e339					EVALReadByteIndirect:
.e339	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e33c	85 26		sta $26				sta 	zTemp1
.e33e	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e341	85 27		sta $27				sta 	zTemp1+1
.e343	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e346	85 28		sta $28				sta 	zTemp1+2
.e348	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e34b	85 29		sta $29				sta 	zTemp1+3
.e34d	5a		phy				phy
.e34e	a0 00		ldy #$00			ldy 	#0 							; read byte
.e350	b1 26		lda ($26),y			lda 	(zTemp1),y
.e352	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e355	7a		ply				ply
.e356	a9 00		lda #$00			lda 	#0 							; zero upper three bytes
.e358	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e35b	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e35e	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e361	60		rts				rts
.e362					EVALReadWordIndirect:
.e362	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e365	85 26		sta $26				sta 	zTemp1
.e367	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e36a	85 27		sta $27				sta 	zTemp1+1
.e36c	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e36f	85 28		sta $28				sta 	zTemp1+2
.e371	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e374	85 29		sta $29				sta 	zTemp1+3
.e376					EVALReadWordIndirectZTemp:
.e376	5a		phy				phy
.e377	a0 00		ldy #$00			ldy 	#0 							; read word
.e379	b1 26		lda ($26),y			lda 	(zTemp1),y
.e37b	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e37e	c8		iny				iny
.e37f	b1 26		lda ($26),y			lda 	(zTemp1),y
.e381	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e384	c8		iny				iny
.e385	b1 26		lda ($26),y			lda 	(zTemp1),y
.e387	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e38a	c8		iny				iny
.e38b	b1 26		lda ($26),y			lda 	(zTemp1),y
.e38d	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e390	7a		ply				ply
.e391	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/variable.asm

.e392					VARReference:
.e392	38		sec				sec 								; check range @-Z there
.e393	c9 40		cmp #$40			cmp 	#'@'
.e395	90 04		bcc $e39b			bcc 	_VARRError
.e397	c9 5b		cmp #$5b			cmp 	#'Z'+1 						; there are 27 variables @ and A-Z
.e399	90 03		bcc $e39e			bcc 	_VARROkay
.e39b					_VARRError:
.e39b	4c 19 e1	jmp $e119			jmp		SyntaxError
.e39e					_VARROkay:
.e39e	c8		iny				iny 								; consume the variable.
.e39f	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it @@ AA BB CC ?
.e3a1	f0 1b		beq $e3be			beq 	_VARArrayAccess 			; array access AA0 AA1 etc.
.e3a3	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get that second character
.e3a5	88		dey				dey 								; point back to the first character
.e3a6	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; if ( then it is A(x) format.
.e3a8	f0 14		beq $e3be			beq 	_VARArrayAccess
.e3aa	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; reget variable.
.e3ac	c8		iny				iny
.e3ad	29 1f		and #$1f			and		#31 						; mask out
.e3af	0a		asl a				asl 	a 							; x 4
.e3b0	0a		asl a				asl 	a
.e3b1	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e3b3	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e3b5	85 27		sta $27				sta 	zTemp1+1
.e3b7	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.e3b9	85 28		sta $28				sta 	zTemp1+2
.e3bb	85 29		sta $29				sta 	zTemp1+3 					; return with address set.
.e3bd	60		rts				rts
.e3be					_VARArrayAccess:
.e3be	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get variable
.e3c0	c8		iny				iny
.e3c1	29 1f		and #$1f			and 	#31 						; mask it off
.e3c3	48		pha				pha 								; save on the stack.
.e3c4	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel 	; calculate the index.
.e3c7	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; multiply by four.
.e3ca	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e3cd	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e3d0	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e3d3	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e3d6	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e3d9	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e3dc	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e3df	68		pla				pla 								; put address in zTemp1
.e3e0	0a		asl a				asl 	a 							; x 4
.e3e1	0a		asl a				asl 	a
.e3e2	85 26		sta $26				sta 	zTemp1+0 					; rely on variables being page aligned.
.e3e4	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e3e6	85 27		sta $27				sta 	zTemp1+1
.e3e8	5a		phy				phy
.e3e9	a0 00		ldy #$00			ldy 	#0 							; calculate	evalStack+0,3 + (zTemp)
.e3eb	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3ed	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e3f0	48		pha				pha 								; save first result as we need the indirection.
.e3f1	c8		iny				iny 								; 2nd byte
.e3f2	b1 26		lda ($26),y			lda 	(zTemp1),y
.e3f4	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e3f7	85 27		sta $27				sta 	zTemp1+1
.e3f9	68		pla				pla 								; save the low byte.
.e3fa	85 26		sta $26				sta 	zTemp1+0
.e3fc	a9 00		lda #$00			lda 	#0
.e3fe	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e401	85 28		sta $28				sta 	zTemp1+2
.e403	a9 00		lda #$00			lda 	#0
.e405	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e408	85 29		sta $29				sta 	zTemp1+3
.e40a	7a		ply				ply 								; restore Y, address setup
.e40b	60		rts				rts
.e40c	80 fe		bra $e40c	x1:		bra 	x1

;******  Return to file: basic.asm


;******  Processing file: general/screenio.asm

.e40e					SIOInitialise:
.e40e	20 82 a0	jsr $a082			jsr 	EXTReset 					; reset video
.e411					SIOClearScreen:
.e411	20 38 a0	jsr $a038			jsr 	EXTClearScreen 				; clear screen
.e414					SIOHomeCursor:
.e414	48		pha				pha 								; home cursor
.e415	a9 00		lda #$00			lda 	#0
.e417	8d a0 20	sta $20a0			sta 	xCursor
.e41a	8d a1 20	sta $20a1			sta 	yCursor
.e41d	68		pla				pla
.e41e	60		rts				rts
.e41f					SIOPrintString:
.e41f	48		pha				pha 								; save registers
.e420	da		phx				phx
.e421	5a		phy				phy
.e422	86 28		stx $28				stx 	zTemp2 						; set up indirect pointer
.e424	84 29		sty $29				sty 	zTemp2+1
.e426	a0 00		ldy #$00			ldy 	#0
.e428					_SIOPSLoop:
.e428	b1 28		lda ($28),y			lda 	(zTemp2),y 					; read next, exit if 0
.e42a	f0 1c		beq $e448			beq 	_SIOPSExit
.e42c	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter 			; print and bump
.e42f	c8		iny				iny
.e430	d0 f6		bne $e428			bne 	_SIOPSLoop
.e432	20 1e e1	jsr $e11e			jsr 	ReportError
>e435	42 61 64 20 53 74 72 69				.text 	"Bad String Printed",$00
>e43d	6e 67 20 50 72 69 6e 74 65 64 00
.e448					_SIOPSExit:
.e448	7a		ply				ply 								; restore and exit.
.e449	fa		plx				plx
.e44a	68		pla				pla
.e44b	60		rts				rts
.e44c					SIOPrintCharacter:
.e44c	48		pha				pha 								; save AXY
.e44d	da		phx				phx
.e44e	5a		phy				phy
.e44f	c9 0d		cmp #$0d			cmp 	#13 						; CR ?
.e451	f0 12		beq $e465			beq 	_SIOPReturn
.e453	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor 				; load cursor position in.
.e456	29 3f		and #$3f			and 	#$3F 						; PETSCII conversion
.e458	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen 				; write character out.
.e45b	ee a0 20	inc $20a0			inc 	xCursor 					; move right
.e45e	ad a0 20	lda $20a0			lda 	xCursor 					; reached the RHS
.e461	c9 28		cmp #$28			cmp 	#EXTWidth
.e463	90 15		bcc $e47a			bcc 	_SIOPExit
.e465					_SIOPReturn:
.e465	a9 00		lda #$00			lda 	#0 							; zero x
.e467	8d a0 20	sta $20a0			sta 	xCursor
.e46a	ee a1 20	inc $20a1			inc 	yCursor 					; go down
.e46d	ad a1 20	lda $20a1			lda 	yCursor
.e470	c9 19		cmp #$19			cmp 	#EXTHeight 					; off the bottom ?
.e472	90 06		bcc $e47a			bcc 	_SIOPExit
.e474	20 50 a0	jsr $a050			jsr 	EXTScrollDisplay 			; scroll display up
.e477	ce a1 20	dec $20a1			dec 	yCursor 					; cursor on bottom line.
.e47a					_SIOPExit:
.e47a	7a		ply				ply 								; restore and exit.
.e47b	fa		plx				plx
.e47c	68		pla				pla
.e47d	60		rts				rts
.e47e					SIOGetKey:
.e47e	20 0c a0	jsr $a00c			jsr 	EXTReadKeyPort 				; wait for a key
.e481	f0 fb		beq $e47e			beq 	SIOGetKey
.e483	20 2e e3	jsr $e32e			jsr 	EVALToUpper 				; capitalise it.
.e486	4c 12 a0	jmp $a012			jmp 	EXTRemoveKeyPressed 		; remove from the queue.
.e489					SIOReadLine:
.e489	48		pha				pha 								; save registers
.e48a	da		phx				phx
.e48b	5a		phy				phy
.e48c					_SIORLoop:
.e48c	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor 				; cursor in XY
.e48f	20 1e a0	jsr $a01e			jsr 	EXTReadScreen 				; read the display.
.e492	48		pha				pha 								; save on stack.
.e493	a9 66		lda #$66			lda 	#102 						; write cursor out
.e495	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e498	20 7e e4	jsr $e47e			jsr 	SIOGetKey
.e49b	aa		tax				tax 								; save in X
.e49c	68		pla				pla 								; old character
.e49d	da		phx				phx 								; save key pressed
.e49e	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor 				; cursor in XY
.e4a1	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e4a4	68		pla				pla
.e4a5	c9 01		cmp #$01			cmp 	#"A"-64 					; control characters
.e4a7	f0 29		beq $e4d2			beq 	_SIOCursorLeft
.e4a9	c9 13		cmp #$13			cmp 	#"S"-64
.e4ab	f0 49		beq $e4f6			beq 	_SIOCursorDown
.e4ad	c9 04		cmp #$04			cmp 	#"D"-64
.e4af	f0 2d		beq $e4de			beq 	_SIOCursorRight
.e4b1	c9 17		cmp #$17			cmp 	#"W"-64
.e4b3	f0 35		beq $e4ea			beq 	_SIOCursorUp
.e4b5	c9 1a		cmp #$1a			cmp 	#"Z"-64
.e4b7	f0 49		beq $e502			beq 	_SIOClearScreen
.e4b9	c9 08		cmp #$08			cmp 	#"H"-64
.e4bb	f0 4a		beq $e507			beq 	_SIOBackspace
.e4bd	c9 0d		cmp #$0d			cmp 	#13 						; CR
.e4bf	f0 0e		beq $e4cf			beq 	_SIOGoReturn
.e4c1	c9 20		cmp #$20			cmp 	#32 						; any control
.e4c3	90 c7		bcc $e48c			bcc 	_SIORLoop
.e4c5	48		pha				pha
.e4c6	20 47 e5	jsr $e547			jsr 	_SIOInsert 					; insert a space for new character
.e4c9	68		pla				pla
.e4ca	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter 			; print character in A
.e4cd	80 bd		bra $e48c			bra 	_SIORLoop
.e4cf					_SIOGoReturn:
.e4cf	4c 72 e5	jmp $e572			jmp 	_SIOReturn
.e4d2					_SIOCursorLeft:
.e4d2	ce a0 20	dec $20a0			dec 	xCursor
.e4d5	10 b5		bpl $e48c			bpl 	_SIORLoop
.e4d7	a9 27		lda #$27			lda 	#EXTWidth-1
.e4d9					_SIOWXLoop:
.e4d9	8d a0 20	sta $20a0			sta 	xCursor
.e4dc	80 ae		bra $e48c			bra 	_SIORLoop
.e4de					_SIOCursorRight:
.e4de	ee a0 20	inc $20a0			inc 	xCursor
.e4e1	ad a0 20	lda $20a0			lda 	xCursor
.e4e4	49 28		eor #$28			eor 	#EXTWidth
.e4e6	d0 a4		bne $e48c			bne 	_SIORLoop
.e4e8	80 ef		bra $e4d9			bra 	_SIOWXLoop
.e4ea					_SIOCursorUp:
.e4ea	ce a1 20	dec $20a1			dec 	yCursor
.e4ed	10 9d		bpl $e48c			bpl 	_SIORLoop
.e4ef	a9 18		lda #$18			lda 	#EXTHeight-1
.e4f1					_SIOWYLoop:
.e4f1	8d a1 20	sta $20a1			sta 	yCursor
.e4f4	80 96		bra $e48c			bra 	_SIORLoop
.e4f6					_SIOCursorDown:
.e4f6	ee a1 20	inc $20a1			inc 	yCursor
.e4f9	ad a1 20	lda $20a1			lda 	yCursor
.e4fc	49 19		eor #$19			eor 	#EXTHeight
.e4fe	d0 8c		bne $e48c			bne 	_SIORLoop
.e500	80 ef		bra $e4f1			bra 	_SIOWYLoop
.e502					_SIOClearScreen:
.e502	20 11 e4	jsr $e411			jsr 	SIOClearScreen
.e505	80 85		bra $e48c			bra 	_SIORLoop
.e507					_SIOBackspace:
.e507	ad a0 20	lda $20a0			lda 	xCursor 					; backspace possible ?
.e50a	f0 80		beq $e48c			beq 	_SIORLoop 					; start of line, no.
.e50c	48		pha				pha 								; save position.
.e50d	c9 27		cmp #$27			cmp 	#EXTWidth-1 				; not required
.e50f	f0 1c		beq $e52d			beq 	_SIONoShift
.e511					_SIOShift2:
.e511	ee a0 20	inc $20a0			inc 	xCursor 					; copy character backward
.e514	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor
.e517	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e51a	ce a0 20	dec $20a0			dec 	xCursor
.e51d	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor
.e520	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e523	ee a0 20	inc $20a0			inc 	xCursor
.e526	ad a0 20	lda $20a0			lda 	xCursor
.e529	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e52b	d0 e4		bne $e511			bne 	_SIOShift2
.e52d					_SIONoShift:
.e52d	a9 27		lda #$27			lda 	#EXTWidth-1 				; space on far end.
.e52f	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor
.e532	a9 20		lda #$20			lda 	#32
.e534	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e537	68		pla				pla 								; restore cursor, back one.
.e538	3a		dec a				dec 	a
.e539	8d a0 20	sta $20a0			sta 	xCursor
.e53c	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor 				; overwrite
.e53f	a9 20		lda #$20			lda 	#32
.e541	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e544	4c 8c e4	jmp $e48c			jmp	 	_SIORLoop
.e547					_SIOInsert:
.e547	ad a0 20	lda $20a0			lda 	xCursor 					; at far right, nothing to do.
.e54a	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e54c	f0 23		beq $e571			beq 	_SIOIExit
.e54e	85 28		sta $28				sta 	zTemp2 						; save in temporary workspace.
.e550	a9 27		lda #$27			lda 	#EXTWidth-1 				; cursor at far right.
.e552	8d a0 20	sta $20a0			sta 	xCursor
.e555					_SIOShift:
.e555	ce a0 20	dec $20a0			dec 	xCursor 					; copy character forward
.e558	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor
.e55b	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e55e	ee a0 20	inc $20a0			inc 	xCursor
.e561	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor
.e564	20 2c a0	jsr $a02c			jsr 	EXTWriteScreen
.e567	ce a0 20	dec $20a0			dec 	xCursor
.e56a	ad a0 20	lda $20a0			lda 	xCursor						; until shifted line to this point.
.e56d	c5 28		cmp $28				cmp 	zTemp2
.e56f	d0 e4		bne $e555			bne 	_SIOShift
.e571					_SIOIExit:
.e571	60		rts				rts
.e572					_SIOReturn:
.e572	a9 00		lda #$00			lda 	#0 							; copy line in from screen.
.e574	8d a0 20	sta $20a0			sta 	xCursor
.e577					_SIOCopy:
.e577	20 ac e5	jsr $e5ac			jsr 	SIOLoadCursor
.e57a	20 1e a0	jsr $a01e			jsr 	EXTReadScreen
.e57d	49 20		eor #$20			eor 	#$20
.e57f	18		clc				clc
.e580	69 20		adc #$20			adc 	#$20
.e582	ae a0 20	ldx $20a0			ldx 	xCursor
.e585	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e588	ee a0 20	inc $20a0			inc 	xCursor
.e58b	ad a0 20	lda $20a0			lda 	xCursor
.e58e	c9 28		cmp #$28			cmp 	#EXTWidth
.e590	d0 e5		bne $e577			bne 	_SIOCopy
.e592	aa		tax				tax 								; X contains width
.e593					_SIOStrip:
.e593	ca		dex				dex									; back one
.e594	30 07		bmi $e59d			bmi		_SIOFound 					; if -ve gone too far
.e596	bd 6d 20	lda $206d,x			lda 	InputLine,x 				; is there a space here
.e599	c9 20		cmp #$20			cmp 	#' '
.e59b	f0 f6		beq $e593			beq 	_SIOStrip
.e59d					_SIOFound:
.e59d	e8		inx				inx
.e59e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.e5a0	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e5a3	a9 0d		lda #$0d			lda 	#13 						; print a CR and exit
.e5a5	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.e5a8	7a		ply				ply
.e5a9	fa		plx				plx
.e5aa	68		pla				pla
.e5ab	60		rts				rts
.e5ac					SIOLoadCursor:
.e5ac	48		pha				pha
.e5ad	ad a1 20	lda $20a1			lda 	yCursor  					; Y Position
.e5b0	0a		asl a				asl 	a 							; x 2 	(80)
.e5b1	0a		asl a				asl 	a 							; x 2 	(160)
.e5b2	6d a1 20	adc $20a1			adc 	yCursor 					; x 5 	(200) (CC)
.e5b5	85 26		sta $26				sta 	zTemp1
.e5b7	a9 00		lda #$00			lda 	#0
.e5b9	85 27		sta $27				sta 	zTemp1+1
.e5bb	06 26		asl $26				asl 	zTemp1						; x 10
.e5bd	26 27		rol $27				rol 	zTemp1+1
.e5bf	06 26		asl $26				asl 	zTemp1						; x 20
.e5c1	26 27		rol $27				rol 	zTemp1+1
.e5c3	06 26		asl $26				asl 	zTemp1						; x 40
.e5c5	26 27		rol $27				rol 	zTemp1+1 					; (CC)
.e5c7	a5 26		lda $26				lda 	zTemp1 						; add X
.e5c9	6d a0 20	adc $20a0			adc 	xCursor
.e5cc	aa		tax				tax
.e5cd	a5 27		lda $27				lda 	zTemp1+1
.e5cf	69 00		adc #$00			adc 	#0
.e5d1	a8		tay				tay
.e5d2	68		pla				pla 								; restore and exit
.e5d3	60		rts				rts
.e5d4					SIOPrintHex:
.e5d4	48		pha				pha
.e5d5	48		pha				pha
.e5d6	a9 20		lda #$20			lda 	#32
.e5d8	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.e5db	68		pla				pla
.e5dc	48		pha				pha
.e5dd	4a		lsr a				lsr 	a
.e5de	4a		lsr a				lsr 	a
.e5df	4a		lsr a				lsr 	a
.e5e0	4a		lsr a				lsr 	a
.e5e1	20 ea e5	jsr $e5ea			jsr 	_SIOPHex
.e5e4	68		pla				pla
.e5e5	20 ea e5	jsr $e5ea			jsr 	_SIOPHex
.e5e8	68		pla				pla
.e5e9	60		rts				rts
.e5ea					_SIOPHex:
.e5ea	29 0f		and #$0f			and 	#15
.e5ec	c9 0a		cmp #$0a			cmp 	#10
.e5ee	90 02		bcc $e5f2			bcc 	_SIOPHex2
.e5f0	69 06		adc #$06			adc 	#6
.e5f2					_SIOPHex2:
.e5f2	69 30		adc #$30			adc 	#48
.e5f4	4c 4c e4	jmp $e44c			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: general/tokeniser.asm

.e5f7					TokeniseString:
.e5f7	a0 00		ldy #$00			ldy 	#0							; source
.e5f9	a2 00		ldx #$00			ldx 	#0 							; target
.e5fb					_TokLoop:
.e5fb	b1 26		lda ($26),y			lda 	(zTemp1),y 					; get first
.e5fd	f0 5b		beq $e65a			beq 	_TokExit 					; End, exit.
.e5ff	c9 20		cmp #$20			cmp 	#32 						; if space, copy it
.e601	f0 33		beq $e636			beq 	_TokCopy1
.e603	c9 22		cmp #$22			cmp 	#'"' 						; if string, copy that in.
.e605	f0 38		beq $e63f			beq 	_TokCopyString
.e607	c9 30		cmp #$30			cmp 	#"0" 						; punctuation, search for it.
.e609	90 20		bcc $e62b			bcc 	_TokPunctuation
.e60b	c9 3a		cmp #$3a			cmp 	#"9"+1 						; digits are just copied over.
.e60d	90 27		bcc $e636			bcc 	_TokCopy1
.e60f	c9 41		cmp #$41			cmp 	#"A"						; more punctuation
.e611	90 18		bcc $e62b			bcc 	_TokPunctuation
.e613	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; and more punctuation
.e615					_TokWord:
.e615	20 60 e6	jsr $e660			jsr 	TokeniseSearch 				; search for tokenised word.
.e618	b0 16		bcs $e630			bcs 	_TokFound 					; if successful, copy it out.
.e61a					_TokSkip:
.e61a	b1 26		lda ($26),y			lda 	(zTemp1),y 					; copy all A-Z as can't start token in mid word.
.e61c	c9 41		cmp #$41			cmp 	#"A"
.e61e	90 db		bcc $e5fb			bcc 	_TokLoop
.e620	c9 5b		cmp #$5b			cmp 	#"Z"+1
.e622	b0 d7		bcs $e5fb			bcs 	_TokLoop
.e624	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e627	e8		inx				inx
.e628	c8		iny				iny
.e629	80 ef		bra $e61a			bra 	_TokSkip
.e62b					_TokPunctuation:
.e62b	20 60 e6	jsr $e660			jsr 	TokeniseSearch 				; find it.
.e62e	90 06		bcc $e636			bcc 	_TokCopy1 					; if found, just copy 1 character
.e630					_TokFound:
.e630	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; save in tokenise buffer.
.e633	e8		inx				inx 								; advance target ; source is already advanced.
.e634	80 c5		bra $e5fb			bra 	_TokLoop 					; do the next character.
.e636					_TokCopy1:
.e636	b1 26		lda ($26),y			lda 	(zTemp1),y
.e638	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e63b	e8		inx				inx
.e63c	c8		iny				iny
.e63d	80 bc		bra $e5fb			bra 	_TokLoop
.e63f					_TokCopyString:
.e63f	a9 81		lda #$81			lda 	#KW_DQUOTE 					; output double quote token
.e641	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e644	e8		inx				inx 								; skip buffer and first quote.
.e645	c8		iny				iny
.e646					_TokCSLoop:
.e646	b1 26		lda ($26),y			lda 	(zTemp1),y 					; get next character
.e648	f0 10		beq $e65a			beq 	_TokExit 					; if EOL, then you have a mismatch, but we exit.
.e64a	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; write to buffer
.e64d	e8		inx				inx 								; advance both.
.e64e	c8		iny				iny
.e64f	c9 22		cmp #$22			cmp 	#'"'						; keep going till other quote found.
.e651	d0 f3		bne $e646			bne 	_TokCSLoop
.e653	a9 81		lda #$81			lda 	#KW_DQUOTE 					; add the trailing quote token, overwriting the
.e655	9d ff 20	sta $20ff,x			sta 	TokeniseBuffer-1,x 			; " character that's just been copied
.e658	80 a1		bra $e5fb			bra 	_TokLoop
.e65a					_TokExit:
.e65a	a9 00		lda #$00			lda 	#0 							; mark the end of the tokenise buffer.
.e65c	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e65f	60		rts				rts
.e660					TokeniseSearch:
.e660	48		pha				pha 								; save AXY
.e661	da		phx				phx
.e662	5a		phy				phy
.e663	a9 80		lda #$80			lda 	#128 						; zTemp2 keeps track of the token #
.e665	85 28		sta $28				sta 	zTemp2
.e667	a2 00		ldx #$00			ldx 	#0 							; index into TokenText table.
.e669	bd 68 e0	lda $e068,x	_TSNext:lda 	TokenText,x 				; get the first token character
.e66c	29 7f		and #$7f			and 	#$7F 						; bit 7 marks the end.
.e66e	d1 26		cmp ($26),y			cmp 	(zTemp1),y 					; do the characters match.
.e670	f0 13		beq $e685			beq 	_TSTryFullMatch 			; if so, try the full match.
.e672					_TSGotoNext:
.e672	bd 68 e0	lda $e068,x			lda 	TokenText,x 				; read it
.e675	e8		inx				inx 								; bump index
.e676	0a		asl a				asl 	a 							; shift into C
.e677	90 f9		bcc $e672			bcc 	_TSGotoNext 				; keep going until read the end character
.e679	e6 28		inc $28				inc 	zTemp2 						; bump the current token pointer.
.e67b	bd 68 e0	lda $e068,x			lda 	TokenText,x 				; look at the first character of the next token
.e67e	d0 e9		bne $e669			bne 	_TSNext 					; if non-zero, go to the next.
.e680					_TSFail:
.e680	7a		ply				ply 								; fail.
.e681	fa		plx				plx
.e682	68		pla				pla
.e683	18		clc				clc 				 				; return with carry clear.
.e684	60		rts				rts
.e685					_TSTryFullMatch:
.e685	da		phx				phx									; save X and Y.
.e686	5a		phy				phy
.e687					_TSFullMatch:
.e687	bd 68 e0	lda $e068,x			lda 	TokenText,x 				; compare the 7 bits.
.e68a	29 7f		and #$7f			and 	#$7F
.e68c	d1 26		cmp ($26),y			cmp 	(zTemp1),y
.e68e	d0 15		bne $e6a5			bne 	_TSFullFail 				; different, this one doesn't match.
.e690	bd 68 e0	lda $e068,x			lda 	TokenText,x
.e693	e8		inx				inx 								; advance to next character
.e694	c8		iny				iny
.e695	0a		asl a				asl 	a 							; bit 7 of token text in C
.e696	90 ef		bcc $e687			bcc 	_TSFullMatch
.e698	84 29		sty $29				sty 	zTemp2+1 					; save the Y after last
.e69a	68		pla				pla 								; so we don't restore Y
.e69b	68		pla				pla 								; or X from the full test.
.e69c	7a		ply				ply 								; restore original Y and X and A
.e69d	fa		plx				plx
.e69e	68		pla				pla
.e69f	a5 28		lda $28				lda 	zTemp2 						; and return token ID in A
.e6a1	a4 29		ldy $29				ldy 	zTemp2+1 					; Y after the tokenised text.
.e6a3	38		sec				sec 								; with carry set.
.e6a4	60		rts				rts
.e6a5					_TSFullFail:
.e6a5	7a		ply				ply 								; restore Y and X
.e6a6	fa		plx				plx
.e6a7	80 c9		bra $e672			bra 	_TSGotoNext 				; and go to the next token to test.
.e6a9					TokeniseTest:
.e6a9	a9 b5		lda #$b5			lda 	#TTString & $FF
.e6ab	85 26		sta $26				sta 	zTemp1
.e6ad	a9 e6		lda #$e6			lda 	#TTString >> 8
.e6af	85 27		sta $27				sta 	zTemp1+1
.e6b1	20 f7 e5	jsr $e5f7			jsr 	TokeniseString
.e6b4	ea		nop				nop
.e6b5					TTString:
>e6b5	20 41 42 43 44 20 34 31				.text 	' ABCD 41$"LENA"5LENA',0 			; 4 1 $[T] "LENA" 5 LEN[T] A
>e6bd	24 22 4c 45 4e 41 22 35 4c 45 4e 41 00

;******  Return to file: basic.asm


;******  Processing file: binary/arithmetic.asm

.e6ca					BFUNC_Add:
.e6ca	18		clc				clc
.e6cb	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e6ce	7d 04 04	adc $0404,x			adc 	evalStack+4,x
.e6d1	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e6d4	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e6d7	7d 05 04	adc $0405,x			adc 	evalStack+5,x
.e6da	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e6dd	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e6e0	7d 06 04	adc $0406,x			adc 	evalStack+6,x
.e6e3	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e6e6	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e6e9	7d 07 04	adc $0407,x			adc 	evalStack+7,x
.e6ec	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e6ef	60		rts				rts
.e6f0					BFUNC_Subtract:
.e6f0	38		sec				sec
.e6f1	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e6f4	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e6f7	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e6fa	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e6fd	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e700	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e703	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e706	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e709	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e70c	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e70f	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e712	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e715	60		rts				rts
.e716					BFUNC_String:
.e716	20 ca e6	jsr $e6ca			jsr 	BFUNC_Add
.e719	60		rts				rts
.e71a					BFUNC_ByteInd:
.e71a	20 ca e6	jsr $e6ca			jsr 	BFUNC_Add
.e71d	20 39 e3	jsr $e339			jsr 	EVALReadByteIndirect
.e720	60		rts				rts
.e721					BFUNC_WordInd:
.e721	20 ca e6	jsr $e6ca			jsr 	BFUNC_Add
.e724	20 62 e3	jsr $e362			jsr 	EVALReadWordIndirect
.e727	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/binary.asm

.e728					BFUNC_And:
.e728	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e72b	3d 04 04	and $0404,x			and 	evalStack+4,x
.e72e	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e731	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e734	3d 05 04	and $0405,x			and 	evalStack+5,x
.e737	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e73a	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e73d	3d 06 04	and $0406,x			and 	evalStack+6,x
.e740	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e743	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e746	3d 07 04	and $0407,x			and 	evalStack+7,x
.e749	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e74c	60		rts				rts
.e74d					BFUNC_Or:
.e74d	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e750	1d 04 04	ora $0404,x			ora 	evalStack+4,x
.e753	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e756	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e759	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e75c	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e75f	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e762	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e765	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e768	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e76b	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e76e	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e771	60		rts				rts
.e772					BFUNC_Xor:
.e772	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e775	5d 04 04	eor $0404,x			eor 	evalStack+4,x
.e778	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e77b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e77e	5d 05 04	eor $0405,x			eor 	evalStack+5,x
.e781	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e784	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e787	5d 06 04	eor $0406,x			eor 	evalStack+6,x
.e78a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e78d	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e790	5d 07 04	eor $0407,x			eor 	evalStack+7,x
.e793	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e796	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/multiply.asm

.e797					BFUNC_Multiply:
.e797	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy +0 to +8
.e79a	9d 08 04	sta $0408,x			sta 	evalStack+8,x
.e79d	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e7a0	9d 09 04	sta $0409,x			sta 	evalStack+9,x
.e7a3	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e7a6	9d 0a 04	sta $040a,x			sta 	evalStack+10,x
.e7a9	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e7ac	9d 0b 04	sta $040b,x			sta 	evalStack+11,x
.e7af	a9 00		lda #$00			lda 	#0
.e7b1	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; zero +0
.e7b4	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e7b7	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e7ba	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e7bd					_BFMMultiply:
.e7bd	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; get LSBit of 8-11
.e7c0	29 01		and #$01			and 	#1
.e7c2	f0 03		beq $e7c7			beq 	_BFMNoAdd
.e7c4	20 ca e6	jsr $e6ca			jsr 	BFunc_Add 					; if bit set, add 4 to 0.
.e7c7					_BFMNoAdd:
.e7c7	1e 04 04	asl $0404,x			asl 	evalStack+4,x 				; shift +4 left
.e7ca	3e 05 04	rol $0405,x			rol 	evalStack+5,x
.e7cd	3e 06 04	rol $0406,x			rol 	evalStack+6,x
.e7d0	3e 07 04	rol $0407,x			rol 	evalStack+7,x
.e7d3	5e 0b 04	lsr $040b,x			lsr 	evalStack+11,x 				; shift +8 right
.e7d6	7e 0a 04	ror $040a,x			ror 	evalStack+10,x
.e7d9	7e 09 04	ror $0409,x			ror 	evalStack+9,x
.e7dc	7e 08 04	ror $0408,x			ror 	evalStack+8,x
.e7df	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; continue if +8 is nonzero
.e7e2	1d 09 04	ora $0409,x			ora 	evalStack+9,x
.e7e5	1d 0a 04	ora $040a,x			ora 	evalStack+10,x
.e7e8	1d 0b 04	ora $040b,x			ora 	evalStack+11,x
.e7eb	d0 d0		bne $e7bd			bne 	_BFMMultiply
.e7ed	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/divide.asm

.e7ee					BFUNC_Divide:
.e7ee	bd 04 04	lda $0404,x			lda 	evalStack+4,x 				; check for /0
.e7f1	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e7f4	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e7f7	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e7fa	d0 13		bne $e80f			bne 	_BFDOkay
.e7fc	20 1e e1	jsr $e11e			jsr 	ReportError
>e7ff	44 69 76 69 73 6f 6e 20				.text 	"Divison by Zero",$00
>e807	62 79 20 5a 65 72 6f 00
.e80f					_BFDOkay:
.e80f	a9 00		lda #$00			lda 	#0 							; Temp1 is 'A' (and holds the remainder)
.e811	8d 98 20	sta $2098			sta 	Temp1 						; Q/Dividend/Left in +0
.e814	8d 99 20	sta $2099			sta 	Temp1+1 					; M/Divisor/Right in +4
.e817	8d 9a 20	sta $209a			sta 	Temp1+2
.e81a	8d 9b 20	sta $209b			sta 	Temp1+3
.e81d	8d 9c 20	sta $209c			sta 	SignCount 					; Count of signs.
.e820	20 8b e8	jsr $e88b			jsr 	BFUNC_Negate 				; negate (and bump sign count)
.e823	da		phx				phx
.e824	e8		inx				inx
.e825	e8		inx				inx
.e826	e8		inx				inx
.e827	e8		inx				inx
.e828	20 8b e8	jsr $e88b			jsr 	BFUNC_Negate
.e82b	fa		plx				plx
.e82c	5a		phy				phy 								; Y is the counter
.e82d	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.e82f					_BFDLoop:
.e82f	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; shift AQ left.
.e832	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e835	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e838	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e83b	2e 98 20	rol $2098			rol 	Temp1
.e83e	2e 99 20	rol $2099			rol 	Temp1+1
.e841	2e 9a 20	rol $209a			rol 	Temp1+2
.e844	2e 9b 20	rol $209b			rol 	Temp1+3
.e847	38		sec				sec
.e848	ad 98 20	lda $2098			lda 	Temp1+0 					; Calculate A-M on stack.
.e84b	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e84e	48		pha				pha
.e84f	ad 99 20	lda $2099			lda 	Temp1+1
.e852	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e855	48		pha				pha
.e856	ad 9a 20	lda $209a			lda 	Temp1+2
.e859	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e85c	48		pha				pha
.e85d	ad 9b 20	lda $209b			lda 	Temp1+3
.e860	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e863	90 19		bcc $e87e			bcc 	_BFDNoAdd
.e865	8d 9b 20	sta $209b			sta 	Temp1+3 					; update A
.e868	68		pla				pla
.e869	8d 9a 20	sta $209a			sta 	Temp1+2
.e86c	68		pla				pla
.e86d	8d 99 20	sta $2099			sta 	Temp1+1
.e870	68		pla				pla
.e871	8d 98 20	sta $2098			sta 	Temp1+0
.e874	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; set Q bit 1.
.e877	09 01		ora #$01			ora 	#1
.e879	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e87c	80 03		bra $e881			bra 	_BFDNext
.e87e					_BFDNoAdd:
.e87e	68		pla				pla 								; Throw away the intermediate calculations
.e87f	68		pla				pla
.e880	68		pla				pla
.e881					_BFDNext:
.e881	88		dey				dey
.e882	d0 ab		bne $e82f			bne 	_BFDLoop
.e884	7a		ply				ply 								; restore Y and exit
.e885	4e 9c 20	lsr $209c			lsr 	SignCount 					; if sign count odd,
.e888	b0 06		bcs $e890			bcs		BFUNC_NegateAlways 			; negate the result
.e88a	60		rts				rts
.e88b					BFUNC_Negate:
.e88b	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e88e	10 24		bpl $e8b4			bpl 	BFNExit
.e890					BFUNC_NegateAlways:
.e890	38		sec				sec
.e891	a9 00		lda #$00			lda 	#0
.e893	fd 00 04	sbc $0400,x			sbc 	evalStack+0,x
.e896	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e899	a9 00		lda #$00			lda 	#0
.e89b	fd 01 04	sbc $0401,x			sbc 	evalStack+1,x
.e89e	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e8a1	a9 00		lda #$00			lda 	#0
.e8a3	fd 02 04	sbc $0402,x			sbc 	evalStack+2,x
.e8a6	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e8a9	a9 00		lda #$00			lda 	#0
.e8ab	fd 03 04	sbc $0403,x			sbc 	evalStack+3,x
.e8ae	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e8b1	ee 9c 20	inc $209c			inc 	SignCount
.e8b4					BFNExit:
.e8b4	60		rts				rts
.e8b5					BFUNC_Modulus:
.e8b5	20 ee e7	jsr $e7ee			jsr 	BFUNC_Divide 				; start with division.
.e8b8	ad 98 20	lda $2098			lda 	Temp1+0 					; copy remainder
.e8bb	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8be	ad 99 20	lda $2099			lda 	Temp1+1
.e8c1	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e8c4	ad 9a 20	lda $209a			lda 	Temp1+2
.e8c7	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e8ca	ad 9b 20	lda $209b			lda 	Temp1+3
.e8cd	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e8d0	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/compare.asm

.e8d1					BFUNC_Equals:
.e8d1	18		clc				clc
.e8d2	80 01		bra $e8d5			bra 	BFUNC_EqualCheck
.e8d4					BFUNC_NotEquals:
.e8d4	38		sec				sec
.e8d5					BFUNC_EqualCheck:
.e8d5	08		php				php									; save invert flag
.e8d6	ad 00 04	lda $0400			lda 	evalStack+0 				; check equality
.e8d9	cd 04 04	cmp $0404			cmp 	evalStack+4
.e8dc	d0 1c		bne $e8fa			bne 	COMP_Fail
.e8de	ad 01 04	lda $0401			lda 	evalStack+1
.e8e1	cd 05 04	cmp $0405			cmp 	evalStack+5
.e8e4	d0 14		bne $e8fa			bne 	COMP_Fail
.e8e6	ad 02 04	lda $0402			lda 	evalStack+2
.e8e9	cd 06 04	cmp $0406			cmp 	evalStack+6
.e8ec	d0 0c		bne $e8fa			bne 	COMP_Fail
.e8ee	ad 03 04	lda $0403			lda 	evalStack+3
.e8f1	cd 07 04	cmp $0407			cmp 	evalStack+7
.e8f4	d0 04		bne $e8fa			bne 	COMP_Fail
.e8f6					COMP_Succeed:
.e8f6	a9 ff		lda #$ff			lda 	#$FF
.e8f8	80 02		bra $e8fc			bra 	COMP_SetResult
.e8fa					COMP_Fail:
.e8fa	a9 00		lda #$00			lda 	#0 							; here return 0
.e8fc					COMP_SetResult:
.e8fc	28		plp				plp 								; but if CS
.e8fd	90 02		bcc $e901			bcc 	COMP_Accept
.e8ff	49 ff		eor #$ff			eor 	#$FF 						; invert that
.e901					COMP_Accept:
.e901	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; write to result.
.e904	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e907	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e90a	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e90d	60		rts				rts
.e90e					BFUNC_Less:
.e90e	18		clc				clc
.e90f	80 01		bra $e912			bra 	BFUNC_LessCheck
.e911					BFUNC_GreaterEqual:
.e911	38		sec				sec
.e912					BFUNC_LessCheck:
.e912	08		php				php
.e913	38		sec				sec
.e914	ad 00 04	lda $0400			lda 	evalStack+0 				; compare using direct subtraction
.e917	ed 04 04	sbc $0404			sbc 	evalStack+4
.e91a	ad 01 04	lda $0401			lda 	evalStack+1
.e91d	ed 05 04	sbc $0405			sbc 	evalStack+5
.e920	ad 02 04	lda $0402			lda 	evalStack+2
.e923	ed 06 04	sbc $0406			sbc 	evalStack+6
.e926	ad 03 04	lda $0403			lda 	evalStack+3
.e929	ed 07 04	sbc $0407			sbc 	evalStack+7
.e92c	30 c8		bmi $e8f6			bmi 	COMP_Succeed
.e92e	80 ca		bra $e8fa			bra 	COMP_Fail
.e930					BFUNC_Greater:
.e930	18		clc				clc
.e931	80 01		bra $e934			bra 	BFUNC_GreaterCheck
.e933					BFUNC_LessEqual:
.e933	38		sec				sec
.e934					BFUNC_GreaterCheck:
.e934	08		php				php
.e935	38		sec				sec
.e936	ad 04 04	lda $0404			lda 	evalStack+4 				; compare using direct subtraction
.e939	ed 00 04	sbc $0400			sbc 	evalStack+0
.e93c	ad 05 04	lda $0405			lda 	evalStack+5
.e93f	ed 01 04	sbc $0401			sbc 	evalStack+1
.e942	ad 06 04	lda $0406			lda 	evalStack+6
.e945	ed 02 04	sbc $0402			sbc 	evalStack+2
.e948	ad 07 04	lda $0407			lda 	evalStack+7
.e94b	ed 03 04	sbc $0403			sbc 	evalStack+3
.e94e	30 a6		bmi $e8f6			bmi 	COMP_Succeed
.e950	80 a8		bra $e8fa			bra 	COMP_Fail

;******  Return to file: basic.asm


;******  Processing file: binary/scompare.asm

.e952					BFUNC_StringCompare:
.e952	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get address into temporaries.
.e955	85 26		sta $26				sta 	zTemp1
.e957	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e95a	85 27		sta $27				sta 	zTemp1+1
.e95c	bd 04 04	lda $0404,x			lda 	evalStack+4,x
.e95f	85 28		sta $28				sta 	zTemp2
.e961	bd 05 04	lda $0405,x			lda 	evalStack+5,x
.e964	85 29		sta $29				sta 	zTemp2+1
.e966	5a		phy				phy
.e967	a0 00		ldy #$00			ldy 	#0
.e969					_BFSCLoop:
.e969	b1 26		lda ($26),y			lda 	(zTemp1),y 					; comparison
.e96b	38		sec				sec
.e96c	d1 28		cmp ($28),y			cmp 	(zTemp2),y
.e96e	d0 15		bne $e985			bne		_BFSCDifferent 				; return different result.
.e970	c8		iny				iny
.e971	c9 00		cmp #$00			cmp 	#0							; until both EOS.
.e973	d0 f4		bne $e969			bne 	_BFSCLoop
.e975	7a		ply				ply
.e976	a9 00		lda #$00			lda 	#0
.e978					_BFSCSetAll:
.e978	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e97b	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e97e	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e981	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e984	60		rts				rts
.e985					_BFSCDifferent:
.e985	7a		ply				ply
.e986	a9 ff		lda #$ff			lda 	#255 						; if CC set all as <
.e988	90 ee		bcc $e978			bcc 	_BFSCSetAll
.e98a	a9 00		lda #$00			lda 	#0 							; set all zero
.e98c	20 78 e9	jsr $e978			jsr 	_BFSCSetAll
.e98f	fe 00 04	inc $0400,x			inc 	evalStack+0,x 				; and make it one.
.e992	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: unary/unary.asm

.e993					UNARY_Len:
.e993	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e996	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.e999	85 26		sta $26				sta 	zTemp1
.e99b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e99e	85 27		sta $27				sta 	zTemp1+1
.e9a0	5a		phy				phy
.e9a1	a0 00		ldy #$00			ldy 	#0 							; now figure out its length.
.e9a3					_ULGetLength:
.e9a3	b1 26		lda ($26),y			lda 	(zTemp1),y 					; read character
.e9a5	f0 1d		beq $e9c4			beq 	_ULFoundEOL 				; found end of line.
.e9a7	c8		iny				iny
.e9a8	d0 f9		bne $e9a3			bne 	_ULGetLength 				; scan 256 only.
.e9aa	20 1e e1	jsr $e11e			jsr 	ReportError
>e9ad	43 61 6e 6e 6f 74 20 66				.text 	"Cannot find string end",$00
>e9b5	69 6e 64 20 73 74 72 69 6e 67 20 65 6e 64 00
.e9c4					_ULFoundEOL:
.e9c4	98		tya				tya 								; length in A, restore Y
.e9c5	7a		ply				ply
.e9c6					UNARY_ReturnByte:
.e9c6	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e9c9	a9 00		lda #$00			lda 	#0 							; clear the rests
.e9cb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e9ce	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e9d1	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e9d4	60		rts				rts
.e9d5					UNARY_Ch:
.e9d5	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e9d8	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.e9db	85 26		sta $26				sta 	zTemp1
.e9dd	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e9e0	85 27		sta $27				sta 	zTemp1+1
.e9e2	5a		phy				phy
.e9e3	a0 00		ldy #$00			ldy 	#0 							; now get first character
.e9e5	b1 26		lda ($26),y			lda 	(zTemp1),y
.e9e7	7a		ply				ply
.e9e8	80 dc		bra $e9c6			bra 	UNARY_ReturnByte 			; return that byte.
.e9ea					UNARY_Abs:
.e9ea	ea		nop				nop
.e9eb	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.e9ee	20 8b e8	jsr $e88b			jsr 	BFUNC_Negate 				; there's an ABS routine in divide
.e9f1	60		rts				rts
.e9f2					UNARY_Top:
.e9f2	ad 96 20	lda $2096			lda 	highMemory
.e9f5	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e9f8	ad 97 20	lda $2097			lda 	highMemory+1
.e9fb	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e9fe	a9 00		lda #$00			lda 	#0
.ea00	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea03	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea06	60		rts				rts
.ea07					UNARY_Rnd:
.ea07	20 12 ea	jsr $ea12			jsr 	Random16 					; call 16 bit RNG twice
.ea0a	e8		inx				inx
.ea0b	e8		inx				inx
.ea0c	20 12 ea	jsr $ea12			jsr 	Random16
.ea0f	ca		dex				dex
.ea10	ca		dex				dex
.ea11	60		rts				rts
.ea12					Random16:
.ea12	ad 9e 20	lda $209e			lda 	RandomSeed 					; initialise if nonzero
.ea15	0d 9f 20	ora $209f			ora 	RandomSeed+1
.ea18	d0 0d		bne $ea27			bne 	_R16_NoInit
.ea1a	ee 9e 20	inc $209e			inc 	RandomSeed 					; by setting low to 1
.ea1d	5a		phy				phy
.ea1e	a0 14		ldy #$14			ldy 	#20 						; call it 20 times to get it started
.ea20					_R16_Setup:
.ea20	20 12 ea	jsr $ea12			jsr 	Random16
.ea23	88		dey				dey
.ea24	d0 fa		bne $ea20			bne 	_R16_Setup
.ea26	7a		ply				ply
.ea27					_R16_NoInit:
.ea27	4e 9f 20	lsr $209f			lsr 	RandomSeed+1				; shift seed right
.ea2a	6e 9e 20	ror $209e			ror 	RandomSeed
.ea2d	90 08		bcc $ea37			bcc 	_R16_NoXor
.ea2f	ad 9f 20	lda $209f			lda 	RandomSeed+1				; xor MSB with $B4 if bit set.
.ea32	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.ea34	8d 9f 20	sta $209f			sta 	RandomSeed+1
.ea37					_R16_NoXor:
.ea37	ad 9e 20	lda $209e			lda 	RandomSeed					; copy result to evaluate stack.
.ea3a	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea3d	ad 9f 20	lda $209f			lda 	RandomSeed+1
.ea40	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea43	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/execute.asm

.ea44					COMMAND_Run:
.ea44	20 f1 ea	jsr $eaf1			jsr 	COMMAND_Clear 				; clear everything for a new run.
.ea47	a2 00		ldx #$00			ldx 	#BasicProgram & 255 		; start from here
.ea49	a0 22		ldy #$22			ldy 	#BasicProgram >> 8
.ea4b	86 20		stx $20				stx 	zCurrentLine 				; set current line.
.ea4d	84 21		sty $21				sty 	zCurrentLine+1
.ea4f					CRUNNewLine:
.ea4f	a0 00		ldy #$00			ldy 	#0 							; look at the offset, end of program
.ea51	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ea53	f0 57		beq $eaac			beq 	COMMAND_End 				; if zero, off end of program so stop.
.ea55	a0 03		ldy #$03			ldy 	#3 							; offset to first token.
.ea57					CRUNNextInstruction:
.ea57	a9 00		lda #$00			lda 	#0 							; reset the string buffer position
.ea59	8d 9d 20	sta $209d			sta 	StringBufferPos
.ea5c	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token
.ea5e	f0 0b		beq $ea6b			beq 	CRUNNextLine 				; if zero, then end of line.
.ea60					CRUNNotEndOfLine:
.ea60	c9 20		cmp #$20			cmp 	#' '
.ea62	f0 04		beq $ea68			beq 	CRUNSkipLoop
.ea64	c9 8d		cmp #$8d			cmp 	#KW_Colon 					; check for a colon first.
.ea66	d0 12		bne $ea7a			bne 	CRUNExecuteOne 				; if not that, execute the token.
.ea68					CRUNSkipLoop:
.ea68	c8		iny				iny		 							; if colon, skip it and loop round.
.ea69	80 ec		bra $ea57			bra 	CRUNNextInstruction
.ea6b					CRUNNextLine:
.ea6b	a0 00		ldy #$00			ldy 	#0 							; add offset from line to line pointer
.ea6d	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ea6f	18		clc				clc
.ea70	65 20		adc $20				adc 	zCurrentLine
.ea72	85 20		sta $20				sta 	zCurrentLine
.ea74	90 d9		bcc $ea4f			bcc 	CRUNNewLine
.ea76	e6 21		inc $21				inc 	zCurrentLine+1
.ea78	80 d5		bra $ea4f			bra 	CRUNNewLine
.ea7a					CRUNExecuteOne:
.ea7a	09 00		ora #$00			ora 	#0 							; if it is a character might be a variable.
.ea7c	10 21		bpl $ea9f			bpl		_CRUNX1TryLet
.ea7e	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; likewise if ! something ? something $ something
.ea80	f0 1d		beq $ea9f			beq 	_CRUNX1TryLet
.ea82	c9 80		cmp #$80			cmp 	#KW_PLING
.ea84	f0 19		beq $ea9f			beq 	_CRUNX1TryLet
.ea86	c9 95		cmp #$95			cmp 	#KW_QUESTION
.ea88	f0 15		beq $ea9f			beq 	_CRUNX1TryLet
.ea8a	c8		iny				iny 								; skip over loaded token
.ea8b	0a		asl a				asl 	a 							; double lower keyword byte, clears bit 7.
.ea8c	8d 99 20	sta $2099			sta 	Temp1+1 					; this is the low byte into the KVT
.ea8f	8a		txa				txa
.ea90	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.ea92	8d 9a 20	sta $209a			sta 	Temp1+2
.ea95	a9 6c		lda #$6c			lda 	#$6C 						; make it jump indirect
.ea97	8d 98 20	sta $2098			sta 	Temp1+0
.ea9a	20 98 20	jsr $2098			jsr 	Temp1 						; call instruction
.ea9d	80 b8		bra $ea57			bra 	CRUNNextInstruction 		; do next instruction.
.ea9f					_CRUNX1TryLet:
.ea9f	20 5b eb	jsr $eb5b			jsr 	COMMAND_Let 				; try doing a LET if not a keyword.
.eaa2	80 b3		bra $ea57			bra 	CRUNNextInstruction
.eaa4					COMMAND_Stop:
.eaa4	20 1e e1	jsr $e11e			jsr 	ReportError
>eaa7	53 74 6f 70 00					.text 	"Stop",$00
.eaac					COMMAND_End:
>eaac	02						.byte 	2
.eaad	4c 03 ee	jmp $ee03			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: commands/miscellany.asm

.eab0					COMMAND_Assert:
.eab0	20 7f e1	jsr $e17f			jsr 	EvaluateBase 				; evaluate the expression
.eab3	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check non zero
.eab6	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.eab9	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eabc	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eabf	d0 12		bne $ead3			bne 	_CMDAExit
.eac1	ea		nop				nop
.eac2	20 1e e1	jsr $e11e			jsr 	ReportError
>eac5	41 73 73 65 72 74 20 66				.text 	"Assert failed",$00
>eacd	61 69 6c 65 64 00
.ead3					_CMDAExit:
.ead3	60		rts				rts
.ead4					COMMAND_Rem:
.ead4	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character token.
.ead6	f0 05		beq $eadd			beq 	_CREMExit 					; End of line, then exit.
.ead8	c8		iny				iny 								; something to skip
.ead9	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; if not a colon
.eadb	d0 f7		bne $ead4			bne 	COMMAND_Rem 				; keep searching
.eadd					_CREMExit:
.eadd	60		rts				rts
.eade					COMMAND_New:
.eade	a9 00		lda #$00			lda 	#0 							; erase the actual program.
.eae0	8d 00 22	sta $2200			sta 	BasicProgram 				; by zeroing the initial offset.
.eae3	20 f1 ea	jsr $eaf1			jsr 	COMMAND_Clear 				; clear non fixed variable, reset stack and low mem pointer
.eae6	a9 00		lda #$00			lda 	#endMemory & $FF 			; reset high memory pointer.
.eae8	8d 96 20	sta $2096			sta 	HighMemory
.eaeb	a9 80		lda #$80			lda 	#endMemory >> 8
.eaed	8d 97 20	sta $2097			sta 	HighMemory+1
.eaf0	60		rts				rts
.eaf1					COMMAND_Clear:
.eaf1	a2 00		ldx #$00			ldx 	#0	 						; clear variables @A-Z
.eaf3					_CCClearVar:
.eaf3	a9 00		lda #$00			lda 	#$00
.eaf5	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.eaf8	e8		inx				inx
.eaf9	e0 6c		cpx #$6c			cpx 	#27*4
.eafb	10 f6		bpl $eaf3			bpl 	_CCClearVar
.eafd	a9 00		lda #$00			lda 	#basicStack & $FF 			; reset BASIC stack
.eaff	85 22		sta $22				sta 	zBasicStack
.eb01	a9 02		lda #$02			lda 	#basicStack >> 8
.eb03	85 23		sta $23				sta 	zBasicStack+1
.eb05	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; now find where the program ends.
.eb07	85 24		sta $24				sta 	zLowMemory
.eb09	a9 22		lda #$22			lda 	#BasicProgram >> 8
.eb0b	85 25		sta $25				sta 	zLowMemory+1
.eb0d					_CCFindEnd:
.eb0d	a0 00		ldy #$00			ldy 	#0 							; look at next offset
.eb0f	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; if zero, reached the end.
.eb11	f0 0b		beq $eb1e			beq 	_CCFoundEnd
.eb13	18		clc				clc 								; go to next line.
.eb14	65 24		adc $24				adc 	zLowMemory
.eb16	85 24		sta $24				sta 	zLowMemory
.eb18	90 f3		bcc $eb0d			bcc 	_CCFindEnd
.eb1a	e6 25		inc $25				inc 	zLowMemory+1
.eb1c	80 ef		bra $eb0d			bra 	_CCFindEnd
.eb1e					_CCFoundEnd:
.eb1e	e6 24		inc $24				inc 	zLowMemory 					; variables etc. start after end of program.
.eb20	d0 02		bne $eb24			bne 	_CCNoCarry 					; skip over zero end offset.
.eb22	e6 25		inc $25				inc 	zLowMemory+1
.eb24					_CCNoCarry:
.eb24	60		rts				rts
.eb25					COMMAND_Old:
.eb25	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; point zLowMemory to the first line.
.eb27	85 24		sta $24				sta 	zLowMemory
.eb29	a9 22		lda #$22			lda 	#BasicProgram >> 8
.eb2b	85 25		sta $25				sta 	zLowMemory+1
.eb2d	a0 03		ldy #$03			ldy 	#3 							; look for the $00 end of line marker.
.eb2f					_COScan:
.eb2f	b1 24		lda ($24),y			lda 	(zLowMemory),y 				; look at next byte pair
.eb31	c8		iny				iny
.eb32	f0 0d		beq $eb41			beq 	_COFail 					; can't find marker, corrupted maybe ?
.eb34	c9 00		cmp #$00			cmp 	#0 							; until $00 found.
.eb36	d0 f7		bne $eb2f			bne 	_COScan
.eb38	98		tya				tya 								; Y is the new offset to the next instruction
.eb39	a0 00		ldy #$00			ldy 	#0 							; overwrite the old one
.eb3b	91 24		sta ($24),y			sta 	(zLowMemory),y
.eb3d	20 f1 ea	jsr $eaf1			jsr 	COMMAND_Clear 				; reset variables, stacks and pointers.
.eb40	60		rts				rts
.eb41					_COFail:
.eb41	20 1e e1	jsr $e11e			jsr 	ReportError
>eb44	43 61 6e 6e 6f 74 20 72				.text 	"Cannot recover program",$00
>eb4c	65 63 6f 76 65 72 20 70 72 6f 67 72 61 6d 00

;******  Return to file: basic.asm


;******  Processing file: commands/let.asm

.eb5b					COMMAND_Let:
.eb5b	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get first token not space
.eb5d	f0 58		beq $ebb7			beq 	_CLESyntax
.eb5f	c8		iny				iny
.eb60	c9 20		cmp #$20			cmp 	#32
.eb62	f0 f7		beq $eb5b			beq 	COMMAND_Let
.eb64	88		dey				dey
.eb65	c9 95		cmp #$95			cmp 	#KW_QUESTION				; check for first being indirect.
.eb67	f0 51		beq $ebba			beq 	_CLEIndirect 				; e.g. !x = 42
.eb69	c9 80		cmp #$80			cmp 	#KW_PLING
.eb6b	f0 4d		beq $ebba			beq 	_CLEIndirect
.eb6d	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.eb6f	f0 49		beq $ebba			beq 	_CLEIndirect
.eb71	a2 00		ldx #$00			ldx 	#0 							; clear evaluation stack.
.eb73	20 92 e3	jsr $e392			jsr 	VARReference 				; get a variable reference.
.eb76	a5 26		lda $26				lda 	zTemp1 						; copy into target addr
.eb78	85 2a		sta $2a				sta 	zTargetAddr
.eb7a	a5 27		lda $27				lda 	zTemp1+1
.eb7c	85 2b		sta $2b				sta 	zTargetAddr+1
.eb7e	a5 28		lda $28				lda 	zTemp1+2
.eb80	85 2c		sta $2c				sta 	zTargetAddr+2
.eb82	a5 29		lda $29				lda 	zTemp1+3
.eb84	85 2d		sta $2d				sta 	zTargetAddr+3
.eb86					_CLEGetBinLHSOp:
.eb86	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.eb88	f0 2d		beq $ebb7			beq 	_CLESyntax
.eb8a	c8		iny				iny
.eb8b	c9 20		cmp #$20			cmp 	#' '
.eb8d	f0 f7		beq $eb86			beq 	_CLEGetBinLHSOp
.eb8f	88		dey				dey
.eb90	c9 95		cmp #$95			cmp 	#KW_QUESTION 				; got some sort of reference, check
.eb92	f0 45		beq $ebd9			beq 	_CLEBinaryLHTerm  			; if that's a basis for indirection ?
.eb94	c9 80		cmp #$80			cmp 	#KW_PLING
.eb96	f0 41		beq $ebd9			beq 	_CLEBinaryLHTerm
.eb98	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.eb9a	f0 3d		beq $ebd9			beq 	_CLEBinaryLHTerm
.eb9c	a9 80		lda #$80			lda 	#KW_PLING 					; we want to do a 32 bit write.
.eb9e					_CLEWriteToAddress:
.eb9e	48		pha				pha 								; save write-type.
.eb9f	a9 92		lda #$92			lda 	#KW_EQUAL 					; check for '=' sign.
.eba1	20 23 e1	jsr $e123			jsr 	CheckNextCharacter
.eba4	20 7f e1	jsr $e17f			jsr 	EvaluateBase 				; evaluate the RHS.
.eba7	68		pla				pla
.eba8	c9 80		cmp #$80			cmp 	#KW_PLING
.ebaa	f0 6e		beq $ec1a			beq 	_CLEWordWrite
.ebac	c9 95		cmp #$95			cmp 	#KW_QUESTION
.ebae	f0 60		beq $ec10			beq 	_CLEByteWrite
.ebb0	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ebb2					_ErrorInternal:
.ebb2	d0 fe		bne $ebb2			bne 	_ErrorInternal
.ebb4	4c 36 ec	jmp $ec36			jmp 	_CLEStringWrite
.ebb7					_CLESyntax:
.ebb7	4c 19 e1	jmp $e119			jmp 	SyntaxError
.ebba					_CLEIndirect:
.ebba	48		pha				pha 								; save operator on stack
.ebbb	c8		iny				iny									; advance over cursor
.ebbc	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ebbe	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel
.ebc1	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy that as the address.
.ebc4	85 2a		sta $2a				sta 	zTargetAddr+0
.ebc6	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ebc9	85 2b		sta $2b				sta 	zTargetAddr+1
.ebcb	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ebce	85 2c		sta $2c				sta 	zTargetAddr+2
.ebd0	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ebd3	85 2d		sta $2d				sta 	zTargetAddr+3
.ebd5	68		pla				pla 								; restore operator.
.ebd6	4c 9e eb	jmp $eb9e			jmp 	_CLEWriteToAddress
.ebd9					_CLEBinaryLHTerm:
.ebd9	48		pha				pha 								; save operator on stack
.ebda	c8		iny				iny 								; skip over it.
.ebdb	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.ebdd	20 7b e1	jsr $e17b			jsr 	EvaluateAtomCurrentLevel
.ebe0	a5 2a		lda $2a				lda 	zTargetAddr 				; copy zTargetAddr to zTemp1. Technically
.ebe2	85 26		sta $26				sta 	zTemp1 						; a four byte address.....
.ebe4	a5 2b		lda $2b				lda 	zTargetAddr+1
.ebe6	85 27		sta $27				sta 	zTemp1+1 					; we only worry about 4 byte value
.ebe8	5a		phy				phy 								; save Y
.ebe9	18		clc				clc 								; add variable evaluated to (zTargetAddr)
.ebea	a0 00		ldy #$00			ldy 	#0
.ebec	b1 26		lda ($26),y			lda 	(zTemp1),y
.ebee	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.ebf1	85 2a		sta $2a				sta 	zTargetAddr+0
.ebf3	c8		iny				iny
.ebf4	b1 26		lda ($26),y			lda 	(zTemp1),y
.ebf6	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.ebf9	85 2b		sta $2b				sta 	zTargetAddr+1
.ebfb	c8		iny				iny
.ebfc	b1 26		lda ($26),y			lda 	(zTemp1),y
.ebfe	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.ec01	85 2c		sta $2c				sta 	zTargetAddr+2
.ec03	c8		iny				iny
.ec04	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec06	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.ec09	85 2d		sta $2d				sta 	zTargetAddr+3
.ec0b	7a		ply				ply 								; restore Y
.ec0c	68		pla				pla 								; restore the operator.
.ec0d	4c 9e eb	jmp $eb9e			jmp 	_CLEWriteToAddress
.ec10					_CLEByteWrite:
.ec10	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get the byte to write.
.ec13	5a		phy				phy 								; write the byte preserving Y
.ec14	a0 00		ldy #$00			ldy 	#0
.ec16	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec18	7a		ply				ply
.ec19	60		rts				rts
.ec1a					_CLEWordWrite:
.ec1a	5a		phy				phy
.ec1b	a0 00		ldy #$00			ldy 	#0
.ec1d	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ec20	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec22	c8		iny				iny
.ec23	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ec26	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec28	c8		iny				iny
.ec29	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ec2c	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec2e	c8		iny				iny
.ec2f	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ec32	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec34	7a		ply				ply 								; restore Y
.ec35	60		rts				rts
.ec36					_CLEStringWrite:
.ec36	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; source string -> zTemp1
.ec39	85 26		sta $26				sta 	zTemp1
.ec3b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ec3e	85 27		sta $27				sta 	zTemp1+1
.ec40	5a		phy				phy
.ec41	a0 00		ldy #$00			ldy 	#0
.ec43					_CLEStringCopy:
.ec43	b1 26		lda ($26),y			lda 	(zTemp1),y
.ec45	91 2a		sta ($2a),y			sta 	(zTargetAddr),y
.ec47	c9 00		cmp #$00			cmp 	#0
.ec49	f0 16		beq $ec61			beq	 	_CLEStringWritten
.ec4b	c8		iny				iny
.ec4c	d0 f5		bne $ec43			bne 	_CLEStringCopy
.ec4e	20 1e e1	jsr $e11e			jsr 	ReportError
>ec51	42 61 64 20 73 74 72 69				.text 	"Bad string copy",$00
>ec59	6e 67 20 63 6f 70 79 00
.ec61					_CLEStringWritten:
.ec61	7a		ply				ply
.ec62	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/print.asm

.ec63					COMMAND_Print:
.ec63	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; look at next character
.ec65	f0 15		beq $ec7c			beq 	_CPRExitNL 					; zero end of line.
.ec67	c8		iny				iny
.ec68	c9 20		cmp #$20			cmp 	#' '
.ec6a	f0 f7		beq $ec63			beq 	COMMAND_Print
.ec6c	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; colon, end of line
.ec6e	f0 0c		beq $ec7c			beq 	_CPRExitNL
.ec70	c9 8e		cmp #$8e			cmp 	#KW_SEMICOLON 				; semicolon ?
.ec72	d0 0e		bne $ec82			bne 	_CPRNotSemicolon
.ec74	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look at next character, is ; last thing
.ec76	f0 09		beq $ec81			beq 	_CPRExit
.ec78	c9 8d		cmp #$8d			cmp 	#KW_COLON
.ec7a	d0 e7		bne $ec63			bne 	COMMAND_Print 				; if not, just go back round again
.ec7c					_CPRExitNL:
.ec7c	a9 0d		lda #$0d			lda 	#13
.ec7e	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.ec81					_CPRExit:
.ec81	60		rts				rts
.ec82					_CPRNotSemicolon:
.ec82	c9 86		cmp #$86			cmp 	#KW_SQUOTE 					; single quote
.ec84	f0 2b		beq $ecb1			beq 	_CPRNewLine 				; new line
.ec86	c9 81		cmp #$81			cmp 	#KW_DQUOTE 					; double quote
.ec88	d0 2e		bne $ecb8			bne 	_CPRNotQuote
.ec8a					_CPRPrintText:
.ec8a	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next character
.ec8c	f0 0a		beq $ec98			beq 	_CPRError 					; if zero no closing quote
.ec8e	c8		iny				iny
.ec8f	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; double quote
.ec91	f0 d0		beq $ec63			beq 	COMMAND_Print 				; go round again.
.ec93	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter 			; print and do next character
.ec96	80 f2		bra $ec8a			bra 	_CPRPrintText
.ec98					_CPRError:
.ec98	20 1e e1	jsr $e11e			jsr 	ReportError
>ec9b	4d 69 73 73 69 6e 67 20				.text 	"Missing closing quote",$00
>eca3	63 6c 6f 73 69 6e 67 20 71 75 6f 74 65 00
.ecb1					_CPRNewLine:
.ecb1	a9 0d		lda #$0d			lda 	#13
.ecb3	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.ecb6	80 ab		bra $ec63			bra 	COMMAND_Print
.ecb8					_CPRNotQuote:
.ecb8	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; not a string ?
.ecba	d0 11		bne $eccd			bne 	_CPRNumber 					; print a number.
.ecbc	20 7f e1	jsr $e17f			jsr 	EvaluateBase 				; this is the address to print.
.ecbf	5a		phy				phy
.ecc0	bc 01 04	ldy $0401,x			ldy 	evalStack+1,x 				; get the address
.ecc3	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ecc6	aa		tax				tax
.ecc7	20 1f e4	jsr $e41f			jsr 	SIOPrintString
.ecca	7a		ply				ply
.eccb	80 96		bra $ec63			bra 	COMMAND_Print
.eccd					_CPRNumber:
.eccd	c9 85		cmp #$85			cmp 	#KW_AMPERSAND
.eccf	f0 17		beq $ece8			beq 	_CPRHexadecimal
.ecd1	88		dey				dey 								; must be 1st char of expr
.ecd2	20 7f e1	jsr $e17f			jsr 	EvaluateBase 				; this is the value to print.
.ecd5	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; is it -ve
.ecd8	10 08		bpl $ece2			bpl 	_CPRIsPositive
.ecda	20 90 e8	jsr $e890			jsr 	BFUNC_NegateAlways 			; negate it
.ecdd	a9 2d		lda #$2d			lda 	#"-" 						; print - it.
.ecdf	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.ece2					_CPRIsPositive:
.ece2	20 25 ed	jsr $ed25			jsr 	CPRPrintInteger 			; Print string at current eval stack, base 10.
.ece5	4c 63 ec	jmp $ec63			jmp 	COMMAND_Print
.ece8					_CPRHexadecimal:
.ece8	20 7f e1	jsr $e17f			jsr 	EvaluateBase 				; this is the value to print.
.eceb	20 f1 ec	jsr $ecf1			jsr 	_CPRPrintRecHex 			; hex version of it.
.ecee	4c 63 ec	jmp $ec63			jmp 	COMMAND_Print
.ecf1					_CPRPrintRecHex:
.ecf1	ad 00 04	lda $0400			lda 	evalStack+0 				; get the remainder
.ecf4	29 0f		and #$0f			and 	#15 						; and put on stack
.ecf6	48		pha				pha
.ecf7	a2 04		ldx #$04			ldx 	#4 							; divide by 16
.ecf9					_CPRShiftDiv:
.ecf9	4e 03 04	lsr $0403			lsr 	evalStack+3
.ecfc	6e 02 04	ror $0402			ror 	evalStack+2
.ecff	6e 01 04	ror $0401			ror		evalStack+1
.ed02	6e 00 04	ror $0400			ror		evalStack+0
.ed05	ca		dex				dex
.ed06	d0 f1		bne $ecf9			bne 	_CPRShiftDiv
.ed08	ad 00 04	lda $0400			lda 	evalStack+0 				; any more to print
.ed0b	0d 01 04	ora $0401			ora 	evalStack+1
.ed0e	0d 02 04	ora $0402			ora 	evalStack+2
.ed11	0d 03 04	ora $0403			ora 	evalStack+3
.ed14	f0 03		beq $ed19			beq 	_CPRNoHexRec
.ed16	20 f1 ec	jsr $ecf1			jsr 	_CPRPrintRecHex
.ed19					_CPRNoHexRec:
.ed19	68		pla				pla 								; original remainder.
.ed1a	c9 0a		cmp #$0a			cmp 	#10
.ed1c	90 02		bcc $ed20			bcc		_CPRNH2
.ed1e	69 06		adc #$06			adc 	#6
.ed20	69 30		adc #$30	_CPRNH2:adc 	#48
.ed22	4c 4c e4	jmp $e44c			jmp 	SIOPrintCharacter
.ed25					CPRPrintInteger:
.ed25	48		pha				pha 								; save on stack.
.ed26	da		phx				phx
.ed27	5a		phy				phy
.ed28	20 2f ed	jsr $ed2f			jsr 	_CPRPrintRec 				; recursive print call
.ed2b	7a		ply				ply
.ed2c	fa		plx				plx
.ed2d	68		pla				pla
.ed2e	60		rts				rts
.ed2f					_CPRPrintRec:
.ed2f	a9 0a		lda #$0a			lda 	#10 						; save base
.ed31	9d 04 04	sta $0404,x			sta 	evalStack+4,x 				; put in next slot.
.ed34	a9 00		lda #$00			lda 	#0 							; clear upper 3 bytes
.ed36	9d 05 04	sta $0405,x			sta 	evalStack+5,x
.ed39	9d 06 04	sta $0406,x			sta 	evalStack+6,x
.ed3c	9d 07 04	sta $0407,x			sta 	evalStack+7,x
.ed3f	20 ee e7	jsr $e7ee			jsr 	BFUNC_Divide 				; divide by 10.
.ed42	ad 98 20	lda $2098			lda 	Temp1+0		 				; push remainder on stack
.ed45	48		pha				pha
.ed46	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; is the result #0
.ed49	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.ed4c	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.ed4f	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.ed52	f0 03		beq $ed57			beq 	_CPRNoRecurse
.ed54	20 2f ed	jsr $ed2f			jsr 	_CPRPrintRec 				; recursive print.
.ed57					_CPRNoRecurse:
.ed57	68		pla				pla
.ed58	09 30		ora #$30			ora 	#"0"
.ed5a	4c 4c e4	jmp $e44c			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: commands/list.asm

.ed5d					COMMAND_List:
.ed5d	5a		phy				phy
.ed5e	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set target address
.ed60	85 2a		sta $2a				sta 	zTargetAddr
.ed62	a9 22		lda #$22			lda 	#BasicProgram >> 8
.ed64	85 2b		sta $2b				sta 	zTargetAddr+1
.ed66	a9 10		lda #$10			lda 	#16 						; print 16 lines
.ed68	85 2c		sta $2c				sta 	zTargetAddr+2
.ed6a					_CLLILoop:
.ed6a	20 84 ed	jsr $ed84			jsr 	CLIOneLine 					; list one line.
.ed6d	a0 00		ldy #$00			ldy 	#0 							; advance pointer to next.
.ed6f	18		clc				clc
.ed70	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ed72	65 2a		adc $2a				adc 	zTargetAddr
.ed74	85 2a		sta $2a				sta 	zTargetAddr
.ed76	90 02		bcc $ed7a			bcc 	_CLLINoCarry
.ed78	e6 2b		inc $2b				inc 	zTargetAddr+1
.ed7a					_CLLINoCarry:
.ed7a	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y 			; if that offset is zero exit
.ed7c	f0 04		beq $ed82			beq 	_CLLIExit
.ed7e	c6 2c		dec $2c				dec 	zTargetAddr+2 				; done all of them ?
.ed80	d0 e8		bne $ed6a			bne 	_CLLILoop
.ed82					_CLLIExit:
.ed82	7a		ply				ply
.ed83	60		rts				rts
.ed84					CLIOneLine:
.ed84	a0 01		ldy #$01			ldy 	#1 							; get line#
.ed86	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ed88	8d 00 04	sta $0400			sta 	evalStack+0
.ed8b	c8		iny				iny
.ed8c	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.ed8e	8d 01 04	sta $0401			sta 	evalStack+1
.ed91	a9 00		lda #$00			lda 	#0
.ed93	aa		tax				tax
.ed94	8d 02 04	sta $0402			sta 	evalStack+2
.ed97	8d 03 04	sta $0403			sta 	evalStack+3
.ed9a	20 25 ed	jsr $ed25			jsr 	CPRPrintInteger 			; print line#
.ed9d	a9 20		lda #$20			lda 	#32
.ed9f	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.eda2	a0 03		ldy #$03			ldy 	#3 							; where to start
.eda4					_CLIOutput:
.eda4	b1 2a		lda ($2a),y			lda 	(zTargetAddr),y
.eda6	c8		iny				iny
.eda7	09 00		ora #$00			ora 	#0
.eda9	f0 0c		beq $edb7			beq 	_CLIExit
.edab	10 05		bpl $edb2			bpl		_CLISingle
.edad	20 bd ed	jsr $edbd			jsr 	CLIPrintToken
.edb0	80 f2		bra $eda4			bra 	_CLIOutput
.edb2					_CLISingle:
.edb2	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.edb5	80 ed		bra $eda4			bra 	_CLIOutput
.edb7					_CLIExit:
.edb7	a9 0d		lda #$0d			lda 	#13 						; new line.
.edb9	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.edbc	60		rts				rts
.edbd					CLIPrintToken:
.edbd	5a		phy				phy 								; save Y
.edbe	29 7f		and #$7f			and 	#$7F 						; 7 bit token -> Y
.edc0	a8		tay				tay
.edc1	a2 00		ldx #$00			ldx 	#0 							; offset into token text table.
.edc3					_CLIFind:
.edc3	88		dey				dey 								; decrement counter
.edc4	30 09		bmi $edcf			bmi 	_CLIFoundToken 				; if -ve found the token.
.edc6					_CLISkip:
.edc6	bd 68 e0	lda $e068,x			lda 	TokenText,x
.edc9	e8		inx				inx
.edca	0a		asl a				asl		a
.edcb	90 f9		bcc $edc6			bcc 	_CLISkip
.edcd	80 f4		bra $edc3			bra 	_CLIFind
.edcf					_CLIFoundToken:
.edcf	7a		ply				ply
.edd0					_CLIPrintIt:
.edd0	bd 68 e0	lda $e068,x			lda 	TokenText,x
.edd3	e8		inx				inx
.edd4	48		pha				pha
.edd5	29 7f		and #$7f			and 	#$7F
.edd7	20 4c e4	jsr $e44c			jsr 	SIOPrintCharacter
.edda	68		pla				pla
.eddb	0a		asl a				asl 	a
.eddc	90 f2		bcc $edd0			bcc 	_CLIPrintIt
.edde	60		rts				rts

;******  Return to file: basic.asm

.eddf					Start:
.eddf	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.ede1	9a		txs			txs
.ede2	20 0e e4	jsr $e40e			jsr 	SIOInitialise 				; initialise the I/O system.
.ede5	ad c0 5b	lda $5bc0			lda 	StartBehaviour 				; what to do ?
.ede8	c9 43		cmp #$43			cmp 	#'C'						; execute from command line
.edea	f0 14		beq $ee00			beq		CommandLine
.edec	c9 52		cmp #$52			cmp 	#'R' 						; run program in memory.
.edee	f0 07		beq $edf7			beq	 	RunProgram
.edf0	c9 54		cmp #$54			cmp 	#'T'						; tokenise test
.edf2	f0 15		beq $ee09			beq 	TokeniseExec
.edf4	4c 19 e1	jmp $e119			jmp		SyntaxError
.edf7					RunProgram:
.edf7	20 de ea	jsr $eade			jsr 	COMMAND_New 				; do a new
.edfa	20 25 eb	jsr $eb25			jsr 	COMMAND_Old 				; get back the old program as we're deving.
.edfd	4c 44 ea	jmp $ea44			jmp 	COMMAND_Run
.ee00					CommandLine:
.ee00	20 de ea	jsr $eade			jsr 	Command_New
.ee03					WarmStart:
.ee03	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.ee05	9a		txs			txs
.ee06	4c 03 ee	jmp $ee03			jmp 	WarmStart
.ee09					TokeniseExec:
.ee09	a9 00		lda #$00			lda 	#BasicCode & $FF 			; if so tokenise whatever I've put in the basic code
.ee0b	85 26		sta $26				sta 	zTemp1 						; area
.ee0d	a9 22		lda #$22			lda 	#BasicCode >> 8
.ee0f	85 27		sta $27				sta 	zTemp1+1
.ee11	20 f7 e5	jsr $e5f7			jsr 	TokeniseString
>ee14	02						.byte 	2
.2200					BasicCode:

;******  Processing file: include/basic_generated.inc

>2200	20 01 00 97 20 8b 31 33			.byte $20,$01,$00,$97,$20,$8b,$31,$33,$37,$8a,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$92,$31,$30,$33,$38,$30,$31,$35,$34,$31,$32,$00,$23,$02,$00,$97,$20,$8b,$31,$33,$37,$89,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$92,$8b,$31,$34,$32,$32,$30,$38,$31,$33,$30,$32,$31,$33,$00,$17,$03,$00,$97,$20,$8b,$31,$33,$37,$8c,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$92,$30,$00,$18,$04,$00,$97,$20,$31,$33,$37,$84,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$92,$31,$33,$37,$00,$22,$05,$00,$97,$20,$87,$8b,$31,$33,$37,$85,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$31,$30,$33,$38,$30,$31,$35,$35,$34,$31,$00,$23,$06,$00,$97,$20,$87,$8b,$31,$33,$37,$96,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$8b,$31,$30,$33,$38,$30,$31,$35,$36,$37,$30,$00,$1c,$07,$00,$97,$20,$87,$8b,$31,$33,$37,$b2,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$8b,$31,$32,$39,$00,$19,$08,$00,$97,$20,$87,$8b,$31,$33,$37,$92,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$30,$00,$1a,$09,$00,$97,$20,$87,$8b,$31,$33,$37,$90,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$8b,$31,$00,$1a,$0a,$00,$97,$20,$87,$8b,$31,$33,$37,$91,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$8b,$31,$00,$1a,$0b,$00,$97,$20,$87,$8b,$31,$33,$37,$8f,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$8b,$31,$00,$19,$0c,$00,$97,$20,$87,$8b,$31,$33,$37,$94,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$30,$00,$19,$0d,$00,$97,$20,$87,$8b,$31,$33,$37,$93,$31,$30,$33,$38,$30,$31,$35,$35,$34,$39,$88,$92,$30,$00,$18,$0e,$00,$97,$20,$87,$81,$5f,$65,$5c,$81,$b3,$81,$6a,$57,$4c,$81,$88,$20,$92,$20,$8b,$31,$00,$1d,$0f,$00,$97,$20,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$8a,$30,$92,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$00,$14,$10,$00,$97,$20,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$89,$30,$92,$30,$00,$16,$11,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$85,$30,$88,$92,$30,$00,$1f,$12,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$96,$30,$88,$92,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$00,$1f,$13,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$b2,$30,$88,$92,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$00,$16,$14,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$92,$30,$88,$92,$30,$00,$17,$15,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$90,$30,$88,$92,$8b,$31,$00,$17,$16,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$91,$30,$88,$92,$8b,$31,$00,$17,$17,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$8f,$30,$88,$92,$8b,$31,$00,$16,$18,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$94,$30,$88,$92,$30,$00,$16,$19,$00,$97,$20,$87,$8b,$39,$37,$31,$39,$37,$39,$38,$38,$33,$93,$30,$88,$92,$30,$00,$17,$1a,$00,$97,$20,$87,$81,$68,$2d,$3c,$81,$b3,$81,$3e,$33,$3c,$81,$88,$20,$92,$20,$31,$00,$25,$1b,$00,$97,$20,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$8a,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$92,$8b,$31,$38,$37,$35,$31,$36,$34,$31,$32,$00,$23,$1c,$00,$97,$20,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$8b,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$92,$38,$30,$38,$33,$34,$36,$37,$36,$00,$1c,$1d,$00,$97,$20,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$8c,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$92,$30,$00,$21,$1e,$00,$97,$20,$35,$33,$33,$34,$30,$38,$36,$38,$84,$31,$33,$34,$31,$37,$35,$35,$34,$34,$92,$35,$33,$33,$34,$30,$38,$36,$38,$00,$27,$1f,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$85,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$8b,$31,$33,$34,$32,$31,$36,$36,$39,$36,$00,$25,$20,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$96,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$38,$30,$39,$31,$36,$39,$38,$30,$00,$26,$21,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$b2,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$8b,$35,$33,$32,$39,$39,$37,$31,$36,$00,$1e,$22,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$92,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$30,$00,$1f,$23,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$90,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$8b,$31,$00,$1e,$24,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$91,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$30,$00,$1e,$25,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$8f,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$30,$00,$1f,$26,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$94,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$8b,$31,$00,$1f,$27,$00,$97,$20,$87,$8b,$35,$33,$33,$34,$30,$38,$36,$38,$93,$8b,$31,$33,$34,$31,$37,$35,$35,$34,$34,$88,$92,$8b,$31,$00,$17,$28,$00,$97,$20,$87,$81,$5c,$36,$34,$81,$b3,$81,$3d,$6f,$40,$81,$88,$20,$92,$20,$31,$00,$1d,$29,$00,$97,$20,$30,$8a,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$92,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$00,$1c,$2a,$00,$97,$20,$30,$8b,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$92,$32,$32,$37,$34,$31,$31,$37,$39,$38,$00,$14,$2b,$00,$97,$20,$30,$89,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$92,$30,$00,$14,$2c,$00,$97,$20,$30,$8c,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$92,$30,$00,$13,$2d,$00,$97,$20,$30,$84,$32,$32,$37,$34,$31,$31,$37,$39,$38,$92,$30,$00,$16,$2e,$00,$97,$20,$87,$30,$85,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$30,$00,$1f,$2f,$00,$97,$20,$87,$30,$96,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$00,$1f,$30,$00,$97,$20,$87,$30,$b2,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$00,$16,$31,$00,$97,$20,$87,$30,$92,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$30,$00,$17,$32,$00,$97,$20,$87,$30,$90,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$8b,$31,$00,$16,$33,$00,$97,$20,$87,$30,$91,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$30,$00,$16,$34,$00,$97,$20,$87,$30,$8f,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$30,$00,$17,$35,$00,$97,$20,$87,$30,$94,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$8b,$31,$00,$17,$36,$00,$97,$20,$87,$30,$93,$8b,$32,$32,$37,$34,$31,$31,$37,$39,$38,$88,$92,$8b,$31,$00,$17,$37,$00,$97,$20,$87,$81,$53,$33,$43,$81,$b3,$81,$44,$6d,$6e,$81,$88,$20,$92,$20,$31,$00,$12,$38,$00,$97,$20,$37,$35,$34,$8a,$38,$38,$36,$92,$31,$36,$34,$30,$00,$14,$39,$00,$97,$20,$37,$35,$34,$89,$38,$38,$36,$92,$36,$36,$38,$30,$34,$34,$00,$0f,$3a,$00,$97,$20,$37,$35,$34,$8c,$38,$38,$36,$92,$30,$00,$11,$3b,$00,$97,$20,$37,$35,$34,$84,$38,$38,$36,$92,$37,$35,$34,$00,$13,$3c,$00,$97,$20,$87,$37,$35,$34,$85,$38,$38,$36,$88,$92,$36,$32,$36,$00,$13,$3d,$00,$97,$20,$87,$37,$35,$34,$96,$38,$38,$36,$88,$92,$33,$38,$38,$00,$14,$3e,$00,$97,$20,$87,$37,$35,$34,$b2,$38,$38,$36,$88,$92,$31,$30,$31,$34,$00,$11,$3f,$00,$97,$20,$87,$37,$35,$34,$92,$38,$38,$36,$88,$92,$30,$00,$12,$40,$00,$97,$20,$87,$37,$35,$34,$90,$38,$38,$36,$88,$92,$8b,$31,$00,$12,$41,$00,$97,$20,$87,$37,$35,$34,$91,$38,$38,$36,$88,$92,$8b,$31,$00,$12,$42,$00,$97,$20,$87,$37,$35,$34,$8f,$38,$38,$36,$88,$92,$8b,$31,$00,$11,$43,$00,$97,$20,$87,$37,$35,$34,$94,$38,$38,$36,$88,$92,$30,$00,$11,$44,$00,$97,$20,$87,$37,$35,$34,$93,$38,$38,$36,$88,$92,$30,$00,$17,$45,$00,$97,$20,$87,$81,$42,$4f,$60,$81,$b3,$81,$30,$66,$2e,$81,$88,$20,$92,$20,$31,$00,$1e,$46,$00,$97,$20,$37,$32,$33,$32,$36,$33,$30,$32,$31,$8a,$8b,$33,$38,$32,$92,$37,$32,$33,$32,$36,$32,$36,$33,$39,$00,$1e,$47,$00,$97,$20,$37,$32,$33,$32,$36,$33,$30,$32,$31,$8b,$8b,$33,$38,$32,$92,$37,$32,$33,$32,$36,$33,$34,$30,$33,$00,$22,$48,$00,$97,$20,$37,$32,$33,$32,$36,$33,$30,$32,$31,$89,$8b,$33,$38,$32,$92,$8b,$32,$37,$36,$32,$38,$36,$34,$37,$34,$30,$32,$32,$00,$1d,$49,$00,$97,$20,$37,$32,$33,$32,$36,$33,$30,$32,$31,$8c,$8b,$33,$38,$32,$92,$8b,$31,$38,$39,$33,$33,$35,$38,$00,$17,$4a,$00,$97,$20,$37,$32,$33,$32,$36,$33,$30,$32,$31,$84,$33,$38,$32,$92,$32,$36,$35,$00,$20,$4b,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$85,$8b,$33,$38,$32,$88,$92,$37,$32,$33,$32,$36,$32,$39,$37,$36,$00,$21,$4c,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$96,$8b,$33,$38,$32,$88,$92,$8b,$37,$32,$33,$32,$36,$33,$33,$31,$33,$00,$1b,$4d,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$b2,$8b,$33,$38,$32,$88,$92,$8b,$33,$33,$37,$00,$18,$4e,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$92,$8b,$33,$38,$32,$88,$92,$30,$00,$19,$4f,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$90,$8b,$33,$38,$32,$88,$92,$8b,$31,$00,$18,$50,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$91,$8b,$33,$38,$32,$88,$92,$30,$00,$18,$51,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$8f,$8b,$33,$38,$32,$88,$92,$30,$00,$19,$52,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$94,$8b,$33,$38,$32,$88,$92,$8b,$31,$00,$19,$53,$00,$97,$20,$87,$37,$32,$33,$32,$36,$33,$30,$32,$31,$93,$8b,$33,$38,$32,$88,$92,$8b,$31,$00,$18,$54,$00,$97,$20,$87,$81,$42,$6a,$77,$81,$b3,$81,$6a,$75,$55,$81,$88,$20,$92,$20,$8b,$31,$00,$11,$55,$00,$97,$20,$8b,$39,$39,$39,$8a,$30,$92,$8b,$39,$39,$39,$00,$0e,$56,$00,$97,$20,$8b,$39,$39,$39,$89,$30,$92,$30,$00,$10,$57,$00,$97,$20,$87,$8b,$39,$39,$39,$85,$30,$88,$92,$30,$00,$13,$58,$00,$97,$20,$87,$8b,$39,$39,$39,$96,$30,$88,$92,$8b,$39,$39,$39,$00,$13,$59,$00,$97,$20,$87,$8b,$39,$39,$39,$b2,$30,$88,$92,$8b,$39,$39,$39,$00,$10,$5a,$00,$97,$20,$87,$8b,$39,$39,$39,$92,$30,$88,$92,$30,$00,$11,$5b,$00,$97,$20,$87,$8b,$39,$39,$39,$90,$30,$88,$92,$8b,$31,$00,$11,$5c,$00,$97,$20,$87,$8b,$39,$39,$39,$91,$30,$88,$92,$8b,$31,$00,$11,$5d,$00,$97,$20,$87,$8b,$39,$39,$39,$8f,$30,$88,$92,$8b,$31,$00,$10,$5e,$00,$97,$20,$87,$8b,$39,$39,$39,$94,$30,$88,$92,$30,$00,$10,$5f,$00,$97,$20,$87,$8b,$39,$39,$39,$93,$30,$88,$92,$30,$00,$17,$60,$00,$97,$20,$87,$81,$30,$48,$5c,$81,$b3,$81,$2a,$45,$3c,$81,$88,$20,$92,$20,$31,$00,$1b,$61,$00,$97,$20,$30,$8a,$35,$34,$38,$32,$34,$36,$33,$31,$38,$92,$35,$34,$38,$32,$34,$36,$33,$31,$38,$00,$13,$62,$00,$97,$20,$30,$89,$35,$34,$38,$32,$34,$36,$33,$31,$38,$92,$30,$00,$13,$63,$00,$97,$20,$30,$8c,$35,$34,$38,$32,$34,$36,$33,$31,$38,$92,$30,$00,$13,$64,$00,$97,$20,$30,$84,$35,$34,$38,$32,$34,$36,$33,$31,$38,$92,$30,$00,$15,$65,$00,$97,$20,$87,$30,$85,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$30,$00,$1d,$66,$00,$97,$20,$87,$30,$96,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$35,$34,$38,$32,$34,$36,$33,$31,$38,$00,$1d,$67,$00,$97,$20,$87,$30,$b2,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$35,$34,$38,$32,$34,$36,$33,$31,$38,$00,$15,$68,$00,$97,$20,$87,$30,$92,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$30,$00,$16,$69,$00,$97,$20,$87,$30,$90,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$8b,$31,$00,$16,$6a,$00,$97,$20,$87,$30,$91,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$8b,$31,$00,$16,$6b,$00,$97,$20,$87,$30,$8f,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$8b,$31,$00,$15,$6c,$00,$97,$20,$87,$30,$94,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$30,$00,$15,$6d,$00,$97,$20,$87,$30,$93,$35,$34,$38,$32,$34,$36,$33,$31,$38,$88,$92,$30,$00,$18,$6e,$00,$97,$20,$87,$81,$30,$6e,$41,$81,$b3,$81,$4e,$5d,$42,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$6f,$00,$97,$20,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$8a,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$92,$8b,$36,$35,$32,$39,$37,$39,$38,$32,$30,$00,$1d,$70,$00,$97,$20,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$8c,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$92,$31,$00,$23,$71,$00,$97,$20,$34,$32,$35,$36,$36,$36,$31,$31,$39,$84,$32,$32,$37,$33,$31,$33,$37,$30,$31,$92,$31,$39,$38,$33,$35,$32,$34,$31,$38,$00,$28,$72,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$85,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$8b,$35,$30,$31,$31,$39,$38,$34,$33,$39,$00,$27,$73,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$96,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$33,$34,$39,$34,$31,$37,$30,$35,$38,$00,$28,$74,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$b2,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$8b,$31,$35,$31,$37,$38,$31,$33,$38,$31,$00,$1f,$75,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$92,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$30,$00,$20,$76,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$90,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$8b,$31,$00,$20,$77,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$91,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$8b,$31,$00,$20,$78,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$8f,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$8b,$31,$00,$1f,$79,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$94,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$30,$00,$1f,$7a,$00,$97,$20,$87,$8b,$34,$32,$35,$36,$36,$36,$31,$31,$39,$93,$8b,$32,$32,$37,$33,$31,$33,$37,$30,$31,$88,$92,$30,$00,$18,$7b,$00,$97,$20,$87,$81,$51,$3d,$4f,$81,$b3,$81,$69,$59,$72,$81,$88,$20,$92,$20,$8b,$31,$00,$0b,$7c,$00,$97,$20,$33,$8a,$33,$92,$36,$00,$0b,$7d,$00,$97,$20,$33,$89,$33,$92,$39,$00,$0b,$7e,$00,$97,$20,$33,$8c,$33,$92,$31,$00,$0b,$7f,$00,$97,$20,$33,$84,$33,$92,$30,$00,$0d,$80,$00,$97,$20,$87,$33,$85,$33,$88,$92,$33,$00,$0d,$81,$00,$97,$20,$87,$33,$96,$33,$88,$92,$30,$00,$0d,$82,$00,$97,$20,$87,$33,$b2,$33,$88,$92,$33,$00,$0e,$83,$00,$97,$20,$87,$33,$92,$33,$88,$92,$8b,$31,$00,$0d,$84,$00,$97,$20,$87,$33,$90,$33,$88,$92,$30,$00,$0d,$85,$00,$97,$20,$87,$33,$91,$33,$88,$92,$30,$00,$0e,$86,$00,$97,$20,$87,$33,$8f,$33,$88,$92,$8b,$31,$00,$0d,$87,$00,$97,$20,$87,$33,$94,$33,$88,$92,$30,$00,$0e,$88,$00,$97,$20,$87,$33,$93,$33,$88,$92,$8b,$31,$00,$17,$89,$00,$97,$20,$87,$81,$7c,$3e,$35,$81,$b3,$81,$54,$6f,$6d,$81,$88,$20,$92,$20,$31,$00,$23,$8a,$00,$97,$20,$34,$34,$31,$34,$38,$36,$36,$35,$35,$8a,$33,$31,$39,$34,$36,$34,$38,$31,$35,$92,$37,$36,$30,$39,$35,$31,$34,$37,$30,$00,$23,$8b,$00,$97,$20,$34,$34,$31,$34,$38,$36,$36,$35,$35,$8b,$33,$31,$39,$34,$36,$34,$38,$31,$35,$92,$31,$32,$32,$30,$32,$31,$38,$34,$30,$00,$1b,$8c,$00,$97,$20,$34,$34,$31,$34,$38,$36,$36,$35,$35,$8c,$33,$31,$39,$34,$36,$34,$38,$31,$35,$92,$31,$00,$23,$8d,$00,$97,$20,$34,$34,$31,$34,$38,$36,$36,$35,$35,$84,$33,$31,$39,$34,$36,$34,$38,$31,$35,$92,$31,$32,$32,$30,$32,$31,$38,$34,$30,$00,$25,$8e,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$85,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$33,$30,$32,$30,$32,$33,$39,$38,$33,$00,$25,$8f,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$96,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$31,$35,$36,$39,$30,$33,$35,$30,$34,$00,$25,$90,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$b2,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$34,$35,$38,$39,$32,$37,$34,$38,$37,$00,$1d,$91,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$92,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$30,$00,$1e,$92,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$90,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$8b,$31,$00,$1d,$93,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$91,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$30,$00,$1d,$94,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$8f,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$30,$00,$1e,$95,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$94,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$8b,$31,$00,$1e,$96,$00,$97,$20,$87,$34,$34,$31,$34,$38,$36,$36,$35,$35,$93,$33,$31,$39,$34,$36,$34,$38,$31,$35,$88,$92,$8b,$31,$00,$17,$97,$00,$97,$20,$87,$81,$6a,$69,$3f,$81,$b3,$81,$27,$44,$44,$81,$88,$20,$92,$20,$31,$00,$0d,$98,$00,$97,$20,$35,$8a,$35,$33,$92,$35,$38,$00,$0e,$99,$00,$97,$20,$35,$89,$35,$33,$92,$32,$36,$35,$00,$0c,$9a,$00,$97,$20,$35,$8c,$35,$33,$92,$30,$00,$0c,$9b,$00,$97,$20,$35,$84,$35,$33,$92,$35,$00,$0e,$9c,$00,$97,$20,$87,$35,$85,$35,$33,$88,$92,$35,$00,$0f,$9d,$00,$97,$20,$87,$35,$96,$35,$33,$88,$92,$34,$38,$00,$0f,$9e,$00,$97,$20,$87,$35,$b2,$35,$33,$88,$92,$35,$33,$00,$0e,$9f,$00,$97,$20,$87,$35,$92,$35,$33,$88,$92,$30,$00,$0f,$a0,$00,$97,$20,$87,$35,$90,$35,$33,$88,$92,$8b,$31,$00,$0f,$a1,$00,$97,$20,$87,$35,$91,$35,$33,$88,$92,$8b,$31,$00,$0f,$a2,$00,$97,$20,$87,$35,$8f,$35,$33,$88,$92,$8b,$31,$00,$0e,$a3,$00,$97,$20,$87,$35,$94,$35,$33,$88,$92,$30,$00,$0e,$a4,$00,$97,$20,$87,$35,$93,$35,$33,$88,$92,$30,$00,$18,$a5,$00,$97,$20,$87,$81,$36,$2c,$7a,$81,$b3,$81,$46,$65,$28,$81,$88,$20,$92,$20,$8b,$31,$00,$20,$a6,$00,$97,$20,$8b,$36,$33,$30,$8a,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$92,$8b,$36,$32,$32,$36,$32,$35,$31,$35,$32,$00,$1f,$a7,$00,$97,$20,$8b,$36,$33,$30,$8b,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$92,$36,$32,$32,$36,$32,$33,$38,$39,$32,$00,$17,$a8,$00,$97,$20,$8b,$36,$33,$30,$8c,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$92,$30,$00,$17,$a9,$00,$97,$20,$36,$33,$30,$84,$36,$32,$32,$36,$32,$34,$35,$32,$32,$92,$36,$33,$30,$00,$22,$aa,$00,$97,$20,$87,$8b,$36,$33,$30,$85,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$8b,$36,$32,$32,$36,$32,$34,$36,$33,$38,$00,$21,$ab,$00,$97,$20,$87,$8b,$36,$33,$30,$96,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$36,$32,$32,$36,$32,$34,$31,$32,$34,$00,$1c,$ac,$00,$97,$20,$87,$8b,$36,$33,$30,$b2,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$8b,$35,$31,$34,$00,$19,$ad,$00,$97,$20,$87,$8b,$36,$33,$30,$92,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$30,$00,$1a,$ae,$00,$97,$20,$87,$8b,$36,$33,$30,$90,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$8b,$31,$00,$19,$af,$00,$97,$20,$87,$8b,$36,$33,$30,$91,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$30,$00,$19,$b0,$00,$97,$20,$87,$8b,$36,$33,$30,$8f,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$30,$00,$1a,$b1,$00,$97,$20,$87,$8b,$36,$33,$30,$94,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$8b,$31,$00,$1a,$b2,$00,$97,$20,$87,$8b,$36,$33,$30,$93,$8b,$36,$32,$32,$36,$32,$34,$35,$32,$32,$88,$92,$8b,$31,$00,$18,$b3,$00,$97,$20,$87,$81,$45,$60,$47,$81,$b3,$81,$4a,$28,$2e,$81,$88,$20,$92,$20,$8b,$31,$00,$11,$b4,$00,$97,$20,$8b,$39,$39,$33,$8a,$30,$92,$8b,$39,$39,$33,$00,$0e,$b5,$00,$97,$20,$8b,$39,$39,$33,$89,$30,$92,$30,$00,$10,$b6,$00,$97,$20,$87,$8b,$39,$39,$33,$85,$30,$88,$92,$30,$00,$13,$b7,$00,$97,$20,$87,$8b,$39,$39,$33,$96,$30,$88,$92,$8b,$39,$39,$33,$00,$13,$b8,$00,$97,$20,$87,$8b,$39,$39,$33,$b2,$30,$88,$92,$8b,$39,$39,$33,$00,$10,$b9,$00,$97,$20,$87,$8b,$39,$39,$33,$92,$30,$88,$92,$30,$00,$11,$ba,$00,$97,$20,$87,$8b,$39,$39,$33,$90,$30,$88,$92,$8b,$31,$00,$11,$bb,$00,$97,$20,$87,$8b,$39,$39,$33,$91,$30,$88,$92,$8b,$31,$00,$11,$bc,$00,$97,$20,$87,$8b,$39,$39,$33,$8f,$30,$88,$92,$8b,$31,$00,$10,$bd,$00,$97,$20,$87,$8b,$39,$39,$33,$94,$30,$88,$92,$30,$00,$10,$be,$00,$97,$20,$87,$8b,$39,$39,$33,$93,$30,$88,$92,$30,$00,$18,$bf,$00,$97,$20,$87,$81,$48,$6a,$39,$81,$b3,$81,$72,$73,$32,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$c0,$00,$97,$20,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$8a,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$92,$8b,$37,$35,$39,$37,$30,$33,$34,$33,$34,$00,$25,$c1,$00,$97,$20,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$8b,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$92,$34,$36,$30,$34,$31,$30,$35,$30,$34,$00,$1d,$c2,$00,$97,$20,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$8c,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$92,$30,$00,$23,$c3,$00,$97,$20,$31,$34,$39,$36,$34,$36,$34,$36,$35,$84,$36,$31,$30,$30,$35,$36,$39,$36,$39,$92,$31,$34,$39,$36,$34,$36,$34,$36,$35,$00,$28,$c4,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$85,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$8b,$37,$35,$34,$39,$37,$34,$36,$30,$31,$00,$27,$c5,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$96,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$37,$35,$30,$32,$34,$35,$37,$36,$38,$00,$26,$c6,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$b2,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$8b,$34,$37,$32,$38,$38,$33,$33,$00,$1f,$c7,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$92,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$30,$00,$20,$c8,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$90,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$8b,$31,$00,$1f,$c9,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$91,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$30,$00,$1f,$ca,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$8f,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$30,$00,$20,$cb,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$94,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$8b,$31,$00,$20,$cc,$00,$97,$20,$87,$8b,$31,$34,$39,$36,$34,$36,$34,$36,$35,$93,$8b,$36,$31,$30,$30,$35,$36,$39,$36,$39,$88,$92,$8b,$31,$00,$17,$cd,$00,$97,$20,$87,$81,$5d,$31,$37,$81,$b3,$81,$3c,$41,$55,$81,$88,$20,$92,$20,$31,$00,$1f,$ce,$00,$97,$20,$38,$36,$32,$8a,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$92,$8b,$31,$35,$38,$36,$36,$39,$31,$37,$32,$00,$1e,$cf,$00,$97,$20,$38,$36,$32,$8b,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$92,$31,$35,$38,$36,$37,$30,$38,$39,$36,$00,$22,$d0,$00,$97,$20,$38,$36,$32,$89,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$92,$8b,$31,$33,$36,$37,$37,$33,$35,$36,$39,$33,$30,$38,$00,$16,$d1,$00,$97,$20,$38,$36,$32,$8c,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$92,$30,$00,$17,$d2,$00,$97,$20,$38,$36,$32,$84,$31,$35,$38,$36,$37,$30,$30,$33,$34,$92,$38,$36,$32,$00,$1a,$d3,$00,$97,$20,$87,$38,$36,$32,$85,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$37,$38,$32,$00,$21,$d4,$00,$97,$20,$87,$38,$36,$32,$96,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$8b,$31,$35,$38,$36,$37,$30,$37,$33,$36,$00,$21,$d5,$00,$97,$20,$87,$38,$36,$32,$b2,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$8b,$31,$35,$38,$36,$36,$39,$39,$35,$34,$00,$18,$d6,$00,$97,$20,$87,$38,$36,$32,$92,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$30,$00,$19,$d7,$00,$97,$20,$87,$38,$36,$32,$90,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$8b,$31,$00,$18,$d8,$00,$97,$20,$87,$38,$36,$32,$91,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$30,$00,$18,$d9,$00,$97,$20,$87,$38,$36,$32,$8f,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$30,$00,$19,$da,$00,$97,$20,$87,$38,$36,$32,$94,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$8b,$31,$00,$19,$db,$00,$97,$20,$87,$38,$36,$32,$93,$8b,$31,$35,$38,$36,$37,$30,$30,$33,$34,$88,$92,$8b,$31,$00,$17,$dc,$00,$97,$20,$87,$81,$6b,$7d,$3d,$81,$b3,$81,$54,$38,$27,$81,$88,$20,$92,$20,$31,$00,$1c,$dd,$00,$97,$20,$31,$30,$8a,$32,$39,$31,$33,$30,$34,$35,$30,$36,$92,$32,$39,$31,$33,$30,$34,$35,$31,$36,$00,$14,$de,$00,$97,$20,$31,$30,$8c,$32,$39,$31,$33,$30,$34,$35,$30,$36,$92,$30,$00,$15,$df,$00,$97,$20,$31,$30,$84,$32,$39,$31,$33,$30,$34,$35,$30,$36,$92,$31,$30,$00,$17,$e0,$00,$97,$20,$87,$31,$30,$85,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$31,$30,$00,$1e,$e1,$00,$97,$20,$87,$31,$30,$96,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$32,$39,$31,$33,$30,$34,$34,$39,$36,$00,$1e,$e2,$00,$97,$20,$87,$31,$30,$b2,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$32,$39,$31,$33,$30,$34,$35,$30,$36,$00,$16,$e3,$00,$97,$20,$87,$31,$30,$92,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$30,$00,$17,$e4,$00,$97,$20,$87,$31,$30,$90,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$8b,$31,$00,$17,$e5,$00,$97,$20,$87,$31,$30,$91,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$8b,$31,$00,$17,$e6,$00,$97,$20,$87,$31,$30,$8f,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$8b,$31,$00,$16,$e7,$00,$97,$20,$87,$31,$30,$94,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$30,$00,$16,$e8,$00,$97,$20,$87,$31,$30,$93,$32,$39,$31,$33,$30,$34,$35,$30,$36,$88,$92,$30,$00,$18,$e9,$00,$97,$20,$87,$81,$6d,$6b,$75,$81,$b3,$81,$71,$4e,$30,$81,$88,$20,$92,$20,$8b,$31,$00,$1b,$ea,$00,$97,$20,$30,$8a,$36,$36,$34,$37,$34,$36,$32,$32,$32,$92,$36,$36,$34,$37,$34,$36,$32,$32,$32,$00,$13,$eb,$00,$97,$20,$30,$89,$36,$36,$34,$37,$34,$36,$32,$32,$32,$92,$30,$00,$13,$ec,$00,$97,$20,$30,$8c,$36,$36,$34,$37,$34,$36,$32,$32,$32,$92,$30,$00,$13,$ed,$00,$97,$20,$30,$84,$36,$36,$34,$37,$34,$36,$32,$32,$32,$92,$30,$00,$15,$ee,$00,$97,$20,$87,$30,$85,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$30,$00,$1d,$ef,$00,$97,$20,$87,$30,$96,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$36,$36,$34,$37,$34,$36,$32,$32,$32,$00,$1d,$f0,$00,$97,$20,$87,$30,$b2,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$36,$36,$34,$37,$34,$36,$32,$32,$32,$00,$15,$f1,$00,$97,$20,$87,$30,$92,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$30,$00,$16,$f2,$00,$97,$20,$87,$30,$90,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$8b,$31,$00,$16,$f3,$00,$97,$20,$87,$30,$91,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$8b,$31,$00,$16,$f4,$00,$97,$20,$87,$30,$8f,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$8b,$31,$00,$15,$f5,$00,$97,$20,$87,$30,$94,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$30,$00,$15,$f6,$00,$97,$20,$87,$30,$93,$36,$36,$34,$37,$34,$36,$32,$32,$32,$88,$92,$30,$00,$17,$f7,$00,$97,$20,$87,$81,$4f,$5c,$43,$81,$b3,$81,$4f,$54,$36,$81,$88,$20,$92,$20,$31,$00,$27,$f8,$00,$97,$20,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$8a,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$92,$8b,$31,$37,$38,$31,$35,$30,$38,$33,$34,$30,$00,$25,$f9,$00,$97,$20,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$8b,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$92,$31,$30,$35,$33,$36,$35,$35,$38,$34,$00,$1d,$fa,$00,$97,$20,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$8c,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$92,$30,$00,$23,$fb,$00,$97,$20,$38,$33,$38,$30,$37,$31,$33,$37,$38,$84,$39,$34,$33,$34,$33,$36,$39,$36,$32,$92,$38,$33,$38,$30,$37,$31,$33,$37,$38,$00,$28,$fc,$00,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$85,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$8b,$39,$37,$32,$38,$31,$33,$35,$35,$34,$00,$27,$fd,$00,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$96,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$31,$36,$34,$31,$31,$38,$37,$36,$38,$00,$28,$fe,$00,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$b2,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$8b,$38,$30,$38,$36,$39,$34,$37,$38,$36,$00,$1f,$ff,$00,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$92,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$30,$00,$20,$00,$01,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$90,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$8b,$31,$00,$1f,$01,$01,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$91,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$30,$00,$1f,$02,$01,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$8f,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$30,$00,$20,$03,$01,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$94,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$8b,$31,$00,$20,$04,$01,$97,$20,$87,$8b,$38,$33,$38,$30,$37,$31,$33,$37,$38,$93,$8b,$39,$34,$33,$34,$33,$36,$39,$36,$32,$88,$92,$8b,$31,$00,$18,$05,$01,$97,$20,$87,$81,$33,$72,$53,$81,$b3,$81,$6f,$66,$42,$81,$88,$20,$92,$20,$8b,$31,$00,$1b,$06,$01,$97,$20,$34,$8a,$38,$30,$35,$31,$38,$34,$37,$34,$31,$92,$38,$30,$35,$31,$38,$34,$37,$34,$35,$00,$13,$07,$01,$97,$20,$34,$8c,$38,$30,$35,$31,$38,$34,$37,$34,$31,$92,$30,$00,$13,$08,$01,$97,$20,$34,$84,$38,$30,$35,$31,$38,$34,$37,$34,$31,$92,$34,$00,$15,$09,$01,$97,$20,$87,$34,$85,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$34,$00,$1d,$0a,$01,$97,$20,$87,$34,$96,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$38,$30,$35,$31,$38,$34,$37,$33,$37,$00,$1d,$0b,$01,$97,$20,$87,$34,$b2,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$38,$30,$35,$31,$38,$34,$37,$34,$31,$00,$15,$0c,$01,$97,$20,$87,$34,$92,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$30,$00,$16,$0d,$01,$97,$20,$87,$34,$90,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$8b,$31,$00,$16,$0e,$01,$97,$20,$87,$34,$91,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$8b,$31,$00,$16,$0f,$01,$97,$20,$87,$34,$8f,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$8b,$31,$00,$15,$10,$01,$97,$20,$87,$34,$94,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$30,$00,$15,$11,$01,$97,$20,$87,$34,$93,$38,$30,$35,$31,$38,$34,$37,$34,$31,$88,$92,$30,$00,$18,$12,$01,$97,$20,$87,$81,$66,$26,$28,$81,$b3,$81,$68,$2a,$2f,$81,$88,$20,$92,$20,$8b,$31,$00,$24,$13,$01,$97,$20,$31,$32,$36,$33,$35,$34,$35,$30,$31,$8a,$39,$35,$31,$31,$36,$32,$32,$34,$31,$92,$31,$30,$37,$37,$35,$31,$36,$37,$34,$32,$00,$1b,$14,$01,$97,$20,$31,$32,$36,$33,$35,$34,$35,$30,$31,$8c,$39,$35,$31,$31,$36,$32,$32,$34,$31,$92,$30,$00,$23,$15,$01,$97,$20,$31,$32,$36,$33,$35,$34,$35,$30,$31,$84,$39,$35,$31,$31,$36,$32,$32,$34,$31,$92,$31,$32,$36,$33,$35,$34,$35,$30,$31,$00,$23,$16,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$85,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$38,$33,$38,$39,$36,$33,$33,$00,$26,$17,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$96,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$31,$30,$36,$30,$37,$33,$37,$34,$37,$36,$00,$26,$18,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$b2,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$31,$30,$36,$39,$31,$32,$37,$31,$30,$39,$00,$1d,$19,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$92,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$30,$00,$1e,$1a,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$90,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$8b,$31,$00,$1e,$1b,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$91,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$8b,$31,$00,$1e,$1c,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$8f,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$8b,$31,$00,$1d,$1d,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$94,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$30,$00,$1d,$1e,$01,$97,$20,$87,$31,$32,$36,$33,$35,$34,$35,$30,$31,$93,$39,$35,$31,$31,$36,$32,$32,$34,$31,$88,$92,$30,$00,$17,$1f,$01,$97,$20,$87,$81,$74,$51,$31,$81,$b3,$81,$36,$38,$61,$81,$88,$20,$92,$20,$31,$00,$1e,$20,$01,$97,$20,$8b,$31,$35,$34,$8a,$37,$31,$36,$33,$30,$31,$30,$38,$35,$92,$37,$31,$36,$33,$30,$30,$39,$33,$31,$00,$22,$21,$01,$97,$20,$8b,$31,$35,$34,$89,$37,$31,$36,$33,$30,$31,$30,$38,$35,$92,$8b,$31,$31,$30,$33,$31,$30,$33,$36,$37,$30,$39,$30,$00,$16,$22,$01,$97,$20,$8b,$31,$35,$34,$8c,$37,$31,$36,$33,$30,$31,$30,$38,$35,$92,$30,$00,$17,$23,$01,$97,$20,$31,$35,$34,$84,$37,$31,$36,$33,$30,$31,$30,$38,$35,$92,$31,$35,$34,$00,$20,$24,$01,$97,$20,$87,$8b,$31,$35,$34,$85,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$37,$31,$36,$33,$30,$31,$30,$36,$30,$00,$21,$25,$01,$97,$20,$87,$8b,$31,$35,$34,$96,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$8b,$37,$31,$36,$33,$30,$31,$31,$38,$39,$00,$1b,$26,$01,$97,$20,$87,$8b,$31,$35,$34,$b2,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$8b,$31,$32,$39,$00,$18,$27,$01,$97,$20,$87,$8b,$31,$35,$34,$92,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$30,$00,$19,$28,$01,$97,$20,$87,$8b,$31,$35,$34,$90,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$8b,$31,$00,$19,$29,$01,$97,$20,$87,$8b,$31,$35,$34,$91,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$8b,$31,$00,$19,$2a,$01,$97,$20,$87,$8b,$31,$35,$34,$8f,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$8b,$31,$00,$18,$2b,$01,$97,$20,$87,$8b,$31,$35,$34,$94,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$30,$00,$18,$2c,$01,$97,$20,$87,$8b,$31,$35,$34,$93,$37,$31,$36,$33,$30,$31,$30,$38,$35,$88,$92,$30,$00,$18,$2d,$01,$97,$20,$87,$81,$37,$29,$79,$81,$b3,$81,$5d,$6f,$37,$81,$88,$20,$92,$20,$8b,$31,$00,$23,$2e,$01,$97,$20,$33,$36,$30,$39,$33,$31,$38,$32,$30,$8a,$35,$36,$32,$31,$33,$38,$33,$32,$33,$92,$39,$32,$33,$30,$37,$30,$31,$34,$33,$00,$1b,$2f,$01,$97,$20,$33,$36,$30,$39,$33,$31,$38,$32,$30,$8c,$35,$36,$32,$31,$33,$38,$33,$32,$33,$92,$30,$00,$23,$30,$01,$97,$20,$33,$36,$30,$39,$33,$31,$38,$32,$30,$84,$35,$36,$32,$31,$33,$38,$33,$32,$33,$92,$33,$36,$30,$39,$33,$31,$38,$32,$30,$00,$24,$31,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$85,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$32,$35,$32,$33,$31,$35,$35,$32,$00,$25,$32,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$96,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$38,$37,$32,$36,$30,$37,$30,$33,$39,$00,$25,$33,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$b2,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$38,$39,$37,$38,$33,$38,$35,$39,$31,$00,$1d,$34,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$92,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$30,$00,$1e,$35,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$90,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$8b,$31,$00,$1e,$36,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$91,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$8b,$31,$00,$1e,$37,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$8f,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$8b,$31,$00,$1d,$38,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$94,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$30,$00,$1d,$39,$01,$97,$20,$87,$33,$36,$30,$39,$33,$31,$38,$32,$30,$93,$35,$36,$32,$31,$33,$38,$33,$32,$33,$88,$92,$30,$00,$18,$3a,$01,$97,$20,$87,$81,$2b,$64,$4d,$81,$b3,$81,$70,$4d,$30,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$3b,$01,$97,$20,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$8a,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$92,$8b,$33,$39,$35,$33,$33,$38,$33,$38,$00,$27,$3c,$01,$97,$20,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$8b,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$92,$32,$31,$30,$33,$31,$30,$37,$33,$38,$30,$00,$31,$3d,$01,$97,$20,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$89,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$92,$8b,$31,$31,$30,$35,$33,$37,$34,$34,$33,$31,$38,$36,$35,$38,$36,$33,$35,$33,$39,$00,$1e,$3e,$01,$97,$20,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$8c,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$92,$30,$00,$26,$3f,$01,$97,$20,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$84,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$92,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$00,$26,$40,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$85,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$32,$34,$31,$32,$38,$31,$39,$00,$28,$41,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$96,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$8b,$34,$34,$33,$35,$39,$34,$37,$36,$00,$28,$42,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$b2,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$8b,$34,$31,$39,$34,$36,$36,$35,$37,$00,$20,$43,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$92,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$30,$00,$21,$44,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$90,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$8b,$31,$00,$20,$45,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$91,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$30,$00,$20,$46,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$8f,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$30,$00,$21,$47,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$94,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$8b,$31,$00,$21,$48,$01,$97,$20,$87,$31,$30,$33,$31,$37,$38,$36,$37,$37,$31,$93,$8b,$31,$30,$37,$31,$33,$32,$30,$36,$30,$39,$88,$92,$8b,$31,$00,$17,$49,$01,$97,$20,$87,$81,$77,$6c,$28,$81,$b3,$81,$5c,$79,$79,$81,$88,$20,$92,$20,$31,$00,$26,$4a,$01,$97,$20,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$8a,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$92,$8b,$31,$30,$39,$34,$37,$32,$33,$37,$30,$37,$00,$24,$4b,$01,$97,$20,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$8b,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$92,$39,$30,$30,$33,$31,$36,$31,$33,$33,$00,$1c,$4c,$01,$97,$20,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$8c,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$92,$30,$00,$21,$4d,$01,$97,$20,$39,$37,$32,$30,$33,$37,$38,$37,$84,$39,$39,$37,$35,$31,$39,$39,$32,$30,$92,$39,$37,$32,$30,$33,$37,$38,$37,$00,$28,$4e,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$85,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$8b,$31,$30,$37,$33,$37,$33,$39,$33,$37,$36,$00,$27,$4f,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$96,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$31,$30,$35,$32,$37,$35,$35,$30,$34,$35,$00,$26,$50,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$b2,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$8b,$32,$30,$39,$38,$34,$33,$33,$31,$00,$1e,$51,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$92,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$30,$00,$1f,$52,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$90,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$8b,$31,$00,$1e,$53,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$91,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$30,$00,$1e,$54,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$8f,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$30,$00,$1f,$55,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$94,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$8b,$31,$00,$1f,$56,$01,$97,$20,$87,$8b,$39,$37,$32,$30,$33,$37,$38,$37,$93,$8b,$39,$39,$37,$35,$31,$39,$39,$32,$30,$88,$92,$8b,$31,$00,$17,$57,$01,$97,$20,$87,$81,$69,$40,$53,$81,$b3,$81,$28,$7d,$36,$81,$88,$20,$92,$20,$31,$00,$24,$58,$01,$97,$20,$39,$37,$35,$34,$38,$36,$32,$33,$34,$8a,$33,$35,$35,$37,$35,$37,$33,$39,$32,$92,$31,$33,$33,$31,$32,$34,$33,$36,$32,$36,$00,$23,$59,$01,$97,$20,$39,$37,$35,$34,$38,$36,$32,$33,$34,$8b,$33,$35,$35,$37,$35,$37,$33,$39,$32,$92,$36,$31,$39,$37,$32,$38,$38,$34,$32,$00,$1b,$5a,$01,$97,$20,$39,$37,$35,$34,$38,$36,$32,$33,$34,$8c,$33,$35,$35,$37,$35,$37,$33,$39,$32,$92,$32,$00,$23,$5b,$01,$97,$20,$39,$37,$35,$34,$38,$36,$32,$33,$34,$84,$33,$35,$35,$37,$35,$37,$33,$39,$32,$92,$32,$36,$33,$39,$37,$31,$34,$35,$30,$00,$25,$5c,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$85,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$32,$37,$30,$38,$30,$36,$32,$38,$38,$00,$25,$5d,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$96,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$37,$38,$39,$36,$33,$31,$30,$35,$30,$00,$26,$5e,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$b2,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$31,$30,$36,$30,$34,$33,$37,$33,$33,$38,$00,$1d,$5f,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$92,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$30,$00,$1e,$60,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$90,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$8b,$31,$00,$1d,$61,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$91,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$30,$00,$1d,$62,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$8f,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$30,$00,$1e,$63,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$94,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$8b,$31,$00,$1e,$64,$01,$97,$20,$87,$39,$37,$35,$34,$38,$36,$32,$33,$34,$93,$33,$35,$35,$37,$35,$37,$33,$39,$32,$88,$92,$8b,$31,$00,$17,$65,$01,$97,$20,$87,$81,$64,$3d,$71,$81,$b3,$81,$38,$65,$57,$81,$88,$20,$92,$20,$31,$00,$25,$66,$01,$97,$20,$36,$36,$30,$31,$34,$30,$36,$30,$37,$8a,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$92,$31,$37,$33,$31,$34,$35,$36,$30,$39,$35,$00,$1c,$67,$01,$97,$20,$36,$36,$30,$31,$34,$30,$36,$30,$37,$8c,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$92,$30,$00,$24,$68,$01,$97,$20,$36,$36,$30,$31,$34,$30,$36,$30,$37,$84,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$92,$36,$36,$30,$31,$34,$30,$36,$30,$37,$00,$26,$69,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$85,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$36,$36,$30,$31,$34,$30,$35,$37,$36,$00,$26,$6a,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$96,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$34,$31,$31,$31,$37,$34,$39,$34,$33,$00,$27,$6b,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$b2,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$31,$30,$37,$31,$33,$31,$35,$35,$31,$39,$00,$1e,$6c,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$92,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$30,$00,$1f,$6d,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$90,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$8b,$31,$00,$1f,$6e,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$91,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$8b,$31,$00,$1f,$6f,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$8f,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$8b,$31,$00,$1e,$70,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$94,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$30,$00,$1e,$71,$01,$97,$20,$87,$36,$36,$30,$31,$34,$30,$36,$30,$37,$93,$31,$30,$37,$31,$33,$31,$35,$34,$38,$38,$88,$92,$30,$00,$17,$72,$01,$97,$20,$87,$81,$71,$68,$44,$81,$b3,$81,$54,$7b,$45,$81,$88,$20,$92,$20,$31,$00,$1d,$73,$01,$97,$20,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$8a,$32,$92,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$32,$00,$1d,$74,$01,$97,$20,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$89,$32,$92,$8b,$39,$36,$32,$36,$32,$31,$35,$38,$38,$00,$1d,$75,$01,$97,$20,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$8c,$32,$92,$8b,$32,$34,$30,$36,$35,$35,$33,$39,$37,$00,$13,$76,$01,$97,$20,$34,$38,$31,$33,$31,$30,$37,$39,$34,$84,$32,$92,$30,$00,$16,$77,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$85,$32,$88,$92,$32,$00,$1f,$78,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$96,$32,$88,$92,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$36,$00,$1f,$79,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$b2,$32,$88,$92,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$00,$16,$7a,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$92,$32,$88,$92,$30,$00,$17,$7b,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$90,$32,$88,$92,$8b,$31,$00,$17,$7c,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$91,$32,$88,$92,$8b,$31,$00,$17,$7d,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$8f,$32,$88,$92,$8b,$31,$00,$16,$7e,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$94,$32,$88,$92,$30,$00,$16,$7f,$01,$97,$20,$87,$8b,$34,$38,$31,$33,$31,$30,$37,$39,$34,$93,$32,$88,$92,$30,$00,$18,$80,$01,$97,$20,$87,$81,$67,$56,$35,$81,$b3,$81,$71,$3f,$50,$81,$88,$20,$92,$20,$8b,$31,$00,$1c,$81,$01,$97,$20,$39,$37,$38,$39,$30,$36,$37,$39,$37,$8a,$8b,$39,$92,$39,$37,$38,$39,$30,$36,$37,$38,$38,$00,$1c,$82,$01,$97,$20,$39,$37,$38,$39,$30,$36,$37,$39,$37,$8b,$8b,$39,$92,$39,$37,$38,$39,$30,$36,$38,$30,$36,$00,$1e,$83,$01,$97,$20,$39,$37,$38,$39,$30,$36,$37,$39,$37,$89,$8b,$39,$92,$8b,$38,$38,$31,$30,$31,$36,$31,$31,$37,$33,$00,$1d,$84,$01,$97,$20,$39,$37,$38,$39,$30,$36,$37,$39,$37,$8c,$8b,$39,$92,$8b,$31,$30,$38,$37,$36,$37,$34,$32,$31,$00,$13,$85,$01,$97,$20,$39,$37,$38,$39,$30,$36,$37,$39,$37,$84,$39,$92,$38,$00,$1e,$86,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$85,$8b,$39,$88,$92,$39,$37,$38,$39,$30,$36,$37,$38,$39,$00,$1f,$87,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$96,$8b,$39,$88,$92,$8b,$39,$37,$38,$39,$30,$36,$37,$39,$30,$00,$17,$88,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$b2,$8b,$39,$88,$92,$8b,$31,$00,$16,$89,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$92,$8b,$39,$88,$92,$30,$00,$17,$8a,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$90,$8b,$39,$88,$92,$8b,$31,$00,$16,$8b,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$91,$8b,$39,$88,$92,$30,$00,$16,$8c,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$8f,$8b,$39,$88,$92,$30,$00,$17,$8d,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$94,$8b,$39,$88,$92,$8b,$31,$00,$17,$8e,$01,$97,$20,$87,$39,$37,$38,$39,$30,$36,$37,$39,$37,$93,$8b,$39,$88,$92,$8b,$31,$00,$18,$8f,$01,$97,$20,$87,$81,$36,$3e,$5d,$81,$b3,$81,$4b,$51,$5f,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$90,$01,$97,$20,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$8a,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$92,$8b,$39,$32,$34,$31,$35,$32,$34,$37,$30,$00,$25,$91,$01,$97,$20,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$8b,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$92,$37,$30,$34,$39,$37,$32,$36,$36,$30,$00,$1d,$92,$01,$97,$20,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$8c,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$92,$30,$00,$23,$93,$01,$97,$20,$31,$30,$39,$35,$38,$39,$39,$30,$35,$84,$38,$31,$34,$35,$36,$32,$35,$36,$35,$92,$31,$30,$39,$35,$38,$39,$39,$30,$35,$00,$28,$94,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$85,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$8b,$39,$31,$35,$32,$32,$36,$30,$30,$35,$00,$27,$95,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$96,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$39,$30,$36,$32,$39,$39,$35,$34,$30,$00,$26,$96,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$b2,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$8b,$38,$39,$32,$36,$34,$36,$35,$00,$1f,$97,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$92,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$30,$00,$20,$98,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$90,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$8b,$31,$00,$1f,$99,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$91,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$30,$00,$1f,$9a,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$8f,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$30,$00,$20,$9b,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$94,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$8b,$31,$00,$20,$9c,$01,$97,$20,$87,$8b,$31,$30,$39,$35,$38,$39,$39,$30,$35,$93,$8b,$38,$31,$34,$35,$36,$32,$35,$36,$35,$88,$92,$8b,$31,$00,$18,$9d,$01,$97,$20,$87,$81,$33,$29,$65,$81,$b3,$81,$75,$42,$62,$81,$88,$20,$92,$20,$8b,$31,$00,$0d,$9e,$01,$97,$20,$30,$8a,$8b,$36,$92,$8b,$36,$00,$0c,$9f,$01,$97,$20,$30,$8b,$8b,$36,$92,$36,$00,$0c,$a0,$01,$97,$20,$30,$89,$8b,$36,$92,$30,$00,$0c,$a1,$01,$97,$20,$30,$8c,$8b,$36,$92,$30,$00,$0b,$a2,$01,$97,$20,$30,$84,$36,$92,$30,$00,$0e,$a3,$01,$97,$20,$87,$30,$85,$8b,$36,$88,$92,$30,$00,$0f,$a4,$01,$97,$20,$87,$30,$96,$8b,$36,$88,$92,$8b,$36,$00,$0f,$a5,$01,$97,$20,$87,$30,$b2,$8b,$36,$88,$92,$8b,$36,$00,$0e,$a6,$01,$97,$20,$87,$30,$92,$8b,$36,$88,$92,$30,$00,$0f,$a7,$01,$97,$20,$87,$30,$90,$8b,$36,$88,$92,$8b,$31,$00,$0e,$a8,$01,$97,$20,$87,$30,$91,$8b,$36,$88,$92,$30,$00,$0e,$a9,$01,$97,$20,$87,$30,$8f,$8b,$36,$88,$92,$30,$00,$0f,$aa,$01,$97,$20,$87,$30,$94,$8b,$36,$88,$92,$8b,$31,$00,$0f,$ab,$01,$97,$20,$87,$30,$93,$8b,$36,$88,$92,$8b,$31,$00,$18,$ac,$01,$97,$20,$87,$81,$70,$3c,$51,$81,$b3,$81,$73,$7a,$6b,$81,$88,$20,$92,$20,$8b,$31,$00,$24,$ad,$01,$97,$20,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$8a,$32,$38,$33,$34,$37,$34,$35,$33,$92,$8b,$39,$35,$39,$30,$36,$34,$35,$35,$38,$00,$2c,$ae,$01,$97,$20,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$89,$32,$38,$33,$34,$37,$34,$35,$33,$92,$8b,$32,$37,$39,$39,$30,$36,$31,$35,$35,$37,$33,$34,$35,$37,$39,$38,$33,$00,$1d,$af,$01,$97,$20,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$8c,$32,$38,$33,$34,$37,$34,$35,$33,$92,$8b,$33,$34,$00,$21,$b0,$01,$97,$20,$39,$38,$37,$34,$31,$32,$30,$31,$31,$84,$32,$38,$33,$34,$37,$34,$35,$33,$92,$32,$33,$35,$39,$38,$36,$30,$39,$00,$24,$b1,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$85,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$31,$38,$38,$37,$36,$34,$33,$37,$00,$26,$b2,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$96,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$8b,$39,$39,$36,$38,$31,$37,$34,$33,$32,$00,$26,$b3,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$b2,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$8b,$39,$37,$37,$39,$34,$30,$39,$39,$35,$00,$1d,$b4,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$92,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$30,$00,$1e,$b5,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$90,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$8b,$31,$00,$1e,$b6,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$91,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$8b,$31,$00,$1e,$b7,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$8f,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$8b,$31,$00,$1d,$b8,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$94,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$30,$00,$1d,$b9,$01,$97,$20,$87,$8b,$39,$38,$37,$34,$31,$32,$30,$31,$31,$93,$32,$38,$33,$34,$37,$34,$35,$33,$88,$92,$30,$00,$18,$ba,$01,$97,$20,$87,$81,$29,$64,$4e,$81,$b3,$81,$6f,$75,$6c,$81,$88,$20,$92,$20,$8b,$31,$00,$25,$bb,$01,$97,$20,$33,$35,$37,$34,$39,$30,$33,$32,$35,$8a,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$92,$8b,$36,$32,$33,$39,$35,$39,$33,$31,$31,$00,$25,$bc,$01,$97,$20,$33,$35,$37,$34,$39,$30,$33,$32,$35,$8b,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$92,$31,$33,$33,$38,$39,$33,$39,$39,$36,$31,$00,$2e,$bd,$01,$97,$20,$33,$35,$37,$34,$39,$30,$33,$32,$35,$89,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$92,$8b,$33,$35,$30,$38,$35,$38,$37,$34,$39,$33,$34,$34,$37,$37,$31,$37,$30,$30,$00,$1c,$be,$01,$97,$20,$33,$35,$37,$34,$39,$30,$33,$32,$35,$8c,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$92,$30,$00,$23,$bf,$01,$97,$20,$33,$35,$37,$34,$39,$30,$33,$32,$35,$84,$39,$38,$31,$34,$34,$39,$36,$33,$36,$92,$33,$35,$37,$34,$39,$30,$33,$32,$35,$00,$25,$c0,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$85,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$38,$33,$39,$30,$33,$35,$30,$38,$00,$27,$c1,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$96,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$8b,$37,$39,$31,$37,$36,$36,$33,$32,$37,$00,$27,$c2,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$b2,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$8b,$37,$30,$37,$38,$36,$32,$38,$31,$39,$00,$1e,$c3,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$92,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$30,$00,$1f,$c4,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$90,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$8b,$31,$00,$1e,$c5,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$91,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$30,$00,$1e,$c6,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$8f,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$30,$00,$1f,$c7,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$94,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$8b,$31,$00,$1f,$c8,$01,$97,$20,$87,$33,$35,$37,$34,$39,$30,$33,$32,$35,$93,$8b,$39,$38,$31,$34,$34,$39,$36,$33,$36,$88,$92,$8b,$31,$00,$17,$c9,$01,$97,$20,$87,$81,$7b,$3f,$3a,$81,$b3,$81,$2f,$2d,$53,$81,$88,$20,$92,$20,$31,$00,$0e,$ca,$01,$97,$20,$8b,$31,$8a,$8b,$31,$92,$8b,$32,$00,$0d,$cb,$01,$97,$20,$8b,$31,$89,$8b,$31,$92,$31,$00,$0d,$cc,$01,$97,$20,$8b,$31,$8c,$8b,$31,$92,$31,$00,$0b,$cd,$01,$97,$20,$31,$84,$31,$92,$30,$00,$10,$ce,$01,$97,$20,$87,$8b,$31,$85,$8b,$31,$88,$92,$8b,$31,$00,$0f,$cf,$01,$97,$20,$87,$8b,$31,$96,$8b,$31,$88,$92,$30,$00,$10,$d0,$01,$97,$20,$87,$8b,$31,$b2,$8b,$31,$88,$92,$8b,$31,$00,$10,$d1,$01,$97,$20,$87,$8b,$31,$92,$8b,$31,$88,$92,$8b,$31,$00,$0f,$d2,$01,$97,$20,$87,$8b,$31,$90,$8b,$31,$88,$92,$30,$00,$0f,$d3,$01,$97,$20,$87,$8b,$31,$91,$8b,$31,$88,$92,$30,$00,$10,$d4,$01,$97,$20,$87,$8b,$31,$8f,$8b,$31,$88,$92,$8b,$31,$00,$0f,$d5,$01,$97,$20,$87,$8b,$31,$94,$8b,$31,$88,$92,$30,$00,$10,$d6,$01,$97,$20,$87,$8b,$31,$93,$8b,$31,$88,$92,$8b,$31,$00,$18,$d7,$01,$97,$20,$87,$81,$3d,$63,$7a,$81,$b3,$81,$5c,$40,$33,$81,$88,$20,$92,$20,$8b,$31,$00,$1c,$d8,$01,$97,$20,$38,$38,$35,$31,$38,$37,$38,$38,$34,$8a,$8b,$35,$92,$38,$38,$35,$31,$38,$37,$38,$37,$39,$00,$1c,$d9,$01,$97,$20,$38,$38,$35,$31,$38,$37,$38,$38,$34,$8b,$8b,$35,$92,$38,$38,$35,$31,$38,$37,$38,$38,$39,$00,$1e,$da,$01,$97,$20,$38,$38,$35,$31,$38,$37,$38,$38,$34,$89,$8b,$35,$92,$8b,$34,$34,$32,$35,$39,$33,$39,$34,$32,$30,$00,$1d,$db,$01,$97,$20,$38,$38,$35,$31,$38,$37,$38,$38,$34,$8c,$8b,$35,$92,$8b,$31,$37,$37,$30,$33,$37,$35,$37,$36,$00,$13,$dc,$01,$97,$20,$38,$38,$35,$31,$38,$37,$38,$38,$34,$84,$35,$92,$34,$00,$1e,$dd,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$85,$8b,$35,$88,$92,$38,$38,$35,$31,$38,$37,$38,$38,$30,$00,$1f,$de,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$96,$8b,$35,$88,$92,$8b,$38,$38,$35,$31,$38,$37,$38,$38,$31,$00,$17,$df,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$b2,$8b,$35,$88,$92,$8b,$31,$00,$16,$e0,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$92,$8b,$35,$88,$92,$30,$00,$17,$e1,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$90,$8b,$35,$88,$92,$8b,$31,$00,$16,$e2,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$91,$8b,$35,$88,$92,$30,$00,$16,$e3,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$8f,$8b,$35,$88,$92,$30,$00,$17,$e4,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$94,$8b,$35,$88,$92,$8b,$31,$00,$17,$e5,$01,$97,$20,$87,$38,$38,$35,$31,$38,$37,$38,$38,$34,$93,$8b,$35,$88,$92,$8b,$31,$00,$18,$e6,$01,$97,$20,$87,$81,$2c,$4e,$65,$81,$b3,$81,$5d,$61,$30,$81,$88,$20,$92,$20,$8b,$31,$00,$0f,$e7,$01,$97,$20,$38,$8a,$38,$35,$38,$92,$38,$36,$36,$00,$10,$e8,$01,$97,$20,$38,$89,$38,$35,$38,$92,$36,$38,$36,$34,$00,$0d,$e9,$01,$97,$20,$38,$8c,$38,$35,$38,$92,$30,$00,$0d,$ea,$01,$97,$20,$38,$84,$38,$35,$38,$92,$38,$00,$0f,$eb,$01,$97,$20,$87,$38,$85,$38,$35,$38,$88,$92,$38,$00,$11,$ec,$01,$97,$20,$87,$38,$96,$38,$35,$38,$88,$92,$38,$35,$30,$00,$11,$ed,$01,$97,$20,$87,$38,$b2,$38,$35,$38,$88,$92,$38,$35,$38,$00,$0f,$ee,$01,$97,$20,$87,$38,$92,$38,$35,$38,$88,$92,$30,$00,$10,$ef,$01,$97,$20,$87,$38,$90,$38,$35,$38,$88,$92,$8b,$31,$00,$10,$f0,$01,$97,$20,$87,$38,$91,$38,$35,$38,$88,$92,$8b,$31,$00,$10,$f1,$01,$97,$20,$87,$38,$8f,$38,$35,$38,$88,$92,$8b,$31,$00,$0f,$f2,$01,$97,$20,$87,$38,$94,$38,$35,$38,$88,$92,$30,$00,$0f,$f3,$01,$97,$20,$87,$38,$93,$38,$35,$38,$88,$92,$30,$00,$18,$f4,$01,$97,$20,$87,$81,$3b,$36,$4c,$81,$b3,$81,$61,$41,$69,$81,$88,$20,$92,$20,$8b,$31,$00,$26,$f5,$01,$97,$20,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$8a,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$92,$8b,$34,$37,$36,$39,$39,$33,$36,$30,$37,$00,$24,$f6,$01,$97,$20,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$8b,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$92,$37,$32,$37,$38,$34,$38,$32,$37,$00,$1d,$f7,$01,$97,$20,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$8c,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$92,$30,$00,$23,$f8,$01,$97,$20,$32,$30,$32,$31,$30,$34,$33,$39,$30,$84,$32,$37,$34,$38,$38,$39,$32,$31,$37,$92,$32,$30,$32,$31,$30,$34,$33,$39,$30,$00,$28,$f9,$01,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$85,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$8b,$34,$37,$36,$38,$33,$39,$34,$39,$34,$00,$27,$fa,$01,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$96,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$34,$37,$36,$36,$38,$35,$33,$38,$31,$00,$25,$fb,$01,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$b2,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$8b,$31,$35,$34,$31,$31,$33,$00,$1f,$fc,$01,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$92,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$30,$00,$20,$fd,$01,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$90,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$8b,$31,$00,$1f,$fe,$01,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$91,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$30,$00,$1f,$ff,$01,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$8f,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$30,$00,$20,$00,$02,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$94,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$8b,$31,$00,$20,$01,$02,$97,$20,$87,$8b,$32,$30,$32,$31,$30,$34,$33,$39,$30,$93,$8b,$32,$37,$34,$38,$38,$39,$32,$31,$37,$88,$92,$8b,$31,$00,$17,$02,$02,$97,$20,$87,$81,$52,$47,$63,$81,$b3,$81,$51,$4f,$4c,$81,$88,$20,$92,$20,$31,$00,$25,$03,$02,$97,$20,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$8a,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$92,$33,$38,$31,$37,$34,$35,$38,$35,$30,$00,$26,$04,$02,$97,$20,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$8b,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$92,$31,$37,$32,$35,$31,$31,$33,$38,$34,$30,$00,$2f,$05,$02,$97,$20,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$89,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$92,$8b,$37,$30,$37,$35,$37,$31,$39,$36,$36,$37,$34,$31,$38,$33,$30,$37,$37,$35,$00,$1e,$06,$02,$97,$20,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$8c,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$92,$8b,$31,$00,$24,$07,$02,$97,$20,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$84,$36,$37,$31,$36,$38,$33,$39,$39,$35,$92,$33,$38,$31,$37,$34,$35,$38,$35,$30,$00,$27,$08,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$85,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$33,$38,$31,$38,$31,$32,$38,$30,$35,$00,$28,$09,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$96,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$8b,$33,$38,$31,$38,$37,$39,$37,$36,$30,$00,$24,$0a,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$b2,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$8b,$36,$36,$39,$35,$35,$00,$1f,$0b,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$92,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$30,$00,$20,$0c,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$90,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$8b,$31,$00,$1f,$0d,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$91,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$30,$00,$1f,$0e,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$8f,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$30,$00,$20,$0f,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$94,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$8b,$31,$00,$20,$10,$02,$97,$20,$87,$31,$30,$35,$33,$34,$32,$39,$38,$34,$35,$93,$8b,$36,$37,$31,$36,$38,$33,$39,$39,$35,$88,$92,$8b,$31,$00,$18,$11,$02,$97,$20,$87,$81,$47,$42,$31,$81,$b3,$81,$5a,$38,$2f,$81,$88,$20,$92,$20,$8b,$31,$00,$25,$12,$02,$97,$20,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$8a,$36,$33,$39,$31,$37,$35,$32,$31,$37,$92,$8b,$32,$39,$34,$36,$35,$34,$30,$34,$36,$00,$2e,$13,$02,$97,$20,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$89,$36,$33,$39,$31,$37,$35,$32,$31,$37,$92,$8b,$35,$39,$36,$38,$38,$30,$35,$32,$31,$38,$31,$38,$39,$37,$35,$30,$37,$31,$00,$1d,$14,$02,$97,$20,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$8c,$36,$33,$39,$31,$37,$35,$32,$31,$37,$92,$8b,$31,$00,$23,$15,$02,$97,$20,$39,$33,$33,$38,$32,$39,$32,$36,$33,$84,$36,$33,$39,$31,$37,$35,$32,$31,$37,$92,$32,$39,$34,$36,$35,$34,$30,$34,$36,$00,$24,$16,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$85,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$31,$30,$34,$38,$36,$32,$35,$00,$27,$17,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$96,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$8b,$32,$39,$36,$37,$35,$31,$32,$39,$36,$00,$27,$18,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$b2,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$8b,$32,$39,$35,$37,$30,$32,$36,$37,$31,$00,$1e,$19,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$92,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$30,$00,$1f,$1a,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$90,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$8b,$31,$00,$1f,$1b,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$91,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$8b,$31,$00,$1f,$1c,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$8f,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$8b,$31,$00,$1e,$1d,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$94,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$30,$00,$1e,$1e,$02,$97,$20,$87,$8b,$39,$33,$33,$38,$32,$39,$32,$36,$33,$93,$36,$33,$39,$31,$37,$35,$32,$31,$37,$88,$92,$30,$00,$18,$1f,$02,$97,$20,$87,$81,$69,$33,$63,$81,$b3,$81,$6b,$58,$39,$81,$88,$20,$92,$20,$8b,$31,$00,$15,$20,$02,$97,$20,$8b,$34,$37,$33,$8a,$8b,$36,$38,$35,$92,$8b,$31,$31,$35,$38,$00,$13,$21,$02,$97,$20,$8b,$34,$37,$33,$8b,$8b,$36,$38,$35,$92,$32,$31,$32,$00,$16,$22,$02,$97,$20,$8b,$34,$37,$33,$89,$8b,$36,$38,$35,$92,$33,$32,$34,$30,$30,$35,$00,$11,$23,$02,$97,$20,$8b,$34,$37,$33,$8c,$8b,$36,$38,$35,$92,$30,$00,$11,$24,$02,$97,$20,$34,$37,$33,$84,$36,$38,$35,$92,$34,$37,$33,$00,$17,$25,$02,$97,$20,$87,$8b,$34,$37,$33,$85,$8b,$36,$38,$35,$88,$92,$8b,$31,$30,$32,$31,$00,$15,$26,$02,$97,$20,$87,$8b,$34,$37,$33,$96,$8b,$36,$38,$35,$88,$92,$38,$38,$34,$00,$16,$27,$02,$97,$20,$87,$8b,$34,$37,$33,$b2,$8b,$36,$38,$35,$88,$92,$8b,$31,$33,$37,$00,$13,$28,$02,$97,$20,$87,$8b,$34,$37,$33,$92,$8b,$36,$38,$35,$88,$92,$30,$00,$14,$29,$02,$97,$20,$87,$8b,$34,$37,$33,$90,$8b,$36,$38,$35,$88,$92,$8b,$31,$00,$13,$2a,$02,$97,$20,$87,$8b,$34,$37,$33,$91,$8b,$36,$38,$35,$88,$92,$30,$00,$13,$2b,$02,$97,$20,$87,$8b,$34,$37,$33,$8f,$8b,$36,$38,$35,$88,$92,$30,$00,$14,$2c,$02,$97,$20,$87,$8b,$34,$37,$33,$94,$8b,$36,$38,$35,$88,$92,$8b,$31,$00,$14,$2d,$02,$97,$20,$87,$8b,$34,$37,$33,$93,$8b,$36,$38,$35,$88,$92,$8b,$31,$00,$18,$2e,$02,$97,$20,$87,$81,$56,$37,$63,$81,$b3,$81,$56,$79,$5a,$81,$88,$20,$92,$20,$8b,$31,$00,$00
>2208	37 8a 31 30 33 38 30 31 35 35 34 39 92 31 30 33
>2218	38 30 31 35 34 31 32 00 23 02 00 97 20 8b 31 33
>2228	37 89 31 30 33 38 30 31 35 35 34 39 92 8b 31 34
>2238	32 32 30 38 31 33 30 32 31 33 00 17 03 00 97 20
>2248	8b 31 33 37 8c 31 30 33 38 30 31 35 35 34 39 92
>2258	30 00 18 04 00 97 20 31 33 37 84 31 30 33 38 30
>2268	31 35 35 34 39 92 31 33 37 00 22 05 00 97 20 87
>2278	8b 31 33 37 85 31 30 33 38 30 31 35 35 34 39 88
>2288	92 31 30 33 38 30 31 35 35 34 31 00 23 06 00 97
>2298	20 87 8b 31 33 37 96 31 30 33 38 30 31 35 35 34
>22a8	39 88 92 8b 31 30 33 38 30 31 35 36 37 30 00 1c
>22b8	07 00 97 20 87 8b 31 33 37 b2 31 30 33 38 30 31
>22c8	35 35 34 39 88 92 8b 31 32 39 00 19 08 00 97 20
>22d8	87 8b 31 33 37 92 31 30 33 38 30 31 35 35 34 39
>22e8	88 92 30 00 1a 09 00 97 20 87 8b 31 33 37 90 31
>22f8	30 33 38 30 31 35 35 34 39 88 92 8b 31 00 1a 0a
>2308	00 97 20 87 8b 31 33 37 91 31 30 33 38 30 31 35
>2318	35 34 39 88 92 8b 31 00 1a 0b 00 97 20 87 8b 31
>2328	33 37 8f 31 30 33 38 30 31 35 35 34 39 88 92 8b
>2338	31 00 19 0c 00 97 20 87 8b 31 33 37 94 31 30 33
>2348	38 30 31 35 35 34 39 88 92 30 00 19 0d 00 97 20
>2358	87 8b 31 33 37 93 31 30 33 38 30 31 35 35 34 39
>2368	88 92 30 00 18 0e 00 97 20 87 81 5f 65 5c 81 b3
>2378	81 6a 57 4c 81 88 20 92 20 8b 31 00 1d 0f 00 97
>2388	20 8b 39 37 31 39 37 39 38 38 33 8a 30 92 8b 39
>2398	37 31 39 37 39 38 38 33 00 14 10 00 97 20 8b 39
>23a8	37 31 39 37 39 38 38 33 89 30 92 30 00 16 11 00
>23b8	97 20 87 8b 39 37 31 39 37 39 38 38 33 85 30 88
>23c8	92 30 00 1f 12 00 97 20 87 8b 39 37 31 39 37 39
>23d8	38 38 33 96 30 88 92 8b 39 37 31 39 37 39 38 38
>23e8	33 00 1f 13 00 97 20 87 8b 39 37 31 39 37 39 38
>23f8	38 33 b2 30 88 92 8b 39 37 31 39 37 39 38 38 33
>2408	00 16 14 00 97 20 87 8b 39 37 31 39 37 39 38 38
>2418	33 92 30 88 92 30 00 17 15 00 97 20 87 8b 39 37
>2428	31 39 37 39 38 38 33 90 30 88 92 8b 31 00 17 16
>2438	00 97 20 87 8b 39 37 31 39 37 39 38 38 33 91 30
>2448	88 92 8b 31 00 17 17 00 97 20 87 8b 39 37 31 39
>2458	37 39 38 38 33 8f 30 88 92 8b 31 00 16 18 00 97
>2468	20 87 8b 39 37 31 39 37 39 38 38 33 94 30 88 92
>2478	30 00 16 19 00 97 20 87 8b 39 37 31 39 37 39 38
>2488	38 33 93 30 88 92 30 00 17 1a 00 97 20 87 81 68
>2498	2d 3c 81 b3 81 3e 33 3c 81 88 20 92 20 31 00 25
>24a8	1b 00 97 20 8b 35 33 33 34 30 38 36 38 8a 8b 31
>24b8	33 34 31 37 35 35 34 34 92 8b 31 38 37 35 31 36
>24c8	34 31 32 00 23 1c 00 97 20 8b 35 33 33 34 30 38
>24d8	36 38 8b 8b 31 33 34 31 37 35 35 34 34 92 38 30
>24e8	38 33 34 36 37 36 00 1c 1d 00 97 20 8b 35 33 33
>24f8	34 30 38 36 38 8c 8b 31 33 34 31 37 35 35 34 34
>2508	92 30 00 21 1e 00 97 20 35 33 33 34 30 38 36 38
>2518	84 31 33 34 31 37 35 35 34 34 92 35 33 33 34 30
>2528	38 36 38 00 27 1f 00 97 20 87 8b 35 33 33 34 30
>2538	38 36 38 85 8b 31 33 34 31 37 35 35 34 34 88 92
>2548	8b 31 33 34 32 31 36 36 39 36 00 25 20 00 97 20
>2558	87 8b 35 33 33 34 30 38 36 38 96 8b 31 33 34 31
>2568	37 35 35 34 34 88 92 38 30 39 31 36 39 38 30 00
>2578	26 21 00 97 20 87 8b 35 33 33 34 30 38 36 38 b2
>2588	8b 31 33 34 31 37 35 35 34 34 88 92 8b 35 33 32
>2598	39 39 37 31 36 00 1e 22 00 97 20 87 8b 35 33 33
>25a8	34 30 38 36 38 92 8b 31 33 34 31 37 35 35 34 34
>25b8	88 92 30 00 1f 23 00 97 20 87 8b 35 33 33 34 30
>25c8	38 36 38 90 8b 31 33 34 31 37 35 35 34 34 88 92
>25d8	8b 31 00 1e 24 00 97 20 87 8b 35 33 33 34 30 38
>25e8	36 38 91 8b 31 33 34 31 37 35 35 34 34 88 92 30
>25f8	00 1e 25 00 97 20 87 8b 35 33 33 34 30 38 36 38
>2608	8f 8b 31 33 34 31 37 35 35 34 34 88 92 30 00 1f
>2618	26 00 97 20 87 8b 35 33 33 34 30 38 36 38 94 8b
>2628	31 33 34 31 37 35 35 34 34 88 92 8b 31 00 1f 27
>2638	00 97 20 87 8b 35 33 33 34 30 38 36 38 93 8b 31
>2648	33 34 31 37 35 35 34 34 88 92 8b 31 00 17 28 00
>2658	97 20 87 81 5c 36 34 81 b3 81 3d 6f 40 81 88 20
>2668	92 20 31 00 1d 29 00 97 20 30 8a 8b 32 32 37 34
>2678	31 31 37 39 38 92 8b 32 32 37 34 31 31 37 39 38
>2688	00 1c 2a 00 97 20 30 8b 8b 32 32 37 34 31 31 37
>2698	39 38 92 32 32 37 34 31 31 37 39 38 00 14 2b 00
>26a8	97 20 30 89 8b 32 32 37 34 31 31 37 39 38 92 30
>26b8	00 14 2c 00 97 20 30 8c 8b 32 32 37 34 31 31 37
>26c8	39 38 92 30 00 13 2d 00 97 20 30 84 32 32 37 34
>26d8	31 31 37 39 38 92 30 00 16 2e 00 97 20 87 30 85
>26e8	8b 32 32 37 34 31 31 37 39 38 88 92 30 00 1f 2f
>26f8	00 97 20 87 30 96 8b 32 32 37 34 31 31 37 39 38
>2708	88 92 8b 32 32 37 34 31 31 37 39 38 00 1f 30 00
>2718	97 20 87 30 b2 8b 32 32 37 34 31 31 37 39 38 88
>2728	92 8b 32 32 37 34 31 31 37 39 38 00 16 31 00 97
>2738	20 87 30 92 8b 32 32 37 34 31 31 37 39 38 88 92
>2748	30 00 17 32 00 97 20 87 30 90 8b 32 32 37 34 31
>2758	31 37 39 38 88 92 8b 31 00 16 33 00 97 20 87 30
>2768	91 8b 32 32 37 34 31 31 37 39 38 88 92 30 00 16
>2778	34 00 97 20 87 30 8f 8b 32 32 37 34 31 31 37 39
>2788	38 88 92 30 00 17 35 00 97 20 87 30 94 8b 32 32
>2798	37 34 31 31 37 39 38 88 92 8b 31 00 17 36 00 97
>27a8	20 87 30 93 8b 32 32 37 34 31 31 37 39 38 88 92
>27b8	8b 31 00 17 37 00 97 20 87 81 53 33 43 81 b3 81
>27c8	44 6d 6e 81 88 20 92 20 31 00 12 38 00 97 20 37
>27d8	35 34 8a 38 38 36 92 31 36 34 30 00 14 39 00 97
>27e8	20 37 35 34 89 38 38 36 92 36 36 38 30 34 34 00
>27f8	0f 3a 00 97 20 37 35 34 8c 38 38 36 92 30 00 11
>2808	3b 00 97 20 37 35 34 84 38 38 36 92 37 35 34 00
>2818	13 3c 00 97 20 87 37 35 34 85 38 38 36 88 92 36
>2828	32 36 00 13 3d 00 97 20 87 37 35 34 96 38 38 36
>2838	88 92 33 38 38 00 14 3e 00 97 20 87 37 35 34 b2
>2848	38 38 36 88 92 31 30 31 34 00 11 3f 00 97 20 87
>2858	37 35 34 92 38 38 36 88 92 30 00 12 40 00 97 20
>2868	87 37 35 34 90 38 38 36 88 92 8b 31 00 12 41 00
>2878	97 20 87 37 35 34 91 38 38 36 88 92 8b 31 00 12
>2888	42 00 97 20 87 37 35 34 8f 38 38 36 88 92 8b 31
>2898	00 11 43 00 97 20 87 37 35 34 94 38 38 36 88 92
>28a8	30 00 11 44 00 97 20 87 37 35 34 93 38 38 36 88
>28b8	92 30 00 17 45 00 97 20 87 81 42 4f 60 81 b3 81
>28c8	30 66 2e 81 88 20 92 20 31 00 1e 46 00 97 20 37
>28d8	32 33 32 36 33 30 32 31 8a 8b 33 38 32 92 37 32
>28e8	33 32 36 32 36 33 39 00 1e 47 00 97 20 37 32 33
>28f8	32 36 33 30 32 31 8b 8b 33 38 32 92 37 32 33 32
>2908	36 33 34 30 33 00 22 48 00 97 20 37 32 33 32 36
>2918	33 30 32 31 89 8b 33 38 32 92 8b 32 37 36 32 38
>2928	36 34 37 34 30 32 32 00 1d 49 00 97 20 37 32 33
>2938	32 36 33 30 32 31 8c 8b 33 38 32 92 8b 31 38 39
>2948	33 33 35 38 00 17 4a 00 97 20 37 32 33 32 36 33
>2958	30 32 31 84 33 38 32 92 32 36 35 00 20 4b 00 97
>2968	20 87 37 32 33 32 36 33 30 32 31 85 8b 33 38 32
>2978	88 92 37 32 33 32 36 32 39 37 36 00 21 4c 00 97
>2988	20 87 37 32 33 32 36 33 30 32 31 96 8b 33 38 32
>2998	88 92 8b 37 32 33 32 36 33 33 31 33 00 1b 4d 00
>29a8	97 20 87 37 32 33 32 36 33 30 32 31 b2 8b 33 38
>29b8	32 88 92 8b 33 33 37 00 18 4e 00 97 20 87 37 32
>29c8	33 32 36 33 30 32 31 92 8b 33 38 32 88 92 30 00
>29d8	19 4f 00 97 20 87 37 32 33 32 36 33 30 32 31 90
>29e8	8b 33 38 32 88 92 8b 31 00 18 50 00 97 20 87 37
>29f8	32 33 32 36 33 30 32 31 91 8b 33 38 32 88 92 30
>2a08	00 18 51 00 97 20 87 37 32 33 32 36 33 30 32 31
>2a18	8f 8b 33 38 32 88 92 30 00 19 52 00 97 20 87 37
>2a28	32 33 32 36 33 30 32 31 94 8b 33 38 32 88 92 8b
>2a38	31 00 19 53 00 97 20 87 37 32 33 32 36 33 30 32
>2a48	31 93 8b 33 38 32 88 92 8b 31 00 18 54 00 97 20
>2a58	87 81 42 6a 77 81 b3 81 6a 75 55 81 88 20 92 20
>2a68	8b 31 00 11 55 00 97 20 8b 39 39 39 8a 30 92 8b
>2a78	39 39 39 00 0e 56 00 97 20 8b 39 39 39 89 30 92
>2a88	30 00 10 57 00 97 20 87 8b 39 39 39 85 30 88 92
>2a98	30 00 13 58 00 97 20 87 8b 39 39 39 96 30 88 92
>2aa8	8b 39 39 39 00 13 59 00 97 20 87 8b 39 39 39 b2
>2ab8	30 88 92 8b 39 39 39 00 10 5a 00 97 20 87 8b 39
>2ac8	39 39 92 30 88 92 30 00 11 5b 00 97 20 87 8b 39
>2ad8	39 39 90 30 88 92 8b 31 00 11 5c 00 97 20 87 8b
>2ae8	39 39 39 91 30 88 92 8b 31 00 11 5d 00 97 20 87
>2af8	8b 39 39 39 8f 30 88 92 8b 31 00 10 5e 00 97 20
>2b08	87 8b 39 39 39 94 30 88 92 30 00 10 5f 00 97 20
>2b18	87 8b 39 39 39 93 30 88 92 30 00 17 60 00 97 20
>2b28	87 81 30 48 5c 81 b3 81 2a 45 3c 81 88 20 92 20
>2b38	31 00 1b 61 00 97 20 30 8a 35 34 38 32 34 36 33
>2b48	31 38 92 35 34 38 32 34 36 33 31 38 00 13 62 00
>2b58	97 20 30 89 35 34 38 32 34 36 33 31 38 92 30 00
>2b68	13 63 00 97 20 30 8c 35 34 38 32 34 36 33 31 38
>2b78	92 30 00 13 64 00 97 20 30 84 35 34 38 32 34 36
>2b88	33 31 38 92 30 00 15 65 00 97 20 87 30 85 35 34
>2b98	38 32 34 36 33 31 38 88 92 30 00 1d 66 00 97 20
>2ba8	87 30 96 35 34 38 32 34 36 33 31 38 88 92 35 34
>2bb8	38 32 34 36 33 31 38 00 1d 67 00 97 20 87 30 b2
>2bc8	35 34 38 32 34 36 33 31 38 88 92 35 34 38 32 34
>2bd8	36 33 31 38 00 15 68 00 97 20 87 30 92 35 34 38
>2be8	32 34 36 33 31 38 88 92 30 00 16 69 00 97 20 87
>2bf8	30 90 35 34 38 32 34 36 33 31 38 88 92 8b 31 00
>2c08	16 6a 00 97 20 87 30 91 35 34 38 32 34 36 33 31
>2c18	38 88 92 8b 31 00 16 6b 00 97 20 87 30 8f 35 34
>2c28	38 32 34 36 33 31 38 88 92 8b 31 00 15 6c 00 97
>2c38	20 87 30 94 35 34 38 32 34 36 33 31 38 88 92 30
>2c48	00 15 6d 00 97 20 87 30 93 35 34 38 32 34 36 33
>2c58	31 38 88 92 30 00 18 6e 00 97 20 87 81 30 6e 41
>2c68	81 b3 81 4e 5d 42 81 88 20 92 20 8b 31 00 26 6f
>2c78	00 97 20 8b 34 32 35 36 36 36 31 31 39 8a 8b 32
>2c88	32 37 33 31 33 37 30 31 92 8b 36 35 32 39 37 39
>2c98	38 32 30 00 1d 70 00 97 20 8b 34 32 35 36 36 36
>2ca8	31 31 39 8c 8b 32 32 37 33 31 33 37 30 31 92 31
>2cb8	00 23 71 00 97 20 34 32 35 36 36 36 31 31 39 84
>2cc8	32 32 37 33 31 33 37 30 31 92 31 39 38 33 35 32
>2cd8	34 31 38 00 28 72 00 97 20 87 8b 34 32 35 36 36
>2ce8	36 31 31 39 85 8b 32 32 37 33 31 33 37 30 31 88
>2cf8	92 8b 35 30 31 31 39 38 34 33 39 00 27 73 00 97
>2d08	20 87 8b 34 32 35 36 36 36 31 31 39 96 8b 32 32
>2d18	37 33 31 33 37 30 31 88 92 33 34 39 34 31 37 30
>2d28	35 38 00 28 74 00 97 20 87 8b 34 32 35 36 36 36
>2d38	31 31 39 b2 8b 32 32 37 33 31 33 37 30 31 88 92
>2d48	8b 31 35 31 37 38 31 33 38 31 00 1f 75 00 97 20
>2d58	87 8b 34 32 35 36 36 36 31 31 39 92 8b 32 32 37
>2d68	33 31 33 37 30 31 88 92 30 00 20 76 00 97 20 87
>2d78	8b 34 32 35 36 36 36 31 31 39 90 8b 32 32 37 33
>2d88	31 33 37 30 31 88 92 8b 31 00 20 77 00 97 20 87
>2d98	8b 34 32 35 36 36 36 31 31 39 91 8b 32 32 37 33
>2da8	31 33 37 30 31 88 92 8b 31 00 20 78 00 97 20 87
>2db8	8b 34 32 35 36 36 36 31 31 39 8f 8b 32 32 37 33
>2dc8	31 33 37 30 31 88 92 8b 31 00 1f 79 00 97 20 87
>2dd8	8b 34 32 35 36 36 36 31 31 39 94 8b 32 32 37 33
>2de8	31 33 37 30 31 88 92 30 00 1f 7a 00 97 20 87 8b
>2df8	34 32 35 36 36 36 31 31 39 93 8b 32 32 37 33 31
>2e08	33 37 30 31 88 92 30 00 18 7b 00 97 20 87 81 51
>2e18	3d 4f 81 b3 81 69 59 72 81 88 20 92 20 8b 31 00
>2e28	0b 7c 00 97 20 33 8a 33 92 36 00 0b 7d 00 97 20
>2e38	33 89 33 92 39 00 0b 7e 00 97 20 33 8c 33 92 31
>2e48	00 0b 7f 00 97 20 33 84 33 92 30 00 0d 80 00 97
>2e58	20 87 33 85 33 88 92 33 00 0d 81 00 97 20 87 33
>2e68	96 33 88 92 30 00 0d 82 00 97 20 87 33 b2 33 88
>2e78	92 33 00 0e 83 00 97 20 87 33 92 33 88 92 8b 31
>2e88	00 0d 84 00 97 20 87 33 90 33 88 92 30 00 0d 85
>2e98	00 97 20 87 33 91 33 88 92 30 00 0e 86 00 97 20
>2ea8	87 33 8f 33 88 92 8b 31 00 0d 87 00 97 20 87 33
>2eb8	94 33 88 92 30 00 0e 88 00 97 20 87 33 93 33 88
>2ec8	92 8b 31 00 17 89 00 97 20 87 81 7c 3e 35 81 b3
>2ed8	81 54 6f 6d 81 88 20 92 20 31 00 23 8a 00 97 20
>2ee8	34 34 31 34 38 36 36 35 35 8a 33 31 39 34 36 34
>2ef8	38 31 35 92 37 36 30 39 35 31 34 37 30 00 23 8b
>2f08	00 97 20 34 34 31 34 38 36 36 35 35 8b 33 31 39
>2f18	34 36 34 38 31 35 92 31 32 32 30 32 31 38 34 30
>2f28	00 1b 8c 00 97 20 34 34 31 34 38 36 36 35 35 8c
>2f38	33 31 39 34 36 34 38 31 35 92 31 00 23 8d 00 97
>2f48	20 34 34 31 34 38 36 36 35 35 84 33 31 39 34 36
>2f58	34 38 31 35 92 31 32 32 30 32 31 38 34 30 00 25
>2f68	8e 00 97 20 87 34 34 31 34 38 36 36 35 35 85 33
>2f78	31 39 34 36 34 38 31 35 88 92 33 30 32 30 32 33
>2f88	39 38 33 00 25 8f 00 97 20 87 34 34 31 34 38 36
>2f98	36 35 35 96 33 31 39 34 36 34 38 31 35 88 92 31
>2fa8	35 36 39 30 33 35 30 34 00 25 90 00 97 20 87 34
>2fb8	34 31 34 38 36 36 35 35 b2 33 31 39 34 36 34 38
>2fc8	31 35 88 92 34 35 38 39 32 37 34 38 37 00 1d 91
>2fd8	00 97 20 87 34 34 31 34 38 36 36 35 35 92 33 31
>2fe8	39 34 36 34 38 31 35 88 92 30 00 1e 92 00 97 20
>2ff8	87 34 34 31 34 38 36 36 35 35 90 33 31 39 34 36
>3008	34 38 31 35 88 92 8b 31 00 1d 93 00 97 20 87 34
>3018	34 31 34 38 36 36 35 35 91 33 31 39 34 36 34 38
>3028	31 35 88 92 30 00 1d 94 00 97 20 87 34 34 31 34
>3038	38 36 36 35 35 8f 33 31 39 34 36 34 38 31 35 88
>3048	92 30 00 1e 95 00 97 20 87 34 34 31 34 38 36 36
>3058	35 35 94 33 31 39 34 36 34 38 31 35 88 92 8b 31
>3068	00 1e 96 00 97 20 87 34 34 31 34 38 36 36 35 35
>3078	93 33 31 39 34 36 34 38 31 35 88 92 8b 31 00 17
>3088	97 00 97 20 87 81 6a 69 3f 81 b3 81 27 44 44 81
>3098	88 20 92 20 31 00 0d 98 00 97 20 35 8a 35 33 92
>30a8	35 38 00 0e 99 00 97 20 35 89 35 33 92 32 36 35
>30b8	00 0c 9a 00 97 20 35 8c 35 33 92 30 00 0c 9b 00
>30c8	97 20 35 84 35 33 92 35 00 0e 9c 00 97 20 87 35
>30d8	85 35 33 88 92 35 00 0f 9d 00 97 20 87 35 96 35
>30e8	33 88 92 34 38 00 0f 9e 00 97 20 87 35 b2 35 33
>30f8	88 92 35 33 00 0e 9f 00 97 20 87 35 92 35 33 88
>3108	92 30 00 0f a0 00 97 20 87 35 90 35 33 88 92 8b
>3118	31 00 0f a1 00 97 20 87 35 91 35 33 88 92 8b 31
>3128	00 0f a2 00 97 20 87 35 8f 35 33 88 92 8b 31 00
>3138	0e a3 00 97 20 87 35 94 35 33 88 92 30 00 0e a4
>3148	00 97 20 87 35 93 35 33 88 92 30 00 18 a5 00 97
>3158	20 87 81 36 2c 7a 81 b3 81 46 65 28 81 88 20 92
>3168	20 8b 31 00 20 a6 00 97 20 8b 36 33 30 8a 8b 36
>3178	32 32 36 32 34 35 32 32 92 8b 36 32 32 36 32 35
>3188	31 35 32 00 1f a7 00 97 20 8b 36 33 30 8b 8b 36
>3198	32 32 36 32 34 35 32 32 92 36 32 32 36 32 33 38
>31a8	39 32 00 17 a8 00 97 20 8b 36 33 30 8c 8b 36 32
>31b8	32 36 32 34 35 32 32 92 30 00 17 a9 00 97 20 36
>31c8	33 30 84 36 32 32 36 32 34 35 32 32 92 36 33 30
>31d8	00 22 aa 00 97 20 87 8b 36 33 30 85 8b 36 32 32
>31e8	36 32 34 35 32 32 88 92 8b 36 32 32 36 32 34 36
>31f8	33 38 00 21 ab 00 97 20 87 8b 36 33 30 96 8b 36
>3208	32 32 36 32 34 35 32 32 88 92 36 32 32 36 32 34
>3218	31 32 34 00 1c ac 00 97 20 87 8b 36 33 30 b2 8b
>3228	36 32 32 36 32 34 35 32 32 88 92 8b 35 31 34 00
>3238	19 ad 00 97 20 87 8b 36 33 30 92 8b 36 32 32 36
>3248	32 34 35 32 32 88 92 30 00 1a ae 00 97 20 87 8b
>3258	36 33 30 90 8b 36 32 32 36 32 34 35 32 32 88 92
>3268	8b 31 00 19 af 00 97 20 87 8b 36 33 30 91 8b 36
>3278	32 32 36 32 34 35 32 32 88 92 30 00 19 b0 00 97
>3288	20 87 8b 36 33 30 8f 8b 36 32 32 36 32 34 35 32
>3298	32 88 92 30 00 1a b1 00 97 20 87 8b 36 33 30 94
>32a8	8b 36 32 32 36 32 34 35 32 32 88 92 8b 31 00 1a
>32b8	b2 00 97 20 87 8b 36 33 30 93 8b 36 32 32 36 32
>32c8	34 35 32 32 88 92 8b 31 00 18 b3 00 97 20 87 81
>32d8	45 60 47 81 b3 81 4a 28 2e 81 88 20 92 20 8b 31
>32e8	00 11 b4 00 97 20 8b 39 39 33 8a 30 92 8b 39 39
>32f8	33 00 0e b5 00 97 20 8b 39 39 33 89 30 92 30 00
>3308	10 b6 00 97 20 87 8b 39 39 33 85 30 88 92 30 00
>3318	13 b7 00 97 20 87 8b 39 39 33 96 30 88 92 8b 39
>3328	39 33 00 13 b8 00 97 20 87 8b 39 39 33 b2 30 88
>3338	92 8b 39 39 33 00 10 b9 00 97 20 87 8b 39 39 33
>3348	92 30 88 92 30 00 11 ba 00 97 20 87 8b 39 39 33
>3358	90 30 88 92 8b 31 00 11 bb 00 97 20 87 8b 39 39
>3368	33 91 30 88 92 8b 31 00 11 bc 00 97 20 87 8b 39
>3378	39 33 8f 30 88 92 8b 31 00 10 bd 00 97 20 87 8b
>3388	39 39 33 94 30 88 92 30 00 10 be 00 97 20 87 8b
>3398	39 39 33 93 30 88 92 30 00 18 bf 00 97 20 87 81
>33a8	48 6a 39 81 b3 81 72 73 32 81 88 20 92 20 8b 31
>33b8	00 26 c0 00 97 20 8b 31 34 39 36 34 36 34 36 35
>33c8	8a 8b 36 31 30 30 35 36 39 36 39 92 8b 37 35 39
>33d8	37 30 33 34 33 34 00 25 c1 00 97 20 8b 31 34 39
>33e8	36 34 36 34 36 35 8b 8b 36 31 30 30 35 36 39 36
>33f8	39 92 34 36 30 34 31 30 35 30 34 00 1d c2 00 97
>3408	20 8b 31 34 39 36 34 36 34 36 35 8c 8b 36 31 30
>3418	30 35 36 39 36 39 92 30 00 23 c3 00 97 20 31 34
>3428	39 36 34 36 34 36 35 84 36 31 30 30 35 36 39 36
>3438	39 92 31 34 39 36 34 36 34 36 35 00 28 c4 00 97
>3448	20 87 8b 31 34 39 36 34 36 34 36 35 85 8b 36 31
>3458	30 30 35 36 39 36 39 88 92 8b 37 35 34 39 37 34
>3468	36 30 31 00 27 c5 00 97 20 87 8b 31 34 39 36 34
>3478	36 34 36 35 96 8b 36 31 30 30 35 36 39 36 39 88
>3488	92 37 35 30 32 34 35 37 36 38 00 26 c6 00 97 20
>3498	87 8b 31 34 39 36 34 36 34 36 35 b2 8b 36 31 30
>34a8	30 35 36 39 36 39 88 92 8b 34 37 32 38 38 33 33
>34b8	00 1f c7 00 97 20 87 8b 31 34 39 36 34 36 34 36
>34c8	35 92 8b 36 31 30 30 35 36 39 36 39 88 92 30 00
>34d8	20 c8 00 97 20 87 8b 31 34 39 36 34 36 34 36 35
>34e8	90 8b 36 31 30 30 35 36 39 36 39 88 92 8b 31 00
>34f8	1f c9 00 97 20 87 8b 31 34 39 36 34 36 34 36 35
>3508	91 8b 36 31 30 30 35 36 39 36 39 88 92 30 00 1f
>3518	ca 00 97 20 87 8b 31 34 39 36 34 36 34 36 35 8f
>3528	8b 36 31 30 30 35 36 39 36 39 88 92 30 00 20 cb
>3538	00 97 20 87 8b 31 34 39 36 34 36 34 36 35 94 8b
>3548	36 31 30 30 35 36 39 36 39 88 92 8b 31 00 20 cc
>3558	00 97 20 87 8b 31 34 39 36 34 36 34 36 35 93 8b
>3568	36 31 30 30 35 36 39 36 39 88 92 8b 31 00 17 cd
>3578	00 97 20 87 81 5d 31 37 81 b3 81 3c 41 55 81 88
>3588	20 92 20 31 00 1f ce 00 97 20 38 36 32 8a 8b 31
>3598	35 38 36 37 30 30 33 34 92 8b 31 35 38 36 36 39
>35a8	31 37 32 00 1e cf 00 97 20 38 36 32 8b 8b 31 35
>35b8	38 36 37 30 30 33 34 92 31 35 38 36 37 30 38 39
>35c8	36 00 22 d0 00 97 20 38 36 32 89 8b 31 35 38 36
>35d8	37 30 30 33 34 92 8b 31 33 36 37 37 33 35 36 39
>35e8	33 30 38 00 16 d1 00 97 20 38 36 32 8c 8b 31 35
>35f8	38 36 37 30 30 33 34 92 30 00 17 d2 00 97 20 38
>3608	36 32 84 31 35 38 36 37 30 30 33 34 92 38 36 32
>3618	00 1a d3 00 97 20 87 38 36 32 85 8b 31 35 38 36
>3628	37 30 30 33 34 88 92 37 38 32 00 21 d4 00 97 20
>3638	87 38 36 32 96 8b 31 35 38 36 37 30 30 33 34 88
>3648	92 8b 31 35 38 36 37 30 37 33 36 00 21 d5 00 97
>3658	20 87 38 36 32 b2 8b 31 35 38 36 37 30 30 33 34
>3668	88 92 8b 31 35 38 36 36 39 39 35 34 00 18 d6 00
>3678	97 20 87 38 36 32 92 8b 31 35 38 36 37 30 30 33
>3688	34 88 92 30 00 19 d7 00 97 20 87 38 36 32 90 8b
>3698	31 35 38 36 37 30 30 33 34 88 92 8b 31 00 18 d8
>36a8	00 97 20 87 38 36 32 91 8b 31 35 38 36 37 30 30
>36b8	33 34 88 92 30 00 18 d9 00 97 20 87 38 36 32 8f
>36c8	8b 31 35 38 36 37 30 30 33 34 88 92 30 00 19 da
>36d8	00 97 20 87 38 36 32 94 8b 31 35 38 36 37 30 30
>36e8	33 34 88 92 8b 31 00 19 db 00 97 20 87 38 36 32
>36f8	93 8b 31 35 38 36 37 30 30 33 34 88 92 8b 31 00
>3708	17 dc 00 97 20 87 81 6b 7d 3d 81 b3 81 54 38 27
>3718	81 88 20 92 20 31 00 1c dd 00 97 20 31 30 8a 32
>3728	39 31 33 30 34 35 30 36 92 32 39 31 33 30 34 35
>3738	31 36 00 14 de 00 97 20 31 30 8c 32 39 31 33 30
>3748	34 35 30 36 92 30 00 15 df 00 97 20 31 30 84 32
>3758	39 31 33 30 34 35 30 36 92 31 30 00 17 e0 00 97
>3768	20 87 31 30 85 32 39 31 33 30 34 35 30 36 88 92
>3778	31 30 00 1e e1 00 97 20 87 31 30 96 32 39 31 33
>3788	30 34 35 30 36 88 92 32 39 31 33 30 34 34 39 36
>3798	00 1e e2 00 97 20 87 31 30 b2 32 39 31 33 30 34
>37a8	35 30 36 88 92 32 39 31 33 30 34 35 30 36 00 16
>37b8	e3 00 97 20 87 31 30 92 32 39 31 33 30 34 35 30
>37c8	36 88 92 30 00 17 e4 00 97 20 87 31 30 90 32 39
>37d8	31 33 30 34 35 30 36 88 92 8b 31 00 17 e5 00 97
>37e8	20 87 31 30 91 32 39 31 33 30 34 35 30 36 88 92
>37f8	8b 31 00 17 e6 00 97 20 87 31 30 8f 32 39 31 33
>3808	30 34 35 30 36 88 92 8b 31 00 16 e7 00 97 20 87
>3818	31 30 94 32 39 31 33 30 34 35 30 36 88 92 30 00
>3828	16 e8 00 97 20 87 31 30 93 32 39 31 33 30 34 35
>3838	30 36 88 92 30 00 18 e9 00 97 20 87 81 6d 6b 75
>3848	81 b3 81 71 4e 30 81 88 20 92 20 8b 31 00 1b ea
>3858	00 97 20 30 8a 36 36 34 37 34 36 32 32 32 92 36
>3868	36 34 37 34 36 32 32 32 00 13 eb 00 97 20 30 89
>3878	36 36 34 37 34 36 32 32 32 92 30 00 13 ec 00 97
>3888	20 30 8c 36 36 34 37 34 36 32 32 32 92 30 00 13
>3898	ed 00 97 20 30 84 36 36 34 37 34 36 32 32 32 92
>38a8	30 00 15 ee 00 97 20 87 30 85 36 36 34 37 34 36
>38b8	32 32 32 88 92 30 00 1d ef 00 97 20 87 30 96 36
>38c8	36 34 37 34 36 32 32 32 88 92 36 36 34 37 34 36
>38d8	32 32 32 00 1d f0 00 97 20 87 30 b2 36 36 34 37
>38e8	34 36 32 32 32 88 92 36 36 34 37 34 36 32 32 32
>38f8	00 15 f1 00 97 20 87 30 92 36 36 34 37 34 36 32
>3908	32 32 88 92 30 00 16 f2 00 97 20 87 30 90 36 36
>3918	34 37 34 36 32 32 32 88 92 8b 31 00 16 f3 00 97
>3928	20 87 30 91 36 36 34 37 34 36 32 32 32 88 92 8b
>3938	31 00 16 f4 00 97 20 87 30 8f 36 36 34 37 34 36
>3948	32 32 32 88 92 8b 31 00 15 f5 00 97 20 87 30 94
>3958	36 36 34 37 34 36 32 32 32 88 92 30 00 15 f6 00
>3968	97 20 87 30 93 36 36 34 37 34 36 32 32 32 88 92
>3978	30 00 17 f7 00 97 20 87 81 4f 5c 43 81 b3 81 4f
>3988	54 36 81 88 20 92 20 31 00 27 f8 00 97 20 8b 38
>3998	33 38 30 37 31 33 37 38 8a 8b 39 34 33 34 33 36
>39a8	39 36 32 92 8b 31 37 38 31 35 30 38 33 34 30 00
>39b8	25 f9 00 97 20 8b 38 33 38 30 37 31 33 37 38 8b
>39c8	8b 39 34 33 34 33 36 39 36 32 92 31 30 35 33 36
>39d8	35 35 38 34 00 1d fa 00 97 20 8b 38 33 38 30 37
>39e8	31 33 37 38 8c 8b 39 34 33 34 33 36 39 36 32 92
>39f8	30 00 23 fb 00 97 20 38 33 38 30 37 31 33 37 38
>3a08	84 39 34 33 34 33 36 39 36 32 92 38 33 38 30 37
>3a18	31 33 37 38 00 28 fc 00 97 20 87 8b 38 33 38 30
>3a28	37 31 33 37 38 85 8b 39 34 33 34 33 36 39 36 32
>3a38	88 92 8b 39 37 32 38 31 33 35 35 34 00 27 fd 00
>3a48	97 20 87 8b 38 33 38 30 37 31 33 37 38 96 8b 39
>3a58	34 33 34 33 36 39 36 32 88 92 31 36 34 31 31 38
>3a68	37 36 38 00 28 fe 00 97 20 87 8b 38 33 38 30 37
>3a78	31 33 37 38 b2 8b 39 34 33 34 33 36 39 36 32 88
>3a88	92 8b 38 30 38 36 39 34 37 38 36 00 1f ff 00 97
>3a98	20 87 8b 38 33 38 30 37 31 33 37 38 92 8b 39 34
>3aa8	33 34 33 36 39 36 32 88 92 30 00 20 00 01 97 20
>3ab8	87 8b 38 33 38 30 37 31 33 37 38 90 8b 39 34 33
>3ac8	34 33 36 39 36 32 88 92 8b 31 00 1f 01 01 97 20
>3ad8	87 8b 38 33 38 30 37 31 33 37 38 91 8b 39 34 33
>3ae8	34 33 36 39 36 32 88 92 30 00 1f 02 01 97 20 87
>3af8	8b 38 33 38 30 37 31 33 37 38 8f 8b 39 34 33 34
>3b08	33 36 39 36 32 88 92 30 00 20 03 01 97 20 87 8b
>3b18	38 33 38 30 37 31 33 37 38 94 8b 39 34 33 34 33
>3b28	36 39 36 32 88 92 8b 31 00 20 04 01 97 20 87 8b
>3b38	38 33 38 30 37 31 33 37 38 93 8b 39 34 33 34 33
>3b48	36 39 36 32 88 92 8b 31 00 18 05 01 97 20 87 81
>3b58	33 72 53 81 b3 81 6f 66 42 81 88 20 92 20 8b 31
>3b68	00 1b 06 01 97 20 34 8a 38 30 35 31 38 34 37 34
>3b78	31 92 38 30 35 31 38 34 37 34 35 00 13 07 01 97
>3b88	20 34 8c 38 30 35 31 38 34 37 34 31 92 30 00 13
>3b98	08 01 97 20 34 84 38 30 35 31 38 34 37 34 31 92
>3ba8	34 00 15 09 01 97 20 87 34 85 38 30 35 31 38 34
>3bb8	37 34 31 88 92 34 00 1d 0a 01 97 20 87 34 96 38
>3bc8	30 35 31 38 34 37 34 31 88 92 38 30 35 31 38 34
>3bd8	37 33 37 00 1d 0b 01 97 20 87 34 b2 38 30 35 31
>3be8	38 34 37 34 31 88 92 38 30 35 31 38 34 37 34 31
>3bf8	00 15 0c 01 97 20 87 34 92 38 30 35 31 38 34 37
>3c08	34 31 88 92 30 00 16 0d 01 97 20 87 34 90 38 30
>3c18	35 31 38 34 37 34 31 88 92 8b 31 00 16 0e 01 97
>3c28	20 87 34 91 38 30 35 31 38 34 37 34 31 88 92 8b
>3c38	31 00 16 0f 01 97 20 87 34 8f 38 30 35 31 38 34
>3c48	37 34 31 88 92 8b 31 00 15 10 01 97 20 87 34 94
>3c58	38 30 35 31 38 34 37 34 31 88 92 30 00 15 11 01
>3c68	97 20 87 34 93 38 30 35 31 38 34 37 34 31 88 92
>3c78	30 00 18 12 01 97 20 87 81 66 26 28 81 b3 81 68
>3c88	2a 2f 81 88 20 92 20 8b 31 00 24 13 01 97 20 31
>3c98	32 36 33 35 34 35 30 31 8a 39 35 31 31 36 32 32
>3ca8	34 31 92 31 30 37 37 35 31 36 37 34 32 00 1b 14
>3cb8	01 97 20 31 32 36 33 35 34 35 30 31 8c 39 35 31
>3cc8	31 36 32 32 34 31 92 30 00 23 15 01 97 20 31 32
>3cd8	36 33 35 34 35 30 31 84 39 35 31 31 36 32 32 34
>3ce8	31 92 31 32 36 33 35 34 35 30 31 00 23 16 01 97
>3cf8	20 87 31 32 36 33 35 34 35 30 31 85 39 35 31 31
>3d08	36 32 32 34 31 88 92 38 33 38 39 36 33 33 00 26
>3d18	17 01 97 20 87 31 32 36 33 35 34 35 30 31 96 39
>3d28	35 31 31 36 32 32 34 31 88 92 31 30 36 30 37 33
>3d38	37 34 37 36 00 26 18 01 97 20 87 31 32 36 33 35
>3d48	34 35 30 31 b2 39 35 31 31 36 32 32 34 31 88 92
>3d58	31 30 36 39 31 32 37 31 30 39 00 1d 19 01 97 20
>3d68	87 31 32 36 33 35 34 35 30 31 92 39 35 31 31 36
>3d78	32 32 34 31 88 92 30 00 1e 1a 01 97 20 87 31 32
>3d88	36 33 35 34 35 30 31 90 39 35 31 31 36 32 32 34
>3d98	31 88 92 8b 31 00 1e 1b 01 97 20 87 31 32 36 33
>3da8	35 34 35 30 31 91 39 35 31 31 36 32 32 34 31 88
>3db8	92 8b 31 00 1e 1c 01 97 20 87 31 32 36 33 35 34
>3dc8	35 30 31 8f 39 35 31 31 36 32 32 34 31 88 92 8b
>3dd8	31 00 1d 1d 01 97 20 87 31 32 36 33 35 34 35 30
>3de8	31 94 39 35 31 31 36 32 32 34 31 88 92 30 00 1d
>3df8	1e 01 97 20 87 31 32 36 33 35 34 35 30 31 93 39
>3e08	35 31 31 36 32 32 34 31 88 92 30 00 17 1f 01 97
>3e18	20 87 81 74 51 31 81 b3 81 36 38 61 81 88 20 92
>3e28	20 31 00 1e 20 01 97 20 8b 31 35 34 8a 37 31 36
>3e38	33 30 31 30 38 35 92 37 31 36 33 30 30 39 33 31
>3e48	00 22 21 01 97 20 8b 31 35 34 89 37 31 36 33 30
>3e58	31 30 38 35 92 8b 31 31 30 33 31 30 33 36 37 30
>3e68	39 30 00 16 22 01 97 20 8b 31 35 34 8c 37 31 36
>3e78	33 30 31 30 38 35 92 30 00 17 23 01 97 20 31 35
>3e88	34 84 37 31 36 33 30 31 30 38 35 92 31 35 34 00
>3e98	20 24 01 97 20 87 8b 31 35 34 85 37 31 36 33 30
>3ea8	31 30 38 35 88 92 37 31 36 33 30 31 30 36 30 00
>3eb8	21 25 01 97 20 87 8b 31 35 34 96 37 31 36 33 30
>3ec8	31 30 38 35 88 92 8b 37 31 36 33 30 31 31 38 39
>3ed8	00 1b 26 01 97 20 87 8b 31 35 34 b2 37 31 36 33
>3ee8	30 31 30 38 35 88 92 8b 31 32 39 00 18 27 01 97
>3ef8	20 87 8b 31 35 34 92 37 31 36 33 30 31 30 38 35
>3f08	88 92 30 00 19 28 01 97 20 87 8b 31 35 34 90 37
>3f18	31 36 33 30 31 30 38 35 88 92 8b 31 00 19 29 01
>3f28	97 20 87 8b 31 35 34 91 37 31 36 33 30 31 30 38
>3f38	35 88 92 8b 31 00 19 2a 01 97 20 87 8b 31 35 34
>3f48	8f 37 31 36 33 30 31 30 38 35 88 92 8b 31 00 18
>3f58	2b 01 97 20 87 8b 31 35 34 94 37 31 36 33 30 31
>3f68	30 38 35 88 92 30 00 18 2c 01 97 20 87 8b 31 35
>3f78	34 93 37 31 36 33 30 31 30 38 35 88 92 30 00 18
>3f88	2d 01 97 20 87 81 37 29 79 81 b3 81 5d 6f 37 81
>3f98	88 20 92 20 8b 31 00 23 2e 01 97 20 33 36 30 39
>3fa8	33 31 38 32 30 8a 35 36 32 31 33 38 33 32 33 92
>3fb8	39 32 33 30 37 30 31 34 33 00 1b 2f 01 97 20 33
>3fc8	36 30 39 33 31 38 32 30 8c 35 36 32 31 33 38 33
>3fd8	32 33 92 30 00 23 30 01 97 20 33 36 30 39 33 31
>3fe8	38 32 30 84 35 36 32 31 33 38 33 32 33 92 33 36
>3ff8	30 39 33 31 38 32 30 00 24 31 01 97 20 87 33 36
>4008	30 39 33 31 38 32 30 85 35 36 32 31 33 38 33 32
>4018	33 88 92 32 35 32 33 31 35 35 32 00 25 32 01 97
>4028	20 87 33 36 30 39 33 31 38 32 30 96 35 36 32 31
>4038	33 38 33 32 33 88 92 38 37 32 36 30 37 30 33 39
>4048	00 25 33 01 97 20 87 33 36 30 39 33 31 38 32 30
>4058	b2 35 36 32 31 33 38 33 32 33 88 92 38 39 37 38
>4068	33 38 35 39 31 00 1d 34 01 97 20 87 33 36 30 39
>4078	33 31 38 32 30 92 35 36 32 31 33 38 33 32 33 88
>4088	92 30 00 1e 35 01 97 20 87 33 36 30 39 33 31 38
>4098	32 30 90 35 36 32 31 33 38 33 32 33 88 92 8b 31
>40a8	00 1e 36 01 97 20 87 33 36 30 39 33 31 38 32 30
>40b8	91 35 36 32 31 33 38 33 32 33 88 92 8b 31 00 1e
>40c8	37 01 97 20 87 33 36 30 39 33 31 38 32 30 8f 35
>40d8	36 32 31 33 38 33 32 33 88 92 8b 31 00 1d 38 01
>40e8	97 20 87 33 36 30 39 33 31 38 32 30 94 35 36 32
>40f8	31 33 38 33 32 33 88 92 30 00 1d 39 01 97 20 87
>4108	33 36 30 39 33 31 38 32 30 93 35 36 32 31 33 38
>4118	33 32 33 88 92 30 00 18 3a 01 97 20 87 81 2b 64
>4128	4d 81 b3 81 70 4d 30 81 88 20 92 20 8b 31 00 26
>4138	3b 01 97 20 31 30 33 31 37 38 36 37 37 31 8a 8b
>4148	31 30 37 31 33 32 30 36 30 39 92 8b 33 39 35 33
>4158	33 38 33 38 00 27 3c 01 97 20 31 30 33 31 37 38
>4168	36 37 37 31 8b 8b 31 30 37 31 33 32 30 36 30 39
>4178	92 32 31 30 33 31 30 37 33 38 30 00 31 3d 01 97
>4188	20 31 30 33 31 37 38 36 37 37 31 89 8b 31 30 37
>4198	31 33 32 30 36 30 39 92 8b 31 31 30 35 33 37 34
>41a8	34 33 31 38 36 35 38 36 33 35 33 39 00 1e 3e 01
>41b8	97 20 31 30 33 31 37 38 36 37 37 31 8c 8b 31 30
>41c8	37 31 33 32 30 36 30 39 92 30 00 26 3f 01 97 20
>41d8	31 30 33 31 37 38 36 37 37 31 84 31 30 37 31 33
>41e8	32 30 36 30 39 92 31 30 33 31 37 38 36 37 37 31
>41f8	00 26 40 01 97 20 87 31 30 33 31 37 38 36 37 37
>4208	31 85 8b 31 30 37 31 33 32 30 36 30 39 88 92 32
>4218	34 31 32 38 31 39 00 28 41 01 97 20 87 31 30 33
>4228	31 37 38 36 37 37 31 96 8b 31 30 37 31 33 32 30
>4238	36 30 39 88 92 8b 34 34 33 35 39 34 37 36 00 28
>4248	42 01 97 20 87 31 30 33 31 37 38 36 37 37 31 b2
>4258	8b 31 30 37 31 33 32 30 36 30 39 88 92 8b 34 31
>4268	39 34 36 36 35 37 00 20 43 01 97 20 87 31 30 33
>4278	31 37 38 36 37 37 31 92 8b 31 30 37 31 33 32 30
>4288	36 30 39 88 92 30 00 21 44 01 97 20 87 31 30 33
>4298	31 37 38 36 37 37 31 90 8b 31 30 37 31 33 32 30
>42a8	36 30 39 88 92 8b 31 00 20 45 01 97 20 87 31 30
>42b8	33 31 37 38 36 37 37 31 91 8b 31 30 37 31 33 32
>42c8	30 36 30 39 88 92 30 00 20 46 01 97 20 87 31 30
>42d8	33 31 37 38 36 37 37 31 8f 8b 31 30 37 31 33 32
>42e8	30 36 30 39 88 92 30 00 21 47 01 97 20 87 31 30
>42f8	33 31 37 38 36 37 37 31 94 8b 31 30 37 31 33 32
>4308	30 36 30 39 88 92 8b 31 00 21 48 01 97 20 87 31
>4318	30 33 31 37 38 36 37 37 31 93 8b 31 30 37 31 33
>4328	32 30 36 30 39 88 92 8b 31 00 17 49 01 97 20 87
>4338	81 77 6c 28 81 b3 81 5c 79 79 81 88 20 92 20 31
>4348	00 26 4a 01 97 20 8b 39 37 32 30 33 37 38 37 8a
>4358	8b 39 39 37 35 31 39 39 32 30 92 8b 31 30 39 34
>4368	37 32 33 37 30 37 00 24 4b 01 97 20 8b 39 37 32
>4378	30 33 37 38 37 8b 8b 39 39 37 35 31 39 39 32 30
>4388	92 39 30 30 33 31 36 31 33 33 00 1c 4c 01 97 20
>4398	8b 39 37 32 30 33 37 38 37 8c 8b 39 39 37 35 31
>43a8	39 39 32 30 92 30 00 21 4d 01 97 20 39 37 32 30
>43b8	33 37 38 37 84 39 39 37 35 31 39 39 32 30 92 39
>43c8	37 32 30 33 37 38 37 00 28 4e 01 97 20 87 8b 39
>43d8	37 32 30 33 37 38 37 85 8b 39 39 37 35 31 39 39
>43e8	32 30 88 92 8b 31 30 37 33 37 33 39 33 37 36 00
>43f8	27 4f 01 97 20 87 8b 39 37 32 30 33 37 38 37 96
>4408	8b 39 39 37 35 31 39 39 32 30 88 92 31 30 35 32
>4418	37 35 35 30 34 35 00 26 50 01 97 20 87 8b 39 37
>4428	32 30 33 37 38 37 b2 8b 39 39 37 35 31 39 39 32
>4438	30 88 92 8b 32 30 39 38 34 33 33 31 00 1e 51 01
>4448	97 20 87 8b 39 37 32 30 33 37 38 37 92 8b 39 39
>4458	37 35 31 39 39 32 30 88 92 30 00 1f 52 01 97 20
>4468	87 8b 39 37 32 30 33 37 38 37 90 8b 39 39 37 35
>4478	31 39 39 32 30 88 92 8b 31 00 1e 53 01 97 20 87
>4488	8b 39 37 32 30 33 37 38 37 91 8b 39 39 37 35 31
>4498	39 39 32 30 88 92 30 00 1e 54 01 97 20 87 8b 39
>44a8	37 32 30 33 37 38 37 8f 8b 39 39 37 35 31 39 39
>44b8	32 30 88 92 30 00 1f 55 01 97 20 87 8b 39 37 32
>44c8	30 33 37 38 37 94 8b 39 39 37 35 31 39 39 32 30
>44d8	88 92 8b 31 00 1f 56 01 97 20 87 8b 39 37 32 30
>44e8	33 37 38 37 93 8b 39 39 37 35 31 39 39 32 30 88
>44f8	92 8b 31 00 17 57 01 97 20 87 81 69 40 53 81 b3
>4508	81 28 7d 36 81 88 20 92 20 31 00 24 58 01 97 20
>4518	39 37 35 34 38 36 32 33 34 8a 33 35 35 37 35 37
>4528	33 39 32 92 31 33 33 31 32 34 33 36 32 36 00 23
>4538	59 01 97 20 39 37 35 34 38 36 32 33 34 8b 33 35
>4548	35 37 35 37 33 39 32 92 36 31 39 37 32 38 38 34
>4558	32 00 1b 5a 01 97 20 39 37 35 34 38 36 32 33 34
>4568	8c 33 35 35 37 35 37 33 39 32 92 32 00 23 5b 01
>4578	97 20 39 37 35 34 38 36 32 33 34 84 33 35 35 37
>4588	35 37 33 39 32 92 32 36 33 39 37 31 34 35 30 00
>4598	25 5c 01 97 20 87 39 37 35 34 38 36 32 33 34 85
>45a8	33 35 35 37 35 37 33 39 32 88 92 32 37 30 38 30
>45b8	36 32 38 38 00 25 5d 01 97 20 87 39 37 35 34 38
>45c8	36 32 33 34 96 33 35 35 37 35 37 33 39 32 88 92
>45d8	37 38 39 36 33 31 30 35 30 00 26 5e 01 97 20 87
>45e8	39 37 35 34 38 36 32 33 34 b2 33 35 35 37 35 37
>45f8	33 39 32 88 92 31 30 36 30 34 33 37 33 33 38 00
>4608	1d 5f 01 97 20 87 39 37 35 34 38 36 32 33 34 92
>4618	33 35 35 37 35 37 33 39 32 88 92 30 00 1e 60 01
>4628	97 20 87 39 37 35 34 38 36 32 33 34 90 33 35 35
>4638	37 35 37 33 39 32 88 92 8b 31 00 1d 61 01 97 20
>4648	87 39 37 35 34 38 36 32 33 34 91 33 35 35 37 35
>4658	37 33 39 32 88 92 30 00 1d 62 01 97 20 87 39 37
>4668	35 34 38 36 32 33 34 8f 33 35 35 37 35 37 33 39
>4678	32 88 92 30 00 1e 63 01 97 20 87 39 37 35 34 38
>4688	36 32 33 34 94 33 35 35 37 35 37 33 39 32 88 92
>4698	8b 31 00 1e 64 01 97 20 87 39 37 35 34 38 36 32
>46a8	33 34 93 33 35 35 37 35 37 33 39 32 88 92 8b 31
>46b8	00 17 65 01 97 20 87 81 64 3d 71 81 b3 81 38 65
>46c8	57 81 88 20 92 20 31 00 25 66 01 97 20 36 36 30
>46d8	31 34 30 36 30 37 8a 31 30 37 31 33 31 35 34 38
>46e8	38 92 31 37 33 31 34 35 36 30 39 35 00 1c 67 01
>46f8	97 20 36 36 30 31 34 30 36 30 37 8c 31 30 37 31
>4708	33 31 35 34 38 38 92 30 00 24 68 01 97 20 36 36
>4718	30 31 34 30 36 30 37 84 31 30 37 31 33 31 35 34
>4728	38 38 92 36 36 30 31 34 30 36 30 37 00 26 69 01
>4738	97 20 87 36 36 30 31 34 30 36 30 37 85 31 30 37
>4748	31 33 31 35 34 38 38 88 92 36 36 30 31 34 30 35
>4758	37 36 00 26 6a 01 97 20 87 36 36 30 31 34 30 36
>4768	30 37 96 31 30 37 31 33 31 35 34 38 38 88 92 34
>4778	31 31 31 37 34 39 34 33 00 27 6b 01 97 20 87 36
>4788	36 30 31 34 30 36 30 37 b2 31 30 37 31 33 31 35
>4798	34 38 38 88 92 31 30 37 31 33 31 35 35 31 39 00
>47a8	1e 6c 01 97 20 87 36 36 30 31 34 30 36 30 37 92
>47b8	31 30 37 31 33 31 35 34 38 38 88 92 30 00 1f 6d
>47c8	01 97 20 87 36 36 30 31 34 30 36 30 37 90 31 30
>47d8	37 31 33 31 35 34 38 38 88 92 8b 31 00 1f 6e 01
>47e8	97 20 87 36 36 30 31 34 30 36 30 37 91 31 30 37
>47f8	31 33 31 35 34 38 38 88 92 8b 31 00 1f 6f 01 97
>4808	20 87 36 36 30 31 34 30 36 30 37 8f 31 30 37 31
>4818	33 31 35 34 38 38 88 92 8b 31 00 1e 70 01 97 20
>4828	87 36 36 30 31 34 30 36 30 37 94 31 30 37 31 33
>4838	31 35 34 38 38 88 92 30 00 1e 71 01 97 20 87 36
>4848	36 30 31 34 30 36 30 37 93 31 30 37 31 33 31 35
>4858	34 38 38 88 92 30 00 17 72 01 97 20 87 81 71 68
>4868	44 81 b3 81 54 7b 45 81 88 20 92 20 31 00 1d 73
>4878	01 97 20 8b 34 38 31 33 31 30 37 39 34 8a 32 92
>4888	8b 34 38 31 33 31 30 37 39 32 00 1d 74 01 97 20
>4898	8b 34 38 31 33 31 30 37 39 34 89 32 92 8b 39 36
>48a8	32 36 32 31 35 38 38 00 1d 75 01 97 20 8b 34 38
>48b8	31 33 31 30 37 39 34 8c 32 92 8b 32 34 30 36 35
>48c8	35 33 39 37 00 13 76 01 97 20 34 38 31 33 31 30
>48d8	37 39 34 84 32 92 30 00 16 77 01 97 20 87 8b 34
>48e8	38 31 33 31 30 37 39 34 85 32 88 92 32 00 1f 78
>48f8	01 97 20 87 8b 34 38 31 33 31 30 37 39 34 96 32
>4908	88 92 8b 34 38 31 33 31 30 37 39 36 00 1f 79 01
>4918	97 20 87 8b 34 38 31 33 31 30 37 39 34 b2 32 88
>4928	92 8b 34 38 31 33 31 30 37 39 34 00 16 7a 01 97
>4938	20 87 8b 34 38 31 33 31 30 37 39 34 92 32 88 92
>4948	30 00 17 7b 01 97 20 87 8b 34 38 31 33 31 30 37
>4958	39 34 90 32 88 92 8b 31 00 17 7c 01 97 20 87 8b
>4968	34 38 31 33 31 30 37 39 34 91 32 88 92 8b 31 00
>4978	17 7d 01 97 20 87 8b 34 38 31 33 31 30 37 39 34
>4988	8f 32 88 92 8b 31 00 16 7e 01 97 20 87 8b 34 38
>4998	31 33 31 30 37 39 34 94 32 88 92 30 00 16 7f 01
>49a8	97 20 87 8b 34 38 31 33 31 30 37 39 34 93 32 88
>49b8	92 30 00 18 80 01 97 20 87 81 67 56 35 81 b3 81
>49c8	71 3f 50 81 88 20 92 20 8b 31 00 1c 81 01 97 20
>49d8	39 37 38 39 30 36 37 39 37 8a 8b 39 92 39 37 38
>49e8	39 30 36 37 38 38 00 1c 82 01 97 20 39 37 38 39
>49f8	30 36 37 39 37 8b 8b 39 92 39 37 38 39 30 36 38
>4a08	30 36 00 1e 83 01 97 20 39 37 38 39 30 36 37 39
>4a18	37 89 8b 39 92 8b 38 38 31 30 31 36 31 31 37 33
>4a28	00 1d 84 01 97 20 39 37 38 39 30 36 37 39 37 8c
>4a38	8b 39 92 8b 31 30 38 37 36 37 34 32 31 00 13 85
>4a48	01 97 20 39 37 38 39 30 36 37 39 37 84 39 92 38
>4a58	00 1e 86 01 97 20 87 39 37 38 39 30 36 37 39 37
>4a68	85 8b 39 88 92 39 37 38 39 30 36 37 38 39 00 1f
>4a78	87 01 97 20 87 39 37 38 39 30 36 37 39 37 96 8b
>4a88	39 88 92 8b 39 37 38 39 30 36 37 39 30 00 17 88
>4a98	01 97 20 87 39 37 38 39 30 36 37 39 37 b2 8b 39
>4aa8	88 92 8b 31 00 16 89 01 97 20 87 39 37 38 39 30
>4ab8	36 37 39 37 92 8b 39 88 92 30 00 17 8a 01 97 20
>4ac8	87 39 37 38 39 30 36 37 39 37 90 8b 39 88 92 8b
>4ad8	31 00 16 8b 01 97 20 87 39 37 38 39 30 36 37 39
>4ae8	37 91 8b 39 88 92 30 00 16 8c 01 97 20 87 39 37
>4af8	38 39 30 36 37 39 37 8f 8b 39 88 92 30 00 17 8d
>4b08	01 97 20 87 39 37 38 39 30 36 37 39 37 94 8b 39
>4b18	88 92 8b 31 00 17 8e 01 97 20 87 39 37 38 39 30
>4b28	36 37 39 37 93 8b 39 88 92 8b 31 00 18 8f 01 97
>4b38	20 87 81 36 3e 5d 81 b3 81 4b 51 5f 81 88 20 92
>4b48	20 8b 31 00 26 90 01 97 20 8b 31 30 39 35 38 39
>4b58	39 30 35 8a 8b 38 31 34 35 36 32 35 36 35 92 8b
>4b68	39 32 34 31 35 32 34 37 30 00 25 91 01 97 20 8b
>4b78	31 30 39 35 38 39 39 30 35 8b 8b 38 31 34 35 36
>4b88	32 35 36 35 92 37 30 34 39 37 32 36 36 30 00 1d
>4b98	92 01 97 20 8b 31 30 39 35 38 39 39 30 35 8c 8b
>4ba8	38 31 34 35 36 32 35 36 35 92 30 00 23 93 01 97
>4bb8	20 31 30 39 35 38 39 39 30 35 84 38 31 34 35 36
>4bc8	32 35 36 35 92 31 30 39 35 38 39 39 30 35 00 28
>4bd8	94 01 97 20 87 8b 31 30 39 35 38 39 39 30 35 85
>4be8	8b 38 31 34 35 36 32 35 36 35 88 92 8b 39 31 35
>4bf8	32 32 36 30 30 35 00 27 95 01 97 20 87 8b 31 30
>4c08	39 35 38 39 39 30 35 96 8b 38 31 34 35 36 32 35
>4c18	36 35 88 92 39 30 36 32 39 39 35 34 30 00 26 96
>4c28	01 97 20 87 8b 31 30 39 35 38 39 39 30 35 b2 8b
>4c38	38 31 34 35 36 32 35 36 35 88 92 8b 38 39 32 36
>4c48	34 36 35 00 1f 97 01 97 20 87 8b 31 30 39 35 38
>4c58	39 39 30 35 92 8b 38 31 34 35 36 32 35 36 35 88
>4c68	92 30 00 20 98 01 97 20 87 8b 31 30 39 35 38 39
>4c78	39 30 35 90 8b 38 31 34 35 36 32 35 36 35 88 92
>4c88	8b 31 00 1f 99 01 97 20 87 8b 31 30 39 35 38 39
>4c98	39 30 35 91 8b 38 31 34 35 36 32 35 36 35 88 92
>4ca8	30 00 1f 9a 01 97 20 87 8b 31 30 39 35 38 39 39
>4cb8	30 35 8f 8b 38 31 34 35 36 32 35 36 35 88 92 30
>4cc8	00 20 9b 01 97 20 87 8b 31 30 39 35 38 39 39 30
>4cd8	35 94 8b 38 31 34 35 36 32 35 36 35 88 92 8b 31
>4ce8	00 20 9c 01 97 20 87 8b 31 30 39 35 38 39 39 30
>4cf8	35 93 8b 38 31 34 35 36 32 35 36 35 88 92 8b 31
>4d08	00 18 9d 01 97 20 87 81 33 29 65 81 b3 81 75 42
>4d18	62 81 88 20 92 20 8b 31 00 0d 9e 01 97 20 30 8a
>4d28	8b 36 92 8b 36 00 0c 9f 01 97 20 30 8b 8b 36 92
>4d38	36 00 0c a0 01 97 20 30 89 8b 36 92 30 00 0c a1
>4d48	01 97 20 30 8c 8b 36 92 30 00 0b a2 01 97 20 30
>4d58	84 36 92 30 00 0e a3 01 97 20 87 30 85 8b 36 88
>4d68	92 30 00 0f a4 01 97 20 87 30 96 8b 36 88 92 8b
>4d78	36 00 0f a5 01 97 20 87 30 b2 8b 36 88 92 8b 36
>4d88	00 0e a6 01 97 20 87 30 92 8b 36 88 92 30 00 0f
>4d98	a7 01 97 20 87 30 90 8b 36 88 92 8b 31 00 0e a8
>4da8	01 97 20 87 30 91 8b 36 88 92 30 00 0e a9 01 97
>4db8	20 87 30 8f 8b 36 88 92 30 00 0f aa 01 97 20 87
>4dc8	30 94 8b 36 88 92 8b 31 00 0f ab 01 97 20 87 30
>4dd8	93 8b 36 88 92 8b 31 00 18 ac 01 97 20 87 81 70
>4de8	3c 51 81 b3 81 73 7a 6b 81 88 20 92 20 8b 31 00
>4df8	24 ad 01 97 20 8b 39 38 37 34 31 32 30 31 31 8a
>4e08	32 38 33 34 37 34 35 33 92 8b 39 35 39 30 36 34
>4e18	35 35 38 00 2c ae 01 97 20 8b 39 38 37 34 31 32
>4e28	30 31 31 89 32 38 33 34 37 34 35 33 92 8b 32 37
>4e38	39 39 30 36 31 35 35 37 33 34 35 37 39 38 33 00
>4e48	1d af 01 97 20 8b 39 38 37 34 31 32 30 31 31 8c
>4e58	32 38 33 34 37 34 35 33 92 8b 33 34 00 21 b0 01
>4e68	97 20 39 38 37 34 31 32 30 31 31 84 32 38 33 34
>4e78	37 34 35 33 92 32 33 35 39 38 36 30 39 00 24 b1
>4e88	01 97 20 87 8b 39 38 37 34 31 32 30 31 31 85 32
>4e98	38 33 34 37 34 35 33 88 92 31 38 38 37 36 34 33
>4ea8	37 00 26 b2 01 97 20 87 8b 39 38 37 34 31 32 30
>4eb8	31 31 96 32 38 33 34 37 34 35 33 88 92 8b 39 39
>4ec8	36 38 31 37 34 33 32 00 26 b3 01 97 20 87 8b 39
>4ed8	38 37 34 31 32 30 31 31 b2 32 38 33 34 37 34 35
>4ee8	33 88 92 8b 39 37 37 39 34 30 39 39 35 00 1d b4
>4ef8	01 97 20 87 8b 39 38 37 34 31 32 30 31 31 92 32
>4f08	38 33 34 37 34 35 33 88 92 30 00 1e b5 01 97 20
>4f18	87 8b 39 38 37 34 31 32 30 31 31 90 32 38 33 34
>4f28	37 34 35 33 88 92 8b 31 00 1e b6 01 97 20 87 8b
>4f38	39 38 37 34 31 32 30 31 31 91 32 38 33 34 37 34
>4f48	35 33 88 92 8b 31 00 1e b7 01 97 20 87 8b 39 38
>4f58	37 34 31 32 30 31 31 8f 32 38 33 34 37 34 35 33
>4f68	88 92 8b 31 00 1d b8 01 97 20 87 8b 39 38 37 34
>4f78	31 32 30 31 31 94 32 38 33 34 37 34 35 33 88 92
>4f88	30 00 1d b9 01 97 20 87 8b 39 38 37 34 31 32 30
>4f98	31 31 93 32 38 33 34 37 34 35 33 88 92 30 00 18
>4fa8	ba 01 97 20 87 81 29 64 4e 81 b3 81 6f 75 6c 81
>4fb8	88 20 92 20 8b 31 00 25 bb 01 97 20 33 35 37 34
>4fc8	39 30 33 32 35 8a 8b 39 38 31 34 34 39 36 33 36
>4fd8	92 8b 36 32 33 39 35 39 33 31 31 00 25 bc 01 97
>4fe8	20 33 35 37 34 39 30 33 32 35 8b 8b 39 38 31 34
>4ff8	34 39 36 33 36 92 31 33 33 38 39 33 39 39 36 31
>5008	00 2e bd 01 97 20 33 35 37 34 39 30 33 32 35 89
>5018	8b 39 38 31 34 34 39 36 33 36 92 8b 33 35 30 38
>5028	35 38 37 34 39 33 34 34 37 37 31 37 30 30 00 1c
>5038	be 01 97 20 33 35 37 34 39 30 33 32 35 8c 8b 39
>5048	38 31 34 34 39 36 33 36 92 30 00 23 bf 01 97 20
>5058	33 35 37 34 39 30 33 32 35 84 39 38 31 34 34 39
>5068	36 33 36 92 33 35 37 34 39 30 33 32 35 00 25 c0
>5078	01 97 20 87 33 35 37 34 39 30 33 32 35 85 8b 39
>5088	38 31 34 34 39 36 33 36 88 92 38 33 39 30 33 35
>5098	30 38 00 27 c1 01 97 20 87 33 35 37 34 39 30 33
>50a8	32 35 96 8b 39 38 31 34 34 39 36 33 36 88 92 8b
>50b8	37 39 31 37 36 36 33 32 37 00 27 c2 01 97 20 87
>50c8	33 35 37 34 39 30 33 32 35 b2 8b 39 38 31 34 34
>50d8	39 36 33 36 88 92 8b 37 30 37 38 36 32 38 31 39
>50e8	00 1e c3 01 97 20 87 33 35 37 34 39 30 33 32 35
>50f8	92 8b 39 38 31 34 34 39 36 33 36 88 92 30 00 1f
>5108	c4 01 97 20 87 33 35 37 34 39 30 33 32 35 90 8b
>5118	39 38 31 34 34 39 36 33 36 88 92 8b 31 00 1e c5
>5128	01 97 20 87 33 35 37 34 39 30 33 32 35 91 8b 39
>5138	38 31 34 34 39 36 33 36 88 92 30 00 1e c6 01 97
>5148	20 87 33 35 37 34 39 30 33 32 35 8f 8b 39 38 31
>5158	34 34 39 36 33 36 88 92 30 00 1f c7 01 97 20 87
>5168	33 35 37 34 39 30 33 32 35 94 8b 39 38 31 34 34
>5178	39 36 33 36 88 92 8b 31 00 1f c8 01 97 20 87 33
>5188	35 37 34 39 30 33 32 35 93 8b 39 38 31 34 34 39
>5198	36 33 36 88 92 8b 31 00 17 c9 01 97 20 87 81 7b
>51a8	3f 3a 81 b3 81 2f 2d 53 81 88 20 92 20 31 00 0e
>51b8	ca 01 97 20 8b 31 8a 8b 31 92 8b 32 00 0d cb 01
>51c8	97 20 8b 31 89 8b 31 92 31 00 0d cc 01 97 20 8b
>51d8	31 8c 8b 31 92 31 00 0b cd 01 97 20 31 84 31 92
>51e8	30 00 10 ce 01 97 20 87 8b 31 85 8b 31 88 92 8b
>51f8	31 00 0f cf 01 97 20 87 8b 31 96 8b 31 88 92 30
>5208	00 10 d0 01 97 20 87 8b 31 b2 8b 31 88 92 8b 31
>5218	00 10 d1 01 97 20 87 8b 31 92 8b 31 88 92 8b 31
>5228	00 0f d2 01 97 20 87 8b 31 90 8b 31 88 92 30 00
>5238	0f d3 01 97 20 87 8b 31 91 8b 31 88 92 30 00 10
>5248	d4 01 97 20 87 8b 31 8f 8b 31 88 92 8b 31 00 0f
>5258	d5 01 97 20 87 8b 31 94 8b 31 88 92 30 00 10 d6
>5268	01 97 20 87 8b 31 93 8b 31 88 92 8b 31 00 18 d7
>5278	01 97 20 87 81 3d 63 7a 81 b3 81 5c 40 33 81 88
>5288	20 92 20 8b 31 00 1c d8 01 97 20 38 38 35 31 38
>5298	37 38 38 34 8a 8b 35 92 38 38 35 31 38 37 38 37
>52a8	39 00 1c d9 01 97 20 38 38 35 31 38 37 38 38 34
>52b8	8b 8b 35 92 38 38 35 31 38 37 38 38 39 00 1e da
>52c8	01 97 20 38 38 35 31 38 37 38 38 34 89 8b 35 92
>52d8	8b 34 34 32 35 39 33 39 34 32 30 00 1d db 01 97
>52e8	20 38 38 35 31 38 37 38 38 34 8c 8b 35 92 8b 31
>52f8	37 37 30 33 37 35 37 36 00 13 dc 01 97 20 38 38
>5308	35 31 38 37 38 38 34 84 35 92 34 00 1e dd 01 97
>5318	20 87 38 38 35 31 38 37 38 38 34 85 8b 35 88 92
>5328	38 38 35 31 38 37 38 38 30 00 1f de 01 97 20 87
>5338	38 38 35 31 38 37 38 38 34 96 8b 35 88 92 8b 38
>5348	38 35 31 38 37 38 38 31 00 17 df 01 97 20 87 38
>5358	38 35 31 38 37 38 38 34 b2 8b 35 88 92 8b 31 00
>5368	16 e0 01 97 20 87 38 38 35 31 38 37 38 38 34 92
>5378	8b 35 88 92 30 00 17 e1 01 97 20 87 38 38 35 31
>5388	38 37 38 38 34 90 8b 35 88 92 8b 31 00 16 e2 01
>5398	97 20 87 38 38 35 31 38 37 38 38 34 91 8b 35 88
>53a8	92 30 00 16 e3 01 97 20 87 38 38 35 31 38 37 38
>53b8	38 34 8f 8b 35 88 92 30 00 17 e4 01 97 20 87 38
>53c8	38 35 31 38 37 38 38 34 94 8b 35 88 92 8b 31 00
>53d8	17 e5 01 97 20 87 38 38 35 31 38 37 38 38 34 93
>53e8	8b 35 88 92 8b 31 00 18 e6 01 97 20 87 81 2c 4e
>53f8	65 81 b3 81 5d 61 30 81 88 20 92 20 8b 31 00 0f
>5408	e7 01 97 20 38 8a 38 35 38 92 38 36 36 00 10 e8
>5418	01 97 20 38 89 38 35 38 92 36 38 36 34 00 0d e9
>5428	01 97 20 38 8c 38 35 38 92 30 00 0d ea 01 97 20
>5438	38 84 38 35 38 92 38 00 0f eb 01 97 20 87 38 85
>5448	38 35 38 88 92 38 00 11 ec 01 97 20 87 38 96 38
>5458	35 38 88 92 38 35 30 00 11 ed 01 97 20 87 38 b2
>5468	38 35 38 88 92 38 35 38 00 0f ee 01 97 20 87 38
>5478	92 38 35 38 88 92 30 00 10 ef 01 97 20 87 38 90
>5488	38 35 38 88 92 8b 31 00 10 f0 01 97 20 87 38 91
>5498	38 35 38 88 92 8b 31 00 10 f1 01 97 20 87 38 8f
>54a8	38 35 38 88 92 8b 31 00 0f f2 01 97 20 87 38 94
>54b8	38 35 38 88 92 30 00 0f f3 01 97 20 87 38 93 38
>54c8	35 38 88 92 30 00 18 f4 01 97 20 87 81 3b 36 4c
>54d8	81 b3 81 61 41 69 81 88 20 92 20 8b 31 00 26 f5
>54e8	01 97 20 8b 32 30 32 31 30 34 33 39 30 8a 8b 32
>54f8	37 34 38 38 39 32 31 37 92 8b 34 37 36 39 39 33
>5508	36 30 37 00 24 f6 01 97 20 8b 32 30 32 31 30 34
>5518	33 39 30 8b 8b 32 37 34 38 38 39 32 31 37 92 37
>5528	32 37 38 34 38 32 37 00 1d f7 01 97 20 8b 32 30
>5538	32 31 30 34 33 39 30 8c 8b 32 37 34 38 38 39 32
>5548	31 37 92 30 00 23 f8 01 97 20 32 30 32 31 30 34
>5558	33 39 30 84 32 37 34 38 38 39 32 31 37 92 32 30
>5568	32 31 30 34 33 39 30 00 28 f9 01 97 20 87 8b 32
>5578	30 32 31 30 34 33 39 30 85 8b 32 37 34 38 38 39
>5588	32 31 37 88 92 8b 34 37 36 38 33 39 34 39 34 00
>5598	27 fa 01 97 20 87 8b 32 30 32 31 30 34 33 39 30
>55a8	96 8b 32 37 34 38 38 39 32 31 37 88 92 34 37 36
>55b8	36 38 35 33 38 31 00 25 fb 01 97 20 87 8b 32 30
>55c8	32 31 30 34 33 39 30 b2 8b 32 37 34 38 38 39 32
>55d8	31 37 88 92 8b 31 35 34 31 31 33 00 1f fc 01 97
>55e8	20 87 8b 32 30 32 31 30 34 33 39 30 92 8b 32 37
>55f8	34 38 38 39 32 31 37 88 92 30 00 20 fd 01 97 20
>5608	87 8b 32 30 32 31 30 34 33 39 30 90 8b 32 37 34
>5618	38 38 39 32 31 37 88 92 8b 31 00 1f fe 01 97 20
>5628	87 8b 32 30 32 31 30 34 33 39 30 91 8b 32 37 34
>5638	38 38 39 32 31 37 88 92 30 00 1f ff 01 97 20 87
>5648	8b 32 30 32 31 30 34 33 39 30 8f 8b 32 37 34 38
>5658	38 39 32 31 37 88 92 30 00 20 00 02 97 20 87 8b
>5668	32 30 32 31 30 34 33 39 30 94 8b 32 37 34 38 38
>5678	39 32 31 37 88 92 8b 31 00 20 01 02 97 20 87 8b
>5688	32 30 32 31 30 34 33 39 30 93 8b 32 37 34 38 38
>5698	39 32 31 37 88 92 8b 31 00 17 02 02 97 20 87 81
>56a8	52 47 63 81 b3 81 51 4f 4c 81 88 20 92 20 31 00
>56b8	25 03 02 97 20 31 30 35 33 34 32 39 38 34 35 8a
>56c8	8b 36 37 31 36 38 33 39 39 35 92 33 38 31 37 34
>56d8	35 38 35 30 00 26 04 02 97 20 31 30 35 33 34 32
>56e8	39 38 34 35 8b 8b 36 37 31 36 38 33 39 39 35 92
>56f8	31 37 32 35 31 31 33 38 34 30 00 2f 05 02 97 20
>5708	31 30 35 33 34 32 39 38 34 35 89 8b 36 37 31 36
>5718	38 33 39 39 35 92 8b 37 30 37 35 37 31 39 36 36
>5728	37 34 31 38 33 30 37 37 35 00 1e 06 02 97 20 31
>5738	30 35 33 34 32 39 38 34 35 8c 8b 36 37 31 36 38
>5748	33 39 39 35 92 8b 31 00 24 07 02 97 20 31 30 35
>5758	33 34 32 39 38 34 35 84 36 37 31 36 38 33 39 39
>5768	35 92 33 38 31 37 34 35 38 35 30 00 27 08 02 97
>5778	20 87 31 30 35 33 34 32 39 38 34 35 85 8b 36 37
>5788	31 36 38 33 39 39 35 88 92 33 38 31 38 31 32 38
>5798	30 35 00 28 09 02 97 20 87 31 30 35 33 34 32 39
>57a8	38 34 35 96 8b 36 37 31 36 38 33 39 39 35 88 92
>57b8	8b 33 38 31 38 37 39 37 36 30 00 24 0a 02 97 20
>57c8	87 31 30 35 33 34 32 39 38 34 35 b2 8b 36 37 31
>57d8	36 38 33 39 39 35 88 92 8b 36 36 39 35 35 00 1f
>57e8	0b 02 97 20 87 31 30 35 33 34 32 39 38 34 35 92
>57f8	8b 36 37 31 36 38 33 39 39 35 88 92 30 00 20 0c
>5808	02 97 20 87 31 30 35 33 34 32 39 38 34 35 90 8b
>5818	36 37 31 36 38 33 39 39 35 88 92 8b 31 00 1f 0d
>5828	02 97 20 87 31 30 35 33 34 32 39 38 34 35 91 8b
>5838	36 37 31 36 38 33 39 39 35 88 92 30 00 1f 0e 02
>5848	97 20 87 31 30 35 33 34 32 39 38 34 35 8f 8b 36
>5858	37 31 36 38 33 39 39 35 88 92 30 00 20 0f 02 97
>5868	20 87 31 30 35 33 34 32 39 38 34 35 94 8b 36 37
>5878	31 36 38 33 39 39 35 88 92 8b 31 00 20 10 02 97
>5888	20 87 31 30 35 33 34 32 39 38 34 35 93 8b 36 37
>5898	31 36 38 33 39 39 35 88 92 8b 31 00 18 11 02 97
>58a8	20 87 81 47 42 31 81 b3 81 5a 38 2f 81 88 20 92
>58b8	20 8b 31 00 25 12 02 97 20 8b 39 33 33 38 32 39
>58c8	32 36 33 8a 36 33 39 31 37 35 32 31 37 92 8b 32
>58d8	39 34 36 35 34 30 34 36 00 2e 13 02 97 20 8b 39
>58e8	33 33 38 32 39 32 36 33 89 36 33 39 31 37 35 32
>58f8	31 37 92 8b 35 39 36 38 38 30 35 32 31 38 31 38
>5908	39 37 35 30 37 31 00 1d 14 02 97 20 8b 39 33 33
>5918	38 32 39 32 36 33 8c 36 33 39 31 37 35 32 31 37
>5928	92 8b 31 00 23 15 02 97 20 39 33 33 38 32 39 32
>5938	36 33 84 36 33 39 31 37 35 32 31 37 92 32 39 34
>5948	36 35 34 30 34 36 00 24 16 02 97 20 87 8b 39 33
>5958	33 38 32 39 32 36 33 85 36 33 39 31 37 35 32 31
>5968	37 88 92 31 30 34 38 36 32 35 00 27 17 02 97 20
>5978	87 8b 39 33 33 38 32 39 32 36 33 96 36 33 39 31
>5988	37 35 32 31 37 88 92 8b 32 39 36 37 35 31 32 39
>5998	36 00 27 18 02 97 20 87 8b 39 33 33 38 32 39 32
>59a8	36 33 b2 36 33 39 31 37 35 32 31 37 88 92 8b 32
>59b8	39 35 37 30 32 36 37 31 00 1e 19 02 97 20 87 8b
>59c8	39 33 33 38 32 39 32 36 33 92 36 33 39 31 37 35
>59d8	32 31 37 88 92 30 00 1f 1a 02 97 20 87 8b 39 33
>59e8	33 38 32 39 32 36 33 90 36 33 39 31 37 35 32 31
>59f8	37 88 92 8b 31 00 1f 1b 02 97 20 87 8b 39 33 33
>5a08	38 32 39 32 36 33 91 36 33 39 31 37 35 32 31 37
>5a18	88 92 8b 31 00 1f 1c 02 97 20 87 8b 39 33 33 38
>5a28	32 39 32 36 33 8f 36 33 39 31 37 35 32 31 37 88
>5a38	92 8b 31 00 1e 1d 02 97 20 87 8b 39 33 33 38 32
>5a48	39 32 36 33 94 36 33 39 31 37 35 32 31 37 88 92
>5a58	30 00 1e 1e 02 97 20 87 8b 39 33 33 38 32 39 32
>5a68	36 33 93 36 33 39 31 37 35 32 31 37 88 92 30 00
>5a78	18 1f 02 97 20 87 81 69 33 63 81 b3 81 6b 58 39
>5a88	81 88 20 92 20 8b 31 00 15 20 02 97 20 8b 34 37
>5a98	33 8a 8b 36 38 35 92 8b 31 31 35 38 00 13 21 02
>5aa8	97 20 8b 34 37 33 8b 8b 36 38 35 92 32 31 32 00
>5ab8	16 22 02 97 20 8b 34 37 33 89 8b 36 38 35 92 33
>5ac8	32 34 30 30 35 00 11 23 02 97 20 8b 34 37 33 8c
>5ad8	8b 36 38 35 92 30 00 11 24 02 97 20 34 37 33 84
>5ae8	36 38 35 92 34 37 33 00 17 25 02 97 20 87 8b 34
>5af8	37 33 85 8b 36 38 35 88 92 8b 31 30 32 31 00 15
>5b08	26 02 97 20 87 8b 34 37 33 96 8b 36 38 35 88 92
>5b18	38 38 34 00 16 27 02 97 20 87 8b 34 37 33 b2 8b
>5b28	36 38 35 88 92 8b 31 33 37 00 13 28 02 97 20 87
>5b38	8b 34 37 33 92 8b 36 38 35 88 92 30 00 14 29 02
>5b48	97 20 87 8b 34 37 33 90 8b 36 38 35 88 92 8b 31
>5b58	00 13 2a 02 97 20 87 8b 34 37 33 91 8b 36 38 35
>5b68	88 92 30 00 13 2b 02 97 20 87 8b 34 37 33 8f 8b
>5b78	36 38 35 88 92 30 00 14 2c 02 97 20 87 8b 34 37
>5b88	33 94 8b 36 38 35 88 92 8b 31 00 14 2d 02 97 20
>5b98	87 8b 34 37 33 93 8b 36 38 35 88 92 8b 31 00 18
>5ba8	2e 02 97 20 87 81 56 37 63 81 b3 81 56 79 5a 81
>5bb8	88 20 92 20 8b 31 00 00
.5bc0					StartBehaviour:
>5bc0	52					.text "R"

;******  Return to file: basic.asm


;******  End of listing
