
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q --m4510 -D TARGET=1 -b -L rom.lst -o rom.bin basic.asm
; Tue Jul 30 15:01:27 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					TARGET=1

;******  Processing input file: basic.asm


;******  Processing file: porting.asm

.fff8					EXTDummyInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word 	EXTDummyInterrupt
>fffc	3e f1						.word 	Start
>fffe	f8 ff						.word 	EXTDummyInterrupt
=4					EXTZPWork = 4								; Zero Page work for Personality (4 bytes)
=8					IOCursorX = 8 								; Cursor position
=9					IOCursorY = 9
=$20							zeroPage 	= $20 					; first ZP byte to use
=$2000							startMemory = $2000 				; first non ZP byte to use
=$8000							endMemory   = $8000 				; last non ZP byte to use
=$200							basicStack  = $200 					; stack for BASIC
=$400							evalStack   = $400 					; stack for evaluation of expressions

;******  Processing file: personalities/personality_mega65.asm

=40					EXTWidth = 40 								; screen width
=25					EXTHeight = 25 								; screen height
=$2000					EXTLowMemory = $2000 						; Workspace RAM starts here
=$8000					EXTHighMemory = $8000 						; Workspace RAM ends here
=$1000					EXTScreen = $1000							; 2k screen RAM here
=$800					EXTCharSet = $800							; 2k character set (0-7F) here
>0000	00 00					.word 	0 								; forces it to be a 64k ROM (at least)
.a000					EXTCBMFont:
>a000	3c 66 6e 6e 60 62 3c 00			.binary "c64-chargen.rom"
>a008	18 3c 66 7e 66 66 66 00 7c 66 66 7c 66 66 7c 00
>a018	3c 66 60 60 60 66 3c 00 78 6c 66 66 66 6c 78 00
>a028	7e 60 60 78 60 60 7e 00 7e 60 60 78 60 60 60 00
>a038	3c 66 60 6e 66 66 3c 00 66 66 66 7e 66 66 66 00
>a048	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c 6c 38 00
>a058	66 6c 78 70 78 6c 66 00 60 60 60 60 60 60 7e 00
>a068	63 77 7f 6b 63 63 63 00 66 76 7e 7e 6e 66 66 00
>a078	3c 66 66 66 66 66 3c 00 7c 66 66 7c 60 60 60 00
>a088	3c 66 66 66 66 3c 0e 00 7c 66 66 7c 78 6c 66 00
>a098	3c 66 60 3c 06 66 3c 00 7e 18 18 18 18 18 18 00
>a0a8	66 66 66 66 66 66 3c 00 66 66 66 66 66 3c 18 00
>a0b8	63 63 63 6b 7f 77 63 00 66 66 3c 18 3c 66 66 00
>a0c8	66 66 66 3c 18 18 18 00 7e 06 0c 18 30 60 7e 00
>a0d8	3c 30 30 30 30 30 3c 00 0c 12 30 7c 30 62 fc 00
>a0e8	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 7e 18 18 18 18
>a0f8	00 10 30 7f 7f 30 10 00 00 00 00 00 00 00 00 00
>a108	18 18 18 18 00 00 18 00 66 66 66 00 00 00 00 00
>a118	66 66 ff 66 ff 66 66 00 18 3e 60 3c 06 7c 18 00
>a128	62 66 0c 18 30 66 46 00 3c 66 3c 38 67 66 3f 00
>a138	06 0c 18 00 00 00 00 00 0c 18 30 30 30 18 0c 00
>a148	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>a158	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>a168	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a178	00 03 06 0c 18 30 60 00 3c 66 6e 76 66 66 3c 00
>a188	18 18 38 18 18 18 7e 00 3c 66 06 0c 30 60 7e 00
>a198	3c 66 06 1c 06 66 3c 00 06 0e 1e 66 7f 06 06 00
>a1a8	7e 60 7c 06 06 66 3c 00 3c 66 60 7c 66 66 3c 00
>a1b8	7e 66 0c 18 18 18 18 00 3c 66 66 3c 66 66 3c 00
>a1c8	3c 66 66 3e 06 66 3c 00 00 00 18 00 00 18 00 00
>a1d8	00 00 18 00 00 18 18 30 0e 18 30 60 30 18 0e 00
>a1e8	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a1f8	3c 66 06 0c 18 00 18 00 00 00 00 ff ff 00 00 00
>a208	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>a218	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>a228	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>a238	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>a248	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>a258	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>a268	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>a278	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>a288	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>a298	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>a2a8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>a2b8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>a2c8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>a2d8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>a2e8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>a2f8	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>a308	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a318	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a328	c0 c0 c0 c0 c0 c0 c0 c0 cc cc 33 33 cc cc 33 33
>a338	03 03 03 03 03 03 03 03 00 00 00 00 cc cc 33 33
>a348	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>a358	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>a368	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>a378	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>a388	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>a398	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>a3a8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a3b8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a3c8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>a3d8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a3e8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a3f8	f0 f0 f0 f0 0f 0f 0f 0f c3 99 91 91 9f 99 c3 ff
>a408	e7 c3 99 81 99 99 99 ff 83 99 99 83 99 99 83 ff
>a418	c3 99 9f 9f 9f 99 c3 ff 87 93 99 99 99 93 87 ff
>a428	81 9f 9f 87 9f 9f 81 ff 81 9f 9f 87 9f 9f 9f ff
>a438	c3 99 9f 91 99 99 c3 ff 99 99 99 81 99 99 99 ff
>a448	c3 e7 e7 e7 e7 e7 c3 ff e1 f3 f3 f3 f3 93 c7 ff
>a458	99 93 87 8f 87 93 99 ff 9f 9f 9f 9f 9f 9f 81 ff
>a468	9c 88 80 94 9c 9c 9c ff 99 89 81 81 91 99 99 ff
>a478	c3 99 99 99 99 99 c3 ff 83 99 99 83 9f 9f 9f ff
>a488	c3 99 99 99 99 c3 f1 ff 83 99 99 83 87 93 99 ff
>a498	c3 99 9f c3 f9 99 c3 ff 81 e7 e7 e7 e7 e7 e7 ff
>a4a8	99 99 99 99 99 99 c3 ff 99 99 99 99 99 c3 e7 ff
>a4b8	9c 9c 9c 94 80 88 9c ff 99 99 c3 e7 c3 99 99 ff
>a4c8	99 99 99 c3 e7 e7 e7 ff 81 f9 f3 e7 cf 9f 81 ff
>a4d8	c3 cf cf cf cf cf c3 ff f3 ed cf 83 cf 9d 03 ff
>a4e8	c3 f3 f3 f3 f3 f3 c3 ff ff e7 c3 81 e7 e7 e7 e7
>a4f8	ff ef cf 80 80 cf ef ff ff ff ff ff ff ff ff ff
>a508	e7 e7 e7 e7 ff ff e7 ff 99 99 99 ff ff ff ff ff
>a518	99 99 00 99 00 99 99 ff e7 c1 9f c3 f9 83 e7 ff
>a528	9d 99 f3 e7 cf 99 b9 ff c3 99 c3 c7 98 99 c0 ff
>a538	f9 f3 e7 ff ff ff ff ff f3 e7 cf cf cf e7 f3 ff
>a548	cf e7 f3 f3 f3 e7 cf ff ff 99 c3 00 c3 99 ff ff
>a558	ff e7 e7 81 e7 e7 ff ff ff ff ff ff ff e7 e7 cf
>a568	ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>a578	ff fc f9 f3 e7 cf 9f ff c3 99 91 89 99 99 c3 ff
>a588	e7 e7 c7 e7 e7 e7 81 ff c3 99 f9 f3 cf 9f 81 ff
>a598	c3 99 f9 e3 f9 99 c3 ff f9 f1 e1 99 80 f9 f9 ff
>a5a8	81 9f 83 f9 f9 99 c3 ff c3 99 9f 83 99 99 c3 ff
>a5b8	81 99 f3 e7 e7 e7 e7 ff c3 99 99 c3 99 99 c3 ff
>a5c8	c3 99 99 c1 f9 99 c3 ff ff ff e7 ff ff e7 ff ff
>a5d8	ff ff e7 ff ff e7 e7 cf f1 e7 cf 9f cf e7 f1 ff
>a5e8	ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>a5f8	c3 99 f9 f3 e7 ff e7 ff ff ff ff 00 00 ff ff ff
>a608	f7 e3 c1 80 80 e3 c1 ff e7 e7 e7 e7 e7 e7 e7 e7
>a618	ff ff ff 00 00 ff ff ff ff ff 00 00 ff ff ff ff
>a628	ff 00 00 ff ff ff ff ff ff ff ff ff 00 00 ff ff
>a638	cf cf cf cf cf cf cf cf f3 f3 f3 f3 f3 f3 f3 f3
>a648	ff ff ff 1f 0f c7 e7 e7 e7 e7 e3 f0 f8 ff ff ff
>a658	e7 e7 c7 0f 1f ff ff ff 3f 3f 3f 3f 3f 3f 00 00
>a668	3f 1f 8f c7 e3 f1 f8 fc fc f8 f1 e3 c7 8f 1f 3f
>a678	00 00 3f 3f 3f 3f 3f 3f 00 00 fc fc fc fc fc fc
>a688	ff c3 81 81 81 81 c3 ff ff ff ff ff ff 00 00 ff
>a698	c9 80 80 80 c1 e3 f7 ff 9f 9f 9f 9f 9f 9f 9f 9f
>a6a8	ff ff ff f8 f0 e3 e7 e7 3c 18 81 c3 c3 81 18 3c
>a6b8	ff c3 81 99 99 81 c3 ff e7 e7 99 99 e7 e7 c3 ff
>a6c8	f9 f9 f9 f9 f9 f9 f9 f9 f7 e3 c1 80 c1 e3 f7 ff
>a6d8	e7 e7 e7 00 00 e7 e7 e7 3f 3f cf cf 3f 3f cf cf
>a6e8	e7 e7 e7 e7 e7 e7 e7 e7 ff ff fc c1 89 c9 c9 ff
>a6f8	00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff
>a708	0f 0f 0f 0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00
>a718	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a728	3f 3f 3f 3f 3f 3f 3f 3f 33 33 cc cc 33 33 cc cc
>a738	fc fc fc fc fc fc fc fc ff ff ff ff 33 33 cc cc
>a748	00 01 03 07 0f 1f 3f 7f fc fc fc fc fc fc fc fc
>a758	e7 e7 e7 e0 e0 e7 e7 e7 ff ff ff ff f0 f0 f0 f0
>a768	e7 e7 e7 e0 e0 ff ff ff ff ff ff 07 07 e7 e7 e7
>a778	ff ff ff ff ff ff 00 00 ff ff ff e0 e0 e7 e7 e7
>a788	e7 e7 e7 00 00 ff ff ff ff ff ff 00 00 e7 e7 e7
>a798	e7 e7 e7 07 07 e7 e7 e7 3f 3f 3f 3f 3f 3f 3f 3f
>a7a8	1f 1f 1f 1f 1f 1f 1f 1f f8 f8 f8 f8 f8 f8 f8 f8
>a7b8	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff
>a7c8	ff ff ff ff ff 00 00 00 fc fc fc fc fc fc 00 00
>a7d8	ff ff ff ff 0f 0f 0f 0f f0 f0 f0 f0 ff ff ff ff
>a7e8	e7 e7 e7 07 07 ff ff ff 0f 0f 0f 0f ff ff ff ff
>a7f8	0f 0f 0f 0f f0 f0 f0 f0 3c 66 6e 6e 60 62 3c 00
>a808	00 00 3c 06 3e 66 3e 00 00 60 60 7c 66 66 7c 00
>a818	00 00 3c 60 60 60 3c 00 00 06 06 3e 66 66 3e 00
>a828	00 00 3c 66 7e 60 3c 00 00 0e 18 3e 18 18 18 00
>a838	00 00 3e 66 66 3e 06 7c 00 60 60 7c 66 66 66 00
>a848	00 18 00 38 18 18 3c 00 00 06 00 06 06 06 06 3c
>a858	00 60 60 6c 78 6c 66 00 00 38 18 18 18 18 3c 00
>a868	00 00 66 7f 7f 6b 63 00 00 00 7c 66 66 66 66 00
>a878	00 00 3c 66 66 66 3c 00 00 00 7c 66 66 7c 60 60
>a888	00 00 3e 66 66 3e 06 06 00 00 7c 66 60 60 60 00
>a898	00 00 3e 60 3c 06 7c 00 00 18 7e 18 18 18 0e 00
>a8a8	00 00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00
>a8b8	00 00 63 6b 7f 3e 36 00 00 00 66 3c 18 3c 66 00
>a8c8	00 00 66 66 66 3e 0c 78 00 00 7e 0c 18 30 7e 00
>a8d8	3c 30 30 30 30 30 3c 00 0c 12 30 7c 30 62 fc 00
>a8e8	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 7e 18 18 18 18
>a8f8	00 10 30 7f 7f 30 10 00 00 00 00 00 00 00 00 00
>a908	18 18 18 18 00 00 18 00 66 66 66 00 00 00 00 00
>a918	66 66 ff 66 ff 66 66 00 18 3e 60 3c 06 7c 18 00
>a928	62 66 0c 18 30 66 46 00 3c 66 3c 38 67 66 3f 00
>a938	06 0c 18 00 00 00 00 00 0c 18 30 30 30 18 0c 00
>a948	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>a958	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>a968	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a978	00 03 06 0c 18 30 60 00 3c 66 6e 76 66 66 3c 00
>a988	18 18 38 18 18 18 7e 00 3c 66 06 0c 30 60 7e 00
>a998	3c 66 06 1c 06 66 3c 00 06 0e 1e 66 7f 06 06 00
>a9a8	7e 60 7c 06 06 66 3c 00 3c 66 60 7c 66 66 3c 00
>a9b8	7e 66 0c 18 18 18 18 00 3c 66 66 3c 66 66 3c 00
>a9c8	3c 66 66 3e 06 66 3c 00 00 00 18 00 00 18 00 00
>a9d8	00 00 18 00 00 18 18 30 0e 18 30 60 30 18 0e 00
>a9e8	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a9f8	3c 66 06 0c 18 00 18 00 00 00 00 ff ff 00 00 00
>aa08	18 3c 66 7e 66 66 66 00 7c 66 66 7c 66 66 7c 00
>aa18	3c 66 60 60 60 66 3c 00 78 6c 66 66 66 6c 78 00
>aa28	7e 60 60 78 60 60 7e 00 7e 60 60 78 60 60 60 00
>aa38	3c 66 60 6e 66 66 3c 00 66 66 66 7e 66 66 66 00
>aa48	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c 6c 38 00
>aa58	66 6c 78 70 78 6c 66 00 60 60 60 60 60 60 7e 00
>aa68	63 77 7f 6b 63 63 63 00 66 76 7e 7e 6e 66 66 00
>aa78	3c 66 66 66 66 66 3c 00 7c 66 66 7c 60 60 60 00
>aa88	3c 66 66 66 66 3c 0e 00 7c 66 66 7c 78 6c 66 00
>aa98	3c 66 60 3c 06 66 3c 00 7e 18 18 18 18 18 18 00
>aaa8	66 66 66 66 66 66 3c 00 66 66 66 66 66 3c 18 00
>aab8	63 63 63 6b 7f 77 63 00 66 66 3c 18 3c 66 66 00
>aac8	66 66 66 3c 18 18 18 00 7e 06 0c 18 30 60 7e 00
>aad8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>aae8	18 18 18 18 18 18 18 18 33 33 cc cc 33 33 cc cc
>aaf8	33 99 cc 66 33 99 cc 66 00 00 00 00 00 00 00 00
>ab08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>ab18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>ab28	c0 c0 c0 c0 c0 c0 c0 c0 cc cc 33 33 cc cc 33 33
>ab38	03 03 03 03 03 03 03 03 00 00 00 00 cc cc 33 33
>ab48	cc 99 33 66 cc 99 33 66 03 03 03 03 03 03 03 03
>ab58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>ab68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>ab78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>ab88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>ab98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>aba8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>abb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>abc8	00 00 00 00 00 ff ff ff 01 03 06 6c 78 70 60 00
>abd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>abe8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>abf8	f0 f0 f0 f0 0f 0f 0f 0f c3 99 91 91 9f 99 c3 ff
>ac08	ff ff c3 f9 c1 99 c1 ff ff 9f 9f 83 99 99 83 ff
>ac18	ff ff c3 9f 9f 9f c3 ff ff f9 f9 c1 99 99 c1 ff
>ac28	ff ff c3 99 81 9f c3 ff ff f1 e7 c1 e7 e7 e7 ff
>ac38	ff ff c1 99 99 c1 f9 83 ff 9f 9f 83 99 99 99 ff
>ac48	ff e7 ff c7 e7 e7 c3 ff ff f9 ff f9 f9 f9 f9 c3
>ac58	ff 9f 9f 93 87 93 99 ff ff c7 e7 e7 e7 e7 c3 ff
>ac68	ff ff 99 80 80 94 9c ff ff ff 83 99 99 99 99 ff
>ac78	ff ff c3 99 99 99 c3 ff ff ff 83 99 99 83 9f 9f
>ac88	ff ff c1 99 99 c1 f9 f9 ff ff 83 99 9f 9f 9f ff
>ac98	ff ff c1 9f c3 f9 83 ff ff e7 81 e7 e7 e7 f1 ff
>aca8	ff ff 99 99 99 99 c1 ff ff ff 99 99 99 c3 e7 ff
>acb8	ff ff 9c 94 80 c1 c9 ff ff ff 99 c3 e7 c3 99 ff
>acc8	ff ff 99 99 99 c1 f3 87 ff ff 81 f3 e7 cf 81 ff
>acd8	c3 cf cf cf cf cf c3 ff f3 ed cf 83 cf 9d 03 ff
>ace8	c3 f3 f3 f3 f3 f3 c3 ff ff e7 c3 81 e7 e7 e7 e7
>acf8	ff ef cf 80 80 cf ef ff ff ff ff ff ff ff ff ff
>ad08	e7 e7 e7 e7 ff ff e7 ff 99 99 99 ff ff ff ff ff
>ad18	99 99 00 99 00 99 99 ff e7 c1 9f c3 f9 83 e7 ff
>ad28	9d 99 f3 e7 cf 99 b9 ff c3 99 c3 c7 98 99 c0 ff
>ad38	f9 f3 e7 ff ff ff ff ff f3 e7 cf cf cf e7 f3 ff
>ad48	cf e7 f3 f3 f3 e7 cf ff ff 99 c3 00 c3 99 ff ff
>ad58	ff e7 e7 81 e7 e7 ff ff ff ff ff ff ff e7 e7 cf
>ad68	ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>ad78	ff fc f9 f3 e7 cf 9f ff c3 99 91 89 99 99 c3 ff
>ad88	e7 e7 c7 e7 e7 e7 81 ff c3 99 f9 f3 cf 9f 81 ff
>ad98	c3 99 f9 e3 f9 99 c3 ff f9 f1 e1 99 80 f9 f9 ff
>ada8	81 9f 83 f9 f9 99 c3 ff c3 99 9f 83 99 99 c3 ff
>adb8	81 99 f3 e7 e7 e7 e7 ff c3 99 99 c3 99 99 c3 ff
>adc8	c3 99 99 c1 f9 99 c3 ff ff ff e7 ff ff e7 ff ff
>add8	ff ff e7 ff ff e7 e7 cf f1 e7 cf 9f cf e7 f1 ff
>ade8	ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>adf8	c3 99 f9 f3 e7 ff e7 ff ff ff ff 00 00 ff ff ff
>ae08	e7 c3 99 81 99 99 99 ff 83 99 99 83 99 99 83 ff
>ae18	c3 99 9f 9f 9f 99 c3 ff 87 93 99 99 99 93 87 ff
>ae28	81 9f 9f 87 9f 9f 81 ff 81 9f 9f 87 9f 9f 9f ff
>ae38	c3 99 9f 91 99 99 c3 ff 99 99 99 81 99 99 99 ff
>ae48	c3 e7 e7 e7 e7 e7 c3 ff e1 f3 f3 f3 f3 93 c7 ff
>ae58	99 93 87 8f 87 93 99 ff 9f 9f 9f 9f 9f 9f 81 ff
>ae68	9c 88 80 94 9c 9c 9c ff 99 89 81 81 91 99 99 ff
>ae78	c3 99 99 99 99 99 c3 ff 83 99 99 83 9f 9f 9f ff
>ae88	c3 99 99 99 99 c3 f1 ff 83 99 99 83 87 93 99 ff
>ae98	c3 99 9f c3 f9 99 c3 ff 81 e7 e7 e7 e7 e7 e7 ff
>aea8	99 99 99 99 99 99 c3 ff 99 99 99 99 99 c3 e7 ff
>aeb8	9c 9c 9c 94 80 88 9c ff 99 99 c3 e7 c3 99 99 ff
>aec8	99 99 99 c3 e7 e7 e7 ff 81 f9 f3 e7 cf 9f 81 ff
>aed8	e7 e7 e7 00 00 e7 e7 e7 3f 3f cf cf 3f 3f cf cf
>aee8	e7 e7 e7 e7 e7 e7 e7 e7 cc cc 33 33 cc cc 33 33
>aef8	cc 66 33 99 cc 66 33 99 ff ff ff ff ff ff ff ff
>af08	0f 0f 0f 0f 0f 0f 0f 0f ff ff ff ff 00 00 00 00
>af18	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>af28	3f 3f 3f 3f 3f 3f 3f 3f 33 33 cc cc 33 33 cc cc
>af38	fc fc fc fc fc fc fc fc ff ff ff ff 33 33 cc cc
>af48	33 66 cc 99 33 66 cc 99 fc fc fc fc fc fc fc fc
>af58	e7 e7 e7 e0 e0 e7 e7 e7 ff ff ff ff f0 f0 f0 f0
>af68	e7 e7 e7 e0 e0 ff ff ff ff ff ff 07 07 e7 e7 e7
>af78	ff ff ff ff ff ff 00 00 ff ff ff e0 e0 e7 e7 e7
>af88	e7 e7 e7 00 00 ff ff ff ff ff ff 00 00 e7 e7 e7
>af98	e7 e7 e7 07 07 e7 e7 e7 3f 3f 3f 3f 3f 3f 3f 3f
>afa8	1f 1f 1f 1f 1f 1f 1f 1f f8 f8 f8 f8 f8 f8 f8 f8
>afb8	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff
>afc8	ff ff ff ff ff 00 00 00 fe fc f9 93 87 8f 9f ff
>afd8	ff ff ff ff 0f 0f 0f 0f f0 f0 f0 f0 ff ff ff ff
>afe8	e7 e7 e7 07 07 ff ff ff 0f 0f 0f 0f ff ff ff ff
>aff8	0f 0f 0f 0f f0 f0 f0 f0
.b000					EXTStartPersonalise:
.b000	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.b002	9a		txs			txs
.b003	20 d6 b0	jsr $b0d6		jsr 	EXTReset 						; reset video
.b006	20 86 b0	jsr $b086		jsr 	EXTClearScreen 					; clear screen
.b009	4c 3e f1	jmp $f13e		jmp 	Start 							; start main application
.b00c					EXTReadKeyPort:
.b00c	db		phz			phz
.b00d	20 42 b0	jsr $b042		jsr 	EXTSetupKeyAddress
.b010	ea		nop			nop 									; read keyboard
.b011	b2 04		lda ($04),z		lda 	(EXTZPWork),z
.b013	fb		plz			plz
.b014	c9 14		cmp #$14		cmp 	#20
.b016	d0 02		bne $b01a		bne 	_KMNo
.b018	a9 08		lda #$08		lda 	#"H"-64
.b01a					_KMNo:
.b01a	c9 91		cmp #$91		cmp 	#145
.b01c	d0 02		bne $b020		bne 	_KMNo
.b01e	a9 17		lda #$17		lda 	#"W"-64
.b020					_KMNo:
.b020	c9 11		cmp #$11		cmp 	#17
.b022	d0 02		bne $b026		bne 	_KMNo
.b024	a9 13		lda #$13		lda 	#"S"-64
.b026					_KMNo:
.b026	c9 9d		cmp #$9d		cmp 	#157
.b028	d0 02		bne $b02c		bne 	_KMNo
.b02a	a9 01		lda #$01		lda 	#"A"-64
.b02c					_KMNo:
.b02c	c9 1d		cmp #$1d		cmp 	#29
.b02e	d0 02		bne $b032		bne 	_KMNo
.b030	a9 04		lda #$04		lda 	#"D"-64
.b032					_KMNo:
.b032	c9 00		cmp #$00		cmp 	#0 								; set Z
.b034	60		rts			rts
.b035					EXTRemoveKeyPressed:
.b035	48		pha			pha
.b036	db		phz			phz
.b037	20 42 b0	jsr $b042		jsr 	EXTSetupKeyAddress
.b03a	a9 00		lda #$00		lda 	#0
.b03c	ea		nop			nop 									; read keyboard
.b03d	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b03f	fb		plz			plz
.b040	68		pla			pla
.b041	60		rts			rts
.b042					EXTSetupKeyAddress:
.b042	a9 0f		lda #$0f		lda 	#$0F 							; set up to write to read keyboard.
.b044	85 07		sta $07			sta 	EXTZPWork+3
.b046	a9 fd		lda #$fd		lda 	#$FD
.b048	85 06		sta $06			sta 	EXTZPWork+2
.b04a	a9 36		lda #$36		lda 	#$36
.b04c	85 05		sta $05			sta 	EXTZPWork+1
.b04e	a9 10		lda #$10		lda 	#$10
.b050	85 04		sta $04			sta 	EXTZPWork+0
.b052	a3 00		ldz #$00		ldz 	#0
.b054	60		rts			rts
.b055					EXTCheckBreak:
.b055	db		phz			phz
.b056	20 42 b0	jsr $b042		jsr 	EXTSetupKeyAddress 				; point to keyboard
.b059	e6 04		inc $04			inc 	EXTZPWork 						; point to modifiers.
.b05b	ea		nop			nop 									; read modifiers.
.b05c	b2 04		lda ($04),z		lda 	(EXTZPWork),z
.b05e	fb		plz			plz 									; restore Z
.b05f	29 05		and #$05		and 	#5								; break is LeftShift+Ctrl
.b061	c9 05		cmp #$05		cmp 	#5
.b063	f0 03		beq $b068		beq 	_EXTCBYes
.b065	a9 00		lda #$00		lda 	#0
.b067	60		rts			rts
.b068					_EXTCBYes:
.b068	a9 01		lda #$01		lda 	#1
.b06a	60		rts			rts
.b06b					EXTReadScreen:
.b06b	5a		phy			phy 										; save Y
.b06c	8a		txa			txa 										; multiply XY by 2
.b06d	85 04		sta $04			sta 	EXTZPWork							; into EXTZPWork
.b06f	98		tya			tya
.b070	09 10		ora #$10		ora 	#EXTScreen>>8 						; move into screen area
.b072	85 05		sta $05			sta 	EXTZPWork+1 						; read character there
.b074	a0 00		ldy #$00		ldy 	#0
.b076	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.b078	7a		ply			ply 										; restore Y and exit.
.b079	60		rts			rts
.b07a					EXTWriteScreen:
.b07a	5a		phy			phy
.b07b	48		pha			pha
.b07c	20 6b b0	jsr $b06b		jsr		EXTReadScreen 						; set up the address into EXTZPWork
.b07f	a0 00		ldy #$00		ldy 	#0
.b081	68		pla			pla 										; restore and write.
.b082	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b084	7a		ply			ply
.b085	60		rts			rts
.b086					EXTClearScreen:
.b086	48		pha			pha 										; save registers
.b087	5a		phy			phy
.b088	a9 00		lda #$00		lda 	#EXTScreen & $FF 					; set up pointer
.b08a	85 04		sta $04			sta 	EXTZPWork
.b08c	a9 10		lda #$10		lda 	#EXTScreen >> 8
.b08e	85 05		sta $05			sta 	EXTZPWork+1
.b090	a0 00		ldy #$00		ldy 	#0
.b092					_EXTCSLoop:
.b092	a9 20		lda #$20		lda 	#32
.b094	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b096	c8		iny			iny
.b097	d0 f9		bne $b092		bne 	_EXTCSLoop
.b099	e6 05		inc $05			inc 	EXTZPWork+1 						; next screen page
.b09b	a5 05		lda $05			lda 	EXTZPWork+1
.b09d	c9 18		cmp #$18		cmp 	#(EXTScreen>>8)+8 					; done 2k ?
.b09f	d0 f1		bne $b092		bne 	_EXTCSLoop
.b0a1	7a		ply			ply 										; restore
.b0a2	68		pla			pla
.b0a3	60		rts			rts
.b0a4					EXTScrollDisplay:
.b0a4	48		pha			pha 										; save registers
.b0a5	5a		phy			phy
.b0a6	a9 00		lda #$00		lda 	#EXTScreen & $FF 					; set pointer to screen
.b0a8	85 04		sta $04			sta 	EXTZPWork+0
.b0aa	a9 10		lda #$10		lda 	#EXTScreen >> 8
.b0ac	85 05		sta $05			sta 	EXTZPWork+1
.b0ae					_EXTScroll:
.b0ae	a0 28		ldy #$28		ldy 	#EXTWidth 							; x 2 because of two byte format.
.b0b0	b1 04		lda ($04),y		lda 	(EXTZPWork),y
.b0b2	a0 00		ldy #$00		ldy 	#0
.b0b4	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b0b6	e6 04		inc $04			inc 	EXTZPWork 							; bump address
.b0b8	d0 02		bne $b0bc		bne 	_EXTNoCarry
.b0ba	e6 05		inc $05			inc 	EXTZPWork+1
.b0bc					_EXTNoCarry:
.b0bc	a5 04		lda $04			lda 	EXTZPWork 							; done ?
.b0be	c9 c0		cmp #$c0		cmp	 	#(EXTScreen+EXTWidth*(EXTHeight-1)) & $FF
.b0c0	d0 ec		bne $b0ae		bne 	_EXTScroll
.b0c2	a5 05		lda $05			lda 	EXTZPWork+1
.b0c4	c9 13		cmp #$13		cmp	 	#(EXTScreen+EXTWidth*(EXTHeight-1)) >> 8
.b0c6	d0 e6		bne $b0ae		bne 	_EXTScroll
.b0c8	a0 00		ldy #$00		ldy 	#0									; clear bottom line.
.b0ca					_EXTLastLine:
.b0ca	a9 20		lda #$20		lda 	#32
.b0cc	91 04		sta ($04),y		sta 	(EXTZPWork),y
.b0ce	c8		iny			iny
.b0cf	c0 28		cpy #$28		cpy 	#EXTWidth
.b0d1	d0 f7		bne $b0ca		bne 	_EXTLastLine
.b0d3	7a		ply			ply 										; restore and exit.
.b0d4	68		pla			pla
.b0d5	60		rts			rts
.b0d6					EXTReset:
.b0d6	48		pha			pha 									; save registers
.b0d7	da		phx			phx
.b0d8	5a		phy			phy
.b0d9	a9 0f		lda #$0f		lda 	#$0F 							; set up to write to video system.
.b0db	85 07		sta $07			sta 	EXTZPWork+3
.b0dd	a9 fd		lda #$fd		lda 	#$FD
.b0df	85 06		sta $06			sta 	EXTZPWork+2
.b0e1	a9 30		lda #$30		lda 	#$30
.b0e3	85 05		sta $05			sta 	EXTZPWork+1
.b0e5	a9 00		lda #$00		lda 	#$00
.b0e7	85 04		sta $04			sta 	EXTZPWork+0
.b0e9	a3 2f		ldz #$2f		ldz 	#$2F 							; address already set up
.b0eb	a9 47		lda #$47		lda 	#$47
.b0ed	ea		nop			nop
.b0ee	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0f0	a3 2f		ldz #$2f		ldz 	#$2F 							; address already set up
.b0f2	a9 53		lda #$53		lda 	#$53
.b0f4	ea		nop			nop
.b0f5	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0f7	a3 30		ldz #$30		ldz 	#$30 							; address already set up
.b0f9	a9 40		lda #$40		lda 	#$40
.b0fb	ea		nop			nop
.b0fc	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b0fe	a3 31		ldz #$31		ldz 	#$31 							; address already set up
.b100	a9 40		lda #$40		lda 	#$40
.b102	ea		nop			nop
.b103	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b105	ad 31 d0	lda $d031		lda $d031	; VIC-III Control Register B
.b108	29 40		and #$40		and #$40	; bit-6 is 4mhz
.b10a	8d 31 d0	sta $d031		sta $d031
.b10d	a3 20		ldz #$20		ldz 	#$20 							; address already set up
.b10f	a9 00		lda #$00		lda 	#0
.b111	ea		nop			nop
.b112	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b114	a3 21		ldz #$21		ldz 	#$21 							; address already set up
.b116	a9 00		lda #$00		lda 	#0
.b118	ea		nop			nop
.b119	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b11b	a3 6f		ldz #$6f		ldz 	#$6F 							; address already set up
.b11d	a9 80		lda #$80		lda 	#$80
.b11f	ea		nop			nop
.b120	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b122	ad 66 d0	lda $d066		lda $d066
.b125	29 7f		and #$7f		and #$7F
.b127	8d 66 d0	sta $d066		sta $d066
.b12a	a3 6a		ldz #$6a		ldz 	#$6A 							; address already set up
.b12c	a9 00		lda #$00		lda 	#$00
.b12e	ea		nop			nop
.b12f	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b131	a3 6b		ldz #$6b		ldz 	#$6B 							; address already set up
.b133	a9 00		lda #$00		lda 	#$00
.b135	ea		nop			nop
.b136	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b138	a3 78		ldz #$78		ldz 	#$78 							; address already set up
.b13a	a9 00		lda #$00		lda 	#$00
.b13c	ea		nop			nop
.b13d	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b13f	a3 5f		ldz #$5f		ldz 	#$5F 							; address already set up
.b141	a9 00		lda #$00		lda 	#$00
.b143	ea		nop			nop
.b144	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b146	a3 5a		ldz #$5a		ldz 	#$5A 							; address already set up
.b148	a9 78		lda #$78		lda 	#$78
.b14a	ea		nop			nop
.b14b	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b14d	a3 5d		ldz #$5d		ldz 	#$5D 							; address already set up
.b14f	a9 c0		lda #$c0		lda 	#$C0
.b151	ea		nop			nop
.b152	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b154	a3 5c		ldz #$5c		ldz 	#$5C 							; address already set up
.b156	a9 50		lda #$50		lda 	#80
.b158	ea		nop			nop
.b159	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b15b	a9 ff		lda #$ff		lda #$ff
.b15d	8d 01 dd	sta $dd01		sta $DD01
.b160	8d 00 dd	sta $dd00		sta $DD00
.b163	a3 18		ldz #$18		ldz 	#$18 							; address already set up
.b165	a9 14		lda #$14		lda 	#$14
.b167	ea		nop			nop
.b168	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b16a	a3 11		ldz #$11		ldz 	#$11 							; address already set up
.b16c	a9 1b		lda #$1b		lda 	#$1B
.b16e	ea		nop			nop
.b16f	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b171	a3 16		ldz #$16		ldz 	#$16 							; address already set up
.b173	a9 c8		lda #$c8		lda 	#$C8
.b175	ea		nop			nop
.b176	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b178	a3 c5		ldz #$c5		ldz 	#$C5 							; address already set up
.b17a	a9 54		lda #$54		lda 	#$54
.b17c	ea		nop			nop
.b17d	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b17f	a3 58		ldz #$58		ldz 	#$58 							; address already set up
.b181	a9 50		lda #$50		lda 	#80
.b183	ea		nop			nop
.b184	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b186	a3 59		ldz #$59		ldz 	#$59 							; address already set up
.b188	a9 00		lda #$00		lda 	#0
.b18a	ea		nop			nop
.b18b	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b18d	a3 18		ldz #$18		ldz 	#$18 							; address already set up
.b18f	a9 42		lda #$42		lda 	#$42
.b191	ea		nop			nop
.b192	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b194	a3 11		ldz #$11		ldz 	#$11 							; address already set up
.b196	a9 1b		lda #$1b		lda 	#$1B
.b198	ea		nop			nop
.b199	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b19b	a9 00		lda #$00		lda 	#$00							; colour RAM at $1F800-1FFFF (2kb)
.b19d	85 07		sta $07			sta 	EXTZPWork+3
.b19f	a9 01		lda #$01		lda 	#$01
.b1a1	85 06		sta $06			sta 	EXTZPWork+2
.b1a3	a9 f8		lda #$f8		lda 	#$F8
.b1a5	85 05		sta $05			sta 	EXTZPWork+1
.b1a7	a9 00		lda #$00		lda 	#$00
.b1a9	85 04		sta $04			sta 	EXTZPWork+0
.b1ab	a3 00		ldz #$00		ldz 	#0
.b1ad					_EXTClearColorRam:
.b1ad	a9 03		lda #$03		lda 	#3 								; fill that with this colour.
.b1af	ea		nop			nop
.b1b0	92 04		sta ($04),z		sta 	(EXTZPWork),z
.b1b2	3b		dez			dez
.b1b3	d0 f8		bne $b1ad		bne 	_EXTClearColorRam
.b1b5	e6 05		inc $05			inc 	EXTZPWork+1
.b1b7	d0 f4		bne $b1ad		bne 	_EXTClearColorRam
.b1b9	a2 00		ldx #$00		ldx 	#0 								; copy PET Font into memory.
.b1bb					_EXTCopyCBMFont:
.b1bb	bd 00 a8	lda $a800,x		lda 	EXTCBMFont+$800,x 				; +$800 uses the lower case c/set
.b1be	9d 00 08	sta $0800,x		sta 	EXTCharSet,x
.b1c1	bd 00 a1	lda $a100,x		lda 	EXTCBMFont+$100,x
.b1c4	9d 00 09	sta $0900,x		sta 	EXTCharSet+$100,x
.b1c7	bd 00 a2	lda $a200,x		lda 	EXTCBMFont+$200,x
.b1ca	9d 00 0a	sta $0a00,x		sta 	EXTCharSet+$200,x
.b1cd	bd 00 a3	lda $a300,x		lda 	EXTCBMFont+$300,x
.b1d0	9d 00 0b	sta $0b00,x		sta 	EXTCharSet+$300,x
.b1d3	ca		dex			dex
.b1d4	d0 e5		bne $b1bb		bne 	_EXTCopyCBMFont
.b1d6	7a		ply			ply 									; restore and exit.
.b1d7	fa		plx			plx
.b1d8	68		pla			pla
.b1d9	60		rts			rts

;******  Return to file: porting.asm


;******  Return to file: basic.asm


;******  Processing file: include/tokens.inc

.e000					KeywordVectorTable:
>e000	d6 e8					.word	BFUNC_WordInd                 ; "!"        ($0080)
>e002	45 e1					.word	SyntaxError                   ; """        ($0081)
>e004	45 e1					.word	SyntaxError                   ; "#"        ($0082)
>e006	cb e8					.word	BFUNC_String                  ; "$"        ($0083)
>e008	6b ea					.word	BFUNC_Modulus                 ; "%"        ($0084)
>e00a	dd e8					.word	BFUNC_And                     ; "&"        ($0085)
>e00c	45 e1					.word	SyntaxError                   ; "'"        ($0086)
>e00e	45 e1					.word	SyntaxError                   ; "("        ($0087)
>e010	45 e1					.word	SyntaxError                   ; ")"        ($0088)
>e012	4c e9					.word	BFUNC_Multiply                ; "*"        ($0089)
>e014	7f e8					.word	BFUNC_Add                     ; "+"        ($008a)
>e016	a5 e8					.word	BFUNC_Subtract                ; "-"        ($008b)
>e018	a3 e9					.word	BFUNC_Divide                  ; "/"        ($008c)
>e01a	45 e1					.word	SyntaxError                   ; ":"        ($008d)
>e01c	45 e1					.word	SyntaxError                   ; ";"        ($008e)
>e01e	e9 ea					.word	BFUNC_LessEqual               ; "<="       ($008f)
>e020	8a ea					.word	BFUNC_NotEquals               ; "<>"       ($0090)
>e022	c4 ea					.word	BFUNC_Less                    ; "<"        ($0091)
>e024	87 ea					.word	BFUNC_Equals                  ; "="        ($0092)
>e026	c7 ea					.word	BFUNC_GreaterEqual            ; ">="       ($0093)
>e028	e6 ea					.word	BFUNC_Greater                 ; ">"        ($0094)
>e02a	cf e8					.word	BFUNC_ByteInd                 ; "?"        ($0095)
>e02c	27 e9					.word	BFUNC_Xor                     ; "^"        ($0096)
>e02e	c0 ec					.word	COMMAND_Assert                ; "assert"   ($0097)
>e030	a0 eb					.word	UNARY_Abs                     ; "abs"      ($0098)
>e032	07 ed					.word	COMMAND_Clear                 ; "clear"    ($0099)
>e034	af ef					.word	COMMAND_CLS                   ; "cls"      ($009a)
>e036	8b eb					.word	UNARY_Ch                      ; "ch"       ($009b)
>e038	52 f0					.word	COMMAND_Do                    ; "do"       ($009c)
>e03a	b5 ec					.word	COMMAND_End                   ; "end"      ($009d)
>e03c	45 e1					.word	SyntaxError                   ; "for"      ($009e)
>e03e	df f0					.word	COMMAND_Gosub                 ; "gosub"    ($009f)
>e040	cc f0					.word	COMMAND_Goto                  ; "goto"     ($00a0)
>e042	bd eb					.word	UNARY_Get                     ; "get"      ($00a1)
>e044	17 ec					.word	UNARY_IOAddr                  ; "ioaddr"   ($00a2)
>e046	45 e1					.word	SyntaxError                   ; "input"    ($00a3)
>e048	45 e1					.word	SyntaxError                   ; "if"       ($00a4)
>e04a	b2 ef					.word	COMMAND_List                  ; "list"     ($00a5)
>e04c	45 e1					.word	SyntaxError                   ; "link"     ($00a6)
>e04e	79 ed					.word	COMMAND_Let                   ; "let"      ($00a7)
>e050	49 eb					.word	UNARY_Len                     ; "len"      ($00a8)
>e052	45 e1					.word	SyntaxError                   ; "next"     ($00a9)
>e054	ee ec					.word	COMMAND_NewExec               ; "new"      ($00aa)
>e056	3d ed					.word	COMMAND_OldExec               ; "old"      ($00ab)
>e058	b4 ee					.word	COMMAND_Print                 ; "print"    ($00ac)
>e05a	c7 eb					.word	UNARY_Page                    ; "page"     ($00ad)
>e05c	eb f0					.word	COMMAND_Return                ; "return"   ($00ae)
>e05e	e4 ec					.word	COMMAND_Rem                   ; "rem"      ($00af)
>e060	2c ec					.word	COMMAND_Run                   ; "run"      ($00b0)
>e062	da eb					.word	UNARY_Rnd                     ; "rnd"      ($00b1)
>e064	ad ec					.word	COMMAND_Stop                  ; "stop"     ($00b2)
>e066	45 e1					.word	SyntaxError                   ; "step"     ($00b3)
>e068	45 e1					.word	SyntaxError                   ; "then"     ($00b4)
>e06a	a8 eb					.word	UNARY_Top                     ; "top"      ($00b5)
>e06c	45 e1					.word	SyntaxError                   ; "to"       ($00b6)
>e06e	58 f0					.word	COMMAND_Until                 ; "until"    ($00b7)
>e070	02 e9					.word	BFUNC_Or                      ; "|"        ($00b8)
>e072	08 eb					.word	BFUNC_StringCompare           ; "~"        ($00b9)
.e074					TokenText:
>e074	a1					.byte $a1                             ; $0080 !
>e075	a2					.byte $a2                             ; $0081 "
>e076	a3					.byte $a3                             ; $0082 #
>e077	a4					.byte $a4                             ; $0083 $
>e078	a5					.byte $a5                             ; $0084 %
>e079	a6					.byte $a6                             ; $0085 &
>e07a	a7					.byte $a7                             ; $0086 '
>e07b	a8					.byte $a8                             ; $0087 (
>e07c	a9					.byte $a9                             ; $0088 )
>e07d	aa					.byte $aa                             ; $0089 *
>e07e	ab					.byte $ab                             ; $008a +
>e07f	ad					.byte $ad                             ; $008b -
>e080	af					.byte $af                             ; $008c /
>e081	ba					.byte $ba                             ; $008d :
>e082	bb					.byte $bb                             ; $008e ;
>e083	3c bd					.byte $3c,$bd                         ; $008f <=
>e085	3c be					.byte $3c,$be                         ; $0090 <>
>e087	bc					.byte $bc                             ; $0091 <
>e088	bd					.byte $bd                             ; $0092 =
>e089	3e bd					.byte $3e,$bd                         ; $0093 >=
>e08b	be					.byte $be                             ; $0094 >
>e08c	bf					.byte $bf                             ; $0095 ?
>e08d	de					.byte $de                             ; $0096 ^
>e08e	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4         ; $0097 assert
>e094	41 42 d3				.byte $41,$42,$d3                     ; $0098 abs
>e097	43 4c 45 41 d2				.byte $43,$4c,$45,$41,$d2             ; $0099 clear
>e09c	43 4c d3				.byte $43,$4c,$d3                     ; $009a cls
>e09f	43 c8					.byte $43,$c8                         ; $009b ch
>e0a1	44 cf					.byte $44,$cf                         ; $009c do
>e0a3	45 4e c4				.byte $45,$4e,$c4                     ; $009d end
>e0a6	46 4f d2				.byte $46,$4f,$d2                     ; $009e for
>e0a9	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2             ; $009f gosub
>e0ae	47 4f 54 cf				.byte $47,$4f,$54,$cf                 ; $00a0 goto
>e0b2	47 45 d4				.byte $47,$45,$d4                     ; $00a1 get
>e0b5	49 4f 41 44 44 d2			.byte $49,$4f,$41,$44,$44,$d2         ; $00a2 ioaddr
>e0bb	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4             ; $00a3 input
>e0c0	49 c6					.byte $49,$c6                         ; $00a4 if
>e0c2	4c 49 53 d4				.byte $4c,$49,$53,$d4                 ; $00a5 list
>e0c6	4c 49 4e cb				.byte $4c,$49,$4e,$cb                 ; $00a6 link
>e0ca	4c 45 d4				.byte $4c,$45,$d4                     ; $00a7 let
>e0cd	4c 45 ce				.byte $4c,$45,$ce                     ; $00a8 len
>e0d0	4e 45 58 d4				.byte $4e,$45,$58,$d4                 ; $00a9 next
>e0d4	4e 45 d7				.byte $4e,$45,$d7                     ; $00aa new
>e0d7	4f 4c c4				.byte $4f,$4c,$c4                     ; $00ab old
>e0da	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4             ; $00ac print
>e0df	50 41 47 c5				.byte $50,$41,$47,$c5                 ; $00ad page
>e0e3	52 45 54 55 52 ce			.byte $52,$45,$54,$55,$52,$ce         ; $00ae return
>e0e9	52 45 cd				.byte $52,$45,$cd                     ; $00af rem
>e0ec	52 55 ce				.byte $52,$55,$ce                     ; $00b0 run
>e0ef	52 4e c4				.byte $52,$4e,$c4                     ; $00b1 rnd
>e0f2	53 54 4f d0				.byte $53,$54,$4f,$d0                 ; $00b2 stop
>e0f6	53 54 45 d0				.byte $53,$54,$45,$d0                 ; $00b3 step
>e0fa	54 48 45 ce				.byte $54,$48,$45,$ce                 ; $00b4 then
>e0fe	54 4f d0				.byte $54,$4f,$d0                     ; $00b5 top
>e101	54 cf					.byte $54,$cf                         ; $00b6 to
>e103	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc             ; $00b7 until
>e108	fc					.byte $fc                             ; $00b8 |
>e109	fe					.byte $fe                             ; $00b9 ~
>e10a	00					.byte $00
.e10b					TokenTypeInformation:
>e10b	04					.byte $04                             ; $0080 !
>e10c	0a					.byte $0a                             ; $0081 "
>e10d	0a					.byte $0a                             ; $0082 #
>e10e	04					.byte $04                             ; $0083 $
>e10f	03					.byte $03                             ; $0084 %
>e110	00					.byte $00                             ; $0085 &
>e111	0a					.byte $0a                             ; $0086 '
>e112	0a					.byte $0a                             ; $0087 (
>e113	0a					.byte $0a                             ; $0088 )
>e114	03					.byte $03                             ; $0089 *
>e115	02					.byte $02                             ; $008a +
>e116	02					.byte $02                             ; $008b -
>e117	03					.byte $03                             ; $008c /
>e118	0a					.byte $0a                             ; $008d :
>e119	0a					.byte $0a                             ; $008e ;
>e11a	01					.byte $01                             ; $008f <=
>e11b	01					.byte $01                             ; $0090 <>
>e11c	01					.byte $01                             ; $0091 <
>e11d	01					.byte $01                             ; $0092 =
>e11e	01					.byte $01                             ; $0093 >=
>e11f	01					.byte $01                             ; $0094 >
>e120	04					.byte $04                             ; $0095 ?
>e121	00					.byte $00                             ; $0096 ^
>e122	04					.byte $04                             ; $0097 assert
>e123	09					.byte $09                             ; $0098 abs
>e124	04					.byte $04                             ; $0099 clear
>e125	04					.byte $04                             ; $009a cls
>e126	09					.byte $09                             ; $009b ch
>e127	04					.byte $04                             ; $009c do
>e128	04					.byte $04                             ; $009d end
>e129	04					.byte $04                             ; $009e for
>e12a	04					.byte $04                             ; $009f gosub
>e12b	04					.byte $04                             ; $00a0 goto
>e12c	09					.byte $09                             ; $00a1 get
>e12d	09					.byte $09                             ; $00a2 ioaddr
>e12e	04					.byte $04                             ; $00a3 input
>e12f	04					.byte $04                             ; $00a4 if
>e130	04					.byte $04                             ; $00a5 list
>e131	04					.byte $04                             ; $00a6 link
>e132	04					.byte $04                             ; $00a7 let
>e133	09					.byte $09                             ; $00a8 len
>e134	04					.byte $04                             ; $00a9 next
>e135	04					.byte $04                             ; $00aa new
>e136	04					.byte $04                             ; $00ab old
>e137	04					.byte $04                             ; $00ac print
>e138	09					.byte $09                             ; $00ad page
>e139	04					.byte $04                             ; $00ae return
>e13a	04					.byte $04                             ; $00af rem
>e13b	04					.byte $04                             ; $00b0 run
>e13c	09					.byte $09                             ; $00b1 rnd
>e13d	04					.byte $04                             ; $00b2 stop
>e13e	04					.byte $04                             ; $00b3 step
>e13f	04					.byte $04                             ; $00b4 then
>e140	09					.byte $09                             ; $00b5 top
>e141	04					.byte $04                             ; $00b6 to
>e142	04					.byte $04                             ; $00b7 until
>e143	00					.byte $00                             ; $00b8 |
>e144	01					.byte $01                             ; $00b9 ~
=$00					KTYPE_PRECBASE = $00
=$08					KTYPE_COMMAND = $08
=$09					KTYPE_UNARYFN = $09
=$0a					KTYPE_SYNTAX = $0a
=$0080					KW_PLING = $0080
=$0081					KW_DQUOTE = $0081
=$0082					KW_HASH = $0082
=$0083					KW_DOLLAR = $0083
=$0084					KW_PERCENT = $0084
=$0085					KW_AMPERSAND = $0085
=$0086					KW_SQUOTE = $0086
=$0087					KW_LPAREN = $0087
=$0088					KW_RPAREN = $0088
=$0089					KW_STAR = $0089
=$008a					KW_PLUS = $008a
=$008b					KW_MINUS = $008b
=$008c					KW_FSLASH = $008c
=$008d					KW_COLON = $008d
=$008e					KW_SEMICOLON = $008e
=$008f					KW_LESSEQUAL = $008f
=$0090					KW_LESSGREATER = $0090
=$0091					KW_LESS = $0091
=$0092					KW_EQUAL = $0092
=$0093					KW_GREATEREQUAL = $0093
=$0094					KW_GREATER = $0094
=$0095					KW_QUESTION = $0095
=$0096					KW_HAT = $0096
=$0097					KW_ASSERT = $0097
=$0098					KW_ABS = $0098
=$0099					KW_CLEAR = $0099
=$009a					KW_CLS = $009a
=$009b					KW_CH = $009b
=$009c					KW_DO = $009c
=$009d					KW_END = $009d
=$009e					KW_FOR = $009e
=$009f					KW_GOSUB = $009f
=$00a0					KW_GOTO = $00a0
=$00a1					KW_GET = $00a1
=$00a2					KW_IOADDR = $00a2
=$00a3					KW_INPUT = $00a3
=$00a4					KW_IF = $00a4
=$00a5					KW_LIST = $00a5
=$00a6					KW_LINK = $00a6
=$00a7					KW_LET = $00a7
=$00a8					KW_LEN = $00a8
=$00a9					KW_NEXT = $00a9
=$00aa					KW_NEW = $00aa
=$00ab					KW_OLD = $00ab
=$00ac					KW_PRINT = $00ac
=$00ad					KW_PAGE = $00ad
=$00ae					KW_RETURN = $00ae
=$00af					KW_REM = $00af
=$00b0					KW_RUN = $00b0
=$00b1					KW_RND = $00b1
=$00b2					KW_STOP = $00b2
=$00b3					KW_STEP = $00b3
=$00b4					KW_THEN = $00b4
=$00b5					KW_TOP = $00b5
=$00b6					KW_TO = $00b6
=$00b7					KW_UNTIL = $00b7
=$00b8					KW_BAR = $00b8
=$00b9					KW_TILDE = $00b9

;******  Return to file: basic.asm


;******  Processing file: general/support.asm

.e145					SyntaxError:
.e145	20 55 e1	jsr $e155			jsr 	ReportError
>e148	53 59 4e 54 41 58 20 45				.text	"SYNTAX ERROR",0
>e150	52 52 4f 52 00
.e155					ReportError:
.e155	fa		plx				plx
.e156	7a		ply				ply
.e157	e8		inx				inx
.e158	d0 01		bne $e15b			bne 	_REPrint
.e15a	c8		iny				iny
.e15b					_REPrint:
.e15b	20 db e4	jsr $e4db			jsr 	SIOPrintString
.e15e	a5 21		lda $21				lda 	zCurrentLine+1 				; running from tokeniser buffer
.e160	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.e162	f0 13		beq $e177			beq 	_RENoLineNumber
.e164	a2 7f		ldx #$7f			ldx 	#_REAt & $FF
.e166	a0 e1		ldy #$e1			ldy 	#_REAt >> 8
.e168	20 db e4	jsr $e4db			jsr 	SIOPrintString
.e16b	a0 01		ldy #$01			ldy 	#1
.e16d	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e16f	aa		tax				tax
.e170	c8		iny				iny
.e171	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e173	a8		tay				tay
.e174	20 84 e1	jsr $e184			jsr 	PrintWordInteger
.e177					_RENoLineNumber:
.e177	a9 0d		lda #$0d			lda 	#13
.e179	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.e17c	4c 7d f1	jmp $f17d			jmp 	WarmStart
>e17f	20 41 54 20 00			_REAt:	.text 	" AT ",0
.e184					PrintWordInteger:
.e184	8a		txa				txa
.e185	a2 00		ldx #$00			ldx 	#0
.e187	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e18a	98		tya				tya
.e18b	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e18e	c8		iny				iny
.e18f	a9 00		lda #$00			lda 	#0
.e191	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e194	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e197	20 77 ef	jsr $ef77			jsr 	CPRPrintInteger
.e19a	60		rts				rts
.e19b					CheckNextCharacter:
.e19b	8d 98 20	sta $2098			sta 	Temp1 						; save character to check
.e19e					_CNCLoop:
.e19e	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next
.e1a0	f0 0b		beq $e1ad			beq 	_CNCFail 					; end of line, so no character
.e1a2	c8		iny				iny
.e1a3	c9 20		cmp #$20			cmp 	#' ' 						; skip spaces
.e1a5	f0 f7		beq $e19e			beq 	_CNCLoop
.e1a7	cd 98 20	cmp $2098			cmp 	Temp1 						; fail if not what was wanted
.e1aa	d0 01		bne $e1ad			bne 	_CNCFail
.e1ac	60		rts				rts
.e1ad					_CNCFail:
.e1ad	20 55 e1	jsr $e155			jsr 	ReportError
>e1b0	4d 49 53 53 49 4e 47 20				.text 	"MISSING TOKEN",$00
>e1b8	54 4f 4b 45 4e 00
.e1be					CopyBasicCode:
.e1be	a2 00		ldx #$00			ldx 	#0
.e1c0					_CopyLoop:
.e1c0	bd e3 f1	lda $f1e3,x			lda 	BasicCode,x
.e1c3	9d 00 23	sta $2300,x			sta 	BasicProgram,x
.e1c6	bd e3 f2	lda $f2e3,x			lda 	BasicCode+$100,x
.e1c9	9d 00 24	sta $2400,x			sta 	BasicProgram+$100,x
.e1cc	e8		inx				inx
.e1cd	d0 f1		bne $e1c0			bne 	_CopyLoop
.e1cf	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/data.asm

=$e1d0							currentPosData = *
>0020					zCurrentLine: 	.word 	?					; address of current line (offset word)
>0022					zLowMemory:		.word	?					; next free space after program (arrays,vars etc.)
>0024					zTemp1:			.word 	?					; temporary vars
>0026					zTemp2:			.word 	?
>0028					zTargetAddr: 	.dword 	? 					; address of LHS of assignment, list pointer.
>2000					FixedVariables:	.fill 	27*4 				; address of 26 x 4 byte fixed variables @A-Z
>206c					Control 		.byte 	? 					; 0 = normal, 1 = tokenise, 2 = run program.
>206d					InputLine:		.fill 	EXTWidth+1 			; screen input buffer, cannot cross page.
>2096					HighMemory:		.word 	?					; highest memory location available (2 bytes)
>2098					Temp1:			.dword	?					; 4 byte temporary stores.
>209c					SignCount:		.byte 	? 					; count of signs in divide.
>209d					StringBufferPos:.byte 	? 					; next free slot in string buffer
>209e					RandomSeed 		.word 	? 					; Random Number
>20a0					xCursor 		.byte 	? 					; cursor position
>20a1					yCursor 		.byte 	?
>20a2					breakCheckCount	.byte 	?					; how often check for break.
>20a3					basicStackIndex	.byte 	? 					; index into Basic Stack.
>20a4									.align	256
.2100					TokeniseBuffer:
>2100									.fill 	256
.2200					StringBuffer:
>2200									.fill 	256
.2300					BasicProgram:

;******  Return to file: basic.asm


;******  Processing file: general/evaluate.asm

.e1d0					EvaluateSNError:
.e1d0	4c 45 e1	jmp $e145			jmp 	SyntaxError
.e1d3					EvaluateMissingQuote:
.e1d3	20 55 e1	jsr $e155			jsr 	ReportError
>e1d6	4d 49 53 53 49 4e 47 20				.text 	"MISSING QUOTE",$00
>e1de	51 55 4f 54 45 00
.e1e4					EvaluateStringFull:
.e1e4	20 55 e1	jsr $e155			jsr 	ReportError
>e1e7	53 54 52 49 4e 47 20 42				.text 	"STRING BUFFER FULL",$00
>e1ef	55 46 46 45 52 20 46 55 4c 4c 00
.e1fa					EvaluateBadHex:
.e1fa	20 55 e1	jsr $e155			jsr 	ReportError
>e1fd	42 41 44 20 48 45 58 00				.text 	"BAD HEX",$00
.e205					EvaluateAtomCurrentLevel:
.e205	a9 07		lda #$07			lda 	#7
.e207	80 04		bra $e20d			bra 	EvaluateAtPrecedenceLevel
.e209					EvaluateBase:
.e209	a2 00		ldx #$00			ldx 	#0 							; reset the stack
.e20b					EvaluateBaseCurrentLevel:
.e20b	a9 00		lda #$00			lda 	#0 							; current precedence is zero
.e20d					EvaluateAtPrecedenceLevel:
.e20d	48		pha				pha 								; save precedence level
.e20e	a9 00		lda #$00			lda 	#0 							; zero the result.
.e210	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e213	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e216	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e219	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e21c					_EVALSkipSpace1:
.e21c	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token, skipping over spaces.
.e21e	f0 b0		beq $e1d0			beq 	EvaluateSNError 			; end of line, without token.
.e220	c8		iny				iny
.e221	c9 20		cmp #$20			cmp 	#32
.e223	f0 f7		beq $e21c			beq 	_EVALSkipSpace1
.e225	88		dey				dey 								; points at the token.
.e226	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; is it opening quote ?
.e228	f0 14		beq $e23e			beq 	_EVALString  				; if so load in a constant string
.e22a	c9 82		cmp #$82			cmp 	#KW_HASH 					; is it a hash, e.g. hexadecimal.
.e22c	f0 36		beq $e264			beq 	_EVALHexadecimal
.e22e	c9 30		cmp #$30			cmp 	#'0'						; is it in range 0-9
.e230	90 04		bcc $e236			bcc		_EVALGoKeywordVariable 		; yes, it's a keyword or variable.
.e232	c9 3a		cmp #$3a			cmp 	#'9'+1
.e234	90 03		bcc $e239			bcc 	_EVALDecimal
.e236					_EVALGoKeywordVariable:
.e236	4c bb e2	jmp $e2bb			jmp 	_EVALKeywordVariable
.e239					_EVALDecimal:
.e239	20 18 e3	jsr $e318			jsr 	EVALGetDecConstant 			; get decimal constant
.e23c	80 34		bra $e272			bra 	_EVALGotAtom 				; got atom.
.e23e					_EVALString:
.e23e	da		phx				phx 								; save X on stack
.e23f	a9 22		lda #$22			lda 	#StringBuffer >> 8 			; set the address in the eval stack
.e241	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e244	ad 9d 20	lda $209d			lda 	StringBufferPos 			; X = Buffer Position.
.e247	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; that's the address of the new string
.e24a	aa		tax				tax 								; put in X to build the string.
.e24b	c8		iny				iny 								; skip over opening quote character
.e24c					_EVALStringCopy:
.e24c	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character.
.e24e	c8		iny				iny
.e24f	f0 82		beq $e1d3			beq		EvaluateMissingQuote 		; if zero, then there was no closing quote.
.e251	9d 00 22	sta $2200,x			sta 	StringBuffer,x 				; copy into the buffer
.e254	e8		inx				inx 								; and bump that pointer.
.e255	f0 8d		beq $e1e4			beq 	EvaluateStringFull 			; buffer is full.
.e257	49 81		eor #$81			eor 	#KW_DQUOTE					; keep going if not closing quote.
.e259	d0 f1		bne $e24c			bne 	_EVALStringCopy
.e25b	8e 9d 20	stx $209d			stx 	StringBufferPos 			; this is the new next free slot.
.e25e	9d ff 21	sta $21ff,x			sta 	StringBuffer-1,x 			; write the zero (EOS) hence EOR to end string.
.e261	fa		plx				plx 								; restore X
.e262	80 0e		bra $e272			bra 	_EVALGotAtom 				; got the atom.
.e264					_EVALHexaDecimal
.e264	c8		iny				iny 								; skip over the '#'
.e265	5a		phy				phy 								; save Y
.e266	20 84 e3	jsr $e384			jsr 	EVALGetHexConstant 			; load in hexadecimal constant
.e269	8c 98 20	sty $2098			sty 	Temp1 						; has Y changed ?
.e26c	68		pla				pla
.e26d	cd 98 20	cmp $2098			cmp 	Temp1
.e270	f0 88		beq $e1fa			beq 	EvaluateBadHex 				; if not, error.
.e272					_EVALGotAtom:
.e272					_EVALGetOperator:
.e272	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token skip spaces.
.e274	c8		iny				iny 								; this should be binary operator
.e275	c9 20		cmp #$20			cmp 	#$20
.e277	f0 f9		beq $e272			beq 	_EVALGetOperator
.e279	88		dey				dey
.e27a	09 00		ora #$00			ora 	#0 							; to be a binary token must be -ve
.e27c	10 3b		bpl $e2b9			bpl 	_EVALExitPullA 				; if +ve then exit now.
.e27e	da		phx				phx 								; save X
.e27f	aa		tax				tax 								; token in X
.e280	bd 8b e0	lda $e08b,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e283	8d 98 20	sta $2098			sta 	Temp1 						; save precedence in Temp1
.e286	fa		plx				plx 								; restore X
.e287	c9 08		cmp #$08			cmp 	#8 							; if type >= 8, e.g. not binary, then exit.
.e289	b0 2e		bcs $e2b9			bcs 	_EVALExitPullA
.e28b	68		pla				pla 								; get and save precedence level.
.e28c	48		pha				pha
.e28d	cd 98 20	cmp $2098			cmp 	Temp1 						; compare operator precedence - keyword precedence level.
.e290	f0 02		beq $e294			beq 	_EVALDoCalc					; equal, do it.
.e292	b0 25		bcs $e2b9			bcs 	_EVALExitPullA				; too high, then exit.
.e294					_EVALDoCalc:
.e294	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token, save on stack and skip it.
.e296	c8		iny				iny
.e297	48		pha				pha
.e298	da		phx				phx
.e299	e8		inx				inx 								; work out right hand side.
.e29a	e8		inx				inx
.e29b	e8		inx				inx
.e29c	e8		inx				inx
.e29d	ad 98 20	lda $2098			lda 	Temp1 						; get current operator precedence level.
.e2a0	1a		inc a				inc 	a 							; so work it out at the next level.
.e2a1	20 0d e2	jsr $e20d			jsr 	EvaluateAtPrecedenceLevel 	; work out the RHS.
.e2a4	fa		plx				plx 								; fix X back.
.e2a5	68		pla				pla 								; get keyword
.e2a6					_EVALExecuteA:
.e2a6	0a		asl a				asl 	a 							; shift left, drop bit 7
.e2a7	8d 99 20	sta $2099			sta 	Temp1+1						; save in Temp1.1
.e2aa	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.e2ac	8d 9a 20	sta $209a			sta 	Temp1+2 					; set at Temp1.2
.e2af	a9 6c		lda #$6c			lda 	#$6C 						; make JMP (xxxx)
.e2b1	8d 98 20	sta $2098			sta 	Temp1+0
.e2b4	20 98 20	jsr $2098			jsr 	Temp1 						; call that routine.
.e2b7	80 b9		bra $e272			bra 	_EVALGotAtom 				; and loop back again.
.e2b9					_EVALExitPullA:
.e2b9	68		pla				pla 								; restore precedence.
.e2ba	60		rts				rts
.e2bb					_EVALKeywordVariable:
.e2bb	09 00		ora #$00			ora 	#0 							; check bit 7
.e2bd	10 0f		bpl $e2ce			bpl 	_EVALNotUnaryFunction 		; must be set for unary function
.e2bf	da		phx				phx
.e2c0	aa		tax				tax
.e2c1	bd 8b e0	lda $e08b,x			lda 	TokenTypeInformation-128,x 	; get the type info for it
.e2c4	fa		plx				plx
.e2c5	c9 09		cmp #$09			cmp 	#KTYPE_UNARYFN 				; is it a unary function
.e2c7	d0 05		bne $e2ce			bne 	_EVALNotUnaryFunction
.e2c9	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get the token back
.e2cb	c8		iny				iny 								; consume it
.e2cc	80 d8		bra $e2a6			bra 	_EVALExecuteA 				; execute TOS.
.e2ce					_EVALNotUnaryFunction:
.e2ce	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e2d0	10 3d		bpl $e30f			bpl 	_EVALCheckVariable 			; if ASCII check variable
.e2d2	c9 8b		cmp #$8b			cmp 	#KW_MINUS 					; check negation
.e2d4	f0 0f		beq $e2e5			beq 	_EVALUnaryNegation
.e2d6	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; check left bracket.
.e2d8	d0 14		bne $e2ee			bne		_EVALCheckUnaryOperator
.e2da	c8		iny				iny 								; skip left bracket.
.e2db	20 0b e2	jsr $e20b			jsr 	EvaluateBaseCurrentLevel 	; calculate what's in the bracket.
.e2de	a9 88		lda #$88			lda 	#KW_RPAREN 					; check right bracket.
.e2e0	20 9b e1	jsr $e19b			jsr 	CheckNextCharacter 			; check next character, after spaces.
.e2e3	80 8d		bra $e272			bra 	_EVALGotAtom
.e2e5					_EVALUnaryNegation:
.e2e5	c8		iny				iny 								; skip over the - sign.
.e2e6	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel 	; calculate what's being negatived (...)
.e2e9	20 46 ea	jsr $ea46			jsr 	BFUNC_NegateAlways 			; negate it.
.e2ec	80 84		bra $e272			bra 	_EVALGotAtom
.e2ee					_EVALCheckUnaryOperator:
.e2ee	48		pha				pha 								; save indirection operator.
.e2ef	c8		iny				iny 								; skip over the operator
.e2f0	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel 	; calculate the address.
.e2f3	68		pla				pla 								; restore the operator
.e2f4	c9 83		cmp #$83			cmp 	#KW_DOLLAR					; $ is for visual typing, it does nothing
.e2f6	f0 0e		beq $e306			beq 	_EVALGoGotAtom
.e2f8	c9 95		cmp #$95			cmp 	#KW_QUESTION				; byte indirection
.e2fa	f0 07		beq $e303			beq 	_EVALByteRead
.e2fc	c9 80		cmp #$80			cmp 	#KW_PLING					; word indirection
.e2fe	f0 09		beq $e309			beq 	_EVALWordRead
.e300	4c 45 e1	jmp $e145			jmp 	SyntaxError 				; give up.
.e303					_EVALByteRead:
.e303	20 c3 e3	jsr $e3c3			jsr 	EVALReadByteIndirect
.e306					_EVALGoGotAtom:
.e306	4c 72 e2	jmp $e272			jmp 	_EVALGotAtom
.e309					_EVALWordRead:
.e309	20 f9 e3	jsr $e3f9			jsr 	EVALReadWordIndirect
.e30c	4c 72 e2	jmp $e272			jmp 	_EVALGotAtom
.e30f					_EVALCheckVariable:
.e30f	20 4e e4	jsr $e44e			jsr 	VARReference 				; get variable reference to ZTemp1
.e312	20 0d e4	jsr $e40d			jsr 	EVALReadWordIndirectZTemp	; read that address into current stack level.
.e315	4c 72 e2	jmp $e272			jmp 	_EVALGotAtom 				; and go round.
.e318					EVALGetDecConstant:
.e318	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e31a	c9 30		cmp #$30			cmp 	#'0'						; check in range 0-9.
.e31c	90 04		bcc $e322			bcc 	_EVGDExit
.e31e	c9 3a		cmp #$3a			cmp 	#'9'+1
.e320	90 01		bcc $e323			bcc 	_EVGDValue 					; if so has legal value
.e322					_EVGDExit:
.e322	60		rts				rts
.e323					_EVGDValue:
.e323	48		pha				pha 								; save value, Y on stack
.e324	5a		phy				phy
.e325	a0 03		ldy #$03			ldy 	#3 							; 3 shifts.
.e327	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; push x1 value on stack.
.e32a	48		pha				pha
.e32b	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e32e	48		pha				pha
.e32f	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e332	48		pha				pha
.e333	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e336	48		pha				pha
.e337					_EVGDLoop:
.e337	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; rotate left once.
.e33a	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e33d	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e340	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e343	c0 02		cpy #$02			cpy 	#2 							; if done it twice now
.e345	d0 1d		bne $e364			bne 	_EVGDNoAdd
.e347	18		clc				clc 								; then it will be x 4, adding +1 => x 5
.e348	68		pla				pla
.e349	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e34c	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e34f	68		pla				pla
.e350	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e353	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e356	68		pla				pla
.e357	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e35a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e35d	68		pla				pla
.e35e	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e361	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e364					_EVGDNoAdd:
.e364	88		dey				dey
.e365	d0 d0		bne $e337			bne 	_EVGDLoop
.e367	7a		ply				ply 								; restore YA
.e368	68		pla				pla
.e369	c8		iny				iny 								; next character
.e36a	29 0f		and #$0f			and 	#15 						; force into range and put in.
.e36c	18		clc				clc
.e36d	7d 00 04	adc $0400,x			adc 	evalStack+0,x 				; add digit in
.e370	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e373	90 a3		bcc $e318			bcc 	EVALGetDecConstant 			; propogate constant through
.e375	fe 01 04	inc $0401,x			inc 	evalStack+1,x
.e378	d0 9e		bne $e318			bne 	EVALGetDecConstant
.e37a	fe 02 04	inc $0402,x			inc 	evalStack+2,x
.e37d	d0 99		bne $e318			bne 	EVALGetDecConstant
.e37f	fe 03 04	inc $0403,x			inc 	evalStack+3,x
.e382	80 94		bra $e318			bra 	EVALGetDecConstant 			; go back and try again.
.e384					EVALGetHexConstant:
.e384	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next
.e386	20 b8 e3	jsr $e3b8			jsr 	EVALToUpper 				; make upper case
.e389	38		sec				sec
.e38a	e9 30		sbc #$30			sbc 	#"0" 						; range 0-9
.e38c	90 0a		bcc $e398			bcc 	_EVGHExit 					; exit if CC
.e38e	c9 0a		cmp #$0a			cmp 	#9+1 						; if < 9 have a legal value.
.e390	90 07		bcc $e399			bcc 	_EVGHValue
.e392	e9 07		sbc #$07			sbc 	#7 							; now in range 10-15 if okay.
.e394	c9 10		cmp #$10			cmp 	#15+1
.e396	90 01		bcc $e399			bcc 	_EVGHValue
.e398					_EVGHExit:
.e398	60		rts				rts
.e399					_EVGHValue:
.e399	5a		phy				phy 								; save Y and new digit.
.e39a	48		pha				pha
.e39b	a0 04		ldy #$04			ldy 	#4 							; rotate left 4
.e39d					_EVGHRotate:
.e39d	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e3a0	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e3a3	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e3a6	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e3a9	88		dey				dey
.e3aa	d0 f1		bne $e39d			bne 	_EVGHRotate
.e3ac	68		pla				pla 								; restore digit and X
.e3ad	7a		ply				ply
.e3ae	c8		iny				iny 								; next character
.e3af	18		clc				clc
.e3b0	1d 00 04	ora $0400,x			ora 	evalStack+0,x 				; add digit in
.e3b3	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3b6	80 cc		bra $e384			bra 	EVALGetHexConstant 			; go back and try again.
.e3b8					EVALToUpper:
.e3b8	c9 61		cmp #$61			cmp 	#'a'
.e3ba	90 06		bcc $e3c2			bcc 	_EVTUExit
.e3bc	c9 7b		cmp #$7b			cmp 	#'z'+1
.e3be	b0 02		bcs $e3c2			bcs 	_EVTUExit
.e3c0	49 20		eor #$20			eor 	#32
.e3c2					_EVTUExit:
.e3c2	60		rts				rts
.e3c3					EVALReadByteIndirect:
.e3c3	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e3c6	85 24		sta $24				sta 	zTemp1
.e3c8	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e3cb	85 25		sta $25				sta 	zTemp1+1
.e3cd	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e3d0	85 26		sta $26				sta 	zTemp1+2
.e3d2	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e3d5	85 27		sta $27				sta 	zTemp1+3
.e3d7	a5 26		lda $26				lda 	zTemp1+2 					; address $0000xxxx
.e3d9	05 27		ora $27				ora 	zTemp1+3
.e3db	f0 07		beq $e3e4			beq 	_ERBBase
.e3dd	a3 00		ldz #$00			ldz 	#0 							; read from far memory.
.e3df	ea		nop				nop
.e3e0	b2 24		lda ($24),z			lda 	(zTemp1),z
.e3e2	80 06		bra $e3ea			bra 	_ERBExit
.e3e4					_ERBBase:
.e3e4	5a		phy				phy
.e3e5	a0 00		ldy #$00			ldy 	#0 							; read byte
.e3e7	b1 24		lda ($24),y			lda 	(zTemp1),y
.e3e9	7a		ply				ply
.e3ea					_ERBExit:
.e3ea	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e3ed	a9 00		lda #$00			lda 	#0 							; zero upper three bytes
.e3ef	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e3f2	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e3f5	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e3f8	60		rts				rts
.e3f9					EVALReadWordIndirect:
.e3f9	bd 00 04	lda $0400,x			lda 	evalStack+0,x 	 			; copy address over.
.e3fc	85 24		sta $24				sta 	zTemp1
.e3fe	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e401	85 25		sta $25				sta 	zTemp1+1
.e403	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e406	85 26		sta $26				sta 	zTemp1+2
.e408	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e40b	85 27		sta $27				sta 	zTemp1+3
.e40d					EVALReadWordIndirectZTemp:
.e40d	a5 26		lda $26				lda 	zTemp1+2 					; address $0000xxxx
.e40f	05 27		ora $27				ora 	zTemp1+3
.e411	f0 1f		beq $e432			beq 	_ERWBase
.e413	a3 00		ldz #$00			ldz 	#0 							; read from far memory.
.e415	ea		nop				nop
.e416	b2 24		lda ($24),z			lda 	(zTemp1),z
.e418	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e41b	1b		inz				inz
.e41c	ea		nop				nop
.e41d	b2 24		lda ($24),z			lda 	(zTemp1),z
.e41f	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e422	1b		inz				inz
.e423	ea		nop				nop
.e424	b2 24		lda ($24),z			lda 	(zTemp1),z
.e426	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e429	1b		inz				inz
.e42a	ea		nop				nop
.e42b	b2 24		lda ($24),z			lda 	(zTemp1),z
.e42d	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e430	80 1b		bra $e44d			bra 	_ERWExit
.e432					_ERWBase
.e432	5a		phy				phy
.e433	a0 00		ldy #$00			ldy 	#0 							; read word
.e435	b1 24		lda ($24),y			lda 	(zTemp1),y
.e437	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e43a	c8		iny				iny
.e43b	b1 24		lda ($24),y			lda 	(zTemp1),y
.e43d	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e440	c8		iny				iny
.e441	b1 24		lda ($24),y			lda 	(zTemp1),y
.e443	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e446	c8		iny				iny
.e447	b1 24		lda ($24),y			lda 	(zTemp1),y
.e449	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e44c	7a		ply				ply
.e44d					_ERWExit:
.e44d	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: general/variable.asm

.e44e					VARReference:
.e44e	38		sec				sec 								; check range @-Z there
.e44f	c9 40		cmp #$40			cmp 	#'@'
.e451	90 04		bcc $e457			bcc 	_VARRError
.e453	c9 5b		cmp #$5b			cmp 	#'Z'+1 						; there are 27 variables @ and A-Z
.e455	90 03		bcc $e45a			bcc 	_VARROkay
.e457					_VARRError:
.e457	4c 45 e1	jmp $e145			jmp		SyntaxError
.e45a					_VARROkay:
.e45a	c8		iny				iny 								; consume the variable.
.e45b	d1 20		cmp ($20),y			cmp 	(zCurrentLine),y 			; is it @@ AA BB CC ?
.e45d	f0 1b		beq $e47a			beq 	_VARArrayAccess 			; array access AA0 AA1 etc.
.e45f	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get that second character
.e461	88		dey				dey 								; point back to the first character
.e462	c9 87		cmp #$87			cmp 	#KW_LPAREN 					; if ( then it is A(x) format.
.e464	f0 14		beq $e47a			beq 	_VARArrayAccess
.e466	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; reget variable.
.e468	c8		iny				iny
.e469	29 1f		and #$1f			and		#31 						; mask out
.e46b	0a		asl a				asl 	a 							; x 4
.e46c	0a		asl a				asl 	a
.e46d	85 24		sta $24				sta 	zTemp1+0 					; rely on variables being page aligned.
.e46f	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e471	85 25		sta $25				sta 	zTemp1+1
.e473	a9 00		lda #$00			lda 	#0 							; clear upper bytes
.e475	85 26		sta $26				sta 	zTemp1+2
.e477	85 27		sta $27				sta 	zTemp1+3 					; return with address set.
.e479	60		rts				rts
.e47a					_VARArrayAccess:
.e47a	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get variable
.e47c	c8		iny				iny
.e47d	29 1f		and #$1f			and 	#31 						; mask it off
.e47f	48		pha				pha 								; save on the stack.
.e480	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel 	; calculate the index.
.e483	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; multiply by four.
.e486	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e489	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e48c	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e48f	1e 00 04	asl $0400,x			asl 	evalStack+0,x
.e492	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e495	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e498	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e49b	68		pla				pla 								; put address in zTemp1
.e49c	0a		asl a				asl 	a 							; x 4
.e49d	0a		asl a				asl 	a
.e49e	85 24		sta $24				sta 	zTemp1+0 					; rely on variables being page aligned.
.e4a0	a9 20		lda #$20			lda 	#FixedVariables >> 8
.e4a2	85 25		sta $25				sta 	zTemp1+1
.e4a4	5a		phy				phy
.e4a5	a0 00		ldy #$00			ldy 	#0 							; calculate	evalStack+0,3 + (zTemp)
.e4a7	b1 24		lda ($24),y			lda 	(zTemp1),y
.e4a9	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.e4ac	48		pha				pha 								; save first result as we need the indirection.
.e4ad	c8		iny				iny 								; 2nd byte
.e4ae	b1 24		lda ($24),y			lda 	(zTemp1),y
.e4b0	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.e4b3	85 25		sta $25				sta 	zTemp1+1
.e4b5	68		pla				pla 								; save the low byte.
.e4b6	85 24		sta $24				sta 	zTemp1+0
.e4b8	a9 00		lda #$00			lda 	#0
.e4ba	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.e4bd	85 26		sta $26				sta 	zTemp1+2
.e4bf	a9 00		lda #$00			lda 	#0
.e4c1	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.e4c4	85 27		sta $27				sta 	zTemp1+3
.e4c6	7a		ply				ply 								; restore Y, address setup
.e4c7	60		rts				rts
.e4c8	80 fe		bra $e4c8	x1:		bra 	x1

;******  Return to file: basic.asm


;******  Processing file: general/screenio.asm

.e4ca					SIOInitialise:
.e4ca	20 d6 b0	jsr $b0d6			jsr 	EXTReset 					; reset video
.e4cd					SIOClearScreen:
.e4cd	20 86 b0	jsr $b086			jsr 	EXTClearScreen 				; clear screen
.e4d0					SIOHomeCursor:
.e4d0	48		pha				pha 								; home cursor
.e4d1	a9 00		lda #$00			lda 	#0
.e4d3	8d a0 20	sta $20a0			sta 	xCursor
.e4d6	8d a1 20	sta $20a1			sta 	yCursor
.e4d9	68		pla				pla
.e4da	60		rts				rts
.e4db					SIOPrintString:
.e4db	48		pha				pha 								; save registers
.e4dc	da		phx				phx
.e4dd	5a		phy				phy
.e4de	86 26		stx $26				stx 	zTemp2 						; set up indirect pointer
.e4e0	84 27		sty $27				sty 	zTemp2+1
.e4e2	a0 00		ldy #$00			ldy 	#0
.e4e4					_SIOPSLoop:
.e4e4	b1 26		lda ($26),y			lda 	(zTemp2),y 					; read next, exit if 0
.e4e6	f0 1c		beq $e504			beq 	_SIOPSExit
.e4e8	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter 			; print and bump
.e4eb	c8		iny				iny
.e4ec	d0 f6		bne $e4e4			bne 	_SIOPSLoop
.e4ee	20 55 e1	jsr $e155			jsr 	ReportError
>e4f1	42 41 44 20 53 54 52 49				.text 	"BAD STRING PRINTED",$00
>e4f9	4e 47 20 50 52 49 4e 54 45 44 00
.e504					_SIOPSExit:
.e504	7a		ply				ply 								; restore and exit.
.e505	fa		plx				plx
.e506	68		pla				pla
.e507	60		rts				rts
.e508					SIOPrintCharacter:
.e508	48		pha				pha 								; save AXY
.e509	da		phx				phx
.e50a	5a		phy				phy
.e50b	c9 0d		cmp #$0d			cmp 	#13 						; CR ?
.e50d	f0 12		beq $e521			beq 	_SIOPReturn
.e50f	20 66 e6	jsr $e666			jsr 	SIOLoadCursor 				; load cursor position in.
.e512	29 3f		and #$3f			and 	#$3F 						; PETSCII conversion
.e514	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen 				; write character out.
.e517	ee a0 20	inc $20a0			inc 	xCursor 					; move right
.e51a	ad a0 20	lda $20a0			lda 	xCursor 					; reached the RHS
.e51d	c9 28		cmp #$28			cmp 	#EXTWidth
.e51f	90 15		bcc $e536			bcc 	_SIOPExit
.e521					_SIOPReturn:
.e521	a9 00		lda #$00			lda 	#0 							; zero x
.e523	8d a0 20	sta $20a0			sta 	xCursor
.e526	ee a1 20	inc $20a1			inc 	yCursor 					; go down
.e529	ad a1 20	lda $20a1			lda 	yCursor
.e52c	c9 19		cmp #$19			cmp 	#EXTHeight 					; off the bottom ?
.e52e	90 06		bcc $e536			bcc 	_SIOPExit
.e530	20 a4 b0	jsr $b0a4			jsr 	EXTScrollDisplay 			; scroll display up
.e533	ce a1 20	dec $20a1			dec 	yCursor 					; cursor on bottom line.
.e536					_SIOPExit:
.e536	7a		ply				ply 								; restore and exit.
.e537	fa		plx				plx
.e538	68		pla				pla
.e539	60		rts				rts
.e53a					SIOGetKey:
.e53a	20 0c b0	jsr $b00c			jsr 	EXTReadKeyPort 				; wait for a key
.e53d	f0 fb		beq $e53a			beq 	SIOGetKey
.e53f	20 b8 e3	jsr $e3b8			jsr 	EVALToUpper 				; capitalise it.
.e542	4c 35 b0	jmp $b035			jmp 	EXTRemoveKeyPressed 		; remove from the queue.
.e545					SIOReadLine:
.e545	48		pha				pha 								; save registers
.e546	da		phx				phx
.e547	5a		phy				phy
.e548					_SIORLoop:
.e548	20 66 e6	jsr $e666			jsr 	SIOLoadCursor 				; cursor in XY
.e54b	20 6b b0	jsr $b06b			jsr 	EXTReadScreen 				; read the display.
.e54e	48		pha				pha 								; save on stack.
.e54f	a9 66		lda #$66			lda 	#102 						; write cursor out
.e551	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e554	20 3a e5	jsr $e53a			jsr 	SIOGetKey
.e557	aa		tax				tax 								; save in X
.e558	68		pla				pla 								; old character
.e559	da		phx				phx 								; save key pressed
.e55a	20 66 e6	jsr $e666			jsr 	SIOLoadCursor 				; cursor in XY
.e55d	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e560	68		pla				pla
.e561	c9 01		cmp #$01			cmp 	#"A"-64 					; control characters
.e563	f0 29		beq $e58e			beq 	_SIOCursorLeft
.e565	c9 13		cmp #$13			cmp 	#"S"-64
.e567	f0 49		beq $e5b2			beq 	_SIOCursorDown
.e569	c9 04		cmp #$04			cmp 	#"D"-64
.e56b	f0 2d		beq $e59a			beq 	_SIOCursorRight
.e56d	c9 17		cmp #$17			cmp 	#"W"-64
.e56f	f0 35		beq $e5a6			beq 	_SIOCursorUp
.e571	c9 1a		cmp #$1a			cmp 	#"Z"-64
.e573	f0 49		beq $e5be			beq 	_SIOClearScreen
.e575	c9 08		cmp #$08			cmp 	#"H"-64
.e577	f0 4a		beq $e5c3			beq 	_SIOBackspace
.e579	c9 0d		cmp #$0d			cmp 	#13 						; CR
.e57b	f0 0e		beq $e58b			beq 	_SIOGoReturn
.e57d	c9 20		cmp #$20			cmp 	#32 						; any control
.e57f	90 c7		bcc $e548			bcc 	_SIORLoop
.e581	48		pha				pha
.e582	20 01 e6	jsr $e601			jsr 	_SIOInsert 					; insert a space for new character
.e585	68		pla				pla
.e586	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter 			; print character in A
.e589	80 bd		bra $e548			bra 	_SIORLoop
.e58b					_SIOGoReturn:
.e58b	4c 2c e6	jmp $e62c			jmp 	_SIOReturn
.e58e					_SIOCursorLeft:
.e58e	ce a0 20	dec $20a0			dec 	xCursor
.e591	10 b5		bpl $e548			bpl 	_SIORLoop
.e593	a9 27		lda #$27			lda 	#EXTWidth-1
.e595					_SIOWXLoop:
.e595	8d a0 20	sta $20a0			sta 	xCursor
.e598	80 ae		bra $e548			bra 	_SIORLoop
.e59a					_SIOCursorRight:
.e59a	ee a0 20	inc $20a0			inc 	xCursor
.e59d	ad a0 20	lda $20a0			lda 	xCursor
.e5a0	49 28		eor #$28			eor 	#EXTWidth
.e5a2	d0 a4		bne $e548			bne 	_SIORLoop
.e5a4	80 ef		bra $e595			bra 	_SIOWXLoop
.e5a6					_SIOCursorUp:
.e5a6	ce a1 20	dec $20a1			dec 	yCursor
.e5a9	10 9d		bpl $e548			bpl 	_SIORLoop
.e5ab	a9 18		lda #$18			lda 	#EXTHeight-1
.e5ad					_SIOWYLoop:
.e5ad	8d a1 20	sta $20a1			sta 	yCursor
.e5b0	80 96		bra $e548			bra 	_SIORLoop
.e5b2					_SIOCursorDown:
.e5b2	ee a1 20	inc $20a1			inc 	yCursor
.e5b5	ad a1 20	lda $20a1			lda 	yCursor
.e5b8	49 19		eor #$19			eor 	#EXTHeight
.e5ba	d0 8c		bne $e548			bne 	_SIORLoop
.e5bc	80 ef		bra $e5ad			bra 	_SIOWYLoop
.e5be					_SIOClearScreen:
.e5be	20 cd e4	jsr $e4cd			jsr 	SIOClearScreen
.e5c1	80 85		bra $e548			bra 	_SIORLoop
.e5c3					_SIOBackspace:
.e5c3	ad a0 20	lda $20a0			lda 	xCursor 					; backspace possible ?
.e5c6	f0 80		beq $e548			beq 	_SIORLoop 					; start of line, no.
.e5c8	48		pha				pha 								; save position.
.e5c9	c9 27		cmp #$27			cmp 	#EXTWidth-1 				; not required
.e5cb	f0 1f		beq $e5ec			beq 	_SIONoShift
.e5cd	ce a0 20	dec $20a0			dec 	xCursor
.e5d0					_SIOShift2:
.e5d0	ee a0 20	inc $20a0			inc 	xCursor 					; copy character backward
.e5d3	20 66 e6	jsr $e666			jsr 	SIOLoadCursor
.e5d6	20 6b b0	jsr $b06b			jsr 	EXTReadScreen
.e5d9	ce a0 20	dec $20a0			dec 	xCursor
.e5dc	20 66 e6	jsr $e666			jsr 	SIOLoadCursor
.e5df	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e5e2	ee a0 20	inc $20a0			inc 	xCursor
.e5e5	ad a0 20	lda $20a0			lda 	xCursor
.e5e8	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e5ea	d0 e4		bne $e5d0			bne 	_SIOShift2
.e5ec					_SIONoShift:
.e5ec	a9 27		lda #$27			lda 	#EXTWidth-1 				; space on far end.
.e5ee	20 66 e6	jsr $e666			jsr 	SIOLoadCursor
.e5f1	a9 20		lda #$20			lda 	#32
.e5f3	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e5f6	68		pla				pla 								; restore cursor, back one.
.e5f7	3a		dec a				dec 	a
.e5f8	8d a0 20	sta $20a0			sta 	xCursor
.e5fb	20 66 e6	jsr $e666			jsr 	SIOLoadCursor 				; overwrite
.e5fe	4c 48 e5	jmp $e548			jmp	 	_SIORLoop
.e601					_SIOInsert:
.e601	ad a0 20	lda $20a0			lda 	xCursor 					; at far right, nothing to do.
.e604	c9 27		cmp #$27			cmp 	#EXTWidth-1
.e606	f0 23		beq $e62b			beq 	_SIOIExit
.e608	85 26		sta $26				sta 	zTemp2 						; save in temporary workspace.
.e60a	a9 27		lda #$27			lda 	#EXTWidth-1 				; cursor at far right.
.e60c	8d a0 20	sta $20a0			sta 	xCursor
.e60f					_SIOShift:
.e60f	ce a0 20	dec $20a0			dec 	xCursor 					; copy character forward
.e612	20 66 e6	jsr $e666			jsr 	SIOLoadCursor
.e615	20 6b b0	jsr $b06b			jsr 	EXTReadScreen
.e618	ee a0 20	inc $20a0			inc 	xCursor
.e61b	20 66 e6	jsr $e666			jsr 	SIOLoadCursor
.e61e	20 7a b0	jsr $b07a			jsr 	EXTWriteScreen
.e621	ce a0 20	dec $20a0			dec 	xCursor
.e624	ad a0 20	lda $20a0			lda 	xCursor						; until shifted line to this point.
.e627	c5 26		cmp $26				cmp 	zTemp2
.e629	d0 e4		bne $e60f			bne 	_SIOShift
.e62b					_SIOIExit:
.e62b	60		rts				rts
.e62c					_SIOReturn:
.e62c	a9 00		lda #$00			lda 	#0 							; copy line in from screen.
.e62e	8d a0 20	sta $20a0			sta 	xCursor
.e631					_SIOCopy:
.e631	20 66 e6	jsr $e666			jsr 	SIOLoadCursor
.e634	20 6b b0	jsr $b06b			jsr 	EXTReadScreen
.e637	49 20		eor #$20			eor 	#$20
.e639	18		clc				clc
.e63a	69 20		adc #$20			adc 	#$20
.e63c	ae a0 20	ldx $20a0			ldx 	xCursor
.e63f	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e642	ee a0 20	inc $20a0			inc 	xCursor
.e645	ad a0 20	lda $20a0			lda 	xCursor
.e648	c9 28		cmp #$28			cmp 	#EXTWidth
.e64a	d0 e5		bne $e631			bne 	_SIOCopy
.e64c	aa		tax				tax 								; X contains width
.e64d					_SIOStrip:
.e64d	ca		dex				dex									; back one
.e64e	30 07		bmi $e657			bmi		_SIOFound 					; if -ve gone too far
.e650	bd 6d 20	lda $206d,x			lda 	InputLine,x 				; is there a space here
.e653	c9 20		cmp #$20			cmp 	#' '
.e655	f0 f6		beq $e64d			beq 	_SIOStrip
.e657					_SIOFound:
.e657	e8		inx				inx
.e658	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.e65a	9d 6d 20	sta $206d,x			sta 	InputLine,x
.e65d	a9 0d		lda #$0d			lda 	#13 						; print a CR and exit
.e65f	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.e662	7a		ply				ply
.e663	fa		plx				plx
.e664	68		pla				pla
.e665	60		rts				rts
.e666					SIOLoadCursor:
.e666	48		pha				pha
.e667	ad a1 20	lda $20a1			lda 	yCursor  					; Y Position
.e66a	0a		asl a				asl 	a 							; x 2 	(80)
.e66b	0a		asl a				asl 	a 							; x 2 	(160)
.e66c	6d a1 20	adc $20a1			adc 	yCursor 					; x 5 	(200) (CC)
.e66f	85 24		sta $24				sta 	zTemp1
.e671	a9 00		lda #$00			lda 	#0
.e673	85 25		sta $25				sta 	zTemp1+1
.e675	06 24		asl $24				asl 	zTemp1						; x 10
.e677	26 25		rol $25				rol 	zTemp1+1
.e679	06 24		asl $24				asl 	zTemp1						; x 20
.e67b	26 25		rol $25				rol 	zTemp1+1
.e67d	06 24		asl $24				asl 	zTemp1						; x 40
.e67f	26 25		rol $25				rol 	zTemp1+1 					; (CC)
.e681	a5 24		lda $24				lda 	zTemp1 						; add X
.e683	6d a0 20	adc $20a0			adc 	xCursor
.e686	aa		tax				tax
.e687	a5 25		lda $25				lda 	zTemp1+1
.e689	69 00		adc #$00			adc 	#0
.e68b	a8		tay				tay
.e68c	68		pla				pla 								; restore and exit
.e68d	60		rts				rts
.e68e					SIOPrintHex:
.e68e	48		pha				pha
.e68f	48		pha				pha
.e690	a9 20		lda #$20			lda 	#32
.e692	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.e695	68		pla				pla
.e696	48		pha				pha
.e697	4a		lsr a				lsr 	a
.e698	4a		lsr a				lsr 	a
.e699	4a		lsr a				lsr 	a
.e69a	4a		lsr a				lsr 	a
.e69b	20 a4 e6	jsr $e6a4			jsr 	_SIOPHex
.e69e	68		pla				pla
.e69f	20 a4 e6	jsr $e6a4			jsr 	_SIOPHex
.e6a2	68		pla				pla
.e6a3	60		rts				rts
.e6a4					_SIOPHex:
.e6a4	29 0f		and #$0f			and 	#15
.e6a6	c9 0a		cmp #$0a			cmp 	#10
.e6a8	90 02		bcc $e6ac			bcc 	_SIOPHex2
.e6aa	69 06		adc #$06			adc 	#6
.e6ac					_SIOPHex2:
.e6ac	69 30		adc #$30			adc 	#48
.e6ae	4c 08 e5	jmp $e508			jmp 	SIOPrintCharacter

;******  Return to file: basic.asm


;******  Processing file: general/tokeniser.asm

.e6b1					TokeniseString:
.e6b1	a0 00		ldy #$00			ldy 	#0							; source
.e6b3	a2 00		ldx #$00			ldx 	#0 							; target
.e6b5					_TokLoop:
.e6b5	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get first
.e6b7	f0 5d		beq $e716			beq 	_TokExit 					; End, exit.
.e6b9	c9 20		cmp #$20			cmp 	#32 						; if space, copy it
.e6bb	f0 35		beq $e6f2			beq 	_TokCopy1
.e6bd	c9 22		cmp #$22			cmp 	#'"' 						; if string, copy that in.
.e6bf	f0 3a		beq $e6fb			beq 	_TokCopyString
.e6c1	c9 30		cmp #$30			cmp 	#"0" 						; punctuation, search for it.
.e6c3	90 22		bcc $e6e7			bcc 	_TokPunctuation
.e6c5	c9 3a		cmp #$3a			cmp 	#"9"+1 						; digits are just copied over.
.e6c7	90 29		bcc $e6f2			bcc 	_TokCopy1
.e6c9	c9 41		cmp #$41			cmp 	#"A"						; more punctuation
.e6cb	90 1a		bcc $e6e7			bcc 	_TokPunctuation
.e6cd	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; and more punctuation
.e6cf	b0 16		bcs $e6e7			bcs 	_TokPunctuation
.e6d1					_TokWord:
.e6d1	20 1c e7	jsr $e71c			jsr 	TokeniseSearch 				; search for tokenised word.
.e6d4	b0 16		bcs $e6ec			bcs 	_TokFound 					; if successful, copy it out.
.e6d6					_TokSkip:
.e6d6	b1 24		lda ($24),y			lda 	(zTemp1),y 					; copy all A-Z as can't start token in mid word.
.e6d8	c9 41		cmp #$41			cmp 	#"A"
.e6da	90 d9		bcc $e6b5			bcc 	_TokLoop
.e6dc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.e6de	b0 d5		bcs $e6b5			bcs 	_TokLoop
.e6e0	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6e3	e8		inx				inx
.e6e4	c8		iny				iny
.e6e5	80 ef		bra $e6d6			bra 	_TokSkip
.e6e7					_TokPunctuation:
.e6e7	20 1c e7	jsr $e71c			jsr 	TokeniseSearch 				; find it.
.e6ea	90 06		bcc $e6f2			bcc 	_TokCopy1 					; if found, just copy 1 character
.e6ec					_TokFound:
.e6ec	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; save in tokenise buffer.
.e6ef	e8		inx				inx 								; advance target ; source is already advanced.
.e6f0	80 c3		bra $e6b5			bra 	_TokLoop 					; do the next character.
.e6f2					_TokCopy1:
.e6f2	b1 24		lda ($24),y			lda 	(zTemp1),y
.e6f4	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e6f7	e8		inx				inx
.e6f8	c8		iny				iny
.e6f9	80 ba		bra $e6b5			bra 	_TokLoop
.e6fb					_TokCopyString:
.e6fb	a9 81		lda #$81			lda 	#KW_DQUOTE 					; output double quote token
.e6fd	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e700	e8		inx				inx 								; skip buffer and first quote.
.e701	c8		iny				iny
.e702					_TokCSLoop:
.e702	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get next character
.e704	f0 10		beq $e716			beq 	_TokExit 					; if EOL, then you have a mismatch, but we exit.
.e706	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x 			; write to buffer
.e709	e8		inx				inx 								; advance both.
.e70a	c8		iny				iny
.e70b	c9 22		cmp #$22			cmp 	#'"'						; keep going till other quote found.
.e70d	d0 f3		bne $e702			bne 	_TokCSLoop
.e70f	a9 81		lda #$81			lda 	#KW_DQUOTE 					; add the trailing quote token, overwriting the
.e711	9d ff 20	sta $20ff,x			sta 	TokeniseBuffer-1,x 			; " character that's just been copied
.e714	80 9f		bra $e6b5			bra 	_TokLoop
.e716					_TokExit:
.e716	a9 00		lda #$00			lda 	#0 							; mark the end of the tokenise buffer.
.e718	9d 00 21	sta $2100,x			sta 	TokeniseBuffer,x
.e71b	60		rts				rts
.e71c					TokeniseSearch:
.e71c	48		pha				pha 								; save AXY
.e71d	da		phx				phx
.e71e	5a		phy				phy
.e71f	a9 80		lda #$80			lda 	#128 						; zTemp2 keeps track of the token #
.e721	85 26		sta $26				sta 	zTemp2
.e723	a2 00		ldx #$00			ldx 	#0 							; index into TokenText table.
.e725	bd 74 e0	lda $e074,x	_TSNext:lda 	TokenText,x 				; get the first token character
.e728	29 7f		and #$7f			and 	#$7F 						; bit 7 marks the end.
.e72a	d1 24		cmp ($24),y			cmp 	(zTemp1),y 					; do the characters match.
.e72c	f0 13		beq $e741			beq 	_TSTryFullMatch 			; if so, try the full match.
.e72e					_TSGotoNext:
.e72e	bd 74 e0	lda $e074,x			lda 	TokenText,x 				; read it
.e731	e8		inx				inx 								; bump index
.e732	0a		asl a				asl 	a 							; shift into C
.e733	90 f9		bcc $e72e			bcc 	_TSGotoNext 				; keep going until read the end character
.e735	e6 26		inc $26				inc 	zTemp2 						; bump the current token pointer.
.e737	bd 74 e0	lda $e074,x			lda 	TokenText,x 				; look at the first character of the next token
.e73a	d0 e9		bne $e725			bne 	_TSNext 					; if non-zero, go to the next.
.e73c					_TSFail:
.e73c	7a		ply				ply 								; fail.
.e73d	fa		plx				plx
.e73e	68		pla				pla
.e73f	18		clc				clc 				 				; return with carry clear.
.e740	60		rts				rts
.e741					_TSTryFullMatch:
.e741	da		phx				phx									; save X and Y.
.e742	5a		phy				phy
.e743					_TSFullMatch:
.e743	bd 74 e0	lda $e074,x			lda 	TokenText,x 				; compare the 7 bits.
.e746	29 7f		and #$7f			and 	#$7F
.e748	d1 24		cmp ($24),y			cmp 	(zTemp1),y
.e74a	d0 15		bne $e761			bne 	_TSFullFail 				; different, this one doesn't match.
.e74c	bd 74 e0	lda $e074,x			lda 	TokenText,x
.e74f	e8		inx				inx 								; advance to next character
.e750	c8		iny				iny
.e751	0a		asl a				asl 	a 							; bit 7 of token text in C
.e752	90 ef		bcc $e743			bcc 	_TSFullMatch
.e754	84 27		sty $27				sty 	zTemp2+1 					; save the Y after last
.e756	68		pla				pla 								; so we don't restore Y
.e757	68		pla				pla 								; or X from the full test.
.e758	7a		ply				ply 								; restore original Y and X and A
.e759	fa		plx				plx
.e75a	68		pla				pla
.e75b	a5 26		lda $26				lda 	zTemp2 						; and return token ID in A
.e75d	a4 27		ldy $27				ldy 	zTemp2+1 					; Y after the tokenised text.
.e75f	38		sec				sec 								; with carry set.
.e760	60		rts				rts
.e761					_TSFullFail:
.e761	7a		ply				ply 								; restore Y and X
.e762	fa		plx				plx
.e763	80 c9		bra $e72e			bra 	_TSGotoNext 				; and go to the next token to test.
.e765					TokeniseTest:
.e765	a9 71		lda #$71			lda 	#TTString & $FF
.e767	85 24		sta $24				sta 	zTemp1
.e769	a9 e7		lda #$e7			lda 	#TTString >> 8
.e76b	85 25		sta $25				sta 	zTemp1+1
.e76d	20 b1 e6	jsr $e6b1			jsr 	TokeniseString
.e770	ea		nop				nop
.e771					TTString:
>e771	20 41 42 43 44 20 34 31				.text 	' ABCD 41$"LENA"5LENA',0 			; 4 1 $[T] "LENA" 5 LEN[T] A
>e779	24 22 4c 45 4e 41 22 35 4c 45 4e 41 00

;******  Return to file: basic.asm


;******  Processing file: general/editor.asm

.e786					EditProgram:
.e786	a2 00		ldx #$00			ldx 	#0
.e788	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel 	; get the line number
.e78b	bd 02 04	lda $0402,x			lda 	evalStack+2,x 				; upper bytes must be zero
.e78e	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.e791	d0 37		bne $e7ca			bne 	_EPBadLine
.e793	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; lower bytes must be non-zero
.e796	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.e799	f0 2f		beq $e7ca			beq 	_EPBadLine
.e79b	5a		phy				phy 								; save position
.e79c	20 d6 e7	jsr $e7d6			jsr 	EDFindLine 					; locate the line.
.e79f	90 12		bcc $e7b3			bcc 	_EPNotFound 				; skip delete if not found.
.e7a1	a5 24		lda $24				lda 	zTemp1 						; save the target address, as we will
.e7a3	48		pha				pha 								; insert the line, if done, at the same
.e7a4	a5 25		lda $25				lda 	zTemp1+1 					; place
.e7a6	48		pha				pha
.e7a7	20 07 ed	jsr $ed07			jsr 	COMMAND_Clear 				; clear all vars, make sure zLowMemory is right.
.e7aa	20 0d e8	jsr $e80d			jsr 	EDDeleteLine 				; delete the line at zTemp1
.e7ad	68		pla				pla 								; restore the target address.
.e7ae	85 25		sta $25				sta 	zTemp1+1
.e7b0	68		pla				pla
.e7b1	85 24		sta $24				sta 	zTemp1
.e7b3					_EPNotFound
.e7b3	20 07 ed	jsr $ed07			jsr 	COMMAND_Clear 				; set up all the pointers again and reset everything.
.e7b6	7a		ply				ply 								; get pointer back
.e7b7					_EPSkipSpaces:
.e7b7	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get character
.e7b9	f0 0c		beq $e7c7			beq 	_EPGoWarmStart 				; EOL, just delete, so warm start.
.e7bb	c8		iny				iny
.e7bc	c9 20		cmp #$20			cmp 	#32
.e7be	f0 f7		beq $e7b7			beq 	_EPSkipSpaces
.e7c0	88		dey				dey
.e7c1	20 2d e8	jsr $e82d			jsr 	EDInsertLine 				; insert the line.
.e7c4	20 07 ed	jsr $ed07			jsr 	COMMAND_Clear 				; set up all the pointers again and reset everything.
.e7c7					_EPGoWarmStart:
.e7c7	4c 7d f1	jmp $f17d			jmp 	WarmStart
.e7ca					_EPBadLine:
.e7ca	20 55 e1	jsr $e155			jsr 	ReportError
>e7cd	42 41 44 20 4c 49 4e 45				.text 	"BAD LINE",$00
>e7d5	00
.e7d6					EDFindLine:
.e7d6	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set zTemp1
.e7d8	85 24		sta $24				sta 	zTemp1
.e7da	a9 23		lda #$23			lda 	#BasicProgram >> 8
.e7dc	85 25		sta $25				sta 	zTemp1+1
.e7de					_EDFLLoop:
.e7de	a0 00		ldy #$00			ldy 	#0 							; reached the end
.e7e0	b1 24		lda ($24),y			lda 	(zTemp1),y
.e7e2	f0 25		beq $e809			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.e7e4	c8		iny				iny
.e7e5	38		sec				sec
.e7e6	ad 00 04	lda $0400			lda 	evalStack+0					; subtract the current from the target
.e7e9	f1 24		sbc ($24),y			sbc 	(zTemp1),y 					; so if searching for 100 and this one is 90,
.e7eb	aa		tax				tax	 								; this will return 10.
.e7ec	ad 01 04	lda $0401			lda 	evalStack+1
.e7ef	c8		iny				iny
.e7f0	f1 24		sbc ($24),y			sbc 	(zTemp1),y
.e7f2	90 15		bcc $e809			bcc 	_EDFLFail					; if target < current then failed.
.e7f4	d0 04		bne $e7fa			bne 	_EDFLNext 					; if non-zero then goto next
.e7f6	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.e7f8	f0 11		beq $e80b			beq 	_EDFLFound
.e7fa					_EDFLNext:
.e7fa	a0 00		ldy #$00			ldy 	#0 							; get offset
.e7fc	18		clc				clc
.e7fd	b1 24		lda ($24),y			lda 	(zTemp1),y
.e7ff	65 24		adc $24				adc 	zTemp1 						; add to pointer
.e801	85 24		sta $24				sta 	zTemp1
.e803	90 d9		bcc $e7de			bcc 	_EDFLLoop
.e805	e6 25		inc $25				inc 	zTemp1+1 					; carry out.
.e807	80 d5		bra $e7de			bra 	_EDFLLoop
.e809					_EDFLFail:
.e809	18		clc				clc
.e80a	60		rts				rts
.e80b					_EDFLFound:
.e80b	38		sec				sec
.e80c	60		rts				rts
.e80d					EDDeleteLine:
.e80d	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.e80f	a2 00		ldx #$00			ldx 	#0
.e811	b1 24		lda ($24),y			lda 	(zTemp1),y
.e813	a8		tay				tay 								; put in Y
.e814					_EDDelLoop:
.e814	b1 24		lda ($24),y			lda 	(zTemp1),y 					; get it
.e816	81 24		sta ($24,x)			sta 	(zTemp1,x) 					; write it.
.e818	a5 24		lda $24				lda 	zTemp1 						; check if pointer has reached the end of
.e81a	c5 22		cmp $22				cmp		zLowMemory 					; low memory. We will have copied down an
.e81c	d0 06		bne $e824			bne 	_EDDelNext 					; extra pile of stuff - technically should
.e81e	a5 25		lda $25				lda 	zTemp1+1 					; check the upper value (e.g. zTemp1+y)
.e820	c5 23		cmp $23				cmp 	zLowMemory+1				; doesn't really matter.
.e822	f0 08		beq $e82c			beq		_EDDelExit
.e824					_EDDelNext:
.e824	e6 24		inc $24				inc 	zTemp1 						; go to next byte.
.e826	d0 ec		bne $e814			bne 	_EDDelLoop
.e828	e6 25		inc $25				inc 	zTemp1+1
.e82a	80 e8		bra $e814			bra 	_EDDelLoop
.e82c					_EDDelExit:
.e82c	60		rts				rts
.e82d					EDInsertLine:
.e82d	98		tya				tya 								; make zCurrentLine point to the actual new line.
.e82e	18		clc				clc
.e82f	65 20		adc $20				adc 	zCurrentLine
.e831	85 20		sta $20				sta 	zCurrentLine
.e833	a0 00		ldy #$00			ldy 	#0 							; work out the line length.
.e835					_EDGetLength:
.e835	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.e837	c8		iny				iny
.e838	c9 00		cmp #$00			cmp 	#0
.e83a	d0 f9		bne $e835			bne 	_EDGetLength
.e83c	88		dey				dey 								; fix up.
.e83d	98		tya				tya
.e83e	18		clc				clc
.e83f	69 04		adc #$04			adc 	#1+2+1 						; size required. 1 for offset, 2 for line#, 1 for end.
.e841	48		pha				pha 								; save total size (e.g. offset)
.e842	a8		tay				tay 								; in Y
.e843	a2 00		ldx #$00			ldx 	#0
.e845					_EDInsLoop:
.e845	a1 22		lda ($22,x)			lda 	(zLowMemory,x)				; copy it up
.e847	91 22		sta ($22),y			sta 	(zLowMemory),y
.e849	a5 22		lda $22				lda 	zLowMemory 					; reached the insert point (zTemp1)
.e84b	c5 24		cmp $24				cmp 	zTemp1
.e84d	d0 06		bne $e855			bne 	_EDINextShift
.e84f	a5 23		lda $23				lda 	zLowMemory+1
.e851	c5 25		cmp $25				cmp 	zTemp1+1
.e853	f0 0a		beq $e85f			beq 	_EDIShiftOver
.e855					_EDINextShift:
.e855	a5 22		lda $22				lda 	zLowMemory 					; decrement the copy pointer.
.e857	d0 02		bne $e85b			bne 	_EDINoBorrow
.e859	c6 23		dec $23				dec 	zLowMemory+1
.e85b					_EDINoBorrow:
.e85b	c6 22		dec $22				dec 	zLowMemory
.e85d	80 e6		bra $e845			bra 	_EDInsLoop
.e85f					_EDIShiftOver:
.e85f	68		pla				pla 								; this is the size + others, e.g. offset
.e860	a0 00		ldy #$00			ldy 	#0
.e862	91 22		sta ($22),y			sta 	(zLowMemory),y 				; write that out.
.e864	ad 00 04	lda $0400			lda 	evalStack+0 				; write LIne# out
.e867	c8		iny				iny
.e868	91 22		sta ($22),y			sta 	(zLowMemory),y
.e86a	ad 01 04	lda $0401			lda 	evalStack+1
.e86d	c8		iny				iny
.e86e	91 22		sta ($22),y			sta 	(zLowMemory),y
.e870	c8		iny				iny 								; where the code goes.
.e871	a2 00		ldx #$00			ldx 	#0 							; comes from
.e873					_EDICopyCode:
.e873	a1 20		lda ($20,x)			lda 	(zCurrentLine,x)			; read from the current line
.e875	91 22		sta ($22),y			sta 	(zLowMemory),y 				; write out
.e877	c8		iny				iny 								; bump pointers
.e878	e6 20		inc $20				inc 	zCurrentLine
.e87a	c9 00		cmp #$00			cmp 	#0 							; until zero copied
.e87c	d0 f5		bne $e873			bne 	_EDICopyCode
.e87e	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/arithmetic.asm

.e87f					BFUNC_Add:
.e87f	18		clc				clc
.e880	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e883	7d 04 04	adc $0404,x			adc 	evalStack+4,x
.e886	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e889	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e88c	7d 05 04	adc $0405,x			adc 	evalStack+5,x
.e88f	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e892	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e895	7d 06 04	adc $0406,x			adc 	evalStack+6,x
.e898	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e89b	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e89e	7d 07 04	adc $0407,x			adc 	evalStack+7,x
.e8a1	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e8a4	60		rts				rts
.e8a5					BFUNC_Subtract:
.e8a5	38		sec				sec
.e8a6	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e8a9	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.e8ac	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8af	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e8b2	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.e8b5	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e8b8	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e8bb	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.e8be	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e8c1	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e8c4	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.e8c7	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e8ca	60		rts				rts
.e8cb					BFUNC_String:
.e8cb	20 7f e8	jsr $e87f			jsr 	BFUNC_Add
.e8ce	60		rts				rts
.e8cf					BFUNC_ByteInd:
.e8cf	20 7f e8	jsr $e87f			jsr 	BFUNC_Add
.e8d2	20 c3 e3	jsr $e3c3			jsr 	EVALReadByteIndirect
.e8d5	60		rts				rts
.e8d6					BFUNC_WordInd:
.e8d6	20 7f e8	jsr $e87f			jsr 	BFUNC_Add
.e8d9	20 f9 e3	jsr $e3f9			jsr 	EVALReadWordIndirect
.e8dc	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/binary.asm

.e8dd					BFUNC_And:
.e8dd	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e8e0	3d 04 04	and $0404,x			and 	evalStack+4,x
.e8e3	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e8e6	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e8e9	3d 05 04	and $0405,x			and 	evalStack+5,x
.e8ec	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e8ef	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e8f2	3d 06 04	and $0406,x			and 	evalStack+6,x
.e8f5	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e8f8	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e8fb	3d 07 04	and $0407,x			and 	evalStack+7,x
.e8fe	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e901	60		rts				rts
.e902					BFUNC_Or:
.e902	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e905	1d 04 04	ora $0404,x			ora 	evalStack+4,x
.e908	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e90b	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e90e	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e911	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e914	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e917	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e91a	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e91d	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e920	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e923	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e926	60		rts				rts
.e927					BFUNC_Xor:
.e927	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.e92a	5d 04 04	eor $0404,x			eor 	evalStack+4,x
.e92d	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.e930	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e933	5d 05 04	eor $0405,x			eor 	evalStack+5,x
.e936	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e939	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e93c	5d 06 04	eor $0406,x			eor 	evalStack+6,x
.e93f	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e942	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e945	5d 07 04	eor $0407,x			eor 	evalStack+7,x
.e948	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e94b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/multiply.asm

.e94c					BFUNC_Multiply:
.e94c	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy +0 to +8
.e94f	9d 08 04	sta $0408,x			sta 	evalStack+8,x
.e952	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.e955	9d 09 04	sta $0409,x			sta 	evalStack+9,x
.e958	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.e95b	9d 0a 04	sta $040a,x			sta 	evalStack+10,x
.e95e	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.e961	9d 0b 04	sta $040b,x			sta 	evalStack+11,x
.e964	a9 00		lda #$00			lda 	#0
.e966	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; zero +0
.e969	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.e96c	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.e96f	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.e972					_BFMMultiply:
.e972	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; get LSBit of 8-11
.e975	29 01		and #$01			and 	#1
.e977	f0 03		beq $e97c			beq 	_BFMNoAdd
.e979	20 7f e8	jsr $e87f			jsr 	BFunc_Add 					; if bit set, add 4 to 0.
.e97c					_BFMNoAdd:
.e97c	1e 04 04	asl $0404,x			asl 	evalStack+4,x 				; shift +4 left
.e97f	3e 05 04	rol $0405,x			rol 	evalStack+5,x
.e982	3e 06 04	rol $0406,x			rol 	evalStack+6,x
.e985	3e 07 04	rol $0407,x			rol 	evalStack+7,x
.e988	5e 0b 04	lsr $040b,x			lsr 	evalStack+11,x 				; shift +8 right
.e98b	7e 0a 04	ror $040a,x			ror 	evalStack+10,x
.e98e	7e 09 04	ror $0409,x			ror 	evalStack+9,x
.e991	7e 08 04	ror $0408,x			ror 	evalStack+8,x
.e994	bd 08 04	lda $0408,x			lda 	evalStack+8,x 				; continue if +8 is nonzero
.e997	1d 09 04	ora $0409,x			ora 	evalStack+9,x
.e99a	1d 0a 04	ora $040a,x			ora 	evalStack+10,x
.e99d	1d 0b 04	ora $040b,x			ora 	evalStack+11,x
.e9a0	d0 d0		bne $e972			bne 	_BFMMultiply
.e9a2	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/divide.asm

.e9a3					BFUNC_Divide:
.e9a3	bd 04 04	lda $0404,x			lda 	evalStack+4,x 				; check for /0
.e9a6	1d 05 04	ora $0405,x			ora 	evalStack+5,x
.e9a9	1d 06 04	ora $0406,x			ora 	evalStack+6,x
.e9ac	1d 07 04	ora $0407,x			ora 	evalStack+7,x
.e9af	d0 14		bne $e9c5			bne 	_BFDOkay
.e9b1	20 55 e1	jsr $e155			jsr 	ReportError
>e9b4	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",$00
>e9bc	20 42 59 20 5a 45 52 4f 00
.e9c5					_BFDOkay:
.e9c5	a9 00		lda #$00			lda 	#0 							; Temp1 is 'A' (and holds the remainder)
.e9c7	8d 98 20	sta $2098			sta 	Temp1 						; Q/Dividend/Left in +0
.e9ca	8d 99 20	sta $2099			sta 	Temp1+1 					; M/Divisor/Right in +4
.e9cd	8d 9a 20	sta $209a			sta 	Temp1+2
.e9d0	8d 9b 20	sta $209b			sta 	Temp1+3
.e9d3	8d 9c 20	sta $209c			sta 	SignCount 					; Count of signs.
.e9d6	20 41 ea	jsr $ea41			jsr 	BFUNC_Negate 				; negate (and bump sign count)
.e9d9	da		phx				phx
.e9da	e8		inx				inx
.e9db	e8		inx				inx
.e9dc	e8		inx				inx
.e9dd	e8		inx				inx
.e9de	20 41 ea	jsr $ea41			jsr 	BFUNC_Negate
.e9e1	fa		plx				plx
.e9e2	5a		phy				phy 								; Y is the counter
.e9e3	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.e9e5					_BFDLoop:
.e9e5	1e 00 04	asl $0400,x			asl 	evalStack+0,x 				; shift AQ left.
.e9e8	3e 01 04	rol $0401,x			rol 	evalStack+1,x
.e9eb	3e 02 04	rol $0402,x			rol 	evalStack+2,x
.e9ee	3e 03 04	rol $0403,x			rol 	evalStack+3,x
.e9f1	2e 98 20	rol $2098			rol 	Temp1
.e9f4	2e 99 20	rol $2099			rol 	Temp1+1
.e9f7	2e 9a 20	rol $209a			rol 	Temp1+2
.e9fa	2e 9b 20	rol $209b			rol 	Temp1+3
.e9fd	38		sec				sec
.e9fe	ad 98 20	lda $2098			lda 	Temp1+0 					; Calculate A-M on stack.
.ea01	fd 04 04	sbc $0404,x			sbc 	evalStack+4,x
.ea04	48		pha				pha
.ea05	ad 99 20	lda $2099			lda 	Temp1+1
.ea08	fd 05 04	sbc $0405,x			sbc 	evalStack+5,x
.ea0b	48		pha				pha
.ea0c	ad 9a 20	lda $209a			lda 	Temp1+2
.ea0f	fd 06 04	sbc $0406,x			sbc 	evalStack+6,x
.ea12	48		pha				pha
.ea13	ad 9b 20	lda $209b			lda 	Temp1+3
.ea16	fd 07 04	sbc $0407,x			sbc 	evalStack+7,x
.ea19	90 19		bcc $ea34			bcc 	_BFDNoAdd
.ea1b	8d 9b 20	sta $209b			sta 	Temp1+3 					; update A
.ea1e	68		pla				pla
.ea1f	8d 9a 20	sta $209a			sta 	Temp1+2
.ea22	68		pla				pla
.ea23	8d 99 20	sta $2099			sta 	Temp1+1
.ea26	68		pla				pla
.ea27	8d 98 20	sta $2098			sta 	Temp1+0
.ea2a	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; set Q bit 1.
.ea2d	09 01		ora #$01			ora 	#1
.ea2f	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea32	80 03		bra $ea37			bra 	_BFDNext
.ea34					_BFDNoAdd:
.ea34	68		pla				pla 								; Throw away the intermediate calculations
.ea35	68		pla				pla
.ea36	68		pla				pla
.ea37					_BFDNext:
.ea37	88		dey				dey
.ea38	d0 ab		bne $e9e5			bne 	_BFDLoop
.ea3a	7a		ply				ply 								; restore Y and exit
.ea3b	4e 9c 20	lsr $209c			lsr 	SignCount 					; if sign count odd,
.ea3e	b0 06		bcs $ea46			bcs		BFUNC_NegateAlways 			; negate the result
.ea40	60		rts				rts
.ea41					BFUNC_Negate:
.ea41	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ea44	10 24		bpl $ea6a			bpl 	BFNExit
.ea46					BFUNC_NegateAlways:
.ea46	38		sec				sec
.ea47	a9 00		lda #$00			lda 	#0
.ea49	fd 00 04	sbc $0400,x			sbc 	evalStack+0,x
.ea4c	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea4f	a9 00		lda #$00			lda 	#0
.ea51	fd 01 04	sbc $0401,x			sbc 	evalStack+1,x
.ea54	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea57	a9 00		lda #$00			lda 	#0
.ea59	fd 02 04	sbc $0402,x			sbc 	evalStack+2,x
.ea5c	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea5f	a9 00		lda #$00			lda 	#0
.ea61	fd 03 04	sbc $0403,x			sbc 	evalStack+3,x
.ea64	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea67	ee 9c 20	inc $209c			inc 	SignCount
.ea6a					BFNExit:
.ea6a	60		rts				rts
.ea6b					BFUNC_Modulus:
.ea6b	20 a3 e9	jsr $e9a3			jsr 	BFUNC_Divide 				; start with division.
.ea6e	ad 98 20	lda $2098			lda 	Temp1+0 					; copy remainder
.ea71	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ea74	ad 99 20	lda $2099			lda 	Temp1+1
.ea77	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ea7a	ad 9a 20	lda $209a			lda 	Temp1+2
.ea7d	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ea80	ad 9b 20	lda $209b			lda 	Temp1+3
.ea83	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ea86	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: binary/compare.asm

.ea87					BFUNC_Equals:
.ea87	18		clc				clc
.ea88	80 01		bra $ea8b			bra 	BFUNC_EqualCheck
.ea8a					BFUNC_NotEquals:
.ea8a	38		sec				sec
.ea8b					BFUNC_EqualCheck:
.ea8b	08		php				php									; save invert flag
.ea8c	ad 00 04	lda $0400			lda 	evalStack+0 				; check equality
.ea8f	cd 04 04	cmp $0404			cmp 	evalStack+4
.ea92	d0 1c		bne $eab0			bne 	COMP_Fail
.ea94	ad 01 04	lda $0401			lda 	evalStack+1
.ea97	cd 05 04	cmp $0405			cmp 	evalStack+5
.ea9a	d0 14		bne $eab0			bne 	COMP_Fail
.ea9c	ad 02 04	lda $0402			lda 	evalStack+2
.ea9f	cd 06 04	cmp $0406			cmp 	evalStack+6
.eaa2	d0 0c		bne $eab0			bne 	COMP_Fail
.eaa4	ad 03 04	lda $0403			lda 	evalStack+3
.eaa7	cd 07 04	cmp $0407			cmp 	evalStack+7
.eaaa	d0 04		bne $eab0			bne 	COMP_Fail
.eaac					COMP_Succeed:
.eaac	a9 ff		lda #$ff			lda 	#$FF
.eaae	80 02		bra $eab2			bra 	COMP_SetResult
.eab0					COMP_Fail:
.eab0	a9 00		lda #$00			lda 	#0 							; here return 0
.eab2					COMP_SetResult:
.eab2	28		plp				plp 								; but if CS
.eab3	90 02		bcc $eab7			bcc 	COMP_Accept
.eab5	49 ff		eor #$ff			eor 	#$FF 						; invert that
.eab7					COMP_Accept:
.eab7	9d 00 04	sta $0400,x			sta 	evalStack+0,x 				; write to result.
.eaba	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eabd	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.eac0	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.eac3	60		rts				rts
.eac4					BFUNC_Less:
.eac4	18		clc				clc
.eac5	80 01		bra $eac8			bra 	BFUNC_LessCheck
.eac7					BFUNC_GreaterEqual:
.eac7	38		sec				sec
.eac8					BFUNC_LessCheck:
.eac8	08		php				php
.eac9	38		sec				sec
.eaca	ad 00 04	lda $0400			lda 	evalStack+0 				; compare using direct subtraction
.eacd	ed 04 04	sbc $0404			sbc 	evalStack+4
.ead0	ad 01 04	lda $0401			lda 	evalStack+1
.ead3	ed 05 04	sbc $0405			sbc 	evalStack+5
.ead6	ad 02 04	lda $0402			lda 	evalStack+2
.ead9	ed 06 04	sbc $0406			sbc 	evalStack+6
.eadc	ad 03 04	lda $0403			lda 	evalStack+3
.eadf	ed 07 04	sbc $0407			sbc 	evalStack+7
.eae2	30 c8		bmi $eaac			bmi 	COMP_Succeed
.eae4	80 ca		bra $eab0			bra 	COMP_Fail
.eae6					BFUNC_Greater:
.eae6	18		clc				clc
.eae7	80 01		bra $eaea			bra 	BFUNC_GreaterCheck
.eae9					BFUNC_LessEqual:
.eae9	38		sec				sec
.eaea					BFUNC_GreaterCheck:
.eaea	08		php				php
.eaeb	38		sec				sec
.eaec	ad 04 04	lda $0404			lda 	evalStack+4 				; compare using direct subtraction
.eaef	ed 00 04	sbc $0400			sbc 	evalStack+0
.eaf2	ad 05 04	lda $0405			lda 	evalStack+5
.eaf5	ed 01 04	sbc $0401			sbc 	evalStack+1
.eaf8	ad 06 04	lda $0406			lda 	evalStack+6
.eafb	ed 02 04	sbc $0402			sbc 	evalStack+2
.eafe	ad 07 04	lda $0407			lda 	evalStack+7
.eb01	ed 03 04	sbc $0403			sbc 	evalStack+3
.eb04	30 a6		bmi $eaac			bmi 	COMP_Succeed
.eb06	80 a8		bra $eab0			bra 	COMP_Fail

;******  Return to file: basic.asm


;******  Processing file: binary/scompare.asm

.eb08					BFUNC_StringCompare:
.eb08	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get address into temporaries.
.eb0b	85 24		sta $24				sta 	zTemp1
.eb0d	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eb10	85 25		sta $25				sta 	zTemp1+1
.eb12	bd 04 04	lda $0404,x			lda 	evalStack+4,x
.eb15	85 26		sta $26				sta 	zTemp2
.eb17	bd 05 04	lda $0405,x			lda 	evalStack+5,x
.eb1a	85 27		sta $27				sta 	zTemp2+1
.eb1c	5a		phy				phy
.eb1d	a0 00		ldy #$00			ldy 	#0
.eb1f					_BFSCLoop:
.eb1f	b1 24		lda ($24),y			lda 	(zTemp1),y 					; comparison
.eb21	38		sec				sec
.eb22	d1 26		cmp ($26),y			cmp 	(zTemp2),y
.eb24	d0 15		bne $eb3b			bne		_BFSCDifferent 				; return different result.
.eb26	c8		iny				iny
.eb27	c9 00		cmp #$00			cmp 	#0							; until both EOS.
.eb29	d0 f4		bne $eb1f			bne 	_BFSCLoop
.eb2b	7a		ply				ply
.eb2c	a9 00		lda #$00			lda 	#0
.eb2e					_BFSCSetAll:
.eb2e	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.eb31	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eb34	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.eb37	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.eb3a	60		rts				rts
.eb3b					_BFSCDifferent:
.eb3b	7a		ply				ply
.eb3c	a9 ff		lda #$ff			lda 	#255 						; if CC set all as <
.eb3e	90 ee		bcc $eb2e			bcc 	_BFSCSetAll
.eb40	a9 00		lda #$00			lda 	#0 							; set all zero
.eb42	20 2e eb	jsr $eb2e			jsr 	_BFSCSetAll
.eb45	fe 00 04	inc $0400,x			inc 	evalStack+0,x 				; and make it one.
.eb48	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: unary/unary.asm

.eb49					UNARY_Len:
.eb49	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.eb4c	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.eb4f	85 24		sta $24				sta 	zTemp1
.eb51	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eb54	85 25		sta $25				sta 	zTemp1+1
.eb56	5a		phy				phy
.eb57	a0 00		ldy #$00			ldy 	#0 							; now figure out its length.
.eb59					_ULGetLength:
.eb59	b1 24		lda ($24),y			lda 	(zTemp1),y 					; read character
.eb5b	f0 1d		beq $eb7a			beq 	_ULFoundEOL 				; found end of line.
.eb5d	c8		iny				iny
.eb5e	d0 f9		bne $eb59			bne 	_ULGetLength 				; scan 256 only.
.eb60	20 55 e1	jsr $e155			jsr 	ReportError
>eb63	43 41 4e 4e 4f 54 20 46				.text 	"CANNOT FIND STRING END",$00
>eb6b	49 4e 44 20 53 54 52 49 4e 47 20 45 4e 44 00
.eb7a					_ULFoundEOL:
.eb7a	98		tya				tya 								; length in A, restore Y
.eb7b	7a		ply				ply
.eb7c					UNARY_ReturnByte:
.eb7c	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.eb7f	a9 00		lda #$00			lda 	#0 							; clear the rests
.eb81	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.eb84	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.eb87	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.eb8a	60		rts				rts
.eb8b					UNARY_Ch:
.eb8b	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.eb8e	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; copy string address to zTemp1
.eb91	85 24		sta $24				sta 	zTemp1
.eb93	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.eb96	85 25		sta $25				sta 	zTemp1+1
.eb98	5a		phy				phy
.eb99	a0 00		ldy #$00			ldy 	#0 							; now get first character
.eb9b	b1 24		lda ($24),y			lda 	(zTemp1),y
.eb9d	7a		ply				ply
.eb9e	80 dc		bra $eb7c			bra 	UNARY_ReturnByte 			; return that byte.
.eba0					UNARY_Abs:
.eba0	ea		nop				nop
.eba1	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel 	; get the string to measure the length of.
.eba4	20 41 ea	jsr $ea41			jsr 	BFUNC_Negate 				; there's an ABS routine in divide
.eba7	60		rts				rts
.eba8					UNARY_Top:
.eba8	ad 96 20	lda $2096			lda 	highMemory
.ebab	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ebae	ad 97 20	lda $2097			lda 	highMemory+1
.ebb1	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ebb4	a9 00		lda #$00			lda 	#0
.ebb6	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ebb9	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ebbc	60		rts				rts
.ebbd					UNARY_Get:
.ebbd	20 0c b0	jsr $b00c			jsr 	EXTReadKeyPort
.ebc0	f0 fb		beq $ebbd			beq 	UNARY_Get
.ebc2	20 35 b0	jsr $b035			jsr 	EXTRemoveKeyPressed
.ebc5	80 b5		bra $eb7c			bra 	UNARY_ReturnByte
.ebc7					UNARY_Page:
.ebc7	a9 00		lda #$00			lda 	#BasicProgram & $FF
.ebc9	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ebcc	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ebce	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ebd1	a9 00		lda #$00			lda 	#0
.ebd3	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ebd6	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ebd9	60		rts				rts
.ebda					UNARY_Rnd:
.ebda	20 e5 eb	jsr $ebe5			jsr 	Random16 					; call 16 bit RNG twice
.ebdd	e8		inx				inx
.ebde	e8		inx				inx
.ebdf	20 e5 eb	jsr $ebe5			jsr 	Random16
.ebe2	ca		dex				dex
.ebe3	ca		dex				dex
.ebe4	60		rts				rts
.ebe5					Random16:
.ebe5	ad 9e 20	lda $209e			lda 	RandomSeed 					; initialise if nonzero
.ebe8	0d 9f 20	ora $209f			ora 	RandomSeed+1
.ebeb	d0 0d		bne $ebfa			bne 	_R16_NoInit
.ebed	ee 9e 20	inc $209e			inc 	RandomSeed 					; by setting low to 1
.ebf0	5a		phy				phy
.ebf1	a0 14		ldy #$14			ldy 	#20 						; call it 20 times to get it started
.ebf3					_R16_Setup:
.ebf3	20 e5 eb	jsr $ebe5			jsr 	Random16
.ebf6	88		dey				dey
.ebf7	d0 fa		bne $ebf3			bne 	_R16_Setup
.ebf9	7a		ply				ply
.ebfa					_R16_NoInit:
.ebfa	4e 9f 20	lsr $209f			lsr 	RandomSeed+1				; shift seed right
.ebfd	6e 9e 20	ror $209e			ror 	RandomSeed
.ec00	90 08		bcc $ec0a			bcc 	_R16_NoXor
.ec02	ad 9f 20	lda $209f			lda 	RandomSeed+1				; xor MSB with $B4 if bit set.
.ec05	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.ec07	8d 9f 20	sta $209f			sta 	RandomSeed+1
.ec0a					_R16_NoXor:
.ec0a	ad 9e 20	lda $209e			lda 	RandomSeed					; copy result to evaluate stack.
.ec0d	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ec10	ad 9f 20	lda $209f			lda 	RandomSeed+1
.ec13	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ec16	60		rts				rts
.ec17					UNARY_IOAddr:
.ec17	a9 0f		lda #$0f			lda 	#$0F
.ec19	9d 03 04	sta $0403,x			sta 	evalStack+3,x
.ec1c	a9 fd		lda #$fd			lda 	#$FD
.ec1e	9d 02 04	sta $0402,x			sta 	evalStack+2,x
.ec21	a9 30		lda #$30			lda 	#$30
.ec23	9d 01 04	sta $0401,x			sta 	evalStack+1,x
.ec26	a9 00		lda #$00			lda 	#$00
.ec28	9d 00 04	sta $0400,x			sta 	evalStack+0,x
.ec2b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/execute.asm

.ec2c					COMMAND_Run:
.ec2c	20 07 ed	jsr $ed07			jsr 	COMMAND_Clear 				; clear everything for a new run.
.ec2f	a2 00		ldx #$00			ldx 	#BasicProgram & 255 		; start from here
.ec31	a0 23		ldy #$23			ldy 	#BasicProgram >> 8
.ec33	86 20		stx $20				stx 	zCurrentLine 				; set current line.
.ec35	84 21		sty $21				sty 	zCurrentLine+1
.ec37					CRUNNewLine:
.ec37	a0 00		ldy #$00			ldy 	#0 							; look at the offset, end of program
.ec39	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ec3b	f0 78		beq $ecb5			beq 	COMMAND_End 				; if zero, off end of program so stop.
.ec3d	a0 03		ldy #$03			ldy 	#3 							; offset to first token.
.ec3f					CRUNNextInstruction:
.ec3f	ee a2 20	inc $20a2			inc 	breakCheckCount 			; don't check every time, might be slow.
.ec42	ad a2 20	lda $20a2			lda 	breakCheckCount
.ec45	29 1f		and #$1f			and 	#$1F 						; checking once in 32.
.ec47	f0 0e		beq $ec57			beq 	_CRUNNoCheck
.ec49	20 55 b0	jsr $b055			jsr 	EXTCheckBreak
.ec4c	f0 09		beq $ec57			beq 	_CRUNNoCheck
.ec4e	20 55 e1	jsr $e155			jsr 	ReportError
>ec51	42 52 45 41 4b 00				.text 	"BREAK",$00
.ec57					_CRUNNoCheck:
.ec57	a9 00		lda #$00			lda 	#0 							; reset the string buffer position
.ec59	8d 9d 20	sta $209d			sta 	StringBufferPos
.ec5c	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next token
.ec5e	f0 0b		beq $ec6b			beq 	CRUNNextLine 				; if zero, then end of line.
.ec60					CRUNNotEndOfLine:
.ec60	c9 20		cmp #$20			cmp 	#' '
.ec62	f0 04		beq $ec68			beq 	CRUNSkipLoop
.ec64	c9 8d		cmp #$8d			cmp 	#KW_Colon 					; check for a colon first.
.ec66	d0 1b		bne $ec83			bne 	CRUNExecuteOne 				; if not that, execute the token.
.ec68					CRUNSkipLoop:
.ec68	c8		iny				iny		 							; if colon, skip it and loop round.
.ec69	80 d4		bra $ec3f			bra 	CRUNNextInstruction
.ec6b					CRUNNextLine:
.ec6b	a5 21		lda $21				lda 	zCurrentLine+1 				; running from input
.ec6d	c9 21		cmp #$21			cmp 	#TokeniseBuffer>>8
.ec6f	f0 0f		beq $ec80			beq		CRUNWarmStart
.ec71	a0 00		ldy #$00			ldy 	#0 							; add offset from line to line pointer
.ec73	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.ec75	18		clc				clc
.ec76	65 20		adc $20				adc 	zCurrentLine
.ec78	85 20		sta $20				sta 	zCurrentLine
.ec7a	90 bb		bcc $ec37			bcc 	CRUNNewLine
.ec7c	e6 21		inc $21				inc 	zCurrentLine+1
.ec7e	80 b7		bra $ec37			bra 	CRUNNewLine
.ec80					CRUNWarmStart:
.ec80	4c 7d f1	jmp $f17d			jmp 	WarmStart
.ec83					CRUNExecuteOne:
.ec83	09 00		ora #$00			ora 	#0 							; if it is a character might be a variable.
.ec85	10 21		bpl $eca8			bpl		_CRUNX1TryLet
.ec87	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; likewise if ! something ? something $ something
.ec89	f0 1d		beq $eca8			beq 	_CRUNX1TryLet
.ec8b	c9 80		cmp #$80			cmp 	#KW_PLING
.ec8d	f0 19		beq $eca8			beq 	_CRUNX1TryLet
.ec8f	c9 95		cmp #$95			cmp 	#KW_QUESTION
.ec91	f0 15		beq $eca8			beq 	_CRUNX1TryLet
.ec93	c8		iny				iny 								; skip over loaded token
.ec94	0a		asl a				asl 	a 							; double lower keyword byte, clears bit 7.
.ec95	8d 99 20	sta $2099			sta 	Temp1+1 					; this is the low byte into the KVT
.ec98	8a		txa				txa
.ec99	a9 e0		lda #$e0			lda 	#KeywordVectorTable >> 8 	; set high byte of KVT
.ec9b	8d 9a 20	sta $209a			sta 	Temp1+2
.ec9e	a9 6c		lda #$6c			lda 	#$6C 						; make it jump indirect
.eca0	8d 98 20	sta $2098			sta 	Temp1+0
.eca3	20 98 20	jsr $2098			jsr 	Temp1 						; call instruction
.eca6	80 97		bra $ec3f			bra 	CRUNNextInstruction 		; do next instruction.
.eca8					_CRUNX1TryLet:
.eca8	20 79 ed	jsr $ed79			jsr 	COMMAND_Let 				; try doing a LET if not a keyword.
.ecab	80 92		bra $ec3f			bra 	CRUNNextInstruction
.ecad					COMMAND_Stop:
.ecad	20 55 e1	jsr $e155			jsr 	ReportError
>ecb0	53 54 4f 50 00					.text 	"STOP",$00
.ecb5					COMMAND_End:
.ecb5	ad 36 f2	lda $f236			lda 	StartBehaviour 				; running program
.ecb8	c9 52		cmp #$52			cmp 	#"R"
.ecba	d0 01		bne $ecbd			bne 	_CEWarmStart
>ecbc	02						.byte 	2
.ecbd					_CEWarmStart:
.ecbd	4c 7d f1	jmp $f17d			jmp 	WarmStart

;******  Return to file: basic.asm


;******  Processing file: commands/miscellany.asm

.ecc0					COMMAND_Assert:
.ecc0	20 09 e2	jsr $e209			jsr 	EvaluateBase 				; evaluate the expression
.ecc3	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check non zero
.ecc6	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.ecc9	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.eccc	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.eccf	d0 12		bne $ece3			bne 	_CMDAExit
.ecd1	ea		nop				nop
.ecd2	20 55 e1	jsr $e155			jsr 	ReportError
>ecd5	41 53 53 45 52 54 20 46				.text 	"ASSERT FAILED",$00
>ecdd	41 49 4c 45 44 00
.ece3					_CMDAExit:
.ece3	60		rts				rts
.ece4					COMMAND_Rem:
.ece4	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get next character token.
.ece6	f0 05		beq $eced			beq 	_CREMExit 					; End of line, then exit.
.ece8	c8		iny				iny 								; something to skip
.ece9	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; if not a colon
.eceb	d0 f7		bne $ece4			bne 	COMMAND_Rem 				; keep searching
.eced					_CREMExit:
.eced	60		rts				rts
.ecee					COMMAND_NewExec:
.ecee	20 f4 ec	jsr $ecf4			jsr 	COMMAND_NewCode
.ecf1	4c 7d f1	jmp $f17d			jmp 	WarmStart
.ecf4					COMMAND_NewCode:
.ecf4	a9 00		lda #$00			lda 	#0 							; erase the actual program.
.ecf6	8d 00 23	sta $2300			sta 	BasicProgram 				; by zeroing the initial offset.
.ecf9	20 07 ed	jsr $ed07			jsr 	COMMAND_Clear 				; clear non fixed variable, reset stack and low mem pointer
.ecfc	a9 00		lda #$00			lda 	#endMemory & $FF 			; reset high memory pointer.
.ecfe	8d 96 20	sta $2096			sta 	HighMemory
.ed01	a9 80		lda #$80			lda 	#endMemory >> 8
.ed03	8d 97 20	sta $2097			sta 	HighMemory+1
.ed06	60		rts				rts
.ed07					COMMAND_Clear:
.ed07	a2 00		ldx #$00			ldx 	#0	 						; clear variables @A-Z
.ed09					_CCClearVar:
.ed09	a9 00		lda #$00			lda 	#$00
.ed0b	9d 00 20	sta $2000,x			sta 	FixedVariables,x
.ed0e	e8		inx				inx
.ed0f	e0 6c		cpx #$6c			cpx 	#27*4
.ed11	10 f6		bpl $ed09			bpl 	_CCClearVar
.ed13	a9 00		lda #$00			lda 	#0 							; reset BASIC stack index
.ed15	8d a3 20	sta $20a3			sta 	basicStackIndex
.ed18	a9 ff		lda #$ff			lda 	#$FF 						; put invalid token on TOS, so when pulled.
.ed1a	8d 00 02	sta $0200			sta 	basicStack 					; causes an error.
.ed1d	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; now find where the program ends.
.ed1f	85 22		sta $22				sta 	zLowMemory
.ed21	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ed23	85 23		sta $23				sta 	zLowMemory+1
.ed25					_CCFindEnd:
.ed25	a0 00		ldy #$00			ldy 	#0 							; look at next offset
.ed27	b1 22		lda ($22),y			lda 	(zLowMemory),y 				; if zero, reached the end.
.ed29	f0 0b		beq $ed36			beq 	_CCFoundEnd
.ed2b	18		clc				clc 								; go to next line.
.ed2c	65 22		adc $22				adc 	zLowMemory
.ed2e	85 22		sta $22				sta 	zLowMemory
.ed30	90 f3		bcc $ed25			bcc 	_CCFindEnd
.ed32	e6 23		inc $23				inc 	zLowMemory+1
.ed34	80 ef		bra $ed25			bra 	_CCFindEnd
.ed36					_CCFoundEnd:
.ed36	e6 22		inc $22				inc 	zLowMemory 					; variables etc. start after end of program.
.ed38	d0 02		bne $ed3c			bne 	_CCNoCarry 					; skip over zero end offset.
.ed3a	e6 23		inc $23				inc 	zLowMemory+1
.ed3c					_CCNoCarry:
.ed3c	60		rts				rts
.ed3d					COMMAND_OldExec:
.ed3d	20 43 ed	jsr $ed43			jsr 	COMMAND_OldCode
.ed40	4c 7d f1	jmp $f17d			jmp 	WarmStart
.ed43					COMMAND_OldCode:
.ed43	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; point zLowMemory to the first line.
.ed45	85 22		sta $22				sta 	zLowMemory
.ed47	a9 23		lda #$23			lda 	#BasicProgram >> 8
.ed49	85 23		sta $23				sta 	zLowMemory+1
.ed4b	a0 03		ldy #$03			ldy 	#3 							; look for the $00 end of line marker.
.ed4d					_COScan:
.ed4d	b1 22		lda ($22),y			lda 	(zLowMemory),y 				; look at next byte pair
.ed4f	c8		iny				iny
.ed50	f0 0d		beq $ed5f			beq 	_COFail 					; can't find marker, corrupted maybe ?
.ed52	c9 00		cmp #$00			cmp 	#0 							; until $00 found.
.ed54	d0 f7		bne $ed4d			bne 	_COScan
.ed56	98		tya				tya 								; Y is the new offset to the next instruction
.ed57	a0 00		ldy #$00			ldy 	#0 							; overwrite the old one
.ed59	91 22		sta ($22),y			sta 	(zLowMemory),y
.ed5b	20 07 ed	jsr $ed07			jsr 	COMMAND_Clear 				; reset variables, stacks and pointers.
.ed5e	60		rts				rts
.ed5f					_COFail:
.ed5f	20 55 e1	jsr $e155			jsr 	ReportError
>ed62	43 41 4e 4e 4f 54 20 52				.text 	"CANNOT RECOVER PROGRAM",$00
>ed6a	45 43 4f 56 45 52 20 50 52 4f 47 52 41 4d 00

;******  Return to file: basic.asm


;******  Processing file: commands/let.asm

.ed79					COMMAND_Let:
.ed79	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; get first token not space
.ed7b	f0 58		beq $edd5			beq 	_CLESyntax
.ed7d	c8		iny				iny
.ed7e	c9 20		cmp #$20			cmp 	#32
.ed80	f0 f7		beq $ed79			beq 	COMMAND_Let
.ed82	88		dey				dey
.ed83	c9 95		cmp #$95			cmp 	#KW_QUESTION				; check for first being indirect.
.ed85	f0 51		beq $edd8			beq 	_CLEIndirect 				; e.g. !x = 42
.ed87	c9 80		cmp #$80			cmp 	#KW_PLING
.ed89	f0 4d		beq $edd8			beq 	_CLEIndirect
.ed8b	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.ed8d	f0 49		beq $edd8			beq 	_CLEIndirect
.ed8f	a2 00		ldx #$00			ldx 	#0 							; clear evaluation stack.
.ed91	20 4e e4	jsr $e44e			jsr 	VARReference 				; get a variable reference.
.ed94	a5 24		lda $24				lda 	zTemp1 						; copy into target addr
.ed96	85 28		sta $28				sta 	zTargetAddr
.ed98	a5 25		lda $25				lda 	zTemp1+1
.ed9a	85 29		sta $29				sta 	zTargetAddr+1
.ed9c	a5 26		lda $26				lda 	zTemp1+2
.ed9e	85 2a		sta $2a				sta 	zTargetAddr+2
.eda0	a5 27		lda $27				lda 	zTemp1+3
.eda2	85 2b		sta $2b				sta 	zTargetAddr+3
.eda4					_CLEGetBinLHSOp:
.eda4	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.eda6	f0 2d		beq $edd5			beq 	_CLESyntax
.eda8	c8		iny				iny
.eda9	c9 20		cmp #$20			cmp 	#' '
.edab	f0 f7		beq $eda4			beq 	_CLEGetBinLHSOp
.edad	88		dey				dey
.edae	c9 95		cmp #$95			cmp 	#KW_QUESTION 				; got some sort of reference, check
.edb0	f0 45		beq $edf7			beq 	_CLEBinaryLHTerm  			; if that's a basis for indirection ?
.edb2	c9 80		cmp #$80			cmp 	#KW_PLING
.edb4	f0 41		beq $edf7			beq 	_CLEBinaryLHTerm
.edb6	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.edb8	f0 3d		beq $edf7			beq 	_CLEBinaryLHTerm
.edba	a9 80		lda #$80			lda 	#KW_PLING 					; we want to do a 32 bit write.
.edbc					_CLEWriteToAddress:
.edbc	48		pha				pha 								; save write-type.
.edbd	a9 92		lda #$92			lda 	#KW_EQUAL 					; check for '=' sign.
.edbf	20 9b e1	jsr $e19b			jsr 	CheckNextCharacter
.edc2	20 09 e2	jsr $e209			jsr 	EvaluateBase 				; evaluate the RHS.
.edc5	68		pla				pla
.edc6	c9 80		cmp #$80			cmp 	#KW_PLING
.edc8	f0 7d		beq $ee47			beq 	_CLEWordWrite
.edca	c9 95		cmp #$95			cmp 	#KW_QUESTION
.edcc	f0 60		beq $ee2e			beq 	_CLEByteWrite
.edce	c9 83		cmp #$83			cmp 	#KW_DOLLAR
.edd0					_ErrorInternal:
.edd0	d0 fe		bne $edd0			bne 	_ErrorInternal
.edd2	4c 87 ee	jmp $ee87			jmp 	_CLEStringWrite
.edd5					_CLESyntax:
.edd5	4c 45 e1	jmp $e145			jmp 	SyntaxError
.edd8					_CLEIndirect:
.edd8	48		pha				pha 								; save operator on stack
.edd9	c8		iny				iny									; advance over cursor
.edda	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.eddc	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel
.eddf	bd 00 04	lda $0400,x			lda 	evalStack+0,x				; copy that as the address.
.ede2	85 28		sta $28				sta 	zTargetAddr+0
.ede4	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ede7	85 29		sta $29				sta 	zTargetAddr+1
.ede9	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.edec	85 2a		sta $2a				sta 	zTargetAddr+2
.edee	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.edf1	85 2b		sta $2b				sta 	zTargetAddr+3
.edf3	68		pla				pla 								; restore operator.
.edf4	4c bc ed	jmp $edbc			jmp 	_CLEWriteToAddress
.edf7					_CLEBinaryLHTerm:
.edf7	48		pha				pha 								; save operator on stack
.edf8	c8		iny				iny 								; skip over it.
.edf9	a2 00		ldx #$00			ldx 	#0 							; evaluate the address to indirect through.
.edfb	20 05 e2	jsr $e205			jsr 	EvaluateAtomCurrentLevel
.edfe	a5 28		lda $28				lda 	zTargetAddr 				; copy zTargetAddr to zTemp1. Technically
.ee00	85 24		sta $24				sta 	zTemp1 						; a four byte address.....
.ee02	a5 29		lda $29				lda 	zTargetAddr+1
.ee04	85 25		sta $25				sta 	zTemp1+1 					; we only worry about 4 byte value
.ee06	5a		phy				phy 								; save Y
.ee07	18		clc				clc 								; add variable evaluated to (zTargetAddr)
.ee08	a0 00		ldy #$00			ldy 	#0
.ee0a	b1 24		lda ($24),y			lda 	(zTemp1),y
.ee0c	7d 00 04	adc $0400,x			adc 	evalStack+0,x
.ee0f	85 28		sta $28				sta 	zTargetAddr+0
.ee11	c8		iny				iny
.ee12	b1 24		lda ($24),y			lda 	(zTemp1),y
.ee14	7d 01 04	adc $0401,x			adc 	evalStack+1,x
.ee17	85 29		sta $29				sta 	zTargetAddr+1
.ee19	c8		iny				iny
.ee1a	b1 24		lda ($24),y			lda 	(zTemp1),y
.ee1c	7d 02 04	adc $0402,x			adc 	evalStack+2,x
.ee1f	85 2a		sta $2a				sta 	zTargetAddr+2
.ee21	c8		iny				iny
.ee22	b1 24		lda ($24),y			lda 	(zTemp1),y
.ee24	7d 03 04	adc $0403,x			adc 	evalStack+3,x
.ee27	85 2b		sta $2b				sta 	zTargetAddr+3
.ee29	7a		ply				ply 								; restore Y
.ee2a	68		pla				pla 								; restore the operator.
.ee2b	4c bc ed	jmp $edbc			jmp 	_CLEWriteToAddress
.ee2e					_CLEByteWrite:
.ee2e	a5 2a		lda $2a				lda 	zTargetAddr+2
.ee30	05 2b		ora $2b				ora 	zTargetAddr+3
.ee32	d0 0a		bne $ee3e			bne 	_CLEByteWriteExt
.ee34	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; get the byte to write.
.ee37	5a		phy				phy 								; write the byte preserving Y
.ee38	a0 00		ldy #$00			ldy 	#0
.ee3a	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ee3c	7a		ply				ply
.ee3d	60		rts				rts
.ee3e					_CLEByteWriteExt:
.ee3e	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ee41	a3 00		ldz #$00			ldz 	#0
.ee43	ea		nop				nop
.ee44	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ee46	60		rts				rts
.ee47					_CLEWordWrite:
.ee47	a5 2a		lda $2a				lda 	zTargetAddr+2
.ee49	05 2b		ora $2b				ora 	zTargetAddr+3
.ee4b	d0 1c		bne $ee69			bne 	_CLEWordWriteExt
.ee4d	5a		phy				phy
.ee4e	a0 00		ldy #$00			ldy 	#0
.ee50	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ee53	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ee55	c8		iny				iny
.ee56	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ee59	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ee5b	c8		iny				iny
.ee5c	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ee5f	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ee61	c8		iny				iny
.ee62	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ee65	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ee67	7a		ply				ply 								; restore Y
.ee68	60		rts				rts
.ee69					_CLEWordWriteExt:
.ee69	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ee6c	a3 00		ldz #$00			ldz 	#0
.ee6e	ea		nop				nop
.ee6f	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ee71	1b		inz				inz
.ee72	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ee75	ea		nop				nop
.ee76	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ee78	1b		inz				inz
.ee79	bd 02 04	lda $0402,x			lda 	evalStack+2,x
.ee7c	ea		nop				nop
.ee7d	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ee7f	1b		inz				inz
.ee80	bd 03 04	lda $0403,x			lda 	evalStack+3,x
.ee83	ea		nop				nop
.ee84	92 28		sta ($28),z			sta 	(zTargetAddr),z
.ee86	60		rts				rts
.ee87					_CLEStringWrite:
.ee87	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; source string -> zTemp1
.ee8a	85 24		sta $24				sta 	zTemp1
.ee8c	bd 01 04	lda $0401,x			lda 	evalStack+1,x
.ee8f	85 25		sta $25				sta 	zTemp1+1
.ee91	5a		phy				phy
.ee92	a0 00		ldy #$00			ldy 	#0
.ee94					_CLEStringCopy:
.ee94	b1 24		lda ($24),y			lda 	(zTemp1),y
.ee96	91 28		sta ($28),y			sta 	(zTargetAddr),y
.ee98	c9 00		cmp #$00			cmp 	#0
.ee9a	f0 16		beq $eeb2			beq	 	_CLEStringWritten
.ee9c	c8		iny				iny
.ee9d	d0 f5		bne $ee94			bne 	_CLEStringCopy
.ee9f	20 55 e1	jsr $e155			jsr 	ReportError
>eea2	42 41 44 20 53 54 52 49				.text 	"BAD STRING COPY",$00
>eeaa	4e 47 20 43 4f 50 59 00
.eeb2					_CLEStringWritten:
.eeb2	7a		ply				ply
.eeb3	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/print.asm

.eeb4					COMMAND_Print:
.eeb4	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; look at next character
.eeb6	f0 16		beq $eece			beq 	_CPRExitNL 					; zero end of line.
.eeb8	c8		iny				iny
.eeb9	c9 20		cmp #$20			cmp 	#' '
.eebb	f0 f7		beq $eeb4			beq 	COMMAND_Print
.eebd	c9 8d		cmp #$8d			cmp 	#KW_COLON 					; colon, end of line
.eebf	f0 0d		beq $eece			beq 	_CPRExitNL
.eec1	c9 8e		cmp #$8e			cmp 	#KW_SEMICOLON 				; semicolon ?
.eec3	d0 0f		bne $eed4			bne 	_CPRNotSemicolon
.eec5	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look at next character, is ; last thing
.eec7	f0 0a		beq $eed3			beq 	_CPRExit
.eec9	c9 8d		cmp #$8d			cmp 	#KW_COLON
.eecb	d0 e7		bne $eeb4			bne 	COMMAND_Print 				; if not, just go back round again
.eecd	60		rts				rts
.eece					_CPRExitNL:
.eece	a9 0d		lda #$0d			lda 	#13
.eed0	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.eed3					_CPRExit:
.eed3	60		rts				rts
.eed4					_CPRNotSemicolon:
.eed4	c9 86		cmp #$86			cmp 	#KW_SQUOTE 					; single quote
.eed6	f0 2b		beq $ef03			beq 	_CPRNewLine 				; new line
.eed8	c9 81		cmp #$81			cmp 	#KW_DQUOTE 					; double quote
.eeda	d0 2e		bne $ef0a			bne 	_CPRNotQuote
.eedc					_CPRPrintText:
.eedc	b1 20		lda ($20),y			lda 	(zCurrentLine),y			; get next character
.eede	f0 0a		beq $eeea			beq 	_CPRError 					; if zero no closing quote
.eee0	c8		iny				iny
.eee1	c9 81		cmp #$81			cmp 	#KW_DQUOTE					; double quote
.eee3	f0 cf		beq $eeb4			beq 	COMMAND_Print 				; go round again.
.eee5	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter 			; print and do next character
.eee8	80 f2		bra $eedc			bra 	_CPRPrintText
.eeea					_CPRError:
.eeea	20 55 e1	jsr $e155			jsr 	ReportError
>eeed	4d 49 53 53 49 4e 47 20				.text 	"MISSING CLOSING QUOTE",$00
>eef5	43 4c 4f 53 49 4e 47 20 51 55 4f 54 45 00
.ef03					_CPRNewLine:
.ef03	a9 0d		lda #$0d			lda 	#13
.ef05	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.ef08	80 aa		bra $eeb4			bra 	COMMAND_Print
.ef0a					_CPRNotQuote:
.ef0a	c9 83		cmp #$83			cmp 	#KW_DOLLAR 					; not a string ?
.ef0c	d0 11		bne $ef1f			bne 	_CPRNumber 					; print a number.
.ef0e	20 09 e2	jsr $e209			jsr 	EvaluateBase 				; this is the address to print.
.ef11	5a		phy				phy
.ef12	bc 01 04	ldy $0401,x			ldy 	evalStack+1,x 				; get the address
.ef15	bd 00 04	lda $0400,x			lda 	evalStack+0,x
.ef18	aa		tax				tax
.ef19	20 db e4	jsr $e4db			jsr 	SIOPrintString
.ef1c	7a		ply				ply
.ef1d	80 95		bra $eeb4			bra 	COMMAND_Print
.ef1f					_CPRNumber:
.ef1f	c9 85		cmp #$85			cmp 	#KW_AMPERSAND
.ef21	f0 17		beq $ef3a			beq 	_CPRHexadecimal
.ef23	88		dey				dey 								; must be 1st char of expr
.ef24	20 09 e2	jsr $e209			jsr 	EvaluateBase 				; this is the value to print.
.ef27	bd 03 04	lda $0403,x			lda 	evalStack+3,x 				; is it -ve
.ef2a	10 08		bpl $ef34			bpl 	_CPRIsPositive
.ef2c	20 46 ea	jsr $ea46			jsr 	BFUNC_NegateAlways 			; negate it
.ef2f	a9 2d		lda #$2d			lda 	#"-" 						; print - it.
.ef31	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.ef34					_CPRIsPositive:
.ef34	20 77 ef	jsr $ef77			jsr 	CPRPrintInteger 			; Print string at current eval stack, base 10.
.ef37	4c b4 ee	jmp $eeb4			jmp 	COMMAND_Print
.ef3a					_CPRHexadecimal:
.ef3a	20 09 e2	jsr $e209			jsr 	EvaluateBase 				; this is the value to print.
.ef3d	20 43 ef	jsr $ef43			jsr 	_CPRPrintRecHex 			; hex version of it.
.ef40	4c b4 ee	jmp $eeb4			jmp 	COMMAND_Print
.ef43					_CPRPrintRecHex:
.ef43	ad 00 04	lda $0400			lda 	evalStack+0 				; get the remainder
.ef46	29 0f		and #$0f			and 	#15 						; and put on stack
.ef48	48		pha				pha
.ef49	a2 04		ldx #$04			ldx 	#4 							; divide by 16
.ef4b					_CPRShiftDiv:
.ef4b	4e 03 04	lsr $0403			lsr 	evalStack+3
.ef4e	6e 02 04	ror $0402			ror 	evalStack+2
.ef51	6e 01 04	ror $0401			ror		evalStack+1
.ef54	6e 00 04	ror $0400			ror		evalStack+0
.ef57	ca		dex				dex
.ef58	d0 f1		bne $ef4b			bne 	_CPRShiftDiv
.ef5a	ad 00 04	lda $0400			lda 	evalStack+0 				; any more to print
.ef5d	0d 01 04	ora $0401			ora 	evalStack+1
.ef60	0d 02 04	ora $0402			ora 	evalStack+2
.ef63	0d 03 04	ora $0403			ora 	evalStack+3
.ef66	f0 03		beq $ef6b			beq 	_CPRNoHexRec
.ef68	20 43 ef	jsr $ef43			jsr 	_CPRPrintRecHex
.ef6b					_CPRNoHexRec:
.ef6b	68		pla				pla 								; original remainder.
.ef6c	c9 0a		cmp #$0a			cmp 	#10
.ef6e	90 02		bcc $ef72			bcc		_CPRNH2
.ef70	69 06		adc #$06			adc 	#6
.ef72	69 30		adc #$30	_CPRNH2:adc 	#48
.ef74	4c 08 e5	jmp $e508			jmp 	SIOPrintCharacter
.ef77					CPRPrintInteger:
.ef77	48		pha				pha 								; save on stack.
.ef78	da		phx				phx
.ef79	5a		phy				phy
.ef7a	20 81 ef	jsr $ef81			jsr 	_CPRPrintRec 				; recursive print call
.ef7d	7a		ply				ply
.ef7e	fa		plx				plx
.ef7f	68		pla				pla
.ef80	60		rts				rts
.ef81					_CPRPrintRec:
.ef81	a9 0a		lda #$0a			lda 	#10 						; save base
.ef83	9d 04 04	sta $0404,x			sta 	evalStack+4,x 				; put in next slot.
.ef86	a9 00		lda #$00			lda 	#0 							; clear upper 3 bytes
.ef88	9d 05 04	sta $0405,x			sta 	evalStack+5,x
.ef8b	9d 06 04	sta $0406,x			sta 	evalStack+6,x
.ef8e	9d 07 04	sta $0407,x			sta 	evalStack+7,x
.ef91	20 a3 e9	jsr $e9a3			jsr 	BFUNC_Divide 				; divide by 10.
.ef94	ad 98 20	lda $2098			lda 	Temp1+0		 				; push remainder on stack
.ef97	48		pha				pha
.ef98	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; is the result #0
.ef9b	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.ef9e	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.efa1	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.efa4	f0 03		beq $efa9			beq 	_CPRNoRecurse
.efa6	20 81 ef	jsr $ef81			jsr 	_CPRPrintRec 				; recursive print.
.efa9					_CPRNoRecurse:
.efa9	68		pla				pla
.efaa	09 30		ora #$30			ora 	#"0"
.efac	4c 08 e5	jmp $e508			jmp 	SIOPrintCharacter
.efaf					COMMAND_CLS:
.efaf	4c cd e4	jmp $e4cd			jmp 	SIOClearScreen

;******  Return to file: basic.asm


;******  Processing file: commands/list.asm

.efb2					COMMAND_List:
.efb2	b1 20		lda ($20),y			lda 	(zCurrentLine),y 			; look first non space
.efb4	c8		iny				iny
.efb5	c9 20		cmp #$20			cmp 	#' '
.efb7	f0 f9		beq $efb2			beq 	COMMAND_List
.efb9	88		dey				dey
.efba	c9 30		cmp #$30			cmp 	#"0" 						; not digit, list all
.efbc	90 0e		bcc $efcc			bcc 	_CLIAll
.efbe	c9 3a		cmp #$3a			cmp 	#"9"+1
.efc0	b0 0a		bcs $efcc			bcs 	_CLIAll
.efc2	a2 00		ldx #$00			ldx 	#0 							; evaluate the linenumber
.efc4	20 09 e2	jsr $e209			jsr 	EvaluateBase
.efc7	20 f6 f0	jsr $f0f6			jsr 	FindProgramLine 			; find that program Line, put in zTargetAddr
.efca	80 09		bra $efd5			bra 	_CLIMain 					; list it.
.efcc					_CLIAll:
.efcc	5a		phy				phy
.efcd	a9 00		lda #$00			lda 	#BasicProgram & $FF 		; set target address
.efcf	85 28		sta $28				sta 	zTargetAddr
.efd1	a9 23		lda #$23			lda 	#BasicProgram >> 8
.efd3	85 29		sta $29				sta 	zTargetAddr+1
.efd5					_CLIMain:
.efd5	a9 10		lda #$10			lda 	#16 						; print 16 lines
.efd7	85 2a		sta $2a				sta 	zTargetAddr+2
.efd9					_CLLILoop:
.efd9	a0 00		ldy #$00			ldy 	#0
.efdb	b1 28		lda ($28),y			lda 	(zTargetAddr),y 			; if that offset is zero exit
.efdd	f0 14		beq $eff3			beq 	_CLLIExit
.efdf	20 f7 ef	jsr $eff7			jsr 	CLIOneLine 					; list one line.
.efe2	a0 00		ldy #$00			ldy 	#0 							; advance pointer to next.
.efe4	18		clc				clc
.efe5	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.efe7	65 28		adc $28				adc 	zTargetAddr
.efe9	85 28		sta $28				sta 	zTargetAddr
.efeb	90 02		bcc $efef			bcc 	_CLLINoCarry
.efed	e6 29		inc $29				inc 	zTargetAddr+1
.efef					_CLLINoCarry:
.efef	c6 2a		dec $2a				dec 	zTargetAddr+2 				; done all of them ?
.eff1	d0 e6		bne $efd9			bne 	_CLLILoop
.eff3					_CLLIExit:
.eff3	7a		ply				ply
.eff4	4c 7d f1	jmp $f17d			jmp 	WarmStart
.eff7					CLIOneLine:
.eff7	a0 01		ldy #$01			ldy 	#1 							; get line#
.eff9	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.effb	8d 00 04	sta $0400			sta 	evalStack+0
.effe	c8		iny				iny
.efff	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.f001	8d 01 04	sta $0401			sta 	evalStack+1
.f004	a9 00		lda #$00			lda 	#0
.f006	aa		tax				tax
.f007	8d 02 04	sta $0402			sta 	evalStack+2
.f00a	8d 03 04	sta $0403			sta 	evalStack+3
.f00d	20 77 ef	jsr $ef77			jsr 	CPRPrintInteger 			; print line#
.f010	a9 20		lda #$20			lda 	#32
.f012	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.f015	a0 03		ldy #$03			ldy 	#3 							; where to start
.f017					_CLIOutput:
.f017	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.f019	c8		iny				iny
.f01a	09 00		ora #$00			ora 	#0
.f01c	f0 0c		beq $f02a			beq 	_CLIExit
.f01e	10 05		bpl $f025			bpl		_CLISingle
.f020	20 30 f0	jsr $f030			jsr 	CLIPrintToken
.f023	80 f2		bra $f017			bra 	_CLIOutput
.f025					_CLISingle:
.f025	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.f028	80 ed		bra $f017			bra 	_CLIOutput
.f02a					_CLIExit:
.f02a	a9 0d		lda #$0d			lda 	#13 						; new line.
.f02c	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.f02f	60		rts				rts
.f030					CLIPrintToken:
.f030	5a		phy				phy 								; save Y
.f031	29 7f		and #$7f			and 	#$7F 						; 7 bit token -> Y
.f033	a8		tay				tay
.f034	a2 00		ldx #$00			ldx 	#0 							; offset into token text table.
.f036					_CLIFind:
.f036	88		dey				dey 								; decrement counter
.f037	30 09		bmi $f042			bmi 	_CLIFoundToken 				; if -ve found the token.
.f039					_CLISkip:
.f039	bd 74 e0	lda $e074,x			lda 	TokenText,x
.f03c	e8		inx				inx
.f03d	0a		asl a				asl		a
.f03e	90 f9		bcc $f039			bcc 	_CLISkip
.f040	80 f4		bra $f036			bra 	_CLIFind
.f042					_CLIFoundToken:
.f042	7a		ply				ply
.f043					_CLIPrintIt:
.f043	bd 74 e0	lda $e074,x			lda 	TokenText,x
.f046	e8		inx				inx
.f047	48		pha				pha
.f048	29 7f		and #$7f			and 	#$7F
.f04a	20 08 e5	jsr $e508			jsr 	SIOPrintCharacter
.f04d	68		pla				pla
.f04e	0a		asl a				asl 	a
.f04f	90 f2		bcc $f043			bcc 	_CLIPrintIt
.f051	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: commands/dountil.asm

.f052					COMMAND_Do:
.f052	a9 9c		lda #$9c			lda 	#KW_DO						; push position with a DO token.
.f054	20 72 f0	jsr $f072			jsr 	CDOPushPosOnStack
.f057	60		rts				rts
.f058					COMMAND_Until:
.f058	a9 9c		lda #$9c			lda 	#KW_DO 						; check TOS is a Do.
.f05a	20 b0 f0	jsr $f0b0			jsr 	CDOCheckTopStack
.f05d	a2 00		ldx #$00			ldx 	#0 							; evaluate the test
.f05f	20 09 e2	jsr $e209			jsr 	EvaluateBase
.f062	bd 00 04	lda $0400,x			lda 	evalStack+0,x 				; check if zero
.f065	1d 01 04	ora $0401,x			ora 	evalStack+1,x
.f068	1d 02 04	ora $0402,x			ora 	evalStack+2,x
.f06b	1d 03 04	ora $0403,x			ora 	evalStack+3,x
.f06e	f0 2a		beq $f09a			beq 	CDOPullPosOffStack 			; zero, restore the position.
.f070	80 1e		bra $f090			bra 	CDOThrowPosOffStack			; non-zero chuck it.
.f072					CDOPushPosOnStack:
.f072	ae a3 20	ldx $20a3			ldx 	basicStackIndex
.f075	48		pha				pha
.f076	98		tya				tya
.f077	9d 01 02	sta $0201,x			sta 	BasicStack+1,x 				; +1 	Y Position
.f07a	a5 20		lda $20				lda 	zCurrentLine
.f07c	9d 02 02	sta $0202,x			sta 	BasicStack+2,x 				; +2 	low of pos
.f07f	a5 21		lda $21				lda 	zCurrentLine+1
.f081	9d 03 02	sta $0203,x			sta 	BasicStack+3,x 				; +3 	high of pos
.f084	68		pla				pla
.f085	9d 04 02	sta $0204,x			sta 	BasicStack+4,x 				; +4 	token on stack
.f088	e8		inx				inx
.f089	e8		inx				inx
.f08a	e8		inx				inx
.f08b	e8		inx				inx 								; always points to TOS.
.f08c	8e a3 20	stx $20a3			stx 	basicStackIndex
.f08f	60		rts				rts
.f090					CDOThrowPosOffStack:
.f090	ad a3 20	lda $20a3			lda 	basicStackIndex
.f093	38		sec				sec
.f094	e9 04		sbc #$04			sbc 	#4
.f096	8d a3 20	sta $20a3			sta 	basicStackIndex
.f099	60		rts				rts
.f09a					CDOPullPosOffStack:
.f09a	ae a3 20	ldx $20a3			ldx 	basicStackIndex
.f09d	ca		dex				dex
.f09e	ca		dex				dex
.f09f	ca		dex				dex
.f0a0	ca		dex				dex
.f0a1	bd 01 02	lda $0201,x			lda 	BasicStack+1,x 					; get position back.
.f0a4	a8		tay				tay
.f0a5	bd 02 02	lda $0202,x			lda 	BasicStack+2,x
.f0a8	85 20		sta $20				sta 	zCurrentLine
.f0aa	bd 03 02	lda $0203,x			lda 	BasicStack+3,x
.f0ad	85 21		sta $21				sta 	zCurrentLine+1
.f0af	60		rts				rts
.f0b0					CDOCheckTopStack:
.f0b0	ae a3 20	ldx $20a3			ldx 	basicStackIndex 			; if match
.f0b3	dd 00 02	cmp $0200,x			cmp 	BasicStack+0,x
.f0b6	d0 01		bne $f0b9			bne 	_CDOCTSError
.f0b8	60		rts				rts
.f0b9					_CDOCTSError:
.f0b9	20 55 e1	jsr $e155			jsr 	ReportError
>f0bc	53 54 52 55 43 54 55 52				.text 	"STRUCTURE MIXED",$00
>f0c4	45 20 4d 49 58 45 44 00

;******  Return to file: basic.asm


;******  Processing file: commands/goto.asm

.f0cc					COMMAND_Goto:
.f0cc	a2 00		ldx #$00			ldx 	#0 							; evaluate the linenumber
.f0ce	20 09 e2	jsr $e209			jsr 	EvaluateBase
.f0d1					CMDGoto:
.f0d1	20 f6 f0	jsr $f0f6			jsr 	FindProgramLine 			; find that program Line, put in zTargetAddr
.f0d4	a5 28		lda $28				lda 	zTargetAddr 				; new line
.f0d6	85 20		sta $20				sta 	zCurrentLine
.f0d8	a5 29		lda $29				lda 	zTargetAddr+1
.f0da	85 21		sta $21				sta 	zCurrentLine+1
.f0dc	a0 03		ldy #$03			ldy 	#3
.f0de	60		rts				rts
.f0df					COMMAND_Gosub:
.f0df	a2 00		ldx #$00			ldx 	#0 							; evaluate the linenumber
.f0e1	20 09 e2	jsr $e209			jsr 	EvaluateBase
.f0e4	a9 9f		lda #$9f			lda 	#KW_GOSUB
.f0e6	20 72 f0	jsr $f072			jsr 	CDOPushPosOnStack 			; save return address on stack.
.f0e9	80 e6		bra $f0d1			bra 	CMDGoto
.f0eb					COMMAND_Return:
.f0eb	a9 9f		lda #$9f			lda 	#KW_GOSUB 					; check GOSUB on BASIC Stack.
.f0ed	20 b0 f0	jsr $f0b0			jsr 	CDOCheckTopStack
.f0f0	20 9a f0	jsr $f09a			jsr 	CDOPullPosOffStack 			; restore
.f0f3	4c 90 f0	jmp $f090			jmp 	CDOThrowPosOffStack 		; and drop it.
.f0f6					FindProgramLine:
.f0f6	ad 02 04	lda $0402			lda 	evalStack+2 				; check in range 0-65535
.f0f9	0d 03 04	ora $0403			ora 	evalStack+3
.f0fc	d0 2e		bne $f12c			bne		_FPLFail
.f0fe	a9 00		lda #$00			lda 	#BasicProgram & 255 		; start of code
.f100	85 28		sta $28				sta 	zTargetAddr
.f102	a9 23		lda #$23			lda 	#BasicProgram >> 8
.f104	85 29		sta $29				sta 	zTargetAddr+1
.f106					_FPLLoop:
.f106	a0 00		ldy #$00			ldy 	#0 							; reached end
.f108	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.f10a	f0 20		beq $f12c			beq 	_FPLFail
.f10c	c8		iny				iny 								; check line numbers
.f10d	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.f10f	cd 00 04	cmp $0400			cmp 	evalStack+0
.f112	d0 09		bne $f11d			bne 	_FPLNext
.f114	c8		iny				iny
.f115	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.f117	cd 01 04	cmp $0401			cmp 	evalStack+1
.f11a	d0 01		bne $f11d			bne 	_FPLNext
.f11c	60		rts				rts
.f11d					_FPLNext:
.f11d	a0 00		ldy #$00			ldy 	#0 							; go to next
.f11f	b1 28		lda ($28),y			lda 	(zTargetAddr),y
.f121	18		clc				clc
.f122	65 28		adc $28				adc 	zTargetAddr
.f124	85 28		sta $28				sta 	zTargetAddr
.f126	90 de		bcc $f106			bcc 	_FPLLoop
.f128	e6 29		inc $29				inc 	zTargetAddr+1
.f12a	80 da		bra $f106			bra 	_FPLLoop
.f12c					_FPLFail:
.f12c	20 55 e1	jsr $e155			jsr 	ReportError
>f12f	4c 49 4e 45 20 4e 4f 54				.text 	"LINE NOT FOUND",$00
>f137	20 46 4f 55 4e 44 00

;******  Return to file: basic.asm

.f13e					Start:
.f13e	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.f140	9a		txs			txs
.f141	20 ca e4	jsr $e4ca			jsr 	SIOInitialise 				; initialise the I/O system.
.f144	a2 bd		ldx #$bd			ldx 	#BootMsg1 & 255 			; boot text.
.f146	a0 f1		ldy #$f1			ldy 	#BootMsg1 >> 8
.f148	20 db e4	jsr $e4db			jsr 	SIOPrintString
.f14b	a2 ff		ldx #$ff			ldx 	#(endMemory-startMemory-1) & $FF
.f14d	a0 5f		ldy #$5f			ldy 	#(endMemory-startMemory-1) >> 8
.f14f	20 84 e1	jsr $e184			jsr 	PrintWordInteger
.f152	a2 d4		ldx #$d4			ldx 	#BootMsg2 & 255
.f154	a0 f1		ldy #$f1			ldy 	#BootMsg2 >> 8
.f156	20 db e4	jsr $e4db			jsr 	SIOPrintString
.f159	20 be e1	jsr $e1be			jsr 	CopyBasicCode 				; it into the BASIC area.
.f15c	ad 36 f2	lda $f236			lda 	StartBehaviour 				; what to do ?
.f15f	c9 43		cmp #$43			cmp 	#'C'						; execute from command line
.f161	f0 17		beq $f17a			beq		CommandLine
.f163	c9 52		cmp #$52			cmp 	#'R' 						; run program in memory.
.f165	f0 07		beq $f16e			beq	 	RunProgram
.f167	c9 54		cmp #$54			cmp 	#'T'						; tokenise test
.f169	f0 46		beq $f1b1			beq 	TokeniseExec
.f16b	4c 45 e1	jmp $e145			jmp		SyntaxError
.f16e					RunProgram:
.f16e	20 be e1	jsr $e1be			jsr 	CopyBasicCode
.f171	20 f4 ec	jsr $ecf4			jsr 	COMMAND_NewCode 			; do a new
.f174	20 43 ed	jsr $ed43			jsr 	COMMAND_OldCode 			; get back the old program as we're deving.
.f177	4c 2c ec	jmp $ec2c			jmp 	COMMAND_Run
.f17a					CommandLine:
.f17a	20 f4 ec	jsr $ecf4			jsr 	Command_NewCode
.f17d					WarmStart:
.f17d	a2 ff		ldx #$ff		ldx 	#$FF 							; reset 6502 stack.
.f17f	9a		txs			txs
.f180	20 45 e5	jsr $e545			jsr 	SIOReadLine 				; read input line.
.f183	a9 6d		lda #$6d			lda 	#InputLine & $FF 			; tokenise the line
.f185	85 24		sta $24				sta 	zTemp1
.f187	a9 20		lda #$20			lda 	#InputLine >> 8
.f189	85 25		sta $25				sta 	zTemp1+1
.f18b	20 b1 e6	jsr $e6b1			jsr 	TokeniseString
.f18e	a9 00		lda #$00			lda 	#TokeniseBuffer & $FF 		; point current line to tokenised input buffer.
.f190	85 20		sta $20				sta 	zCurrentLine
.f192	a9 21		lda #$21			lda 	#TokeniseBuffer >> 8
.f194	85 21		sta $21				sta 	zCurrentLine+1
.f196	a0 00		ldy #$00			ldy 	#0
.f198					_WSSkipSpace:
.f198	b1 20		lda ($20),y			lda 	(zCurrentLine),y
.f19a	c8		iny				iny
.f19b	c9 20		cmp #$20			cmp 	#' '
.f19d	f0 f9		beq $f198			beq 	_WSSkipSpace
.f19f	88		dey				dey
.f1a0	c9 30		cmp #$30			cmp 	#"0" 						; if not a digit
.f1a2	90 0a		bcc $f1ae			bcc 	_WSExecute
.f1a4	c9 3a		cmp #$3a			cmp 	#"9"+1
.f1a6	b0 06		bcs $f1ae			bcs 	_WSExecute
.f1a8	20 86 e7	jsr $e786			jsr 	EditProgram
.f1ab	4c 7d f1	jmp $f17d			jmp 	WarmStart
.f1ae					_WSExecute:
.f1ae	4c 3f ec	jmp $ec3f			jmp 	CRUNNextInstruction
.f1b1					TokeniseExec:
.f1b1	a9 e3		lda #$e3			lda 	#BasicCode & $FF 			; if so tokenise whatever I've put in the basic code
.f1b3	85 24		sta $24				sta 	zTemp1 						; area
.f1b5	a9 f1		lda #$f1			lda 	#BasicCode >> 8
.f1b7	85 25		sta $25				sta 	zTemp1+1
.f1b9	20 b1 e6	jsr $e6b1			jsr 	TokeniseString
>f1bc	02						.byte 	2
.f1bd					BootMsg1:
>f1bd	2a 2a 2a 20 41 54 4f 4d				.text 	"*** ATOMIC BASIC ***",13,13,0
>f1c5	49 43 20 42 41 53 49 43 20 2a 2a 2a 0d 0d 00
.f1d4					BootMsg2:
>f1d4	20 42 59 54 45 53 20 46				.text	" BYTES FREE.",13,13,0
>f1dc	52 45 45 2e 0d 0d 00
.f1e3					BasicCode:

;******  Processing file: include/basic_generated.inc

>f1e3	09 0c 00 41 20 92 20 30			.byte $09,$0c,$00,$41,$20,$92,$20,$30,$00,$0f,$0d,$00,$9c,$20,$41,$20,$92,$20,$41,$20,$8a,$20,$31,$00,$11,$0e,$00,$ac,$20,$41,$8e,$81,$20,$81,$8e,$41,$20,$84,$20,$33,$00,$0a,$1e,$00,$b7,$20,$41,$92,$31,$30,$00,$0e,$28,$00,$4d,$92,$82,$46,$46,$44,$33,$30,$30,$30,$00,$05,$64,$00,$b2,$00,$0c,$e8,$03,$ac,$20,$81,$2a,$81,$8e,$8d,$ae,$00,$00
>f1eb	00 0f 0d 00 9c 20 41 20 92 20 41 20 8a 20 31 00
>f1fb	11 0e 00 ac 20 41 8e 81 20 81 8e 41 20 84 20 33
>f20b	00 0a 1e 00 b7 20 41 92 31 30 00 0e 28 00 4d 92
>f21b	82 46 46 44 33 30 30 30 00 05 64 00 b2 00 0c e8
>f22b	03 ac 20 81 2a 81 8e 8d ae 00 00
.f236					StartBehaviour:
>f236	52					.text "R"

;******  Return to file: basic.asm


;******  End of listing
